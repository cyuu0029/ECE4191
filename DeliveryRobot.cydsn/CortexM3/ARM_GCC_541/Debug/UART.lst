ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"UART.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.UART_Init,"ax",%progbits
  20              		.align	1
  21              		.global	UART_Init
  22              		.thumb
  23              		.thumb_func
  24              		.type	UART_Init, %function
  25              	UART_Init:
  26              	.LFB1:
  27              		.file 1 "Generated_Source\\PSoC5\\UART.c"
   1:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/UART.c **** * File Name: UART.c
   3:Generated_Source\PSoC5/UART.c **** * Version 2.50
   4:Generated_Source\PSoC5/UART.c **** *
   5:Generated_Source\PSoC5/UART.c **** * Description:
   6:Generated_Source\PSoC5/UART.c **** *  This file provides all API functionality of the UART component
   7:Generated_Source\PSoC5/UART.c **** *
   8:Generated_Source\PSoC5/UART.c **** * Note:
   9:Generated_Source\PSoC5/UART.c **** *
  10:Generated_Source\PSoC5/UART.c **** ********************************************************************************
  11:Generated_Source\PSoC5/UART.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:Generated_Source\PSoC5/UART.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:Generated_Source\PSoC5/UART.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:Generated_Source\PSoC5/UART.c **** * the software package with which this file was provided.
  15:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
  16:Generated_Source\PSoC5/UART.c **** 
  17:Generated_Source\PSoC5/UART.c **** #include "UART.h"
  18:Generated_Source\PSoC5/UART.c **** #if (UART_INTERNAL_CLOCK_USED)
  19:Generated_Source\PSoC5/UART.c ****     #include "UART_IntClock.h"
  20:Generated_Source\PSoC5/UART.c **** #endif /* End UART_INTERNAL_CLOCK_USED */
  21:Generated_Source\PSoC5/UART.c **** 
  22:Generated_Source\PSoC5/UART.c **** 
  23:Generated_Source\PSoC5/UART.c **** /***************************************
  24:Generated_Source\PSoC5/UART.c **** * Global data allocation
  25:Generated_Source\PSoC5/UART.c **** ***************************************/
  26:Generated_Source\PSoC5/UART.c **** 
  27:Generated_Source\PSoC5/UART.c **** uint8 UART_initVar = 0u;
  28:Generated_Source\PSoC5/UART.c **** 
  29:Generated_Source\PSoC5/UART.c **** #if (UART_TX_INTERRUPT_ENABLED && UART_TX_ENABLED)
  30:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_txBuffer[UART_TX_BUFFER_SIZE];
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 2


  31:Generated_Source\PSoC5/UART.c ****     volatile uint16 UART_txBufferRead = 0u;
  32:Generated_Source\PSoC5/UART.c ****     uint16 UART_txBufferWrite = 0u;
  33:Generated_Source\PSoC5/UART.c **** #endif /* (UART_TX_INTERRUPT_ENABLED && UART_TX_ENABLED) */
  34:Generated_Source\PSoC5/UART.c **** 
  35:Generated_Source\PSoC5/UART.c **** #if (UART_RX_INTERRUPT_ENABLED && (UART_RX_ENABLED || UART_HD_ENABLED))
  36:Generated_Source\PSoC5/UART.c ****     uint8 UART_errorStatus = 0u;
  37:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBuffer[UART_RX_BUFFER_SIZE];
  38:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBufferRead  = 0u;
  39:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBufferWrite = 0u;
  40:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBufferLoopDetect = 0u;
  41:Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBufferOverflow   = 0u;
  42:Generated_Source\PSoC5/UART.c ****     #if (UART_RXHW_ADDRESS_ENABLED)
  43:Generated_Source\PSoC5/UART.c ****         volatile uint8 UART_rxAddressMode = UART_RX_ADDRESS_MODE;
  44:Generated_Source\PSoC5/UART.c ****         volatile uint8 UART_rxAddressDetected = 0u;
  45:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RXHW_ADDRESS_ENABLED) */
  46:Generated_Source\PSoC5/UART.c **** #endif /* (UART_RX_INTERRUPT_ENABLED && (UART_RX_ENABLED || UART_HD_ENABLED)) */
  47:Generated_Source\PSoC5/UART.c **** 
  48:Generated_Source\PSoC5/UART.c **** 
  49:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
  50:Generated_Source\PSoC5/UART.c **** * Function Name: UART_Start
  51:Generated_Source\PSoC5/UART.c **** ********************************************************************************
  52:Generated_Source\PSoC5/UART.c **** *
  53:Generated_Source\PSoC5/UART.c **** * Summary:
  54:Generated_Source\PSoC5/UART.c **** *  This is the preferred method to begin component operation.
  55:Generated_Source\PSoC5/UART.c **** *  UART_Start() sets the initVar variable, calls the
  56:Generated_Source\PSoC5/UART.c **** *  UART_Init() function, and then calls the
  57:Generated_Source\PSoC5/UART.c **** *  UART_Enable() function.
  58:Generated_Source\PSoC5/UART.c **** *
  59:Generated_Source\PSoC5/UART.c **** * Parameters:
  60:Generated_Source\PSoC5/UART.c **** *  None.
  61:Generated_Source\PSoC5/UART.c **** *
  62:Generated_Source\PSoC5/UART.c **** * Return:
  63:Generated_Source\PSoC5/UART.c **** *  None.
  64:Generated_Source\PSoC5/UART.c **** *
  65:Generated_Source\PSoC5/UART.c **** * Global variables:
  66:Generated_Source\PSoC5/UART.c **** *  The UART_intiVar variable is used to indicate initial
  67:Generated_Source\PSoC5/UART.c **** *  configuration of this component. The variable is initialized to zero (0u)
  68:Generated_Source\PSoC5/UART.c **** *  and set to one (1u) the first time UART_Start() is called. This
  69:Generated_Source\PSoC5/UART.c **** *  allows for component initialization without re-initialization in all
  70:Generated_Source\PSoC5/UART.c **** *  subsequent calls to the UART_Start() routine.
  71:Generated_Source\PSoC5/UART.c **** *
  72:Generated_Source\PSoC5/UART.c **** * Reentrant:
  73:Generated_Source\PSoC5/UART.c **** *  No.
  74:Generated_Source\PSoC5/UART.c **** *
  75:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
  76:Generated_Source\PSoC5/UART.c **** void UART_Start(void) 
  77:Generated_Source\PSoC5/UART.c **** {
  78:Generated_Source\PSoC5/UART.c ****     /* If not initialized then initialize all required hardware and software */
  79:Generated_Source\PSoC5/UART.c ****     if(UART_initVar == 0u)
  80:Generated_Source\PSoC5/UART.c ****     {
  81:Generated_Source\PSoC5/UART.c ****         UART_Init();
  82:Generated_Source\PSoC5/UART.c ****         UART_initVar = 1u;
  83:Generated_Source\PSoC5/UART.c ****     }
  84:Generated_Source\PSoC5/UART.c **** 
  85:Generated_Source\PSoC5/UART.c ****     UART_Enable();
  86:Generated_Source\PSoC5/UART.c **** }
  87:Generated_Source\PSoC5/UART.c **** 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 3


  88:Generated_Source\PSoC5/UART.c **** 
  89:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
  90:Generated_Source\PSoC5/UART.c **** * Function Name: UART_Init
  91:Generated_Source\PSoC5/UART.c **** ********************************************************************************
  92:Generated_Source\PSoC5/UART.c **** *
  93:Generated_Source\PSoC5/UART.c **** * Summary:
  94:Generated_Source\PSoC5/UART.c **** *  Initializes or restores the component according to the customizer Configure
  95:Generated_Source\PSoC5/UART.c **** *  dialog settings. It is not necessary to call UART_Init() because
  96:Generated_Source\PSoC5/UART.c **** *  the UART_Start() API calls this function and is the preferred
  97:Generated_Source\PSoC5/UART.c **** *  method to begin component operation.
  98:Generated_Source\PSoC5/UART.c **** *
  99:Generated_Source\PSoC5/UART.c **** * Parameters:
 100:Generated_Source\PSoC5/UART.c **** *  None.
 101:Generated_Source\PSoC5/UART.c **** *
 102:Generated_Source\PSoC5/UART.c **** * Return:
 103:Generated_Source\PSoC5/UART.c **** *  None.
 104:Generated_Source\PSoC5/UART.c **** *
 105:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 106:Generated_Source\PSoC5/UART.c **** void UART_Init(void) 
 107:Generated_Source\PSoC5/UART.c **** {
  28              		.loc 1 107 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
 108:Generated_Source\PSoC5/UART.c ****     #if(UART_RX_ENABLED || UART_HD_ENABLED)
 109:Generated_Source\PSoC5/UART.c **** 
 110:Generated_Source\PSoC5/UART.c ****         #if (UART_RX_INTERRUPT_ENABLED)
 111:Generated_Source\PSoC5/UART.c ****             /* Set RX interrupt vector and priority */
 112:Generated_Source\PSoC5/UART.c ****             (void) CyIntSetVector(UART_RX_VECT_NUM, &UART_RXISR);
 113:Generated_Source\PSoC5/UART.c ****             CyIntSetPriority(UART_RX_VECT_NUM, UART_RX_PRIOR_NUM);
 114:Generated_Source\PSoC5/UART.c ****             UART_errorStatus = 0u;
 115:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_RX_INTERRUPT_ENABLED) */
 116:Generated_Source\PSoC5/UART.c **** 
 117:Generated_Source\PSoC5/UART.c ****         #if (UART_RXHW_ADDRESS_ENABLED)
 118:Generated_Source\PSoC5/UART.c ****             UART_SetRxAddressMode(UART_RX_ADDRESS_MODE);
 119:Generated_Source\PSoC5/UART.c ****             UART_SetRxAddress1(UART_RX_HW_ADDRESS1);
 120:Generated_Source\PSoC5/UART.c ****             UART_SetRxAddress2(UART_RX_HW_ADDRESS2);
 121:Generated_Source\PSoC5/UART.c ****         #endif /* End UART_RXHW_ADDRESS_ENABLED */
 122:Generated_Source\PSoC5/UART.c **** 
 123:Generated_Source\PSoC5/UART.c ****         /* Init Count7 period */
 124:Generated_Source\PSoC5/UART.c ****         UART_RXBITCTR_PERIOD_REG = UART_RXBITCTR_INIT;
 125:Generated_Source\PSoC5/UART.c ****         /* Configure the Initial RX interrupt mask */
 126:Generated_Source\PSoC5/UART.c ****         UART_RXSTATUS_MASK_REG  = UART_INIT_RX_INTERRUPTS_MASK;
 127:Generated_Source\PSoC5/UART.c ****     #endif /* End UART_RX_ENABLED || UART_HD_ENABLED*/
 128:Generated_Source\PSoC5/UART.c **** 
 129:Generated_Source\PSoC5/UART.c ****     #if(UART_TX_ENABLED)
 130:Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 131:Generated_Source\PSoC5/UART.c ****             /* Set TX interrupt vector and priority */
 132:Generated_Source\PSoC5/UART.c ****             (void) CyIntSetVector(UART_TX_VECT_NUM, &UART_TXISR);
  36              		.loc 1 132 0
  37 0002 0849     		ldr	r1, .L2
  38 0004 0620     		movs	r0, #6
  39 0006 FFF7FEFF 		bl	CyIntSetVector
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 4


  40              	.LVL0:
 133:Generated_Source\PSoC5/UART.c ****             CyIntSetPriority(UART_TX_VECT_NUM, UART_TX_PRIOR_NUM);
  41              		.loc 1 133 0
  42 000a 0721     		movs	r1, #7
  43 000c 0620     		movs	r0, #6
  44 000e FFF7FEFF 		bl	CyIntSetPriority
  45              	.LVL1:
 134:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 135:Generated_Source\PSoC5/UART.c **** 
 136:Generated_Source\PSoC5/UART.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 137:Generated_Source\PSoC5/UART.c ****         #if (UART_TXCLKGEN_DP)
 138:Generated_Source\PSoC5/UART.c ****             UART_TXBITCLKGEN_CTR_REG = UART_BIT_CENTER;
  46              		.loc 1 138 0
  47 0012 054B     		ldr	r3, .L2+4
  48 0014 0622     		movs	r2, #6
  49 0016 1A70     		strb	r2, [r3]
 139:Generated_Source\PSoC5/UART.c ****             UART_TXBITCLKTX_COMPLETE_REG = ((UART_NUMBER_OF_DATA_BITS +
  50              		.loc 1 139 0
  51 0018 4722     		movs	r2, #71
  52 001a 1A74     		strb	r2, [r3, #16]
 140:Generated_Source\PSoC5/UART.c ****                         UART_NUMBER_OF_START_BIT) * UART_OVER_SAMPLE_COUNT) - 1u;
 141:Generated_Source\PSoC5/UART.c ****         #else
 142:Generated_Source\PSoC5/UART.c ****             UART_TXBITCTR_PERIOD_REG = ((UART_NUMBER_OF_DATA_BITS +
 143:Generated_Source\PSoC5/UART.c ****                         UART_NUMBER_OF_START_BIT) * UART_OVER_SAMPLE_8) - 1u;
 144:Generated_Source\PSoC5/UART.c ****         #endif /* End UART_TXCLKGEN_DP */
 145:Generated_Source\PSoC5/UART.c **** 
 146:Generated_Source\PSoC5/UART.c ****         /* Configure the Initial TX interrupt mask */
 147:Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 148:Generated_Source\PSoC5/UART.c ****             UART_TXSTATUS_MASK_REG = UART_TX_STS_FIFO_EMPTY;
  53              		.loc 1 148 0
  54 001c 0222     		movs	r2, #2
  55 001e 83F85F21 		strb	r2, [r3, #351]
  56 0022 08BD     		pop	{r3, pc}
  57              	.L3:
  58              		.align	2
  59              	.L2:
  60 0024 00000000 		.word	UART_TXISR
  61 0028 26640040 		.word	1073767462
  62              		.cfi_endproc
  63              	.LFE1:
  64              		.size	UART_Init, .-UART_Init
  65              		.section	.text.UART_Enable,"ax",%progbits
  66              		.align	1
  67              		.global	UART_Enable
  68              		.thumb
  69              		.thumb_func
  70              		.type	UART_Enable, %function
  71              	UART_Enable:
  72              	.LFB2:
 149:Generated_Source\PSoC5/UART.c ****         #else
 150:Generated_Source\PSoC5/UART.c ****             UART_TXSTATUS_MASK_REG = UART_INIT_TX_INTERRUPTS_MASK;
 151:Generated_Source\PSoC5/UART.c ****         #endif /*End UART_TX_INTERRUPT_ENABLED*/
 152:Generated_Source\PSoC5/UART.c **** 
 153:Generated_Source\PSoC5/UART.c ****     #endif /* End UART_TX_ENABLED */
 154:Generated_Source\PSoC5/UART.c **** 
 155:Generated_Source\PSoC5/UART.c ****     #if(UART_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 156:Generated_Source\PSoC5/UART.c ****         UART_WriteControlRegister( \
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 5


 157:Generated_Source\PSoC5/UART.c ****             (UART_ReadControlRegister() & (uint8)~UART_CTRL_PARITY_TYPE_MASK) | \
 158:Generated_Source\PSoC5/UART.c ****             (uint8)(UART_PARITY_TYPE << UART_CTRL_PARITY_TYPE0_SHIFT) );
 159:Generated_Source\PSoC5/UART.c ****     #endif /* End UART_PARITY_TYPE_SW */
 160:Generated_Source\PSoC5/UART.c **** }
 161:Generated_Source\PSoC5/UART.c **** 
 162:Generated_Source\PSoC5/UART.c **** 
 163:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
 164:Generated_Source\PSoC5/UART.c **** * Function Name: UART_Enable
 165:Generated_Source\PSoC5/UART.c **** ********************************************************************************
 166:Generated_Source\PSoC5/UART.c **** *
 167:Generated_Source\PSoC5/UART.c **** * Summary:
 168:Generated_Source\PSoC5/UART.c **** *  Activates the hardware and begins component operation. It is not necessary
 169:Generated_Source\PSoC5/UART.c **** *  to call UART_Enable() because the UART_Start() API
 170:Generated_Source\PSoC5/UART.c **** *  calls this function, which is the preferred method to begin component
 171:Generated_Source\PSoC5/UART.c **** *  operation.
 172:Generated_Source\PSoC5/UART.c **** 
 173:Generated_Source\PSoC5/UART.c **** * Parameters:
 174:Generated_Source\PSoC5/UART.c **** *  None.
 175:Generated_Source\PSoC5/UART.c **** *
 176:Generated_Source\PSoC5/UART.c **** * Return:
 177:Generated_Source\PSoC5/UART.c **** *  None.
 178:Generated_Source\PSoC5/UART.c **** *
 179:Generated_Source\PSoC5/UART.c **** * Global Variables:
 180:Generated_Source\PSoC5/UART.c **** *  UART_rxAddressDetected - set to initial state (0).
 181:Generated_Source\PSoC5/UART.c **** *
 182:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 183:Generated_Source\PSoC5/UART.c **** void UART_Enable(void) 
 184:Generated_Source\PSoC5/UART.c **** {
  73              		.loc 1 184 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77 0000 10B5     		push	{r4, lr}
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 4, -8
  80              		.cfi_offset 14, -4
 185:Generated_Source\PSoC5/UART.c ****     uint8 enableInterrupts;
 186:Generated_Source\PSoC5/UART.c ****     enableInterrupts = CyEnterCriticalSection();
  81              		.loc 1 186 0
  82 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  83              	.LVL2:
  84 0006 0446     		mov	r4, r0
  85              	.LVL3:
 187:Generated_Source\PSoC5/UART.c **** 
 188:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_ENABLED || UART_HD_ENABLED)
 189:Generated_Source\PSoC5/UART.c ****         /* RX Counter (Count7) Enable */
 190:Generated_Source\PSoC5/UART.c ****         UART_RXBITCTR_CONTROL_REG |= UART_CNTR_ENABLE;
 191:Generated_Source\PSoC5/UART.c **** 
 192:Generated_Source\PSoC5/UART.c ****         /* Enable the RX Interrupt */
 193:Generated_Source\PSoC5/UART.c ****         UART_RXSTATUS_ACTL_REG  |= UART_INT_ENABLE;
 194:Generated_Source\PSoC5/UART.c **** 
 195:Generated_Source\PSoC5/UART.c ****         #if (UART_RX_INTERRUPT_ENABLED)
 196:Generated_Source\PSoC5/UART.c ****             UART_EnableRxInt();
 197:Generated_Source\PSoC5/UART.c **** 
 198:Generated_Source\PSoC5/UART.c ****             #if (UART_RXHW_ADDRESS_ENABLED)
 199:Generated_Source\PSoC5/UART.c ****                 UART_rxAddressDetected = 0u;
 200:Generated_Source\PSoC5/UART.c ****             #endif /* (UART_RXHW_ADDRESS_ENABLED) */
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 6


 201:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_RX_INTERRUPT_ENABLED) */
 202:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_ENABLED || UART_HD_ENABLED) */
 203:Generated_Source\PSoC5/UART.c **** 
 204:Generated_Source\PSoC5/UART.c ****     #if(UART_TX_ENABLED)
 205:Generated_Source\PSoC5/UART.c ****         /* TX Counter (DP/Count7) Enable */
 206:Generated_Source\PSoC5/UART.c ****         #if(!UART_TXCLKGEN_DP)
 207:Generated_Source\PSoC5/UART.c ****             UART_TXBITCTR_CONTROL_REG |= UART_CNTR_ENABLE;
 208:Generated_Source\PSoC5/UART.c ****         #endif /* End UART_TXCLKGEN_DP */
 209:Generated_Source\PSoC5/UART.c **** 
 210:Generated_Source\PSoC5/UART.c ****         /* Enable the TX Interrupt */
 211:Generated_Source\PSoC5/UART.c ****         UART_TXSTATUS_ACTL_REG |= UART_INT_ENABLE;
  86              		.loc 1 211 0
  87 0008 084A     		ldr	r2, .L5
  88 000a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  89 000c 43F01003 		orr	r3, r3, #16
  90 0010 1370     		strb	r3, [r2]
 212:Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 213:Generated_Source\PSoC5/UART.c ****             UART_ClearPendingTxInt(); /* Clear history of TX_NOT_EMPTY */
  91              		.loc 1 213 0
  92 0012 074A     		ldr	r2, .L5+4
  93 0014 4023     		movs	r3, #64
  94 0016 1360     		str	r3, [r2]
 214:Generated_Source\PSoC5/UART.c ****             UART_EnableTxInt();
  95              		.loc 1 214 0
  96 0018 A2F5C072 		sub	r2, r2, #384
  97 001c 1360     		str	r3, [r2]
 215:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 216:Generated_Source\PSoC5/UART.c ****      #endif /* (UART_TX_INTERRUPT_ENABLED) */
 217:Generated_Source\PSoC5/UART.c **** 
 218:Generated_Source\PSoC5/UART.c ****     #if (UART_INTERNAL_CLOCK_USED)
 219:Generated_Source\PSoC5/UART.c ****         UART_IntClock_Start();  /* Enable the clock */
  98              		.loc 1 219 0
  99 001e FFF7FEFF 		bl	UART_IntClock_Start
 100              	.LVL4:
 220:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_INTERNAL_CLOCK_USED) */
 221:Generated_Source\PSoC5/UART.c **** 
 222:Generated_Source\PSoC5/UART.c ****     CyExitCriticalSection(enableInterrupts);
 101              		.loc 1 222 0
 102 0022 2046     		mov	r0, r4
 223:Generated_Source\PSoC5/UART.c **** }
 103              		.loc 1 223 0
 104 0024 BDE81040 		pop	{r4, lr}
 105              		.cfi_restore 14
 106              		.cfi_restore 4
 107              		.cfi_def_cfa_offset 0
 108              	.LVL5:
 222:Generated_Source\PSoC5/UART.c **** }
 109              		.loc 1 222 0
 110 0028 FFF7FEBF 		b	CyExitCriticalSection
 111              	.LVL6:
 112              	.L6:
 113              		.align	2
 114              	.L5:
 115 002c 95650040 		.word	1073767829
 116 0030 80E200E0 		.word	-536812928
 117              		.cfi_endproc
 118              	.LFE2:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 7


 119              		.size	UART_Enable, .-UART_Enable
 120              		.section	.text.UART_Start,"ax",%progbits
 121              		.align	1
 122              		.global	UART_Start
 123              		.thumb
 124              		.thumb_func
 125              		.type	UART_Start, %function
 126              	UART_Start:
 127              	.LFB0:
  77:Generated_Source\PSoC5/UART.c ****     /* If not initialized then initialize all required hardware and software */
 128              		.loc 1 77 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132 0000 10B5     		push	{r4, lr}
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 4, -8
 135              		.cfi_offset 14, -4
  79:Generated_Source\PSoC5/UART.c ****     {
 136              		.loc 1 79 0
 137 0002 054C     		ldr	r4, .L10
 138 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 139 0006 1BB9     		cbnz	r3, .L8
  81:Generated_Source\PSoC5/UART.c ****         UART_initVar = 1u;
 140              		.loc 1 81 0
 141 0008 FFF7FEFF 		bl	UART_Init
 142              	.LVL7:
  82:Generated_Source\PSoC5/UART.c ****     }
 143              		.loc 1 82 0
 144 000c 0123     		movs	r3, #1
 145 000e 2370     		strb	r3, [r4]
 146              	.L8:
  86:Generated_Source\PSoC5/UART.c **** 
 147              		.loc 1 86 0
 148 0010 BDE81040 		pop	{r4, lr}
 149              		.cfi_restore 14
 150              		.cfi_restore 4
 151              		.cfi_def_cfa_offset 0
  85:Generated_Source\PSoC5/UART.c **** }
 152              		.loc 1 85 0
 153 0014 FFF7FEBF 		b	UART_Enable
 154              	.LVL8:
 155              	.L11:
 156              		.align	2
 157              	.L10:
 158 0018 00000000 		.word	.LANCHOR0
 159              		.cfi_endproc
 160              	.LFE0:
 161              		.size	UART_Start, .-UART_Start
 162              		.section	.text.UART_Stop,"ax",%progbits
 163              		.align	1
 164              		.global	UART_Stop
 165              		.thumb
 166              		.thumb_func
 167              		.type	UART_Stop, %function
 168              	UART_Stop:
 169              	.LFB3:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 8


 224:Generated_Source\PSoC5/UART.c **** 
 225:Generated_Source\PSoC5/UART.c **** 
 226:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
 227:Generated_Source\PSoC5/UART.c **** * Function Name: UART_Stop
 228:Generated_Source\PSoC5/UART.c **** ********************************************************************************
 229:Generated_Source\PSoC5/UART.c **** *
 230:Generated_Source\PSoC5/UART.c **** * Summary:
 231:Generated_Source\PSoC5/UART.c **** *  Disables the UART operation.
 232:Generated_Source\PSoC5/UART.c **** *
 233:Generated_Source\PSoC5/UART.c **** * Parameters:
 234:Generated_Source\PSoC5/UART.c **** *  None.
 235:Generated_Source\PSoC5/UART.c **** *
 236:Generated_Source\PSoC5/UART.c **** * Return:
 237:Generated_Source\PSoC5/UART.c **** *  None.
 238:Generated_Source\PSoC5/UART.c **** *
 239:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 240:Generated_Source\PSoC5/UART.c **** void UART_Stop(void) 
 241:Generated_Source\PSoC5/UART.c **** {
 170              		.loc 1 241 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174 0000 10B5     		push	{r4, lr}
 175              		.cfi_def_cfa_offset 8
 176              		.cfi_offset 4, -8
 177              		.cfi_offset 14, -4
 242:Generated_Source\PSoC5/UART.c ****     uint8 enableInterrupts;
 243:Generated_Source\PSoC5/UART.c ****     enableInterrupts = CyEnterCriticalSection();
 178              		.loc 1 243 0
 179 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 180              	.LVL9:
 181 0006 0446     		mov	r4, r0
 182              	.LVL10:
 244:Generated_Source\PSoC5/UART.c **** 
 245:Generated_Source\PSoC5/UART.c ****     /* Write Bit Counter Disable */
 246:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_ENABLED || UART_HD_ENABLED)
 247:Generated_Source\PSoC5/UART.c ****         UART_RXBITCTR_CONTROL_REG &= (uint8) ~UART_CNTR_ENABLE;
 248:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_ENABLED || UART_HD_ENABLED) */
 249:Generated_Source\PSoC5/UART.c **** 
 250:Generated_Source\PSoC5/UART.c ****     #if (UART_TX_ENABLED)
 251:Generated_Source\PSoC5/UART.c ****         #if(!UART_TXCLKGEN_DP)
 252:Generated_Source\PSoC5/UART.c ****             UART_TXBITCTR_CONTROL_REG &= (uint8) ~UART_CNTR_ENABLE;
 253:Generated_Source\PSoC5/UART.c ****         #endif /* (!UART_TXCLKGEN_DP) */
 254:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_TX_ENABLED) */
 255:Generated_Source\PSoC5/UART.c **** 
 256:Generated_Source\PSoC5/UART.c ****     #if (UART_INTERNAL_CLOCK_USED)
 257:Generated_Source\PSoC5/UART.c ****         UART_IntClock_Stop();   /* Disable the clock */
 183              		.loc 1 257 0
 184 0008 FFF7FEFF 		bl	UART_IntClock_Stop
 185              	.LVL11:
 258:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_INTERNAL_CLOCK_USED) */
 259:Generated_Source\PSoC5/UART.c **** 
 260:Generated_Source\PSoC5/UART.c ****     /* Disable internal interrupt component */
 261:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_ENABLED || UART_HD_ENABLED)
 262:Generated_Source\PSoC5/UART.c ****         UART_RXSTATUS_ACTL_REG  &= (uint8) ~UART_INT_ENABLE;
 263:Generated_Source\PSoC5/UART.c **** 
 264:Generated_Source\PSoC5/UART.c ****         #if (UART_RX_INTERRUPT_ENABLED)
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 9


 265:Generated_Source\PSoC5/UART.c ****             UART_DisableRxInt();
 266:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_RX_INTERRUPT_ENABLED) */
 267:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_ENABLED || UART_HD_ENABLED) */
 268:Generated_Source\PSoC5/UART.c **** 
 269:Generated_Source\PSoC5/UART.c ****     #if (UART_TX_ENABLED)
 270:Generated_Source\PSoC5/UART.c ****         UART_TXSTATUS_ACTL_REG &= (uint8) ~UART_INT_ENABLE;
 186              		.loc 1 270 0
 187 000c 064A     		ldr	r2, .L13
 271:Generated_Source\PSoC5/UART.c **** 
 272:Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 273:Generated_Source\PSoC5/UART.c ****             UART_DisableTxInt();
 274:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 275:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_TX_ENABLED) */
 276:Generated_Source\PSoC5/UART.c **** 
 277:Generated_Source\PSoC5/UART.c ****     CyExitCriticalSection(enableInterrupts);
 188              		.loc 1 277 0
 189 000e 2046     		mov	r0, r4
 270:Generated_Source\PSoC5/UART.c **** 
 190              		.loc 1 270 0
 191 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 192 0012 03F0EF03 		and	r3, r3, #239
 193 0016 1370     		strb	r3, [r2]
 273:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 194              		.loc 1 273 0
 195 0018 044B     		ldr	r3, .L13+4
 196 001a 4022     		movs	r2, #64
 197 001c 1A60     		str	r2, [r3]
 278:Generated_Source\PSoC5/UART.c **** }
 198              		.loc 1 278 0
 199 001e BDE81040 		pop	{r4, lr}
 200              		.cfi_restore 14
 201              		.cfi_restore 4
 202              		.cfi_def_cfa_offset 0
 203              	.LVL12:
 277:Generated_Source\PSoC5/UART.c **** }
 204              		.loc 1 277 0
 205 0022 FFF7FEBF 		b	CyExitCriticalSection
 206              	.LVL13:
 207              	.L14:
 208 0026 00BF     		.align	2
 209              	.L13:
 210 0028 95650040 		.word	1073767829
 211 002c 80E100E0 		.word	-536813184
 212              		.cfi_endproc
 213              	.LFE3:
 214              		.size	UART_Stop, .-UART_Stop
 215              		.section	.text.UART_ReadControlRegister,"ax",%progbits
 216              		.align	1
 217              		.global	UART_ReadControlRegister
 218              		.thumb
 219              		.thumb_func
 220              		.type	UART_ReadControlRegister, %function
 221              	UART_ReadControlRegister:
 222              	.LFB4:
 279:Generated_Source\PSoC5/UART.c **** 
 280:Generated_Source\PSoC5/UART.c **** 
 281:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 10


 282:Generated_Source\PSoC5/UART.c **** * Function Name: UART_ReadControlRegister
 283:Generated_Source\PSoC5/UART.c **** ********************************************************************************
 284:Generated_Source\PSoC5/UART.c **** *
 285:Generated_Source\PSoC5/UART.c **** * Summary:
 286:Generated_Source\PSoC5/UART.c **** *  Returns the current value of the control register.
 287:Generated_Source\PSoC5/UART.c **** *
 288:Generated_Source\PSoC5/UART.c **** * Parameters:
 289:Generated_Source\PSoC5/UART.c **** *  None.
 290:Generated_Source\PSoC5/UART.c **** *
 291:Generated_Source\PSoC5/UART.c **** * Return:
 292:Generated_Source\PSoC5/UART.c **** *  Contents of the control register.
 293:Generated_Source\PSoC5/UART.c **** *
 294:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 295:Generated_Source\PSoC5/UART.c **** uint8 UART_ReadControlRegister(void) 
 296:Generated_Source\PSoC5/UART.c **** {
 223              		.loc 1 296 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 297:Generated_Source\PSoC5/UART.c ****     #if (UART_CONTROL_REG_REMOVED)
 298:Generated_Source\PSoC5/UART.c ****         return(0u);
 299:Generated_Source\PSoC5/UART.c ****     #else
 300:Generated_Source\PSoC5/UART.c ****         return(UART_CONTROL_REG);
 301:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_CONTROL_REG_REMOVED) */
 302:Generated_Source\PSoC5/UART.c **** }
 228              		.loc 1 302 0
 229 0000 0020     		movs	r0, #0
 230 0002 7047     		bx	lr
 231              		.cfi_endproc
 232              	.LFE4:
 233              		.size	UART_ReadControlRegister, .-UART_ReadControlRegister
 234              		.section	.text.UART_WriteControlRegister,"ax",%progbits
 235              		.align	1
 236              		.global	UART_WriteControlRegister
 237              		.thumb
 238              		.thumb_func
 239              		.type	UART_WriteControlRegister, %function
 240              	UART_WriteControlRegister:
 241              	.LFB18:
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 246 0000 7047     		bx	lr
 247              		.cfi_endproc
 248              	.LFE18:
 249              		.size	UART_WriteControlRegister, .-UART_WriteControlRegister
 250              		.section	.text.UART_SetTxInterruptMode,"ax",%progbits
 251              		.align	1
 252              		.global	UART_SetTxInterruptMode
 253              		.thumb
 254              		.thumb_func
 255              		.type	UART_SetTxInterruptMode, %function
 256              	UART_SetTxInterruptMode:
 257              	.LFB6:
 303:Generated_Source\PSoC5/UART.c **** 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 11


 304:Generated_Source\PSoC5/UART.c **** 
 305:Generated_Source\PSoC5/UART.c **** /*******************************************************************************
 306:Generated_Source\PSoC5/UART.c **** * Function Name: UART_WriteControlRegister
 307:Generated_Source\PSoC5/UART.c **** ********************************************************************************
 308:Generated_Source\PSoC5/UART.c **** *
 309:Generated_Source\PSoC5/UART.c **** * Summary:
 310:Generated_Source\PSoC5/UART.c **** *  Writes an 8-bit value into the control register
 311:Generated_Source\PSoC5/UART.c **** *
 312:Generated_Source\PSoC5/UART.c **** * Parameters:
 313:Generated_Source\PSoC5/UART.c **** *  control:  control register value
 314:Generated_Source\PSoC5/UART.c **** *
 315:Generated_Source\PSoC5/UART.c **** * Return:
 316:Generated_Source\PSoC5/UART.c **** *  None.
 317:Generated_Source\PSoC5/UART.c **** *
 318:Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 319:Generated_Source\PSoC5/UART.c **** void  UART_WriteControlRegister(uint8 control) 
 320:Generated_Source\PSoC5/UART.c **** {
 321:Generated_Source\PSoC5/UART.c ****     #if (UART_CONTROL_REG_REMOVED)
 322:Generated_Source\PSoC5/UART.c ****         if(0u != control)
 323:Generated_Source\PSoC5/UART.c ****         {
 324:Generated_Source\PSoC5/UART.c ****             /* Suppress compiler warning */
 325:Generated_Source\PSoC5/UART.c ****         }
 326:Generated_Source\PSoC5/UART.c ****     #else
 327:Generated_Source\PSoC5/UART.c ****        UART_CONTROL_REG = control;
 328:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_CONTROL_REG_REMOVED) */
 329:Generated_Source\PSoC5/UART.c **** }
 330:Generated_Source\PSoC5/UART.c **** 
 331:Generated_Source\PSoC5/UART.c **** 
 332:Generated_Source\PSoC5/UART.c **** #if(UART_RX_ENABLED || UART_HD_ENABLED)
 333:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 334:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetRxInterruptMode
 335:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 336:Generated_Source\PSoC5/UART.c ****     *
 337:Generated_Source\PSoC5/UART.c ****     * Summary:
 338:Generated_Source\PSoC5/UART.c ****     *  Configures the RX interrupt sources enabled.
 339:Generated_Source\PSoC5/UART.c ****     *
 340:Generated_Source\PSoC5/UART.c ****     * Parameters:
 341:Generated_Source\PSoC5/UART.c ****     *  IntSrc:  Bit field containing the RX interrupts to enable. Based on the 
 342:Generated_Source\PSoC5/UART.c ****     *  bit-field arrangement of the status register. This value must be a 
 343:Generated_Source\PSoC5/UART.c ****     *  combination of status register bit-masks shown below:
 344:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_FIFO_NOTEMPTY    Interrupt on byte received.
 345:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_PAR_ERROR        Interrupt on parity error.
 346:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_STOP_ERROR       Interrupt on stop error.
 347:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_BREAK            Interrupt on break.
 348:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_OVERRUN          Interrupt on overrun error.
 349:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_ADDR_MATCH       Interrupt on address match.
 350:Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_MRKSPC           Interrupt on address detect.
 351:Generated_Source\PSoC5/UART.c ****     *
 352:Generated_Source\PSoC5/UART.c ****     * Return:
 353:Generated_Source\PSoC5/UART.c ****     *  None.
 354:Generated_Source\PSoC5/UART.c ****     *
 355:Generated_Source\PSoC5/UART.c ****     * Theory:
 356:Generated_Source\PSoC5/UART.c ****     *  Enables the output of specific status bits to the interrupt controller
 357:Generated_Source\PSoC5/UART.c ****     *
 358:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 359:Generated_Source\PSoC5/UART.c ****     void UART_SetRxInterruptMode(uint8 intSrc) 
 360:Generated_Source\PSoC5/UART.c ****     {
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 12


 361:Generated_Source\PSoC5/UART.c ****         UART_RXSTATUS_MASK_REG  = intSrc;
 362:Generated_Source\PSoC5/UART.c ****     }
 363:Generated_Source\PSoC5/UART.c **** 
 364:Generated_Source\PSoC5/UART.c **** 
 365:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 366:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ReadRxData
 367:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 368:Generated_Source\PSoC5/UART.c ****     *
 369:Generated_Source\PSoC5/UART.c ****     * Summary:
 370:Generated_Source\PSoC5/UART.c ****     *  Returns the next byte of received data. This function returns data without
 371:Generated_Source\PSoC5/UART.c ****     *  checking the status. You must check the status separately.
 372:Generated_Source\PSoC5/UART.c ****     *
 373:Generated_Source\PSoC5/UART.c ****     * Parameters:
 374:Generated_Source\PSoC5/UART.c ****     *  None.
 375:Generated_Source\PSoC5/UART.c ****     *
 376:Generated_Source\PSoC5/UART.c ****     * Return:
 377:Generated_Source\PSoC5/UART.c ****     *  Received data from RX register
 378:Generated_Source\PSoC5/UART.c ****     *
 379:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 380:Generated_Source\PSoC5/UART.c ****     *  UART_rxBuffer - RAM buffer pointer for save received data.
 381:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferWrite - cyclic index for write to rxBuffer,
 382:Generated_Source\PSoC5/UART.c ****     *     checked to identify new data.
 383:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferRead - cyclic index for read from rxBuffer,
 384:Generated_Source\PSoC5/UART.c ****     *     incremented after each byte has been read from buffer.
 385:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferLoopDetect - cleared if loop condition was detected
 386:Generated_Source\PSoC5/UART.c ****     *     in RX ISR.
 387:Generated_Source\PSoC5/UART.c ****     *
 388:Generated_Source\PSoC5/UART.c ****     * Reentrant:
 389:Generated_Source\PSoC5/UART.c ****     *  No.
 390:Generated_Source\PSoC5/UART.c ****     *
 391:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 392:Generated_Source\PSoC5/UART.c ****     uint8 UART_ReadRxData(void) 
 393:Generated_Source\PSoC5/UART.c ****     {
 394:Generated_Source\PSoC5/UART.c ****         uint8 rxData;
 395:Generated_Source\PSoC5/UART.c **** 
 396:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 397:Generated_Source\PSoC5/UART.c **** 
 398:Generated_Source\PSoC5/UART.c ****         uint8 locRxBufferRead;
 399:Generated_Source\PSoC5/UART.c ****         uint8 locRxBufferWrite;
 400:Generated_Source\PSoC5/UART.c **** 
 401:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt */
 402:Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 403:Generated_Source\PSoC5/UART.c **** 
 404:Generated_Source\PSoC5/UART.c ****         locRxBufferRead  = UART_rxBufferRead;
 405:Generated_Source\PSoC5/UART.c ****         locRxBufferWrite = UART_rxBufferWrite;
 406:Generated_Source\PSoC5/UART.c **** 
 407:Generated_Source\PSoC5/UART.c ****         if( (UART_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 408:Generated_Source\PSoC5/UART.c ****         {
 409:Generated_Source\PSoC5/UART.c ****             rxData = UART_rxBuffer[locRxBufferRead];
 410:Generated_Source\PSoC5/UART.c ****             locRxBufferRead++;
 411:Generated_Source\PSoC5/UART.c **** 
 412:Generated_Source\PSoC5/UART.c ****             if(locRxBufferRead >= UART_RX_BUFFER_SIZE)
 413:Generated_Source\PSoC5/UART.c ****             {
 414:Generated_Source\PSoC5/UART.c ****                 locRxBufferRead = 0u;
 415:Generated_Source\PSoC5/UART.c ****             }
 416:Generated_Source\PSoC5/UART.c ****             /* Update the real pointer */
 417:Generated_Source\PSoC5/UART.c ****             UART_rxBufferRead = locRxBufferRead;
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 13


 418:Generated_Source\PSoC5/UART.c **** 
 419:Generated_Source\PSoC5/UART.c ****             if(UART_rxBufferLoopDetect != 0u)
 420:Generated_Source\PSoC5/UART.c ****             {
 421:Generated_Source\PSoC5/UART.c ****                 UART_rxBufferLoopDetect = 0u;
 422:Generated_Source\PSoC5/UART.c ****                 #if ((UART_RX_INTERRUPT_ENABLED) && (UART_FLOW_CONTROL != 0u))
 423:Generated_Source\PSoC5/UART.c ****                     /* When Hardware Flow Control selected - return RX mask */
 424:Generated_Source\PSoC5/UART.c ****                     #if( UART_HD_ENABLED )
 425:Generated_Source\PSoC5/UART.c ****                         if((UART_CONTROL_REG & UART_CTRL_HD_SEND) == 0u)
 426:Generated_Source\PSoC5/UART.c ****                         {   /* In Half duplex mode return RX mask only in RX
 427:Generated_Source\PSoC5/UART.c ****                             *  configuration set, otherwise
 428:Generated_Source\PSoC5/UART.c ****                             *  mask will be returned in LoadRxConfig() API.
 429:Generated_Source\PSoC5/UART.c ****                             */
 430:Generated_Source\PSoC5/UART.c ****                             UART_RXSTATUS_MASK_REG  |= UART_RX_STS_FIFO_NOTEMPTY;
 431:Generated_Source\PSoC5/UART.c ****                         }
 432:Generated_Source\PSoC5/UART.c ****                     #else
 433:Generated_Source\PSoC5/UART.c ****                         UART_RXSTATUS_MASK_REG  |= UART_RX_STS_FIFO_NOTEMPTY;
 434:Generated_Source\PSoC5/UART.c ****                     #endif /* end UART_HD_ENABLED */
 435:Generated_Source\PSoC5/UART.c ****                 #endif /* ((UART_RX_INTERRUPT_ENABLED) && (UART_FLOW_CONTROL != 0u)) */
 436:Generated_Source\PSoC5/UART.c ****             }
 437:Generated_Source\PSoC5/UART.c ****         }
 438:Generated_Source\PSoC5/UART.c ****         else
 439:Generated_Source\PSoC5/UART.c ****         {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 440:Generated_Source\PSoC5/UART.c ****             rxData = UART_RXDATA_REG;
 441:Generated_Source\PSoC5/UART.c ****         }
 442:Generated_Source\PSoC5/UART.c **** 
 443:Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 444:Generated_Source\PSoC5/UART.c **** 
 445:Generated_Source\PSoC5/UART.c ****     #else
 446:Generated_Source\PSoC5/UART.c **** 
 447:Generated_Source\PSoC5/UART.c ****         /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 448:Generated_Source\PSoC5/UART.c ****         rxData = UART_RXDATA_REG;
 449:Generated_Source\PSoC5/UART.c **** 
 450:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 451:Generated_Source\PSoC5/UART.c **** 
 452:Generated_Source\PSoC5/UART.c ****         return(rxData);
 453:Generated_Source\PSoC5/UART.c ****     }
 454:Generated_Source\PSoC5/UART.c **** 
 455:Generated_Source\PSoC5/UART.c **** 
 456:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 457:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ReadRxStatus
 458:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 459:Generated_Source\PSoC5/UART.c ****     *
 460:Generated_Source\PSoC5/UART.c ****     * Summary:
 461:Generated_Source\PSoC5/UART.c ****     *  Returns the current state of the receiver status register and the software
 462:Generated_Source\PSoC5/UART.c ****     *  buffer overflow status.
 463:Generated_Source\PSoC5/UART.c ****     *
 464:Generated_Source\PSoC5/UART.c ****     * Parameters:
 465:Generated_Source\PSoC5/UART.c ****     *  None.
 466:Generated_Source\PSoC5/UART.c ****     *
 467:Generated_Source\PSoC5/UART.c ****     * Return:
 468:Generated_Source\PSoC5/UART.c ****     *  Current state of the status register.
 469:Generated_Source\PSoC5/UART.c ****     *
 470:Generated_Source\PSoC5/UART.c ****     * Side Effect:
 471:Generated_Source\PSoC5/UART.c ****     *  All status register bits are clear-on-read except
 472:Generated_Source\PSoC5/UART.c ****     *  UART_RX_STS_FIFO_NOTEMPTY.
 473:Generated_Source\PSoC5/UART.c ****     *  UART_RX_STS_FIFO_NOTEMPTY clears immediately after RX data
 474:Generated_Source\PSoC5/UART.c ****     *  register read.
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 14


 475:Generated_Source\PSoC5/UART.c ****     *
 476:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 477:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferOverflow - used to indicate overload condition.
 478:Generated_Source\PSoC5/UART.c ****     *   It set to one in RX interrupt when there isn't free space in
 479:Generated_Source\PSoC5/UART.c ****     *   UART_rxBufferRead to write new data. This condition returned
 480:Generated_Source\PSoC5/UART.c ****     *   and cleared to zero by this API as an
 481:Generated_Source\PSoC5/UART.c ****     *   UART_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 482:Generated_Source\PSoC5/UART.c ****     *   bits.
 483:Generated_Source\PSoC5/UART.c ****     *
 484:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 485:Generated_Source\PSoC5/UART.c ****     uint8 UART_ReadRxStatus(void) 
 486:Generated_Source\PSoC5/UART.c ****     {
 487:Generated_Source\PSoC5/UART.c ****         uint8 status;
 488:Generated_Source\PSoC5/UART.c **** 
 489:Generated_Source\PSoC5/UART.c ****         status = UART_RXSTATUS_REG & UART_RX_HW_MASK;
 490:Generated_Source\PSoC5/UART.c **** 
 491:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 492:Generated_Source\PSoC5/UART.c ****         if(UART_rxBufferOverflow != 0u)
 493:Generated_Source\PSoC5/UART.c ****         {
 494:Generated_Source\PSoC5/UART.c ****             status |= UART_RX_STS_SOFT_BUFF_OVER;
 495:Generated_Source\PSoC5/UART.c ****             UART_rxBufferOverflow = 0u;
 496:Generated_Source\PSoC5/UART.c ****         }
 497:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 498:Generated_Source\PSoC5/UART.c **** 
 499:Generated_Source\PSoC5/UART.c ****         return(status);
 500:Generated_Source\PSoC5/UART.c ****     }
 501:Generated_Source\PSoC5/UART.c **** 
 502:Generated_Source\PSoC5/UART.c **** 
 503:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 504:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_GetChar
 505:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 506:Generated_Source\PSoC5/UART.c ****     *
 507:Generated_Source\PSoC5/UART.c ****     * Summary:
 508:Generated_Source\PSoC5/UART.c ****     *  Returns the last received byte of data. UART_GetChar() is
 509:Generated_Source\PSoC5/UART.c ****     *  designed for ASCII characters and returns a uint8 where 1 to 255 are values
 510:Generated_Source\PSoC5/UART.c ****     *  for valid characters and 0 indicates an error occurred or no data is present.
 511:Generated_Source\PSoC5/UART.c ****     *
 512:Generated_Source\PSoC5/UART.c ****     * Parameters:
 513:Generated_Source\PSoC5/UART.c ****     *  None.
 514:Generated_Source\PSoC5/UART.c ****     *
 515:Generated_Source\PSoC5/UART.c ****     * Return:
 516:Generated_Source\PSoC5/UART.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 517:Generated_Source\PSoC5/UART.c ****     *  A returned zero signifies an error condition or no data available.
 518:Generated_Source\PSoC5/UART.c ****     *
 519:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 520:Generated_Source\PSoC5/UART.c ****     *  UART_rxBuffer - RAM buffer pointer for save received data.
 521:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferWrite - cyclic index for write to rxBuffer,
 522:Generated_Source\PSoC5/UART.c ****     *     checked to identify new data.
 523:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferRead - cyclic index for read from rxBuffer,
 524:Generated_Source\PSoC5/UART.c ****     *     incremented after each byte has been read from buffer.
 525:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferLoopDetect - cleared if loop condition was detected
 526:Generated_Source\PSoC5/UART.c ****     *     in RX ISR.
 527:Generated_Source\PSoC5/UART.c ****     *
 528:Generated_Source\PSoC5/UART.c ****     * Reentrant:
 529:Generated_Source\PSoC5/UART.c ****     *  No.
 530:Generated_Source\PSoC5/UART.c ****     *
 531:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 15


 532:Generated_Source\PSoC5/UART.c ****     uint8 UART_GetChar(void) 
 533:Generated_Source\PSoC5/UART.c ****     {
 534:Generated_Source\PSoC5/UART.c ****         uint8 rxData = 0u;
 535:Generated_Source\PSoC5/UART.c ****         uint8 rxStatus;
 536:Generated_Source\PSoC5/UART.c **** 
 537:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 538:Generated_Source\PSoC5/UART.c ****         uint8 locRxBufferRead;
 539:Generated_Source\PSoC5/UART.c ****         uint8 locRxBufferWrite;
 540:Generated_Source\PSoC5/UART.c **** 
 541:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt */
 542:Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 543:Generated_Source\PSoC5/UART.c **** 
 544:Generated_Source\PSoC5/UART.c ****         locRxBufferRead  = UART_rxBufferRead;
 545:Generated_Source\PSoC5/UART.c ****         locRxBufferWrite = UART_rxBufferWrite;
 546:Generated_Source\PSoC5/UART.c **** 
 547:Generated_Source\PSoC5/UART.c ****         if( (UART_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 548:Generated_Source\PSoC5/UART.c ****         {
 549:Generated_Source\PSoC5/UART.c ****             rxData = UART_rxBuffer[locRxBufferRead];
 550:Generated_Source\PSoC5/UART.c ****             locRxBufferRead++;
 551:Generated_Source\PSoC5/UART.c ****             if(locRxBufferRead >= UART_RX_BUFFER_SIZE)
 552:Generated_Source\PSoC5/UART.c ****             {
 553:Generated_Source\PSoC5/UART.c ****                 locRxBufferRead = 0u;
 554:Generated_Source\PSoC5/UART.c ****             }
 555:Generated_Source\PSoC5/UART.c ****             /* Update the real pointer */
 556:Generated_Source\PSoC5/UART.c ****             UART_rxBufferRead = locRxBufferRead;
 557:Generated_Source\PSoC5/UART.c **** 
 558:Generated_Source\PSoC5/UART.c ****             if(UART_rxBufferLoopDetect != 0u)
 559:Generated_Source\PSoC5/UART.c ****             {
 560:Generated_Source\PSoC5/UART.c ****                 UART_rxBufferLoopDetect = 0u;
 561:Generated_Source\PSoC5/UART.c ****                 #if( (UART_RX_INTERRUPT_ENABLED) && (UART_FLOW_CONTROL != 0u) )
 562:Generated_Source\PSoC5/UART.c ****                     /* When Hardware Flow Control selected - return RX mask */
 563:Generated_Source\PSoC5/UART.c ****                     #if( UART_HD_ENABLED )
 564:Generated_Source\PSoC5/UART.c ****                         if((UART_CONTROL_REG & UART_CTRL_HD_SEND) == 0u)
 565:Generated_Source\PSoC5/UART.c ****                         {   /* In Half duplex mode return RX mask only if
 566:Generated_Source\PSoC5/UART.c ****                             *  RX configuration set, otherwise
 567:Generated_Source\PSoC5/UART.c ****                             *  mask will be returned in LoadRxConfig() API.
 568:Generated_Source\PSoC5/UART.c ****                             */
 569:Generated_Source\PSoC5/UART.c ****                             UART_RXSTATUS_MASK_REG |= UART_RX_STS_FIFO_NOTEMPTY;
 570:Generated_Source\PSoC5/UART.c ****                         }
 571:Generated_Source\PSoC5/UART.c ****                     #else
 572:Generated_Source\PSoC5/UART.c ****                         UART_RXSTATUS_MASK_REG |= UART_RX_STS_FIFO_NOTEMPTY;
 573:Generated_Source\PSoC5/UART.c ****                     #endif /* end UART_HD_ENABLED */
 574:Generated_Source\PSoC5/UART.c ****                 #endif /* UART_RX_INTERRUPT_ENABLED and Hardware flow control*/
 575:Generated_Source\PSoC5/UART.c ****             }
 576:Generated_Source\PSoC5/UART.c **** 
 577:Generated_Source\PSoC5/UART.c ****         }
 578:Generated_Source\PSoC5/UART.c ****         else
 579:Generated_Source\PSoC5/UART.c ****         {   rxStatus = UART_RXSTATUS_REG;
 580:Generated_Source\PSoC5/UART.c ****             if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 581:Generated_Source\PSoC5/UART.c ****             {   /* Read received data from FIFO */
 582:Generated_Source\PSoC5/UART.c ****                 rxData = UART_RXDATA_REG;
 583:Generated_Source\PSoC5/UART.c ****                 /*Check status on error*/
 584:Generated_Source\PSoC5/UART.c ****                 if((rxStatus & (UART_RX_STS_BREAK | UART_RX_STS_PAR_ERROR |
 585:Generated_Source\PSoC5/UART.c ****                                 UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 586:Generated_Source\PSoC5/UART.c ****                 {
 587:Generated_Source\PSoC5/UART.c ****                     rxData = 0u;
 588:Generated_Source\PSoC5/UART.c ****                 }
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 16


 589:Generated_Source\PSoC5/UART.c ****             }
 590:Generated_Source\PSoC5/UART.c ****         }
 591:Generated_Source\PSoC5/UART.c **** 
 592:Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 593:Generated_Source\PSoC5/UART.c **** 
 594:Generated_Source\PSoC5/UART.c ****     #else
 595:Generated_Source\PSoC5/UART.c **** 
 596:Generated_Source\PSoC5/UART.c ****         rxStatus =UART_RXSTATUS_REG;
 597:Generated_Source\PSoC5/UART.c ****         if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 598:Generated_Source\PSoC5/UART.c ****         {
 599:Generated_Source\PSoC5/UART.c ****             /* Read received data from FIFO */
 600:Generated_Source\PSoC5/UART.c ****             rxData = UART_RXDATA_REG;
 601:Generated_Source\PSoC5/UART.c **** 
 602:Generated_Source\PSoC5/UART.c ****             /*Check status on error*/
 603:Generated_Source\PSoC5/UART.c ****             if((rxStatus & (UART_RX_STS_BREAK | UART_RX_STS_PAR_ERROR |
 604:Generated_Source\PSoC5/UART.c ****                             UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 605:Generated_Source\PSoC5/UART.c ****             {
 606:Generated_Source\PSoC5/UART.c ****                 rxData = 0u;
 607:Generated_Source\PSoC5/UART.c ****             }
 608:Generated_Source\PSoC5/UART.c ****         }
 609:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 610:Generated_Source\PSoC5/UART.c **** 
 611:Generated_Source\PSoC5/UART.c ****         return(rxData);
 612:Generated_Source\PSoC5/UART.c ****     }
 613:Generated_Source\PSoC5/UART.c **** 
 614:Generated_Source\PSoC5/UART.c **** 
 615:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 616:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_GetByte
 617:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 618:Generated_Source\PSoC5/UART.c ****     *
 619:Generated_Source\PSoC5/UART.c ****     * Summary:
 620:Generated_Source\PSoC5/UART.c ****     *  Reads UART RX buffer immediately, returns received character and error
 621:Generated_Source\PSoC5/UART.c ****     *  condition.
 622:Generated_Source\PSoC5/UART.c ****     *
 623:Generated_Source\PSoC5/UART.c ****     * Parameters:
 624:Generated_Source\PSoC5/UART.c ****     *  None.
 625:Generated_Source\PSoC5/UART.c ****     *
 626:Generated_Source\PSoC5/UART.c ****     * Return:
 627:Generated_Source\PSoC5/UART.c ****     *  MSB contains status and LSB contains UART RX data. If the MSB is nonzero,
 628:Generated_Source\PSoC5/UART.c ****     *  an error has occurred.
 629:Generated_Source\PSoC5/UART.c ****     *
 630:Generated_Source\PSoC5/UART.c ****     * Reentrant:
 631:Generated_Source\PSoC5/UART.c ****     *  No.
 632:Generated_Source\PSoC5/UART.c ****     *
 633:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 634:Generated_Source\PSoC5/UART.c ****     uint16 UART_GetByte(void) 
 635:Generated_Source\PSoC5/UART.c ****     {
 636:Generated_Source\PSoC5/UART.c ****         
 637:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 638:Generated_Source\PSoC5/UART.c ****         uint16 locErrorStatus;
 639:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt */
 640:Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 641:Generated_Source\PSoC5/UART.c ****         locErrorStatus = (uint16)UART_errorStatus;
 642:Generated_Source\PSoC5/UART.c ****         UART_errorStatus = 0u;
 643:Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 644:Generated_Source\PSoC5/UART.c ****         return ( (uint16)(locErrorStatus << 8u) | UART_ReadRxData() );
 645:Generated_Source\PSoC5/UART.c ****     #else
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 17


 646:Generated_Source\PSoC5/UART.c ****         return ( ((uint16)UART_ReadRxStatus() << 8u) | UART_ReadRxData() );
 647:Generated_Source\PSoC5/UART.c ****     #endif /* UART_RX_INTERRUPT_ENABLED */
 648:Generated_Source\PSoC5/UART.c ****         
 649:Generated_Source\PSoC5/UART.c ****     }
 650:Generated_Source\PSoC5/UART.c **** 
 651:Generated_Source\PSoC5/UART.c **** 
 652:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 653:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_GetRxBufferSize
 654:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 655:Generated_Source\PSoC5/UART.c ****     *
 656:Generated_Source\PSoC5/UART.c ****     * Summary:
 657:Generated_Source\PSoC5/UART.c ****     *  Returns the number of received bytes available in the RX buffer.
 658:Generated_Source\PSoC5/UART.c ****     *  * RX software buffer is disabled (RX Buffer Size parameter is equal to 4): 
 659:Generated_Source\PSoC5/UART.c ****     *    returns 0 for empty RX FIFO or 1 for not empty RX FIFO.
 660:Generated_Source\PSoC5/UART.c ****     *  * RX software buffer is enabled: returns the number of bytes available in 
 661:Generated_Source\PSoC5/UART.c ****     *    the RX software buffer. Bytes available in the RX FIFO do not take to 
 662:Generated_Source\PSoC5/UART.c ****     *    account.
 663:Generated_Source\PSoC5/UART.c ****     *
 664:Generated_Source\PSoC5/UART.c ****     * Parameters:
 665:Generated_Source\PSoC5/UART.c ****     *  None.
 666:Generated_Source\PSoC5/UART.c ****     *
 667:Generated_Source\PSoC5/UART.c ****     * Return:
 668:Generated_Source\PSoC5/UART.c ****     *  uint8: Number of bytes in the RX buffer. 
 669:Generated_Source\PSoC5/UART.c ****     *    Return value type depends on RX Buffer Size parameter.
 670:Generated_Source\PSoC5/UART.c ****     *
 671:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 672:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferWrite - used to calculate left bytes.
 673:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferRead - used to calculate left bytes.
 674:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferLoopDetect - checked to decide left bytes amount.
 675:Generated_Source\PSoC5/UART.c ****     *
 676:Generated_Source\PSoC5/UART.c ****     * Reentrant:
 677:Generated_Source\PSoC5/UART.c ****     *  No.
 678:Generated_Source\PSoC5/UART.c ****     *
 679:Generated_Source\PSoC5/UART.c ****     * Theory:
 680:Generated_Source\PSoC5/UART.c ****     *  Allows the user to find out how full the RX Buffer is.
 681:Generated_Source\PSoC5/UART.c ****     *
 682:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 683:Generated_Source\PSoC5/UART.c ****     uint8 UART_GetRxBufferSize(void)
 684:Generated_Source\PSoC5/UART.c ****                                                             
 685:Generated_Source\PSoC5/UART.c ****     {
 686:Generated_Source\PSoC5/UART.c ****         uint8 size;
 687:Generated_Source\PSoC5/UART.c **** 
 688:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 689:Generated_Source\PSoC5/UART.c **** 
 690:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt */
 691:Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 692:Generated_Source\PSoC5/UART.c **** 
 693:Generated_Source\PSoC5/UART.c ****         if(UART_rxBufferRead == UART_rxBufferWrite)
 694:Generated_Source\PSoC5/UART.c ****         {
 695:Generated_Source\PSoC5/UART.c ****             if(UART_rxBufferLoopDetect != 0u)
 696:Generated_Source\PSoC5/UART.c ****             {
 697:Generated_Source\PSoC5/UART.c ****                 size = UART_RX_BUFFER_SIZE;
 698:Generated_Source\PSoC5/UART.c ****             }
 699:Generated_Source\PSoC5/UART.c ****             else
 700:Generated_Source\PSoC5/UART.c ****             {
 701:Generated_Source\PSoC5/UART.c ****                 size = 0u;
 702:Generated_Source\PSoC5/UART.c ****             }
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 18


 703:Generated_Source\PSoC5/UART.c ****         }
 704:Generated_Source\PSoC5/UART.c ****         else if(UART_rxBufferRead < UART_rxBufferWrite)
 705:Generated_Source\PSoC5/UART.c ****         {
 706:Generated_Source\PSoC5/UART.c ****             size = (UART_rxBufferWrite - UART_rxBufferRead);
 707:Generated_Source\PSoC5/UART.c ****         }
 708:Generated_Source\PSoC5/UART.c ****         else
 709:Generated_Source\PSoC5/UART.c ****         {
 710:Generated_Source\PSoC5/UART.c ****             size = (UART_RX_BUFFER_SIZE - UART_rxBufferRead) + UART_rxBufferWrite;
 711:Generated_Source\PSoC5/UART.c ****         }
 712:Generated_Source\PSoC5/UART.c **** 
 713:Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 714:Generated_Source\PSoC5/UART.c **** 
 715:Generated_Source\PSoC5/UART.c ****     #else
 716:Generated_Source\PSoC5/UART.c **** 
 717:Generated_Source\PSoC5/UART.c ****         /* We can only know if there is data in the fifo. */
 718:Generated_Source\PSoC5/UART.c ****         size = ((UART_RXSTATUS_REG & UART_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 719:Generated_Source\PSoC5/UART.c **** 
 720:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 721:Generated_Source\PSoC5/UART.c **** 
 722:Generated_Source\PSoC5/UART.c ****         return(size);
 723:Generated_Source\PSoC5/UART.c ****     }
 724:Generated_Source\PSoC5/UART.c **** 
 725:Generated_Source\PSoC5/UART.c **** 
 726:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 727:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ClearRxBuffer
 728:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 729:Generated_Source\PSoC5/UART.c ****     *
 730:Generated_Source\PSoC5/UART.c ****     * Summary:
 731:Generated_Source\PSoC5/UART.c ****     *  Clears the receiver memory buffer and hardware RX FIFO of all received data.
 732:Generated_Source\PSoC5/UART.c ****     *
 733:Generated_Source\PSoC5/UART.c ****     * Parameters:
 734:Generated_Source\PSoC5/UART.c ****     *  None.
 735:Generated_Source\PSoC5/UART.c ****     *
 736:Generated_Source\PSoC5/UART.c ****     * Return:
 737:Generated_Source\PSoC5/UART.c ****     *  None.
 738:Generated_Source\PSoC5/UART.c ****     *
 739:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 740:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferWrite - cleared to zero.
 741:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferRead - cleared to zero.
 742:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferLoopDetect - cleared to zero.
 743:Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferOverflow - cleared to zero.
 744:Generated_Source\PSoC5/UART.c ****     *
 745:Generated_Source\PSoC5/UART.c ****     * Reentrant:
 746:Generated_Source\PSoC5/UART.c ****     *  No.
 747:Generated_Source\PSoC5/UART.c ****     *
 748:Generated_Source\PSoC5/UART.c ****     * Theory:
 749:Generated_Source\PSoC5/UART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 750:Generated_Source\PSoC5/UART.c ****     *  read and writing will resume at address 0 overwriting any data that may
 751:Generated_Source\PSoC5/UART.c ****     *  have remained in the RAM.
 752:Generated_Source\PSoC5/UART.c ****     *
 753:Generated_Source\PSoC5/UART.c ****     * Side Effects:
 754:Generated_Source\PSoC5/UART.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 755:Generated_Source\PSoC5/UART.c ****     *
 756:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 757:Generated_Source\PSoC5/UART.c ****     void UART_ClearRxBuffer(void) 
 758:Generated_Source\PSoC5/UART.c ****     {
 759:Generated_Source\PSoC5/UART.c ****         uint8 enableInterrupts;
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 19


 760:Generated_Source\PSoC5/UART.c **** 
 761:Generated_Source\PSoC5/UART.c ****         /* Clear the HW FIFO */
 762:Generated_Source\PSoC5/UART.c ****         enableInterrupts = CyEnterCriticalSection();
 763:Generated_Source\PSoC5/UART.c ****         UART_RXDATA_AUX_CTL_REG |= (uint8)  UART_RX_FIFO_CLR;
 764:Generated_Source\PSoC5/UART.c ****         UART_RXDATA_AUX_CTL_REG &= (uint8) ~UART_RX_FIFO_CLR;
 765:Generated_Source\PSoC5/UART.c ****         CyExitCriticalSection(enableInterrupts);
 766:Generated_Source\PSoC5/UART.c **** 
 767:Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 768:Generated_Source\PSoC5/UART.c **** 
 769:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt. */
 770:Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 771:Generated_Source\PSoC5/UART.c **** 
 772:Generated_Source\PSoC5/UART.c ****         UART_rxBufferRead = 0u;
 773:Generated_Source\PSoC5/UART.c ****         UART_rxBufferWrite = 0u;
 774:Generated_Source\PSoC5/UART.c ****         UART_rxBufferLoopDetect = 0u;
 775:Generated_Source\PSoC5/UART.c ****         UART_rxBufferOverflow = 0u;
 776:Generated_Source\PSoC5/UART.c **** 
 777:Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 778:Generated_Source\PSoC5/UART.c **** 
 779:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 780:Generated_Source\PSoC5/UART.c **** 
 781:Generated_Source\PSoC5/UART.c ****     }
 782:Generated_Source\PSoC5/UART.c **** 
 783:Generated_Source\PSoC5/UART.c **** 
 784:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 785:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetRxAddressMode
 786:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 787:Generated_Source\PSoC5/UART.c ****     *
 788:Generated_Source\PSoC5/UART.c ****     * Summary:
 789:Generated_Source\PSoC5/UART.c ****     *  Sets the software controlled Addressing mode used by the RX portion of the
 790:Generated_Source\PSoC5/UART.c ****     *  UART.
 791:Generated_Source\PSoC5/UART.c ****     *
 792:Generated_Source\PSoC5/UART.c ****     * Parameters:
 793:Generated_Source\PSoC5/UART.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 794:Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 795:Generated_Source\PSoC5/UART.c ****     *                                               detection
 796:Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 797:Generated_Source\PSoC5/UART.c ****     *                                               address detection
 798:Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 799:Generated_Source\PSoC5/UART.c ****     *                                               detection
 800:Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 801:Generated_Source\PSoC5/UART.c ****     *                                               address detection
 802:Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_NONE - No address detection
 803:Generated_Source\PSoC5/UART.c ****     *
 804:Generated_Source\PSoC5/UART.c ****     * Return:
 805:Generated_Source\PSoC5/UART.c ****     *  None.
 806:Generated_Source\PSoC5/UART.c ****     *
 807:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 808:Generated_Source\PSoC5/UART.c ****     *  UART_rxAddressMode - the parameter stored in this variable for
 809:Generated_Source\PSoC5/UART.c ****     *   the farther usage in RX ISR.
 810:Generated_Source\PSoC5/UART.c ****     *  UART_rxAddressDetected - set to initial state (0).
 811:Generated_Source\PSoC5/UART.c ****     *
 812:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 813:Generated_Source\PSoC5/UART.c ****     void UART_SetRxAddressMode(uint8 addressMode)
 814:Generated_Source\PSoC5/UART.c ****                                                         
 815:Generated_Source\PSoC5/UART.c ****     {
 816:Generated_Source\PSoC5/UART.c ****         #if(UART_RXHW_ADDRESS_ENABLED)
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 20


 817:Generated_Source\PSoC5/UART.c ****             #if(UART_CONTROL_REG_REMOVED)
 818:Generated_Source\PSoC5/UART.c ****                 if(0u != addressMode)
 819:Generated_Source\PSoC5/UART.c ****                 {
 820:Generated_Source\PSoC5/UART.c ****                     /* Suppress compiler warning */
 821:Generated_Source\PSoC5/UART.c ****                 }
 822:Generated_Source\PSoC5/UART.c ****             #else /* UART_CONTROL_REG_REMOVED */
 823:Generated_Source\PSoC5/UART.c ****                 uint8 tmpCtrl;
 824:Generated_Source\PSoC5/UART.c ****                 tmpCtrl = UART_CONTROL_REG & (uint8)~UART_CTRL_RXADDR_MODE_MASK;
 825:Generated_Source\PSoC5/UART.c ****                 tmpCtrl |= (uint8)(addressMode << UART_CTRL_RXADDR_MODE0_SHIFT);
 826:Generated_Source\PSoC5/UART.c ****                 UART_CONTROL_REG = tmpCtrl;
 827:Generated_Source\PSoC5/UART.c **** 
 828:Generated_Source\PSoC5/UART.c ****                 #if(UART_RX_INTERRUPT_ENABLED && \
 829:Generated_Source\PSoC5/UART.c ****                    (UART_RXBUFFERSIZE > UART_FIFO_LENGTH) )
 830:Generated_Source\PSoC5/UART.c ****                     UART_rxAddressMode = addressMode;
 831:Generated_Source\PSoC5/UART.c ****                     UART_rxAddressDetected = 0u;
 832:Generated_Source\PSoC5/UART.c ****                 #endif /* End UART_RXBUFFERSIZE > UART_FIFO_LENGTH*/
 833:Generated_Source\PSoC5/UART.c ****             #endif /* End UART_CONTROL_REG_REMOVED */
 834:Generated_Source\PSoC5/UART.c ****         #else /* UART_RXHW_ADDRESS_ENABLED */
 835:Generated_Source\PSoC5/UART.c ****             if(0u != addressMode)
 836:Generated_Source\PSoC5/UART.c ****             {
 837:Generated_Source\PSoC5/UART.c ****                 /* Suppress compiler warning */
 838:Generated_Source\PSoC5/UART.c ****             }
 839:Generated_Source\PSoC5/UART.c ****         #endif /* End UART_RXHW_ADDRESS_ENABLED */
 840:Generated_Source\PSoC5/UART.c ****     }
 841:Generated_Source\PSoC5/UART.c **** 
 842:Generated_Source\PSoC5/UART.c **** 
 843:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 844:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetRxAddress1
 845:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 846:Generated_Source\PSoC5/UART.c ****     *
 847:Generated_Source\PSoC5/UART.c ****     * Summary:
 848:Generated_Source\PSoC5/UART.c ****     *  Sets the first of two hardware-detectable receiver addresses.
 849:Generated_Source\PSoC5/UART.c ****     *
 850:Generated_Source\PSoC5/UART.c ****     * Parameters:
 851:Generated_Source\PSoC5/UART.c ****     *  address: Address #1 for hardware address detection.
 852:Generated_Source\PSoC5/UART.c ****     *
 853:Generated_Source\PSoC5/UART.c ****     * Return:
 854:Generated_Source\PSoC5/UART.c ****     *  None.
 855:Generated_Source\PSoC5/UART.c ****     *
 856:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 857:Generated_Source\PSoC5/UART.c ****     void UART_SetRxAddress1(uint8 address) 
 858:Generated_Source\PSoC5/UART.c ****     {
 859:Generated_Source\PSoC5/UART.c ****         UART_RXADDRESS1_REG = address;
 860:Generated_Source\PSoC5/UART.c ****     }
 861:Generated_Source\PSoC5/UART.c **** 
 862:Generated_Source\PSoC5/UART.c **** 
 863:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 864:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetRxAddress2
 865:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 866:Generated_Source\PSoC5/UART.c ****     *
 867:Generated_Source\PSoC5/UART.c ****     * Summary:
 868:Generated_Source\PSoC5/UART.c ****     *  Sets the second of two hardware-detectable receiver addresses.
 869:Generated_Source\PSoC5/UART.c ****     *
 870:Generated_Source\PSoC5/UART.c ****     * Parameters:
 871:Generated_Source\PSoC5/UART.c ****     *  address: Address #2 for hardware address detection.
 872:Generated_Source\PSoC5/UART.c ****     *
 873:Generated_Source\PSoC5/UART.c ****     * Return:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 21


 874:Generated_Source\PSoC5/UART.c ****     *  None.
 875:Generated_Source\PSoC5/UART.c ****     *
 876:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 877:Generated_Source\PSoC5/UART.c ****     void UART_SetRxAddress2(uint8 address) 
 878:Generated_Source\PSoC5/UART.c ****     {
 879:Generated_Source\PSoC5/UART.c ****         UART_RXADDRESS2_REG = address;
 880:Generated_Source\PSoC5/UART.c ****     }
 881:Generated_Source\PSoC5/UART.c **** 
 882:Generated_Source\PSoC5/UART.c **** #endif  /* UART_RX_ENABLED || UART_HD_ENABLED*/
 883:Generated_Source\PSoC5/UART.c **** 
 884:Generated_Source\PSoC5/UART.c **** 
 885:Generated_Source\PSoC5/UART.c **** #if( (UART_TX_ENABLED) || (UART_HD_ENABLED) )
 886:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 887:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetTxInterruptMode
 888:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 889:Generated_Source\PSoC5/UART.c ****     *
 890:Generated_Source\PSoC5/UART.c ****     * Summary:
 891:Generated_Source\PSoC5/UART.c ****     *  Configures the TX interrupt sources to be enabled, but does not enable the
 892:Generated_Source\PSoC5/UART.c ****     *  interrupt.
 893:Generated_Source\PSoC5/UART.c ****     *
 894:Generated_Source\PSoC5/UART.c ****     * Parameters:
 895:Generated_Source\PSoC5/UART.c ****     *  intSrc: Bit field containing the TX interrupt sources to enable
 896:Generated_Source\PSoC5/UART.c ****     *   UART_TX_STS_COMPLETE        Interrupt on TX byte complete
 897:Generated_Source\PSoC5/UART.c ****     *   UART_TX_STS_FIFO_EMPTY      Interrupt when TX FIFO is empty
 898:Generated_Source\PSoC5/UART.c ****     *   UART_TX_STS_FIFO_FULL       Interrupt when TX FIFO is full
 899:Generated_Source\PSoC5/UART.c ****     *   UART_TX_STS_FIFO_NOT_FULL   Interrupt when TX FIFO is not full
 900:Generated_Source\PSoC5/UART.c ****     *
 901:Generated_Source\PSoC5/UART.c ****     * Return:
 902:Generated_Source\PSoC5/UART.c ****     *  None.
 903:Generated_Source\PSoC5/UART.c ****     *
 904:Generated_Source\PSoC5/UART.c ****     * Theory:
 905:Generated_Source\PSoC5/UART.c ****     *  Enables the output of specific status bits to the interrupt controller
 906:Generated_Source\PSoC5/UART.c ****     *
 907:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 908:Generated_Source\PSoC5/UART.c ****     void UART_SetTxInterruptMode(uint8 intSrc) 
 909:Generated_Source\PSoC5/UART.c ****     {
 258              		.loc 1 909 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 263              	.LVL14:
 910:Generated_Source\PSoC5/UART.c ****         UART_TXSTATUS_MASK_REG = intSrc;
 264              		.loc 1 910 0
 265 0000 014B     		ldr	r3, .L18
 266 0002 1870     		strb	r0, [r3]
 267 0004 7047     		bx	lr
 268              	.L19:
 269 0006 00BF     		.align	2
 270              	.L18:
 271 0008 85650040 		.word	1073767813
 272              		.cfi_endproc
 273              	.LFE6:
 274              		.size	UART_SetTxInterruptMode, .-UART_SetTxInterruptMode
 275              		.section	.text.UART_WriteTxData,"ax",%progbits
 276              		.align	1
 277              		.global	UART_WriteTxData
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 22


 278              		.thumb
 279              		.thumb_func
 280              		.type	UART_WriteTxData, %function
 281              	UART_WriteTxData:
 282              	.LFB7:
 911:Generated_Source\PSoC5/UART.c ****     }
 912:Generated_Source\PSoC5/UART.c **** 
 913:Generated_Source\PSoC5/UART.c **** 
 914:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 915:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_WriteTxData
 916:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 917:Generated_Source\PSoC5/UART.c ****     *
 918:Generated_Source\PSoC5/UART.c ****     * Summary:
 919:Generated_Source\PSoC5/UART.c ****     *  Places a byte of data into the transmit buffer to be sent when the bus is
 920:Generated_Source\PSoC5/UART.c ****     *  available without checking the TX status register. You must check status
 921:Generated_Source\PSoC5/UART.c ****     *  separately.
 922:Generated_Source\PSoC5/UART.c ****     *
 923:Generated_Source\PSoC5/UART.c ****     * Parameters:
 924:Generated_Source\PSoC5/UART.c ****     *  txDataByte: data byte
 925:Generated_Source\PSoC5/UART.c ****     *
 926:Generated_Source\PSoC5/UART.c ****     * Return:
 927:Generated_Source\PSoC5/UART.c ****     * None.
 928:Generated_Source\PSoC5/UART.c ****     *
 929:Generated_Source\PSoC5/UART.c ****     * Global Variables:
 930:Generated_Source\PSoC5/UART.c ****     *  UART_txBuffer - RAM buffer pointer for save data for transmission
 931:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferWrite - cyclic index for write to txBuffer,
 932:Generated_Source\PSoC5/UART.c ****     *    incremented after each byte saved to buffer.
 933:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferRead - cyclic index for read from txBuffer,
 934:Generated_Source\PSoC5/UART.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 935:Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
 936:Generated_Source\PSoC5/UART.c ****     *    initialized.
 937:Generated_Source\PSoC5/UART.c ****     *
 938:Generated_Source\PSoC5/UART.c ****     * Reentrant:
 939:Generated_Source\PSoC5/UART.c ****     *  No.
 940:Generated_Source\PSoC5/UART.c ****     *
 941:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 942:Generated_Source\PSoC5/UART.c ****     void UART_WriteTxData(uint8 txDataByte) 
 943:Generated_Source\PSoC5/UART.c ****     {
 283              		.loc 1 943 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              	.LVL15:
 288 0000 10B5     		push	{r4, lr}
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 4, -8
 291              		.cfi_offset 14, -4
 944:Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function*/
 945:Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 292              		.loc 1 945 0
 293 0002 104B     		ldr	r3, .L28
 294 0004 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 295 0006 1A46     		mov	r2, r3
 296 0008 D9B1     		cbz	r1, .L20
 946:Generated_Source\PSoC5/UART.c ****         {
 947:Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 948:Generated_Source\PSoC5/UART.c **** 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 23


 949:Generated_Source\PSoC5/UART.c ****             /* Protect variables that could change on interrupt. */
 950:Generated_Source\PSoC5/UART.c ****             UART_DisableTxInt();
 297              		.loc 1 950 0
 298 000a 0F49     		ldr	r1, .L28+4
 299 000c 4024     		movs	r4, #64
 300 000e 0C60     		str	r4, [r1]
 951:Generated_Source\PSoC5/UART.c **** 
 952:Generated_Source\PSoC5/UART.c ****             if( (UART_txBufferRead == UART_txBufferWrite) &&
 301              		.loc 1 952 0
 302 0010 5988     		ldrh	r1, [r3, #2]
 303 0012 9B88     		ldrh	r3, [r3, #4]
 304 0014 89B2     		uxth	r1, r1
 305 0016 9942     		cmp	r1, r3
 306 0018 06D1     		bne	.L22
 953:Generated_Source\PSoC5/UART.c ****                 ((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) == 0u) )
 307              		.loc 1 953 0 discriminator 1
 308 001a 0C49     		ldr	r1, .L28+8
 309 001c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 952:Generated_Source\PSoC5/UART.c ****                 ((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) == 0u) )
 310              		.loc 1 952 0 discriminator 1
 311 001e 4907     		lsls	r1, r1, #29
 312 0020 02D4     		bmi	.L22
 954:Generated_Source\PSoC5/UART.c ****             {
 955:Generated_Source\PSoC5/UART.c ****                 /* Add directly to the FIFO. */
 956:Generated_Source\PSoC5/UART.c ****                 UART_TXDATA_REG = txDataByte;
 313              		.loc 1 956 0
 314 0022 0B4B     		ldr	r3, .L28+12
 315 0024 1870     		strb	r0, [r3]
 316 0026 09E0     		b	.L23
 317              	.L22:
 957:Generated_Source\PSoC5/UART.c ****             }
 958:Generated_Source\PSoC5/UART.c ****             else
 959:Generated_Source\PSoC5/UART.c ****             {
 960:Generated_Source\PSoC5/UART.c ****                 if(UART_txBufferWrite >= UART_TX_BUFFER_SIZE)
 318              		.loc 1 960 0
 319 0028 B3F5805F 		cmp	r3, #4096
 961:Generated_Source\PSoC5/UART.c ****                 {
 962:Generated_Source\PSoC5/UART.c ****                     UART_txBufferWrite = 0u;
 320              		.loc 1 962 0
 321 002c 24BF     		itt	cs
 322 002e 0023     		movcs	r3, #0
 323 0030 9380     		strhcs	r3, [r2, #4]	@ movhi
 963:Generated_Source\PSoC5/UART.c ****                 }
 964:Generated_Source\PSoC5/UART.c **** 
 965:Generated_Source\PSoC5/UART.c ****                 UART_txBuffer[UART_txBufferWrite] = txDataByte;
 324              		.loc 1 965 0
 325 0032 9388     		ldrh	r3, [r2, #4]
 326 0034 0749     		ldr	r1, .L28+16
 327 0036 C854     		strb	r0, [r1, r3]
 966:Generated_Source\PSoC5/UART.c **** 
 967:Generated_Source\PSoC5/UART.c ****                 /* Add to the software buffer. */
 968:Generated_Source\PSoC5/UART.c ****                 UART_txBufferWrite++;
 328              		.loc 1 968 0
 329 0038 0133     		adds	r3, r3, #1
 330 003a 9380     		strh	r3, [r2, #4]	@ movhi
 331              	.L23:
 969:Generated_Source\PSoC5/UART.c ****             }
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 24


 970:Generated_Source\PSoC5/UART.c **** 
 971:Generated_Source\PSoC5/UART.c ****             UART_EnableTxInt();
 332              		.loc 1 971 0
 333 003c 064B     		ldr	r3, .L28+20
 334 003e 4022     		movs	r2, #64
 335 0040 1A60     		str	r2, [r3]
 336              	.L20:
 337 0042 10BD     		pop	{r4, pc}
 338              	.L29:
 339              		.align	2
 340              	.L28:
 341 0044 00000000 		.word	.LANCHOR0
 342 0048 80E100E0 		.word	-536813184
 343 004c 65650040 		.word	1073767781
 344 0050 45650040 		.word	1073767749
 345 0054 00000000 		.word	UART_txBuffer
 346 0058 00E100E0 		.word	-536813312
 347              		.cfi_endproc
 348              	.LFE7:
 349              		.size	UART_WriteTxData, .-UART_WriteTxData
 350              		.section	.text.UART_ReadTxStatus,"ax",%progbits
 351              		.align	1
 352              		.global	UART_ReadTxStatus
 353              		.thumb
 354              		.thumb_func
 355              		.type	UART_ReadTxStatus, %function
 356              	UART_ReadTxStatus:
 357              	.LFB8:
 972:Generated_Source\PSoC5/UART.c **** 
 973:Generated_Source\PSoC5/UART.c ****         #else
 974:Generated_Source\PSoC5/UART.c **** 
 975:Generated_Source\PSoC5/UART.c ****             /* Add directly to the FIFO. */
 976:Generated_Source\PSoC5/UART.c ****             UART_TXDATA_REG = txDataByte;
 977:Generated_Source\PSoC5/UART.c **** 
 978:Generated_Source\PSoC5/UART.c ****         #endif /*(UART_TX_INTERRUPT_ENABLED) */
 979:Generated_Source\PSoC5/UART.c ****         }
 980:Generated_Source\PSoC5/UART.c ****     }
 981:Generated_Source\PSoC5/UART.c **** 
 982:Generated_Source\PSoC5/UART.c **** 
 983:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 984:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ReadTxStatus
 985:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 986:Generated_Source\PSoC5/UART.c ****     *
 987:Generated_Source\PSoC5/UART.c ****     * Summary:
 988:Generated_Source\PSoC5/UART.c ****     *  Reads the status register for the TX portion of the UART.
 989:Generated_Source\PSoC5/UART.c ****     *
 990:Generated_Source\PSoC5/UART.c ****     * Parameters:
 991:Generated_Source\PSoC5/UART.c ****     *  None.
 992:Generated_Source\PSoC5/UART.c ****     *
 993:Generated_Source\PSoC5/UART.c ****     * Return:
 994:Generated_Source\PSoC5/UART.c ****     *  Contents of the status register
 995:Generated_Source\PSoC5/UART.c ****     *
 996:Generated_Source\PSoC5/UART.c ****     * Theory:
 997:Generated_Source\PSoC5/UART.c ****     *  This function reads the TX status register, which is cleared on read.
 998:Generated_Source\PSoC5/UART.c ****     *  It is up to the user to handle all bits in this return value accordingly,
 999:Generated_Source\PSoC5/UART.c ****     *  even if the bit was not enabled as an interrupt source the event happened
1000:Generated_Source\PSoC5/UART.c ****     *  and must be handled accordingly.
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 25


1001:Generated_Source\PSoC5/UART.c ****     *
1002:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1003:Generated_Source\PSoC5/UART.c ****     uint8 UART_ReadTxStatus(void) 
1004:Generated_Source\PSoC5/UART.c ****     {
 358              		.loc 1 1004 0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 0
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 362              		@ link register save eliminated.
1005:Generated_Source\PSoC5/UART.c ****         return(UART_TXSTATUS_REG);
 363              		.loc 1 1005 0
 364 0000 014B     		ldr	r3, .L31
 365 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
1006:Generated_Source\PSoC5/UART.c ****     }
 366              		.loc 1 1006 0
 367 0004 7047     		bx	lr
 368              	.L32:
 369 0006 00BF     		.align	2
 370              	.L31:
 371 0008 65650040 		.word	1073767781
 372              		.cfi_endproc
 373              	.LFE8:
 374              		.size	UART_ReadTxStatus, .-UART_ReadTxStatus
 375              		.section	.text.UART_PutChar,"ax",%progbits
 376              		.align	1
 377              		.global	UART_PutChar
 378              		.thumb
 379              		.thumb_func
 380              		.type	UART_PutChar, %function
 381              	UART_PutChar:
 382              	.LFB9:
1007:Generated_Source\PSoC5/UART.c **** 
1008:Generated_Source\PSoC5/UART.c **** 
1009:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1010:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_PutChar
1011:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1012:Generated_Source\PSoC5/UART.c ****     *
1013:Generated_Source\PSoC5/UART.c ****     * Summary:
1014:Generated_Source\PSoC5/UART.c ****     *  Puts a byte of data into the transmit buffer to be sent when the bus is
1015:Generated_Source\PSoC5/UART.c ****     *  available. This is a blocking API that waits until the TX buffer has room to
1016:Generated_Source\PSoC5/UART.c ****     *  hold the data.
1017:Generated_Source\PSoC5/UART.c ****     *
1018:Generated_Source\PSoC5/UART.c ****     * Parameters:
1019:Generated_Source\PSoC5/UART.c ****     *  txDataByte: Byte containing the data to transmit
1020:Generated_Source\PSoC5/UART.c ****     *
1021:Generated_Source\PSoC5/UART.c ****     * Return:
1022:Generated_Source\PSoC5/UART.c ****     *  None.
1023:Generated_Source\PSoC5/UART.c ****     *
1024:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1025:Generated_Source\PSoC5/UART.c ****     *  UART_txBuffer - RAM buffer pointer for save data for transmission
1026:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferWrite - cyclic index for write to txBuffer,
1027:Generated_Source\PSoC5/UART.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1028:Generated_Source\PSoC5/UART.c ****     *     saved to buffer.
1029:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferRead - cyclic index for read from txBuffer,
1030:Generated_Source\PSoC5/UART.c ****     *     checked to identify free space in txBuffer.
1031:Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1032:Generated_Source\PSoC5/UART.c ****     *     initialized.
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 26


1033:Generated_Source\PSoC5/UART.c ****     *
1034:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1035:Generated_Source\PSoC5/UART.c ****     *  No.
1036:Generated_Source\PSoC5/UART.c ****     *
1037:Generated_Source\PSoC5/UART.c ****     * Theory:
1038:Generated_Source\PSoC5/UART.c ****     *  Allows the user to transmit any byte of data in a single transfer
1039:Generated_Source\PSoC5/UART.c ****     *
1040:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1041:Generated_Source\PSoC5/UART.c ****     void UART_PutChar(uint8 txDataByte) 
1042:Generated_Source\PSoC5/UART.c ****     {
 383              		.loc 1 1042 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              	.LVL16:
 388 0000 30B5     		push	{r4, r5, lr}
 389              		.cfi_def_cfa_offset 12
 390              		.cfi_offset 4, -12
 391              		.cfi_offset 5, -8
 392              		.cfi_offset 14, -4
1043:Generated_Source\PSoC5/UART.c ****     #if (UART_TX_INTERRUPT_ENABLED)
1044:Generated_Source\PSoC5/UART.c ****         /* The temporary output pointer is used since it takes two instructions
1045:Generated_Source\PSoC5/UART.c ****         *  to increment with a wrap, and we can't risk doing that with the real
1046:Generated_Source\PSoC5/UART.c ****         *  pointer and getting an interrupt in between instructions.
1047:Generated_Source\PSoC5/UART.c ****         */
1048:Generated_Source\PSoC5/UART.c ****         uint16 locTxBufferWrite;
1049:Generated_Source\PSoC5/UART.c ****         uint16 locTxBufferRead;
1050:Generated_Source\PSoC5/UART.c **** 
1051:Generated_Source\PSoC5/UART.c ****         do
1052:Generated_Source\PSoC5/UART.c ****         { /* Block if software buffer is full, so we don't overwrite. */
1053:Generated_Source\PSoC5/UART.c **** 
1054:Generated_Source\PSoC5/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1055:Generated_Source\PSoC5/UART.c ****             /* Disable TX interrupt to protect variables from modification */
1056:Generated_Source\PSoC5/UART.c ****             UART_DisableTxInt();
1057:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1058:Generated_Source\PSoC5/UART.c **** 
1059:Generated_Source\PSoC5/UART.c ****             locTxBufferWrite = UART_txBufferWrite;
1060:Generated_Source\PSoC5/UART.c ****             locTxBufferRead  = UART_txBufferRead;
1061:Generated_Source\PSoC5/UART.c **** 
1062:Generated_Source\PSoC5/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1063:Generated_Source\PSoC5/UART.c ****             /* Enable interrupt to continue transmission */
1064:Generated_Source\PSoC5/UART.c ****             UART_EnableTxInt();
1065:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1066:Generated_Source\PSoC5/UART.c ****         }
1067:Generated_Source\PSoC5/UART.c ****         while( (locTxBufferWrite < locTxBufferRead) ? (locTxBufferWrite == (locTxBufferRead - 1u)) 
 393              		.loc 1 1067 0
 394 0002 40F6FF75 		movw	r5, #4095
1059:Generated_Source\PSoC5/UART.c ****             locTxBufferRead  = UART_txBufferRead;
 395              		.loc 1 1059 0
 396 0006 144C     		ldr	r4, .L45
 397 0008 A388     		ldrh	r3, [r4, #4]
 398              	.L36:
 399              	.LVL17:
1060:Generated_Source\PSoC5/UART.c **** 
 400              		.loc 1 1060 0
 401 000a 6288     		ldrh	r2, [r4, #2]
 402 000c 92B2     		uxth	r2, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 27


 403              	.LVL18:
 404              		.loc 1 1067 0
 405 000e 9342     		cmp	r3, r2
 406 0010 02D2     		bcs	.L34
 407              		.loc 1 1067 0 is_stmt 0 discriminator 1
 408 0012 511E     		subs	r1, r2, #1
 409 0014 9942     		cmp	r1, r3
 410 0016 01E0     		b	.L44
 411              	.L34:
 412              		.loc 1 1067 0 discriminator 2
 413 0018 991A     		subs	r1, r3, r2
 414 001a A942     		cmp	r1, r5
 415              	.L44:
 416 001c 14BF     		ite	ne
 417 001e 0021     		movne	r1, #0
 418 0020 0121     		moveq	r1, #1
1068:Generated_Source\PSoC5/UART.c ****                                 ((locTxBufferWrite - locTxBufferRead) ==
1069:Generated_Source\PSoC5/UART.c ****                                 (uint16)(UART_TX_BUFFER_SIZE - 1u)) );
 419              		.loc 1 1069 0 is_stmt 1 discriminator 2
 420 0022 0029     		cmp	r1, #0
 421 0024 F1D1     		bne	.L36
1070:Generated_Source\PSoC5/UART.c **** 
1071:Generated_Source\PSoC5/UART.c ****         if( (locTxBufferRead == locTxBufferWrite) &&
 422              		.loc 1 1071 0
 423 0026 9342     		cmp	r3, r2
 424 0028 0C4A     		ldr	r2, .L45+4
 425              	.LVL19:
 426 002a 05D1     		bne	.L37
1072:Generated_Source\PSoC5/UART.c ****             ((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) == 0u) )
 427              		.loc 1 1072 0 discriminator 1
 428 002c 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
1071:Generated_Source\PSoC5/UART.c ****             ((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) == 0u) )
 429              		.loc 1 1071 0 discriminator 1
 430 002e 4907     		lsls	r1, r1, #29
 431 0030 02D4     		bmi	.L37
1073:Generated_Source\PSoC5/UART.c ****         {
1074:Generated_Source\PSoC5/UART.c ****             /* Add directly to the FIFO */
1075:Generated_Source\PSoC5/UART.c ****             UART_TXDATA_REG = txDataByte;
 432              		.loc 1 1075 0
 433 0032 0B4B     		ldr	r3, .L45+8
 434 0034 1870     		strb	r0, [r3]
 435              	.LVL20:
 436 0036 30BD     		pop	{r4, r5, pc}
 437              	.LVL21:
 438              	.L37:
1076:Generated_Source\PSoC5/UART.c ****         }
1077:Generated_Source\PSoC5/UART.c ****         else
1078:Generated_Source\PSoC5/UART.c ****         {
1079:Generated_Source\PSoC5/UART.c ****             if(locTxBufferWrite >= UART_TX_BUFFER_SIZE)
1080:Generated_Source\PSoC5/UART.c ****             {
1081:Generated_Source\PSoC5/UART.c ****                 locTxBufferWrite = 0u;
 439              		.loc 1 1081 0
 440 0038 B3F5805F 		cmp	r3, #4096
1082:Generated_Source\PSoC5/UART.c ****             }
1083:Generated_Source\PSoC5/UART.c ****             /* Add to the software buffer. */
1084:Generated_Source\PSoC5/UART.c ****             UART_txBuffer[locTxBufferWrite] = txDataByte;
 441              		.loc 1 1084 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 28


 442 003c 0949     		ldr	r1, .L45+12
1081:Generated_Source\PSoC5/UART.c ****             }
 443              		.loc 1 1081 0
 444 003e 28BF     		it	cs
 445 0040 0023     		movcs	r3, #0
 446              	.LVL22:
 447              		.loc 1 1084 0
 448 0042 C854     		strb	r0, [r1, r3]
 449              	.LVL23:
1085:Generated_Source\PSoC5/UART.c ****             locTxBufferWrite++;
1086:Generated_Source\PSoC5/UART.c **** 
1087:Generated_Source\PSoC5/UART.c ****             /* Finally, update the real output pointer */
1088:Generated_Source\PSoC5/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1089:Generated_Source\PSoC5/UART.c ****             UART_DisableTxInt();
1090:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1091:Generated_Source\PSoC5/UART.c **** 
1092:Generated_Source\PSoC5/UART.c ****             UART_txBufferWrite = locTxBufferWrite;
 450              		.loc 1 1092 0
 451 0044 0133     		adds	r3, r3, #1
 452              	.LVL24:
 453 0046 A380     		strh	r3, [r4, #4]	@ movhi
1093:Generated_Source\PSoC5/UART.c **** 
1094:Generated_Source\PSoC5/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1095:Generated_Source\PSoC5/UART.c ****             UART_EnableTxInt();
1096:Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1097:Generated_Source\PSoC5/UART.c **** 
1098:Generated_Source\PSoC5/UART.c ****             if(0u != (UART_TXSTATUS_REG & UART_TX_STS_FIFO_EMPTY))
 454              		.loc 1 1098 0
 455 0048 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 456              	.LVL25:
 457 004a 9B07     		lsls	r3, r3, #30
 458              	.LVL26:
1099:Generated_Source\PSoC5/UART.c ****             {
1100:Generated_Source\PSoC5/UART.c ****                 /* Trigger TX interrupt to send software buffer */
1101:Generated_Source\PSoC5/UART.c ****                 UART_SetPendingTxInt();
 459              		.loc 1 1101 0
 460 004c 42BF     		ittt	mi
 461 004e 064B     		ldrmi	r3, .L45+16
 462 0050 4022     		movmi	r2, #64
 463 0052 1A60     		strmi	r2, [r3]
 464 0054 30BD     		pop	{r4, r5, pc}
 465              	.L46:
 466 0056 00BF     		.align	2
 467              	.L45:
 468 0058 00000000 		.word	.LANCHOR0
 469 005c 65650040 		.word	1073767781
 470 0060 45650040 		.word	1073767749
 471 0064 00000000 		.word	UART_txBuffer
 472 0068 00E200E0 		.word	-536813056
 473              		.cfi_endproc
 474              	.LFE9:
 475              		.size	UART_PutChar, .-UART_PutChar
 476              		.section	.text.UART_PutString,"ax",%progbits
 477              		.align	1
 478              		.global	UART_PutString
 479              		.thumb
 480              		.thumb_func
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 29


 481              		.type	UART_PutString, %function
 482              	UART_PutString:
 483              	.LFB10:
1102:Generated_Source\PSoC5/UART.c ****             }
1103:Generated_Source\PSoC5/UART.c ****         }
1104:Generated_Source\PSoC5/UART.c **** 
1105:Generated_Source\PSoC5/UART.c ****     #else
1106:Generated_Source\PSoC5/UART.c **** 
1107:Generated_Source\PSoC5/UART.c ****         while((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) != 0u)
1108:Generated_Source\PSoC5/UART.c ****         {
1109:Generated_Source\PSoC5/UART.c ****             /* Wait for room in the FIFO */
1110:Generated_Source\PSoC5/UART.c ****         }
1111:Generated_Source\PSoC5/UART.c **** 
1112:Generated_Source\PSoC5/UART.c ****         /* Add directly to the FIFO */
1113:Generated_Source\PSoC5/UART.c ****         UART_TXDATA_REG = txDataByte;
1114:Generated_Source\PSoC5/UART.c **** 
1115:Generated_Source\PSoC5/UART.c ****     #endif /* UART_TX_INTERRUPT_ENABLED */
1116:Generated_Source\PSoC5/UART.c ****     }
1117:Generated_Source\PSoC5/UART.c **** 
1118:Generated_Source\PSoC5/UART.c **** 
1119:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1120:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_PutString
1121:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1122:Generated_Source\PSoC5/UART.c ****     *
1123:Generated_Source\PSoC5/UART.c ****     * Summary:
1124:Generated_Source\PSoC5/UART.c ****     *  Sends a NULL terminated string to the TX buffer for transmission.
1125:Generated_Source\PSoC5/UART.c ****     *
1126:Generated_Source\PSoC5/UART.c ****     * Parameters:
1127:Generated_Source\PSoC5/UART.c ****     *  string[]: Pointer to the null terminated string array residing in RAM or ROM
1128:Generated_Source\PSoC5/UART.c ****     *
1129:Generated_Source\PSoC5/UART.c ****     * Return:
1130:Generated_Source\PSoC5/UART.c ****     *  None.
1131:Generated_Source\PSoC5/UART.c ****     *
1132:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1133:Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1134:Generated_Source\PSoC5/UART.c ****     *     initialized.
1135:Generated_Source\PSoC5/UART.c ****     *
1136:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1137:Generated_Source\PSoC5/UART.c ****     *  No.
1138:Generated_Source\PSoC5/UART.c ****     *
1139:Generated_Source\PSoC5/UART.c ****     * Theory:
1140:Generated_Source\PSoC5/UART.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1141:Generated_Source\PSoC5/UART.c ****     *  function blocks until the last character of the string is loaded into the
1142:Generated_Source\PSoC5/UART.c ****     *  TX buffer.
1143:Generated_Source\PSoC5/UART.c ****     *
1144:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1145:Generated_Source\PSoC5/UART.c ****     void UART_PutString(const char8 string[]) 
1146:Generated_Source\PSoC5/UART.c ****     {
 484              		.loc 1 1146 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488              	.LVL27:
 489 0000 38B5     		push	{r3, r4, r5, lr}
 490              		.cfi_def_cfa_offset 16
 491              		.cfi_offset 3, -16
 492              		.cfi_offset 4, -12
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 30


 493              		.cfi_offset 5, -8
 494              		.cfi_offset 14, -4
1147:Generated_Source\PSoC5/UART.c ****         uint16 bufIndex = 0u;
1148:Generated_Source\PSoC5/UART.c **** 
1149:Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function */
1150:Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 495              		.loc 1 1150 0
 496 0002 064B     		ldr	r3, .L54
1146:Generated_Source\PSoC5/UART.c ****         uint16 bufIndex = 0u;
 497              		.loc 1 1146 0
 498 0004 0546     		mov	r5, r0
 499              		.loc 1 1150 0
 500 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 501 0008 3BB1     		cbz	r3, .L47
 502 000a 0024     		movs	r4, #0
 503              	.LVL28:
 504              	.L49:
1151:Generated_Source\PSoC5/UART.c ****         {
1152:Generated_Source\PSoC5/UART.c ****             /* This is a blocking function, it will not exit until all data is sent */
1153:Generated_Source\PSoC5/UART.c ****             while(string[bufIndex] != (char8) 0)
 505              		.loc 1 1153 0
 506 000c A3B2     		uxth	r3, r4
 507              	.LVL29:
 508 000e E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 509 0010 0134     		adds	r4, r4, #1
 510 0012 10B1     		cbz	r0, .L47
1154:Generated_Source\PSoC5/UART.c ****             {
1155:Generated_Source\PSoC5/UART.c ****                 UART_PutChar((uint8)string[bufIndex]);
 511              		.loc 1 1155 0
 512 0014 FFF7FEFF 		bl	UART_PutChar
 513              	.LVL30:
 514 0018 F8E7     		b	.L49
 515              	.LVL31:
 516              	.L47:
 517 001a 38BD     		pop	{r3, r4, r5, pc}
 518              	.LVL32:
 519              	.L55:
 520              		.align	2
 521              	.L54:
 522 001c 00000000 		.word	.LANCHOR0
 523              		.cfi_endproc
 524              	.LFE10:
 525              		.size	UART_PutString, .-UART_PutString
 526              		.section	.text.UART_PutArray,"ax",%progbits
 527              		.align	1
 528              		.global	UART_PutArray
 529              		.thumb
 530              		.thumb_func
 531              		.type	UART_PutArray, %function
 532              	UART_PutArray:
 533              	.LFB11:
1156:Generated_Source\PSoC5/UART.c ****                 bufIndex++;
1157:Generated_Source\PSoC5/UART.c ****             }
1158:Generated_Source\PSoC5/UART.c ****         }
1159:Generated_Source\PSoC5/UART.c ****     }
1160:Generated_Source\PSoC5/UART.c **** 
1161:Generated_Source\PSoC5/UART.c **** 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 31


1162:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1163:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_PutArray
1164:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1165:Generated_Source\PSoC5/UART.c ****     *
1166:Generated_Source\PSoC5/UART.c ****     * Summary:
1167:Generated_Source\PSoC5/UART.c ****     *  Places N bytes of data from a memory array into the TX buffer for
1168:Generated_Source\PSoC5/UART.c ****     *  transmission.
1169:Generated_Source\PSoC5/UART.c ****     *
1170:Generated_Source\PSoC5/UART.c ****     * Parameters:
1171:Generated_Source\PSoC5/UART.c ****     *  string[]: Address of the memory array residing in RAM or ROM.
1172:Generated_Source\PSoC5/UART.c ****     *  byteCount: Number of bytes to be transmitted. The type depends on TX Buffer
1173:Generated_Source\PSoC5/UART.c ****     *             Size parameter.
1174:Generated_Source\PSoC5/UART.c ****     *
1175:Generated_Source\PSoC5/UART.c ****     * Return:
1176:Generated_Source\PSoC5/UART.c ****     *  None.
1177:Generated_Source\PSoC5/UART.c ****     *
1178:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1179:Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1180:Generated_Source\PSoC5/UART.c ****     *     initialized.
1181:Generated_Source\PSoC5/UART.c ****     *
1182:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1183:Generated_Source\PSoC5/UART.c ****     *  No.
1184:Generated_Source\PSoC5/UART.c ****     *
1185:Generated_Source\PSoC5/UART.c ****     * Theory:
1186:Generated_Source\PSoC5/UART.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1187:Generated_Source\PSoC5/UART.c ****     *  function blocks until the last character of the string is loaded into the
1188:Generated_Source\PSoC5/UART.c ****     *  TX buffer.
1189:Generated_Source\PSoC5/UART.c ****     *
1190:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1191:Generated_Source\PSoC5/UART.c ****     void UART_PutArray(const uint8 string[], uint16 byteCount)
1192:Generated_Source\PSoC5/UART.c ****                                                                     
1193:Generated_Source\PSoC5/UART.c ****     {
 534              		.loc 1 1193 0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 538              	.LVL33:
 539 0000 38B5     		push	{r3, r4, r5, lr}
 540              		.cfi_def_cfa_offset 16
 541              		.cfi_offset 3, -16
 542              		.cfi_offset 4, -12
 543              		.cfi_offset 5, -8
 544              		.cfi_offset 14, -4
1194:Generated_Source\PSoC5/UART.c ****         uint16 bufIndex = 0u;
1195:Generated_Source\PSoC5/UART.c **** 
1196:Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function */
1197:Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 545              		.loc 1 1197 0
 546 0002 074B     		ldr	r3, .L61
 547 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 548 0006 4BB1     		cbz	r3, .L56
 549 0008 0139     		subs	r1, r1, #1
 550              	.LVL34:
 551 000a 451E     		subs	r5, r0, #1
 552 000c 4418     		adds	r4, r0, r1
 553              	.LVL35:
 554              	.L58:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 32


1198:Generated_Source\PSoC5/UART.c ****         {
1199:Generated_Source\PSoC5/UART.c ****             while(bufIndex < byteCount)
 555              		.loc 1 1199 0
 556 000e A542     		cmp	r5, r4
 557 0010 04D0     		beq	.L56
1200:Generated_Source\PSoC5/UART.c ****             {
1201:Generated_Source\PSoC5/UART.c ****                 UART_PutChar(string[bufIndex]);
 558              		.loc 1 1201 0
 559 0012 15F8010F 		ldrb	r0, [r5, #1]!	@ zero_extendqisi2
 560              	.LVL36:
 561 0016 FFF7FEFF 		bl	UART_PutChar
 562              	.LVL37:
 563 001a F8E7     		b	.L58
 564              	.LVL38:
 565              	.L56:
 566 001c 38BD     		pop	{r3, r4, r5, pc}
 567              	.L62:
 568 001e 00BF     		.align	2
 569              	.L61:
 570 0020 00000000 		.word	.LANCHOR0
 571              		.cfi_endproc
 572              	.LFE11:
 573              		.size	UART_PutArray, .-UART_PutArray
 574              		.section	.text.UART_PutCRLF,"ax",%progbits
 575              		.align	1
 576              		.global	UART_PutCRLF
 577              		.thumb
 578              		.thumb_func
 579              		.type	UART_PutCRLF, %function
 580              	UART_PutCRLF:
 581              	.LFB12:
1202:Generated_Source\PSoC5/UART.c ****                 bufIndex++;
1203:Generated_Source\PSoC5/UART.c ****             }
1204:Generated_Source\PSoC5/UART.c ****         }
1205:Generated_Source\PSoC5/UART.c ****     }
1206:Generated_Source\PSoC5/UART.c **** 
1207:Generated_Source\PSoC5/UART.c **** 
1208:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1209:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_PutCRLF
1210:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1211:Generated_Source\PSoC5/UART.c ****     *
1212:Generated_Source\PSoC5/UART.c ****     * Summary:
1213:Generated_Source\PSoC5/UART.c ****     *  Writes a byte of data followed by a carriage return (0x0D) and line feed
1214:Generated_Source\PSoC5/UART.c ****     *  (0x0A) to the transmit buffer.
1215:Generated_Source\PSoC5/UART.c ****     *
1216:Generated_Source\PSoC5/UART.c ****     * Parameters:
1217:Generated_Source\PSoC5/UART.c ****     *  txDataByte: Data byte to transmit before the carriage return and line feed.
1218:Generated_Source\PSoC5/UART.c ****     *
1219:Generated_Source\PSoC5/UART.c ****     * Return:
1220:Generated_Source\PSoC5/UART.c ****     *  None.
1221:Generated_Source\PSoC5/UART.c ****     *
1222:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1223:Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1224:Generated_Source\PSoC5/UART.c ****     *     initialized.
1225:Generated_Source\PSoC5/UART.c ****     *
1226:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1227:Generated_Source\PSoC5/UART.c ****     *  No.
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 33


1228:Generated_Source\PSoC5/UART.c ****     *
1229:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1230:Generated_Source\PSoC5/UART.c ****     void UART_PutCRLF(uint8 txDataByte) 
1231:Generated_Source\PSoC5/UART.c ****     {
 582              		.loc 1 1231 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              	.LVL39:
 587 0000 08B5     		push	{r3, lr}
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 3, -8
 590              		.cfi_offset 14, -4
1232:Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function */
1233:Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 591              		.loc 1 1233 0
 592 0002 074B     		ldr	r3, .L65
 593 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 594 0006 4BB1     		cbz	r3, .L63
1234:Generated_Source\PSoC5/UART.c ****         {
1235:Generated_Source\PSoC5/UART.c ****             UART_PutChar(txDataByte);
 595              		.loc 1 1235 0
 596 0008 FFF7FEFF 		bl	UART_PutChar
 597              	.LVL40:
1236:Generated_Source\PSoC5/UART.c ****             UART_PutChar(0x0Du);
 598              		.loc 1 1236 0
 599 000c 0D20     		movs	r0, #13
 600 000e FFF7FEFF 		bl	UART_PutChar
 601              	.LVL41:
1237:Generated_Source\PSoC5/UART.c ****             UART_PutChar(0x0Au);
1238:Generated_Source\PSoC5/UART.c ****         }
1239:Generated_Source\PSoC5/UART.c ****     }
 602              		.loc 1 1239 0
 603 0012 BDE80840 		pop	{r3, lr}
 604              		.cfi_remember_state
 605              		.cfi_restore 14
 606              		.cfi_restore 3
 607              		.cfi_def_cfa_offset 0
1237:Generated_Source\PSoC5/UART.c ****             UART_PutChar(0x0Au);
 608              		.loc 1 1237 0
 609 0016 0A20     		movs	r0, #10
 610 0018 FFF7FEBF 		b	UART_PutChar
 611              	.LVL42:
 612              	.L63:
 613              		.cfi_restore_state
 614 001c 08BD     		pop	{r3, pc}
 615              	.L66:
 616 001e 00BF     		.align	2
 617              	.L65:
 618 0020 00000000 		.word	.LANCHOR0
 619              		.cfi_endproc
 620              	.LFE12:
 621              		.size	UART_PutCRLF, .-UART_PutCRLF
 622              		.section	.text.UART_GetTxBufferSize,"ax",%progbits
 623              		.align	1
 624              		.global	UART_GetTxBufferSize
 625              		.thumb
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 34


 626              		.thumb_func
 627              		.type	UART_GetTxBufferSize, %function
 628              	UART_GetTxBufferSize:
 629              	.LFB13:
1240:Generated_Source\PSoC5/UART.c **** 
1241:Generated_Source\PSoC5/UART.c **** 
1242:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1243:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_GetTxBufferSize
1244:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1245:Generated_Source\PSoC5/UART.c ****     *
1246:Generated_Source\PSoC5/UART.c ****     * Summary:
1247:Generated_Source\PSoC5/UART.c ****     *  Returns the number of bytes in the TX buffer which are waiting to be 
1248:Generated_Source\PSoC5/UART.c ****     *  transmitted.
1249:Generated_Source\PSoC5/UART.c ****     *  * TX software buffer is disabled (TX Buffer Size parameter is equal to 4): 
1250:Generated_Source\PSoC5/UART.c ****     *    returns 0 for empty TX FIFO, 1 for not full TX FIFO or 4 for full TX FIFO.
1251:Generated_Source\PSoC5/UART.c ****     *  * TX software buffer is enabled: returns the number of bytes in the TX 
1252:Generated_Source\PSoC5/UART.c ****     *    software buffer which are waiting to be transmitted. Bytes available in the
1253:Generated_Source\PSoC5/UART.c ****     *    TX FIFO do not count.
1254:Generated_Source\PSoC5/UART.c ****     *
1255:Generated_Source\PSoC5/UART.c ****     * Parameters:
1256:Generated_Source\PSoC5/UART.c ****     *  None.
1257:Generated_Source\PSoC5/UART.c ****     *
1258:Generated_Source\PSoC5/UART.c ****     * Return:
1259:Generated_Source\PSoC5/UART.c ****     *  Number of bytes used in the TX buffer. Return value type depends on the TX 
1260:Generated_Source\PSoC5/UART.c ****     *  Buffer Size parameter.
1261:Generated_Source\PSoC5/UART.c ****     *
1262:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1263:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferWrite - used to calculate left space.
1264:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferRead - used to calculate left space.
1265:Generated_Source\PSoC5/UART.c ****     *
1266:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1267:Generated_Source\PSoC5/UART.c ****     *  No.
1268:Generated_Source\PSoC5/UART.c ****     *
1269:Generated_Source\PSoC5/UART.c ****     * Theory:
1270:Generated_Source\PSoC5/UART.c ****     *  Allows the user to find out how full the TX Buffer is.
1271:Generated_Source\PSoC5/UART.c ****     *
1272:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1273:Generated_Source\PSoC5/UART.c ****     uint16 UART_GetTxBufferSize(void)
1274:Generated_Source\PSoC5/UART.c ****                                                             
1275:Generated_Source\PSoC5/UART.c ****     {
 630              		.loc 1 1275 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634              		@ link register save eliminated.
1276:Generated_Source\PSoC5/UART.c ****         uint16 size;
1277:Generated_Source\PSoC5/UART.c **** 
1278:Generated_Source\PSoC5/UART.c ****     #if (UART_TX_INTERRUPT_ENABLED)
1279:Generated_Source\PSoC5/UART.c **** 
1280:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt. */
1281:Generated_Source\PSoC5/UART.c ****         UART_DisableTxInt();
 635              		.loc 1 1281 0
 636 0000 0B4B     		ldr	r3, .L72
 637 0002 4022     		movs	r2, #64
 638 0004 1A60     		str	r2, [r3]
1282:Generated_Source\PSoC5/UART.c **** 
1283:Generated_Source\PSoC5/UART.c ****         if(UART_txBufferRead == UART_txBufferWrite)
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 35


 639              		.loc 1 1283 0
 640 0006 0B4A     		ldr	r2, .L72+4
 641 0008 5188     		ldrh	r1, [r2, #2]
 642 000a 9388     		ldrh	r3, [r2, #4]
 643 000c 89B2     		uxth	r1, r1
 644 000e 9942     		cmp	r1, r3
 645 0010 09D0     		beq	.L70
1284:Generated_Source\PSoC5/UART.c ****         {
1285:Generated_Source\PSoC5/UART.c ****             size = 0u;
1286:Generated_Source\PSoC5/UART.c ****         }
1287:Generated_Source\PSoC5/UART.c ****         else if(UART_txBufferRead < UART_txBufferWrite)
 646              		.loc 1 1287 0
 647 0012 5188     		ldrh	r1, [r2, #2]
1288:Generated_Source\PSoC5/UART.c ****         {
1289:Generated_Source\PSoC5/UART.c ****             size = (UART_txBufferWrite - UART_txBufferRead);
 648              		.loc 1 1289 0
 649 0014 5088     		ldrh	r0, [r2, #2]
1287:Generated_Source\PSoC5/UART.c ****         {
 650              		.loc 1 1287 0
 651 0016 89B2     		uxth	r1, r1
 652 0018 8B42     		cmp	r3, r1
1290:Generated_Source\PSoC5/UART.c ****         }
1291:Generated_Source\PSoC5/UART.c ****         else
1292:Generated_Source\PSoC5/UART.c ****         {
1293:Generated_Source\PSoC5/UART.c ****             size = (UART_TX_BUFFER_SIZE - UART_txBufferRead) +
 653              		.loc 1 1293 0
 654 001a 98BF     		it	ls
 655 001c 03F58053 		addls	r3, r3, #4096
 656 0020 181A     		subs	r0, r3, r0
 657 0022 80B2     		uxth	r0, r0
 658              	.LVL43:
 659 0024 00E0     		b	.L68
 660              	.LVL44:
 661              	.L70:
1285:Generated_Source\PSoC5/UART.c ****         }
 662              		.loc 1 1285 0
 663 0026 0020     		movs	r0, #0
 664              	.L68:
 665              	.LVL45:
1294:Generated_Source\PSoC5/UART.c ****                     UART_txBufferWrite;
1295:Generated_Source\PSoC5/UART.c ****         }
1296:Generated_Source\PSoC5/UART.c **** 
1297:Generated_Source\PSoC5/UART.c ****         UART_EnableTxInt();
 666              		.loc 1 1297 0
 667 0028 034B     		ldr	r3, .L72+8
 668 002a 4022     		movs	r2, #64
 669 002c 1A60     		str	r2, [r3]
1298:Generated_Source\PSoC5/UART.c **** 
1299:Generated_Source\PSoC5/UART.c ****     #else
1300:Generated_Source\PSoC5/UART.c **** 
1301:Generated_Source\PSoC5/UART.c ****         size = UART_TXSTATUS_REG;
1302:Generated_Source\PSoC5/UART.c **** 
1303:Generated_Source\PSoC5/UART.c ****         /* Is the fifo is full. */
1304:Generated_Source\PSoC5/UART.c ****         if((size & UART_TX_STS_FIFO_FULL) != 0u)
1305:Generated_Source\PSoC5/UART.c ****         {
1306:Generated_Source\PSoC5/UART.c ****             size = UART_FIFO_LENGTH;
1307:Generated_Source\PSoC5/UART.c ****         }
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 36


1308:Generated_Source\PSoC5/UART.c ****         else if((size & UART_TX_STS_FIFO_EMPTY) != 0u)
1309:Generated_Source\PSoC5/UART.c ****         {
1310:Generated_Source\PSoC5/UART.c ****             size = 0u;
1311:Generated_Source\PSoC5/UART.c ****         }
1312:Generated_Source\PSoC5/UART.c ****         else
1313:Generated_Source\PSoC5/UART.c ****         {
1314:Generated_Source\PSoC5/UART.c ****             /* We only know there is data in the fifo. */
1315:Generated_Source\PSoC5/UART.c ****             size = 1u;
1316:Generated_Source\PSoC5/UART.c ****         }
1317:Generated_Source\PSoC5/UART.c **** 
1318:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_TX_INTERRUPT_ENABLED) */
1319:Generated_Source\PSoC5/UART.c **** 
1320:Generated_Source\PSoC5/UART.c ****     return(size);
1321:Generated_Source\PSoC5/UART.c ****     }
 670              		.loc 1 1321 0
 671 002e 7047     		bx	lr
 672              	.L73:
 673              		.align	2
 674              	.L72:
 675 0030 80E100E0 		.word	-536813184
 676 0034 00000000 		.word	.LANCHOR0
 677 0038 00E100E0 		.word	-536813312
 678              		.cfi_endproc
 679              	.LFE13:
 680              		.size	UART_GetTxBufferSize, .-UART_GetTxBufferSize
 681              		.section	.text.UART_ClearTxBuffer,"ax",%progbits
 682              		.align	1
 683              		.global	UART_ClearTxBuffer
 684              		.thumb
 685              		.thumb_func
 686              		.type	UART_ClearTxBuffer, %function
 687              	UART_ClearTxBuffer:
 688              	.LFB14:
1322:Generated_Source\PSoC5/UART.c **** 
1323:Generated_Source\PSoC5/UART.c **** 
1324:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1325:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ClearTxBuffer
1326:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1327:Generated_Source\PSoC5/UART.c ****     *
1328:Generated_Source\PSoC5/UART.c ****     * Summary:
1329:Generated_Source\PSoC5/UART.c ****     *  Clears all data from the TX buffer and hardware TX FIFO.
1330:Generated_Source\PSoC5/UART.c ****     *
1331:Generated_Source\PSoC5/UART.c ****     * Parameters:
1332:Generated_Source\PSoC5/UART.c ****     *  None.
1333:Generated_Source\PSoC5/UART.c ****     *
1334:Generated_Source\PSoC5/UART.c ****     * Return:
1335:Generated_Source\PSoC5/UART.c ****     *  None.
1336:Generated_Source\PSoC5/UART.c ****     *
1337:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1338:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferWrite - cleared to zero.
1339:Generated_Source\PSoC5/UART.c ****     *  UART_txBufferRead - cleared to zero.
1340:Generated_Source\PSoC5/UART.c ****     *
1341:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1342:Generated_Source\PSoC5/UART.c ****     *  No.
1343:Generated_Source\PSoC5/UART.c ****     *
1344:Generated_Source\PSoC5/UART.c ****     * Theory:
1345:Generated_Source\PSoC5/UART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 37


1346:Generated_Source\PSoC5/UART.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1347:Generated_Source\PSoC5/UART.c ****     *  remained in the RAM.
1348:Generated_Source\PSoC5/UART.c ****     *
1349:Generated_Source\PSoC5/UART.c ****     * Side Effects:
1350:Generated_Source\PSoC5/UART.c ****     *  Data waiting in the transmit buffer is not sent; a byte that is currently
1351:Generated_Source\PSoC5/UART.c ****     *  transmitting finishes transmitting.
1352:Generated_Source\PSoC5/UART.c ****     *
1353:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1354:Generated_Source\PSoC5/UART.c ****     void UART_ClearTxBuffer(void) 
1355:Generated_Source\PSoC5/UART.c ****     {
 689              		.loc 1 1355 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 0
 692              		@ frame_needed = 0, uses_anonymous_args = 0
 693 0000 08B5     		push	{r3, lr}
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 3, -8
 696              		.cfi_offset 14, -4
1356:Generated_Source\PSoC5/UART.c ****         uint8 enableInterrupts;
1357:Generated_Source\PSoC5/UART.c **** 
1358:Generated_Source\PSoC5/UART.c ****         enableInterrupts = CyEnterCriticalSection();
 697              		.loc 1 1358 0
 698 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 699              	.LVL46:
1359:Generated_Source\PSoC5/UART.c ****         /* Clear the HW FIFO */
1360:Generated_Source\PSoC5/UART.c ****         UART_TXDATA_AUX_CTL_REG |= (uint8)  UART_TX_FIFO_CLR;
 700              		.loc 1 1360 0
 701 0006 0A4B     		ldr	r3, .L75
 702 0008 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 703 000a 42F00102 		orr	r2, r2, #1
 704 000e 1A70     		strb	r2, [r3]
1361:Generated_Source\PSoC5/UART.c ****         UART_TXDATA_AUX_CTL_REG &= (uint8) ~UART_TX_FIFO_CLR;
 705              		.loc 1 1361 0
 706 0010 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 707 0012 02F0FE02 		and	r2, r2, #254
 708 0016 1A70     		strb	r2, [r3]
1362:Generated_Source\PSoC5/UART.c ****         CyExitCriticalSection(enableInterrupts);
 709              		.loc 1 1362 0
 710 0018 FFF7FEFF 		bl	CyExitCriticalSection
 711              	.LVL47:
1363:Generated_Source\PSoC5/UART.c **** 
1364:Generated_Source\PSoC5/UART.c ****     #if (UART_TX_INTERRUPT_ENABLED)
1365:Generated_Source\PSoC5/UART.c **** 
1366:Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt. */
1367:Generated_Source\PSoC5/UART.c ****         UART_DisableTxInt();
 712              		.loc 1 1367 0
 713 001c 054A     		ldr	r2, .L75+4
 714 001e 4023     		movs	r3, #64
 715 0020 1360     		str	r3, [r2]
1368:Generated_Source\PSoC5/UART.c **** 
1369:Generated_Source\PSoC5/UART.c ****         UART_txBufferRead = 0u;
 716              		.loc 1 1369 0
 717 0022 054A     		ldr	r2, .L75+8
 718 0024 0021     		movs	r1, #0
 719 0026 5180     		strh	r1, [r2, #2]	@ movhi
1370:Generated_Source\PSoC5/UART.c ****         UART_txBufferWrite = 0u;
 720              		.loc 1 1370 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 38


 721 0028 9180     		strh	r1, [r2, #4]	@ movhi
1371:Generated_Source\PSoC5/UART.c **** 
1372:Generated_Source\PSoC5/UART.c ****         /* Enable Tx interrupt. */
1373:Generated_Source\PSoC5/UART.c ****         UART_EnableTxInt();
 722              		.loc 1 1373 0
 723 002a 044A     		ldr	r2, .L75+12
 724 002c 1360     		str	r3, [r2]
 725 002e 08BD     		pop	{r3, pc}
 726              	.L76:
 727              		.align	2
 728              	.L75:
 729 0030 95650040 		.word	1073767829
 730 0034 80E100E0 		.word	-536813184
 731 0038 00000000 		.word	.LANCHOR0
 732 003c 00E100E0 		.word	-536813312
 733              		.cfi_endproc
 734              	.LFE14:
 735              		.size	UART_ClearTxBuffer, .-UART_ClearTxBuffer
 736              		.section	.text.UART_SendBreak,"ax",%progbits
 737              		.align	1
 738              		.global	UART_SendBreak
 739              		.thumb
 740              		.thumb_func
 741              		.type	UART_SendBreak, %function
 742              	UART_SendBreak:
 743              	.LFB15:
1374:Generated_Source\PSoC5/UART.c **** 
1375:Generated_Source\PSoC5/UART.c ****     #endif /* (UART_TX_INTERRUPT_ENABLED) */
1376:Generated_Source\PSoC5/UART.c ****     }
1377:Generated_Source\PSoC5/UART.c **** 
1378:Generated_Source\PSoC5/UART.c **** 
1379:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1380:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SendBreak
1381:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1382:Generated_Source\PSoC5/UART.c ****     *
1383:Generated_Source\PSoC5/UART.c ****     * Summary:
1384:Generated_Source\PSoC5/UART.c ****     *  Transmits a break signal on the bus.
1385:Generated_Source\PSoC5/UART.c ****     *
1386:Generated_Source\PSoC5/UART.c ****     * Parameters:
1387:Generated_Source\PSoC5/UART.c ****     *  uint8 retMode:  Send Break return mode. See the following table for options.
1388:Generated_Source\PSoC5/UART.c ****     *   UART_SEND_BREAK - Initialize registers for break, send the Break
1389:Generated_Source\PSoC5/UART.c ****     *       signal and return immediately.
1390:Generated_Source\PSoC5/UART.c ****     *   UART_WAIT_FOR_COMPLETE_REINIT - Wait until break transmission is
1391:Generated_Source\PSoC5/UART.c ****     *       complete, reinitialize registers to normal transmission mode then return
1392:Generated_Source\PSoC5/UART.c ****     *   UART_REINIT - Reinitialize registers to normal transmission mode
1393:Generated_Source\PSoC5/UART.c ****     *       then return.
1394:Generated_Source\PSoC5/UART.c ****     *   UART_SEND_WAIT_REINIT - Performs both options: 
1395:Generated_Source\PSoC5/UART.c ****     *      UART_SEND_BREAK and UART_WAIT_FOR_COMPLETE_REINIT.
1396:Generated_Source\PSoC5/UART.c ****     *      This option is recommended for most cases.
1397:Generated_Source\PSoC5/UART.c ****     *
1398:Generated_Source\PSoC5/UART.c ****     * Return:
1399:Generated_Source\PSoC5/UART.c ****     *  None.
1400:Generated_Source\PSoC5/UART.c ****     *
1401:Generated_Source\PSoC5/UART.c ****     * Global Variables:
1402:Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1403:Generated_Source\PSoC5/UART.c ****     *     initialized.
1404:Generated_Source\PSoC5/UART.c ****     *  txPeriod - static variable, used for keeping TX period configuration.
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 39


1405:Generated_Source\PSoC5/UART.c ****     *
1406:Generated_Source\PSoC5/UART.c ****     * Reentrant:
1407:Generated_Source\PSoC5/UART.c ****     *  No.
1408:Generated_Source\PSoC5/UART.c ****     *
1409:Generated_Source\PSoC5/UART.c ****     * Theory:
1410:Generated_Source\PSoC5/UART.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1411:Generated_Source\PSoC5/UART.c ****     *  important to return the registers configuration to normal for continue 8-bit
1412:Generated_Source\PSoC5/UART.c ****     *  operation.
1413:Generated_Source\PSoC5/UART.c ****     *  There are 3 variants for this API usage:
1414:Generated_Source\PSoC5/UART.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1415:Generated_Source\PSoC5/UART.c ****     *     configuration returning. Function will block CPU until transmission
1416:Generated_Source\PSoC5/UART.c ****     *     complete.
1417:Generated_Source\PSoC5/UART.c ****     *  2) User may want to use blocking time if UART configured to the low speed
1418:Generated_Source\PSoC5/UART.c ****     *     operation
1419:Generated_Source\PSoC5/UART.c ****     *     Example for this case:
1420:Generated_Source\PSoC5/UART.c ****     *     SendBreak(0);     - initialize Break signal transmission
1421:Generated_Source\PSoC5/UART.c ****     *         Add your code here to use CPU time
1422:Generated_Source\PSoC5/UART.c ****     *     SendBreak(1);     - complete Break operation
1423:Generated_Source\PSoC5/UART.c ****     *  3) Same to 2) but user may want to initialize and use the interrupt to
1424:Generated_Source\PSoC5/UART.c ****     *     complete break operation.
1425:Generated_Source\PSoC5/UART.c ****     *     Example for this case:
1426:Generated_Source\PSoC5/UART.c ****     *     Initialize TX interrupt with "TX - On TX Complete" parameter
1427:Generated_Source\PSoC5/UART.c ****     *     SendBreak(0);     - initialize Break signal transmission
1428:Generated_Source\PSoC5/UART.c ****     *         Add your code here to use CPU time
1429:Generated_Source\PSoC5/UART.c ****     *     When interrupt appear with UART_TX_STS_COMPLETE status:
1430:Generated_Source\PSoC5/UART.c ****     *     SendBreak(2);     - complete Break operation
1431:Generated_Source\PSoC5/UART.c ****     *
1432:Generated_Source\PSoC5/UART.c ****     * Side Effects:
1433:Generated_Source\PSoC5/UART.c ****     *  The UART_SendBreak() function initializes registers to send a
1434:Generated_Source\PSoC5/UART.c ****     *  break signal.
1435:Generated_Source\PSoC5/UART.c ****     *  Break signal length depends on the break signal bits configuration.
1436:Generated_Source\PSoC5/UART.c ****     *  The register configuration should be reinitialized before normal 8-bit
1437:Generated_Source\PSoC5/UART.c ****     *  communication can continue.
1438:Generated_Source\PSoC5/UART.c ****     *
1439:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1440:Generated_Source\PSoC5/UART.c ****     void UART_SendBreak(uint8 retMode) 
1441:Generated_Source\PSoC5/UART.c ****     {
 744              		.loc 1 1441 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              		@ link register save eliminated.
 749              	.LVL48:
1442:Generated_Source\PSoC5/UART.c **** 
1443:Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function*/
1444:Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 750              		.loc 1 1444 0
 751 0000 124B     		ldr	r3, .L100
 752 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 753 0004 0AB3     		cbz	r2, .L77
 754              	.LBB2:
1445:Generated_Source\PSoC5/UART.c ****         {
1446:Generated_Source\PSoC5/UART.c ****             /* Set the Counter to 13-bits and transmit a 00 byte */
1447:Generated_Source\PSoC5/UART.c ****             /* When that is done then reset the counter value back */
1448:Generated_Source\PSoC5/UART.c ****             uint8 tmpStat;
1449:Generated_Source\PSoC5/UART.c **** 
1450:Generated_Source\PSoC5/UART.c ****         #if(UART_HD_ENABLED) /* Half Duplex mode*/
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 40


1451:Generated_Source\PSoC5/UART.c **** 
1452:Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_SEND_BREAK) ||
1453:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT ) )
1454:Generated_Source\PSoC5/UART.c ****             {
1455:Generated_Source\PSoC5/UART.c ****                 /* CTRL_HD_SEND_BREAK - sends break bits in HD mode */
1456:Generated_Source\PSoC5/UART.c ****                 UART_WriteControlRegister(UART_ReadControlRegister() |
1457:Generated_Source\PSoC5/UART.c ****                                                       UART_CTRL_HD_SEND_BREAK);
1458:Generated_Source\PSoC5/UART.c ****                 /* Send zeros */
1459:Generated_Source\PSoC5/UART.c ****                 UART_TXDATA_REG = 0u;
1460:Generated_Source\PSoC5/UART.c **** 
1461:Generated_Source\PSoC5/UART.c ****                 do /* Wait until transmit starts */
1462:Generated_Source\PSoC5/UART.c ****                 {
1463:Generated_Source\PSoC5/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
1464:Generated_Source\PSoC5/UART.c ****                 }
1465:Generated_Source\PSoC5/UART.c ****                 while((tmpStat & UART_TX_STS_FIFO_EMPTY) != 0u);
1466:Generated_Source\PSoC5/UART.c ****             }
1467:Generated_Source\PSoC5/UART.c **** 
1468:Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
1469:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1470:Generated_Source\PSoC5/UART.c ****             {
1471:Generated_Source\PSoC5/UART.c ****                 do /* Wait until transmit complete */
1472:Generated_Source\PSoC5/UART.c ****                 {
1473:Generated_Source\PSoC5/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
1474:Generated_Source\PSoC5/UART.c ****                 }
1475:Generated_Source\PSoC5/UART.c ****                 while(((uint8)~tmpStat & UART_TX_STS_COMPLETE) != 0u);
1476:Generated_Source\PSoC5/UART.c ****             }
1477:Generated_Source\PSoC5/UART.c **** 
1478:Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
1479:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_REINIT) ||
1480:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1481:Generated_Source\PSoC5/UART.c ****             {
1482:Generated_Source\PSoC5/UART.c ****                 UART_WriteControlRegister(UART_ReadControlRegister() &
1483:Generated_Source\PSoC5/UART.c ****                                               (uint8)~UART_CTRL_HD_SEND_BREAK);
1484:Generated_Source\PSoC5/UART.c ****             }
1485:Generated_Source\PSoC5/UART.c **** 
1486:Generated_Source\PSoC5/UART.c ****         #else /* UART_HD_ENABLED Full Duplex mode */
1487:Generated_Source\PSoC5/UART.c **** 
1488:Generated_Source\PSoC5/UART.c ****             static uint8 txPeriod;
1489:Generated_Source\PSoC5/UART.c **** 
1490:Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_SEND_BREAK) ||
 755              		.loc 1 1490 0
 756 0006 08B1     		cbz	r0, .L80
 757              		.loc 1 1490 0 is_stmt 0 discriminator 1
 758 0008 0328     		cmp	r0, #3
 759 000a 1CD1     		bne	.L81
 760              	.L80:
1491:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1492:Generated_Source\PSoC5/UART.c ****             {
1493:Generated_Source\PSoC5/UART.c ****                 /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex mode
1494:Generated_Source\PSoC5/UART.c ****                 #if( (UART_PARITY_TYPE != UART__B_UART__NONE_REVB) || \
1495:Generated_Source\PSoC5/UART.c ****                                     (UART_PARITY_TYPE_SW != 0u) )
1496:Generated_Source\PSoC5/UART.c ****                     UART_WriteControlRegister(UART_ReadControlRegister() |
1497:Generated_Source\PSoC5/UART.c ****                                                           UART_CTRL_HD_SEND_BREAK);
1498:Generated_Source\PSoC5/UART.c ****                 #endif /* End UART_PARITY_TYPE != UART__B_UART__NONE_REVB  */
1499:Generated_Source\PSoC5/UART.c **** 
1500:Generated_Source\PSoC5/UART.c ****                 #if(UART_TXCLKGEN_DP)
1501:Generated_Source\PSoC5/UART.c ****                     txPeriod = UART_TXBITCLKTX_COMPLETE_REG;
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 41


 761              		.loc 1 1501 0 is_stmt 1
 762 000c 104A     		ldr	r2, .L100+4
 763 000e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 764 0010 9971     		strb	r1, [r3, #6]
1502:Generated_Source\PSoC5/UART.c ****                     UART_TXBITCLKTX_COMPLETE_REG = UART_TXBITCTR_BREAKBITS;
 765              		.loc 1 1502 0
 766 0012 6721     		movs	r1, #103
 767 0014 1170     		strb	r1, [r2]
1503:Generated_Source\PSoC5/UART.c ****                 #else
1504:Generated_Source\PSoC5/UART.c ****                     txPeriod = UART_TXBITCTR_PERIOD_REG;
1505:Generated_Source\PSoC5/UART.c ****                     UART_TXBITCTR_PERIOD_REG = UART_TXBITCTR_BREAKBITS8X;
1506:Generated_Source\PSoC5/UART.c ****                 #endif /* End UART_TXCLKGEN_DP */
1507:Generated_Source\PSoC5/UART.c **** 
1508:Generated_Source\PSoC5/UART.c ****                 /* Send zeros */
1509:Generated_Source\PSoC5/UART.c ****                 UART_TXDATA_REG = 0u;
 768              		.loc 1 1509 0
 769 0016 0021     		movs	r1, #0
 770 0018 82F80F11 		strb	r1, [r2, #271]
1510:Generated_Source\PSoC5/UART.c **** 
1511:Generated_Source\PSoC5/UART.c ****                 do /* Wait until transmit starts */
1512:Generated_Source\PSoC5/UART.c ****                 {
1513:Generated_Source\PSoC5/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
 771              		.loc 1 1513 0
 772 001c 0D49     		ldr	r1, .L100+8
 773              	.L82:
 774              		.loc 1 1513 0 is_stmt 0 discriminator 1
 775 001e 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 776              	.LVL49:
1514:Generated_Source\PSoC5/UART.c ****                 }
1515:Generated_Source\PSoC5/UART.c ****                 while((tmpStat & UART_TX_STS_FIFO_EMPTY) != 0u);
 777              		.loc 1 1515 0 is_stmt 1 discriminator 1
 778 0020 9207     		lsls	r2, r2, #30
 779              	.LVL50:
 780 0022 FCD4     		bmi	.L82
1516:Generated_Source\PSoC5/UART.c ****             }
1517:Generated_Source\PSoC5/UART.c **** 
1518:Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
 781              		.loc 1 1518 0
 782 0024 00F0FD02 		and	r2, r0, #253
 783 0028 012A     		cmp	r2, #1
 784              	.L99:
 785 002a 03D0     		beq	.L83
 786              	.L87:
1519:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1520:Generated_Source\PSoC5/UART.c ****             {
1521:Generated_Source\PSoC5/UART.c ****                 do /* Wait until transmit complete */
1522:Generated_Source\PSoC5/UART.c ****                 {
1523:Generated_Source\PSoC5/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
1524:Generated_Source\PSoC5/UART.c ****                 }
1525:Generated_Source\PSoC5/UART.c ****                 while(((uint8)~tmpStat & UART_TX_STS_COMPLETE) != 0u);
1526:Generated_Source\PSoC5/UART.c ****             }
1527:Generated_Source\PSoC5/UART.c **** 
1528:Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
 787              		.loc 1 1528 0
 788 002c 0138     		subs	r0, r0, #1
 789              	.LVL51:
 790 002e 0228     		cmp	r0, #2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 42


 791 0030 05D9     		bls	.L84
 792 0032 7047     		bx	lr
 793              	.LVL52:
 794              	.L83:
1523:Generated_Source\PSoC5/UART.c ****                 }
 795              		.loc 1 1523 0
 796 0034 0749     		ldr	r1, .L100+8
 797              	.L86:
1523:Generated_Source\PSoC5/UART.c ****                 }
 798              		.loc 1 1523 0 is_stmt 0 discriminator 1
 799 0036 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 800              	.LVL53:
1525:Generated_Source\PSoC5/UART.c ****             }
 801              		.loc 1 1525 0 is_stmt 1 discriminator 1
 802 0038 D207     		lsls	r2, r2, #31
 803              	.LVL54:
 804 003a FCD5     		bpl	.L86
 805 003c F6E7     		b	.L87
 806              	.LVL55:
 807              	.L84:
1529:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_REINIT) ||
1530:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1531:Generated_Source\PSoC5/UART.c ****             {
1532:Generated_Source\PSoC5/UART.c **** 
1533:Generated_Source\PSoC5/UART.c ****             #if(UART_TXCLKGEN_DP)
1534:Generated_Source\PSoC5/UART.c ****                 UART_TXBITCLKTX_COMPLETE_REG = txPeriod;
 808              		.loc 1 1534 0
 809 003e 9A79     		ldrb	r2, [r3, #6]	@ zero_extendqisi2
 810 0040 034B     		ldr	r3, .L100+4
 811 0042 1A70     		strb	r2, [r3]
 812              	.LBE2:
1535:Generated_Source\PSoC5/UART.c ****             #else
1536:Generated_Source\PSoC5/UART.c ****                 UART_TXBITCTR_PERIOD_REG = txPeriod;
1537:Generated_Source\PSoC5/UART.c ****             #endif /* End UART_TXCLKGEN_DP */
1538:Generated_Source\PSoC5/UART.c **** 
1539:Generated_Source\PSoC5/UART.c ****             #if( (UART_PARITY_TYPE != UART__B_UART__NONE_REVB) || \
1540:Generated_Source\PSoC5/UART.c ****                  (UART_PARITY_TYPE_SW != 0u) )
1541:Generated_Source\PSoC5/UART.c ****                 UART_WriteControlRegister(UART_ReadControlRegister() &
1542:Generated_Source\PSoC5/UART.c ****                                                       (uint8) ~UART_CTRL_HD_SEND_BREAK);
1543:Generated_Source\PSoC5/UART.c ****             #endif /* End UART_PARITY_TYPE != NONE */
1544:Generated_Source\PSoC5/UART.c ****             }
1545:Generated_Source\PSoC5/UART.c ****         #endif    /* End UART_HD_ENABLED */
1546:Generated_Source\PSoC5/UART.c ****         }
1547:Generated_Source\PSoC5/UART.c ****     }
 813              		.loc 1 1547 0
 814 0044 7047     		bx	lr
 815              	.LVL56:
 816              	.L81:
 817              	.LBB3:
1518:Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
 818              		.loc 1 1518 0
 819 0046 0128     		cmp	r0, #1
 820 0048 EFE7     		b	.L99
 821              	.L77:
 822 004a 7047     		bx	lr
 823              	.L101:
 824              		.align	2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 43


 825              	.L100:
 826 004c 00000000 		.word	.LANCHOR0
 827 0050 36640040 		.word	1073767478
 828 0054 65650040 		.word	1073767781
 829              	.LBE3:
 830              		.cfi_endproc
 831              	.LFE15:
 832              		.size	UART_SendBreak, .-UART_SendBreak
 833              		.section	.text.UART_SetTxAddressMode,"ax",%progbits
 834              		.align	1
 835              		.global	UART_SetTxAddressMode
 836              		.thumb
 837              		.thumb_func
 838              		.type	UART_SetTxAddressMode, %function
 839              	UART_SetTxAddressMode:
 840              	.LFB16:
1548:Generated_Source\PSoC5/UART.c **** 
1549:Generated_Source\PSoC5/UART.c **** 
1550:Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1551:Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetTxAddressMode
1552:Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1553:Generated_Source\PSoC5/UART.c ****     *
1554:Generated_Source\PSoC5/UART.c ****     * Summary:
1555:Generated_Source\PSoC5/UART.c ****     *  Configures the transmitter to signal the next bytes is address or data.
1556:Generated_Source\PSoC5/UART.c ****     *
1557:Generated_Source\PSoC5/UART.c ****     * Parameters:
1558:Generated_Source\PSoC5/UART.c ****     *  addressMode: 
1559:Generated_Source\PSoC5/UART.c ****     *       UART_SET_SPACE - Configure the transmitter to send the next
1560:Generated_Source\PSoC5/UART.c ****     *                                    byte as a data.
1561:Generated_Source\PSoC5/UART.c ****     *       UART_SET_MARK  - Configure the transmitter to send the next
1562:Generated_Source\PSoC5/UART.c ****     *                                    byte as an address.
1563:Generated_Source\PSoC5/UART.c ****     *
1564:Generated_Source\PSoC5/UART.c ****     * Return:
1565:Generated_Source\PSoC5/UART.c ****     *  None.
1566:Generated_Source\PSoC5/UART.c ****     *
1567:Generated_Source\PSoC5/UART.c ****     * Side Effects:
1568:Generated_Source\PSoC5/UART.c ****     *  This function sets and clears UART_CTRL_MARK bit in the Control
1569:Generated_Source\PSoC5/UART.c ****     *  register.
1570:Generated_Source\PSoC5/UART.c ****     *
1571:Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1572:Generated_Source\PSoC5/UART.c ****     void UART_SetTxAddressMode(uint8 addressMode) 
1573:Generated_Source\PSoC5/UART.c ****     {
 841              		.loc 1 1573 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 0
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845              		@ link register save eliminated.
 846              	.LVL57:
 847 0000 7047     		bx	lr
 848              		.cfi_endproc
 849              	.LFE16:
 850              		.size	UART_SetTxAddressMode, .-UART_SetTxAddressMode
 851              		.global	UART_txBufferWrite
 852              		.global	UART_txBufferRead
 853              		.comm	UART_txBuffer,4096,1
 854              		.global	UART_initVar
 855              		.bss
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 44


 856              		.align	1
 857              		.set	.LANCHOR0,. + 0
 858              		.type	UART_initVar, %object
 859              		.size	UART_initVar, 1
 860              	UART_initVar:
 861 0000 00       		.space	1
 862 0001 00       		.space	1
 863              		.type	UART_txBufferRead, %object
 864              		.size	UART_txBufferRead, 2
 865              	UART_txBufferRead:
 866 0002 0000     		.space	2
 867              		.type	UART_txBufferWrite, %object
 868              		.size	UART_txBufferWrite, 2
 869              	UART_txBufferWrite:
 870 0004 0000     		.space	2
 871              		.type	txPeriod.5075, %object
 872              		.size	txPeriod.5075, 1
 873              	txPeriod.5075:
 874 0006 00       		.space	1
 875              		.text
 876              	.Letext0:
 877              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 878              		.file 3 "Generated_Source\\PSoC5\\CyLib.h"
 879              		.file 4 "Generated_Source\\PSoC5\\UART_IntClock.h"
 880              		.section	.debug_info,"",%progbits
 881              	.Ldebug_info0:
 882 0000 FE040000 		.4byte	0x4fe
 883 0004 0400     		.2byte	0x4
 884 0006 00000000 		.4byte	.Ldebug_abbrev0
 885 000a 04       		.byte	0x4
 886 000b 01       		.uleb128 0x1
 887 000c D9000000 		.4byte	.LASF56
 888 0010 0C       		.byte	0xc
 889 0011 BB000000 		.4byte	.LASF57
 890 0015 86010000 		.4byte	.LASF58
 891 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 892 001d 00000000 		.4byte	0
 893 0021 00000000 		.4byte	.Ldebug_line0
 894 0025 02       		.uleb128 0x2
 895 0026 01       		.byte	0x1
 896 0027 06       		.byte	0x6
 897 0028 E0030000 		.4byte	.LASF0
 898 002c 02       		.uleb128 0x2
 899 002d 01       		.byte	0x1
 900 002e 08       		.byte	0x8
 901 002f 66030000 		.4byte	.LASF1
 902 0033 02       		.uleb128 0x2
 903 0034 02       		.byte	0x2
 904 0035 05       		.byte	0x5
 905 0036 04020000 		.4byte	.LASF2
 906 003a 02       		.uleb128 0x2
 907 003b 02       		.byte	0x2
 908 003c 07       		.byte	0x7
 909 003d 48000000 		.4byte	.LASF3
 910 0041 02       		.uleb128 0x2
 911 0042 04       		.byte	0x4
 912 0043 05       		.byte	0x5
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 45


 913 0044 B9030000 		.4byte	.LASF4
 914 0048 02       		.uleb128 0x2
 915 0049 04       		.byte	0x4
 916 004a 07       		.byte	0x7
 917 004b 58020000 		.4byte	.LASF5
 918 004f 02       		.uleb128 0x2
 919 0050 08       		.byte	0x8
 920 0051 05       		.byte	0x5
 921 0052 00000000 		.4byte	.LASF6
 922 0056 02       		.uleb128 0x2
 923 0057 08       		.byte	0x8
 924 0058 07       		.byte	0x7
 925 0059 89000000 		.4byte	.LASF7
 926 005d 03       		.uleb128 0x3
 927 005e 04       		.byte	0x4
 928 005f 05       		.byte	0x5
 929 0060 696E7400 		.ascii	"int\000"
 930 0064 02       		.uleb128 0x2
 931 0065 04       		.byte	0x4
 932 0066 07       		.byte	0x7
 933 0067 6A020000 		.4byte	.LASF8
 934 006b 04       		.uleb128 0x4
 935 006c 67010000 		.4byte	.LASF9
 936 0070 02       		.byte	0x2
 937 0071 E801     		.2byte	0x1e8
 938 0073 2C000000 		.4byte	0x2c
 939 0077 04       		.uleb128 0x4
 940 0078 0E020000 		.4byte	.LASF10
 941 007c 02       		.byte	0x2
 942 007d E901     		.2byte	0x1e9
 943 007f 3A000000 		.4byte	0x3a
 944 0083 04       		.uleb128 0x4
 945 0084 24020000 		.4byte	.LASF11
 946 0088 02       		.byte	0x2
 947 0089 EA01     		.2byte	0x1ea
 948 008b 48000000 		.4byte	0x48
 949 008f 02       		.uleb128 0x2
 950 0090 04       		.byte	0x4
 951 0091 04       		.byte	0x4
 952 0092 83000000 		.4byte	.LASF12
 953 0096 02       		.uleb128 0x2
 954 0097 08       		.byte	0x8
 955 0098 04       		.byte	0x4
 956 0099 F6010000 		.4byte	.LASF13
 957 009d 04       		.uleb128 0x4
 958 009e 1D000000 		.4byte	.LASF14
 959 00a2 02       		.byte	0x2
 960 00a3 F901     		.2byte	0x1f9
 961 00a5 A9000000 		.4byte	0xa9
 962 00a9 02       		.uleb128 0x2
 963 00aa 01       		.byte	0x1
 964 00ab 08       		.byte	0x8
 965 00ac 37030000 		.4byte	.LASF15
 966 00b0 04       		.uleb128 0x4
 967 00b1 B6000000 		.4byte	.LASF16
 968 00b5 02       		.byte	0x2
 969 00b6 9202     		.2byte	0x292
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 46


 970 00b8 BC000000 		.4byte	0xbc
 971 00bc 05       		.uleb128 0x5
 972 00bd 6B000000 		.4byte	0x6b
 973 00c1 05       		.uleb128 0x5
 974 00c2 77000000 		.4byte	0x77
 975 00c6 04       		.uleb128 0x4
 976 00c7 0E000000 		.4byte	.LASF17
 977 00cb 02       		.byte	0x2
 978 00cc 9402     		.2byte	0x294
 979 00ce D2000000 		.4byte	0xd2
 980 00d2 05       		.uleb128 0x5
 981 00d3 83000000 		.4byte	0x83
 982 00d7 02       		.uleb128 0x2
 983 00d8 08       		.byte	0x8
 984 00d9 04       		.byte	0x4
 985 00da F7020000 		.4byte	.LASF18
 986 00de 02       		.uleb128 0x2
 987 00df 04       		.byte	0x4
 988 00e0 07       		.byte	0x7
 989 00e1 23030000 		.4byte	.LASF19
 990 00e5 06       		.uleb128 0x6
 991 00e6 AC000000 		.4byte	.LASF20
 992 00ea 01       		.byte	0x1
 993 00eb 6A       		.byte	0x6a
 994 00ec 00000000 		.4byte	.LFB1
 995 00f0 2C000000 		.4byte	.LFE1-.LFB1
 996 00f4 01       		.uleb128 0x1
 997 00f5 9C       		.byte	0x9c
 998 00f6 22010000 		.4byte	0x122
 999 00fa 07       		.uleb128 0x7
 1000 00fb 0A000000 		.4byte	.LVL0
 1001 00ff BF040000 		.4byte	0x4bf
 1002 0103 0D010000 		.4byte	0x10d
 1003 0107 08       		.uleb128 0x8
 1004 0108 01       		.uleb128 0x1
 1005 0109 50       		.byte	0x50
 1006 010a 01       		.uleb128 0x1
 1007 010b 36       		.byte	0x36
 1008 010c 00       		.byte	0
 1009 010d 09       		.uleb128 0x9
 1010 010e 12000000 		.4byte	.LVL1
 1011 0112 CA040000 		.4byte	0x4ca
 1012 0116 08       		.uleb128 0x8
 1013 0117 01       		.uleb128 0x1
 1014 0118 50       		.byte	0x50
 1015 0119 01       		.uleb128 0x1
 1016 011a 36       		.byte	0x36
 1017 011b 08       		.uleb128 0x8
 1018 011c 01       		.uleb128 0x1
 1019 011d 51       		.byte	0x51
 1020 011e 01       		.uleb128 0x1
 1021 011f 37       		.byte	0x37
 1022 0120 00       		.byte	0
 1023 0121 00       		.byte	0
 1024 0122 06       		.uleb128 0x6
 1025 0123 D4030000 		.4byte	.LASF21
 1026 0127 01       		.byte	0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 47


 1027 0128 B7       		.byte	0xb7
 1028 0129 00000000 		.4byte	.LFB2
 1029 012d 34000000 		.4byte	.LFE2-.LFB2
 1030 0131 01       		.uleb128 0x1
 1031 0132 9C       		.byte	0x9c
 1032 0133 62010000 		.4byte	0x162
 1033 0137 0A       		.uleb128 0xa
 1034 0138 D5010000 		.4byte	.LASF24
 1035 013c 01       		.byte	0x1
 1036 013d B9       		.byte	0xb9
 1037 013e 6B000000 		.4byte	0x6b
 1038 0142 00000000 		.4byte	.LLST0
 1039 0146 0B       		.uleb128 0xb
 1040 0147 06000000 		.4byte	.LVL2
 1041 014b D5040000 		.4byte	0x4d5
 1042 014f 0B       		.uleb128 0xb
 1043 0150 22000000 		.4byte	.LVL4
 1044 0154 E0040000 		.4byte	0x4e0
 1045 0158 0C       		.uleb128 0xc
 1046 0159 2C000000 		.4byte	.LVL6
 1047 015d EB040000 		.4byte	0x4eb
 1048 0161 00       		.byte	0
 1049 0162 06       		.uleb128 0x6
 1050 0163 6D010000 		.4byte	.LASF22
 1051 0167 01       		.byte	0x1
 1052 0168 4C       		.byte	0x4c
 1053 0169 00000000 		.4byte	.LFB0
 1054 016d 1C000000 		.4byte	.LFE0-.LFB0
 1055 0171 01       		.uleb128 0x1
 1056 0172 9C       		.byte	0x9c
 1057 0173 8A010000 		.4byte	0x18a
 1058 0177 0B       		.uleb128 0xb
 1059 0178 0C000000 		.4byte	.LVL7
 1060 017c E5000000 		.4byte	0xe5
 1061 0180 0C       		.uleb128 0xc
 1062 0181 18000000 		.4byte	.LVL8
 1063 0185 22010000 		.4byte	0x122
 1064 0189 00       		.byte	0
 1065 018a 06       		.uleb128 0x6
 1066 018b 87030000 		.4byte	.LASF23
 1067 018f 01       		.byte	0x1
 1068 0190 F0       		.byte	0xf0
 1069 0191 00000000 		.4byte	.LFB3
 1070 0195 30000000 		.4byte	.LFE3-.LFB3
 1071 0199 01       		.uleb128 0x1
 1072 019a 9C       		.byte	0x9c
 1073 019b CA010000 		.4byte	0x1ca
 1074 019f 0A       		.uleb128 0xa
 1075 01a0 D5010000 		.4byte	.LASF24
 1076 01a4 01       		.byte	0x1
 1077 01a5 F2       		.byte	0xf2
 1078 01a6 6B000000 		.4byte	0x6b
 1079 01aa 13000000 		.4byte	.LLST1
 1080 01ae 0B       		.uleb128 0xb
 1081 01af 06000000 		.4byte	.LVL9
 1082 01b3 D5040000 		.4byte	0x4d5
 1083 01b7 0B       		.uleb128 0xb
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 48


 1084 01b8 0C000000 		.4byte	.LVL11
 1085 01bc F6040000 		.4byte	0x4f6
 1086 01c0 0C       		.uleb128 0xc
 1087 01c1 26000000 		.4byte	.LVL13
 1088 01c5 EB040000 		.4byte	0x4eb
 1089 01c9 00       		.byte	0
 1090 01ca 0D       		.uleb128 0xd
 1091 01cb B0020000 		.4byte	.LASF29
 1092 01cf 01       		.byte	0x1
 1093 01d0 2701     		.2byte	0x127
 1094 01d2 6B000000 		.4byte	0x6b
 1095 01d6 00000000 		.4byte	.LFB4
 1096 01da 04000000 		.4byte	.LFE4-.LFB4
 1097 01de 01       		.uleb128 0x1
 1098 01df 9C       		.byte	0x9c
 1099 01e0 0E       		.uleb128 0xe
 1100 01e1 DF020000 		.4byte	.LASF25
 1101 01e5 01       		.byte	0x1
 1102 01e6 8C03     		.2byte	0x38c
 1103 01e8 00000000 		.4byte	.LFB6
 1104 01ec 0C000000 		.4byte	.LFE6-.LFB6
 1105 01f0 01       		.uleb128 0x1
 1106 01f1 9C       		.byte	0x9c
 1107 01f2 05020000 		.4byte	0x205
 1108 01f6 0F       		.uleb128 0xf
 1109 01f7 FD010000 		.4byte	.LASF27
 1110 01fb 01       		.byte	0x1
 1111 01fc 8C03     		.2byte	0x38c
 1112 01fe 6B000000 		.4byte	0x6b
 1113 0202 01       		.uleb128 0x1
 1114 0203 50       		.byte	0x50
 1115 0204 00       		.byte	0
 1116 0205 0E       		.uleb128 0xe
 1117 0206 3C030000 		.4byte	.LASF26
 1118 020a 01       		.byte	0x1
 1119 020b AE03     		.2byte	0x3ae
 1120 020d 00000000 		.4byte	.LFB7
 1121 0211 5C000000 		.4byte	.LFE7-.LFB7
 1122 0215 01       		.uleb128 0x1
 1123 0216 9C       		.byte	0x9c
 1124 0217 2A020000 		.4byte	0x22a
 1125 021b 0F       		.uleb128 0xf
 1126 021c 2C030000 		.4byte	.LASF28
 1127 0220 01       		.byte	0x1
 1128 0221 AE03     		.2byte	0x3ae
 1129 0223 6B000000 		.4byte	0x6b
 1130 0227 01       		.uleb128 0x1
 1131 0228 50       		.byte	0x50
 1132 0229 00       		.byte	0
 1133 022a 0D       		.uleb128 0xd
 1134 022b 77020000 		.4byte	.LASF30
 1135 022f 01       		.byte	0x1
 1136 0230 EB03     		.2byte	0x3eb
 1137 0232 6B000000 		.4byte	0x6b
 1138 0236 00000000 		.4byte	.LFB8
 1139 023a 0C000000 		.4byte	.LFE8-.LFB8
 1140 023e 01       		.uleb128 0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 49


 1141 023f 9C       		.byte	0x9c
 1142 0240 0E       		.uleb128 0xe
 1143 0241 03030000 		.4byte	.LASF31
 1144 0245 01       		.byte	0x1
 1145 0246 1104     		.2byte	0x411
 1146 0248 00000000 		.4byte	.LFB9
 1147 024c 6C000000 		.4byte	.LFE9-.LFB9
 1148 0250 01       		.uleb128 0x1
 1149 0251 9C       		.byte	0x9c
 1150 0252 85020000 		.4byte	0x285
 1151 0256 0F       		.uleb128 0xf
 1152 0257 2C030000 		.4byte	.LASF28
 1153 025b 01       		.byte	0x1
 1154 025c 1104     		.2byte	0x411
 1155 025e 6B000000 		.4byte	0x6b
 1156 0262 01       		.uleb128 0x1
 1157 0263 50       		.byte	0x50
 1158 0264 10       		.uleb128 0x10
 1159 0265 55030000 		.4byte	.LASF32
 1160 0269 01       		.byte	0x1
 1161 026a 1804     		.2byte	0x418
 1162 026c 77000000 		.4byte	0x77
 1163 0270 26000000 		.4byte	.LLST2
 1164 0274 10       		.uleb128 0x10
 1165 0275 E6010000 		.4byte	.LASF33
 1166 0279 01       		.byte	0x1
 1167 027a 1904     		.2byte	0x419
 1168 027c 77000000 		.4byte	0x77
 1169 0280 A4000000 		.4byte	.LLST3
 1170 0284 00       		.byte	0
 1171 0285 0E       		.uleb128 0xe
 1172 0286 EC030000 		.4byte	.LASF34
 1173 028a 01       		.byte	0x1
 1174 028b 7904     		.2byte	0x479
 1175 028d 00000000 		.4byte	.LFB10
 1176 0291 20000000 		.4byte	.LFE10-.LFB10
 1177 0295 01       		.uleb128 0x1
 1178 0296 9C       		.byte	0x9c
 1179 0297 C5020000 		.4byte	0x2c5
 1180 029b 11       		.uleb128 0x11
 1181 029c 68000000 		.4byte	.LASF35
 1182 02a0 01       		.byte	0x1
 1183 02a1 7904     		.2byte	0x479
 1184 02a3 C5020000 		.4byte	0x2c5
 1185 02a7 B7000000 		.4byte	.LLST4
 1186 02ab 10       		.uleb128 0x10
 1187 02ac D6020000 		.4byte	.LASF36
 1188 02b0 01       		.byte	0x1
 1189 02b1 7B04     		.2byte	0x47b
 1190 02b3 77000000 		.4byte	0x77
 1191 02b7 E3000000 		.4byte	.LLST5
 1192 02bb 0B       		.uleb128 0xb
 1193 02bc 18000000 		.4byte	.LVL30
 1194 02c0 40020000 		.4byte	0x240
 1195 02c4 00       		.byte	0
 1196 02c5 12       		.uleb128 0x12
 1197 02c6 04       		.byte	0x4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 50


 1198 02c7 CB020000 		.4byte	0x2cb
 1199 02cb 13       		.uleb128 0x13
 1200 02cc 9D000000 		.4byte	0x9d
 1201 02d0 0E       		.uleb128 0xe
 1202 02d1 78010000 		.4byte	.LASF37
 1203 02d5 01       		.byte	0x1
 1204 02d6 A704     		.2byte	0x4a7
 1205 02d8 00000000 		.4byte	.LFB11
 1206 02dc 24000000 		.4byte	.LFE11-.LFB11
 1207 02e0 01       		.uleb128 0x1
 1208 02e1 9C       		.byte	0x9c
 1209 02e2 20030000 		.4byte	0x320
 1210 02e6 11       		.uleb128 0x11
 1211 02e7 68000000 		.4byte	.LASF35
 1212 02eb 01       		.byte	0x1
 1213 02ec A704     		.2byte	0x4a7
 1214 02ee 20030000 		.4byte	0x320
 1215 02f2 18010000 		.4byte	.LLST6
 1216 02f6 11       		.uleb128 0x11
 1217 02f7 CB010000 		.4byte	.LASF38
 1218 02fb 01       		.byte	0x1
 1219 02fc A704     		.2byte	0x4a7
 1220 02fe 77000000 		.4byte	0x77
 1221 0302 39010000 		.4byte	.LLST7
 1222 0306 10       		.uleb128 0x10
 1223 0307 D6020000 		.4byte	.LASF36
 1224 030b 01       		.byte	0x1
 1225 030c AA04     		.2byte	0x4aa
 1226 030e 77000000 		.4byte	0x77
 1227 0312 5A010000 		.4byte	.LLST8
 1228 0316 0B       		.uleb128 0xb
 1229 0317 1A000000 		.4byte	.LVL37
 1230 031b 40020000 		.4byte	0x240
 1231 031f 00       		.byte	0
 1232 0320 12       		.uleb128 0x12
 1233 0321 04       		.byte	0x4
 1234 0322 26030000 		.4byte	0x326
 1235 0326 13       		.uleb128 0x13
 1236 0327 6B000000 		.4byte	0x6b
 1237 032b 0E       		.uleb128 0xe
 1238 032c C9020000 		.4byte	.LASF39
 1239 0330 01       		.byte	0x1
 1240 0331 CE04     		.2byte	0x4ce
 1241 0333 00000000 		.4byte	.LFB12
 1242 0337 24000000 		.4byte	.LFE12-.LFB12
 1243 033b 01       		.uleb128 0x1
 1244 033c 9C       		.byte	0x9c
 1245 033d 7D030000 		.4byte	0x37d
 1246 0341 11       		.uleb128 0x11
 1247 0342 2C030000 		.4byte	.LASF28
 1248 0346 01       		.byte	0x1
 1249 0347 CE04     		.2byte	0x4ce
 1250 0349 6B000000 		.4byte	0x6b
 1251 034d 94010000 		.4byte	.LLST9
 1252 0351 0B       		.uleb128 0xb
 1253 0352 0C000000 		.4byte	.LVL40
 1254 0356 40020000 		.4byte	0x240
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 51


 1255 035a 07       		.uleb128 0x7
 1256 035b 12000000 		.4byte	.LVL41
 1257 035f 40020000 		.4byte	0x240
 1258 0363 6D030000 		.4byte	0x36d
 1259 0367 08       		.uleb128 0x8
 1260 0368 01       		.uleb128 0x1
 1261 0369 50       		.byte	0x50
 1262 036a 01       		.uleb128 0x1
 1263 036b 3D       		.byte	0x3d
 1264 036c 00       		.byte	0
 1265 036d 14       		.uleb128 0x14
 1266 036e 1C000000 		.4byte	.LVL42
 1267 0372 40020000 		.4byte	0x240
 1268 0376 08       		.uleb128 0x8
 1269 0377 01       		.uleb128 0x1
 1270 0378 50       		.byte	0x50
 1271 0379 01       		.uleb128 0x1
 1272 037a 3A       		.byte	0x3a
 1273 037b 00       		.byte	0
 1274 037c 00       		.byte	0
 1275 037d 15       		.uleb128 0x15
 1276 037e A4030000 		.4byte	.LASF59
 1277 0382 01       		.byte	0x1
 1278 0383 F904     		.2byte	0x4f9
 1279 0385 77000000 		.4byte	0x77
 1280 0389 00000000 		.4byte	.LFB13
 1281 038d 3C000000 		.4byte	.LFE13-.LFB13
 1282 0391 01       		.uleb128 0x1
 1283 0392 9C       		.byte	0x9c
 1284 0393 A8030000 		.4byte	0x3a8
 1285 0397 10       		.uleb128 0x10
 1286 0398 FB030000 		.4byte	.LASF40
 1287 039c 01       		.byte	0x1
 1288 039d FC04     		.2byte	0x4fc
 1289 039f 77000000 		.4byte	0x77
 1290 03a3 C0010000 		.4byte	.LLST10
 1291 03a7 00       		.byte	0
 1292 03a8 0E       		.uleb128 0xe
 1293 03a9 74030000 		.4byte	.LASF41
 1294 03ad 01       		.byte	0x1
 1295 03ae 4A05     		.2byte	0x54a
 1296 03b0 00000000 		.4byte	.LFB14
 1297 03b4 40000000 		.4byte	.LFE14-.LFB14
 1298 03b8 01       		.uleb128 0x1
 1299 03b9 9C       		.byte	0x9c
 1300 03ba E1030000 		.4byte	0x3e1
 1301 03be 10       		.uleb128 0x10
 1302 03bf D5010000 		.4byte	.LASF24
 1303 03c3 01       		.byte	0x1
 1304 03c4 4C05     		.2byte	0x54c
 1305 03c6 6B000000 		.4byte	0x6b
 1306 03ca DE010000 		.4byte	.LLST11
 1307 03ce 0B       		.uleb128 0xb
 1308 03cf 06000000 		.4byte	.LVL46
 1309 03d3 D5040000 		.4byte	0x4d5
 1310 03d7 0B       		.uleb128 0xb
 1311 03d8 1C000000 		.4byte	.LVL47
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 52


 1312 03dc EB040000 		.4byte	0x4eb
 1313 03e0 00       		.byte	0
 1314 03e1 0E       		.uleb128 0xe
 1315 03e2 15020000 		.4byte	.LASF42
 1316 03e6 01       		.byte	0x1
 1317 03e7 A005     		.2byte	0x5a0
 1318 03e9 00000000 		.4byte	.LFB15
 1319 03ed 58000000 		.4byte	.LFE15-.LFB15
 1320 03f1 01       		.uleb128 0x1
 1321 03f2 9C       		.byte	0x9c
 1322 03f3 30040000 		.4byte	0x430
 1323 03f7 11       		.uleb128 0x11
 1324 03f8 4D030000 		.4byte	.LASF43
 1325 03fc 01       		.byte	0x1
 1326 03fd A005     		.2byte	0x5a0
 1327 03ff 6B000000 		.4byte	0x6b
 1328 0403 F1010000 		.4byte	.LLST12
 1329 0407 16       		.uleb128 0x16
 1330 0408 00000000 		.4byte	.Ldebug_ranges0+0
 1331 040c 10       		.uleb128 0x10
 1332 040d 32000000 		.4byte	.LASF44
 1333 0411 01       		.byte	0x1
 1334 0412 A805     		.2byte	0x5a8
 1335 0414 6B000000 		.4byte	0x6b
 1336 0418 36020000 		.4byte	.LLST13
 1337 041c 17       		.uleb128 0x17
 1338 041d 14000000 		.4byte	.LASF45
 1339 0421 01       		.byte	0x1
 1340 0422 D005     		.2byte	0x5d0
 1341 0424 6B000000 		.4byte	0x6b
 1342 0428 05       		.uleb128 0x5
 1343 0429 03       		.byte	0x3
 1344 042a 06000000 		.4byte	txPeriod.5075
 1345 042e 00       		.byte	0
 1346 042f 00       		.byte	0
 1347 0430 18       		.uleb128 0x18
 1348 0431 2B020000 		.4byte	.LASF60
 1349 0435 01       		.byte	0x1
 1350 0436 2406     		.2byte	0x624
 1351 0438 01       		.byte	0x1
 1352 0439 4A040000 		.4byte	0x44a
 1353 043d 19       		.uleb128 0x19
 1354 043e A0000000 		.4byte	.LASF61
 1355 0442 01       		.byte	0x1
 1356 0443 2406     		.2byte	0x624
 1357 0445 6B000000 		.4byte	0x6b
 1358 0449 00       		.byte	0
 1359 044a 1A       		.uleb128 0x1a
 1360 044b 30040000 		.4byte	0x430
 1361 044f 00000000 		.4byte	.LFB16
 1362 0453 02000000 		.4byte	.LFE16-.LFB16
 1363 0457 01       		.uleb128 0x1
 1364 0458 9C       		.byte	0x9c
 1365 0459 65040000 		.4byte	0x465
 1366 045d 1B       		.uleb128 0x1b
 1367 045e 3D040000 		.4byte	0x43d
 1368 0462 01       		.uleb128 0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 53


 1369 0463 50       		.byte	0x50
 1370 0464 00       		.byte	0
 1371 0465 1C       		.uleb128 0x1c
 1372 0466 5B000000 		.4byte	.LASF46
 1373 046a 01       		.byte	0x1
 1374 046b 1B       		.byte	0x1b
 1375 046c 6B000000 		.4byte	0x6b
 1376 0470 05       		.uleb128 0x5
 1377 0471 03       		.byte	0x3
 1378 0472 00000000 		.4byte	UART_initVar
 1379 0476 1D       		.uleb128 0x1d
 1380 0477 BC000000 		.4byte	0xbc
 1381 047b 87040000 		.4byte	0x487
 1382 047f 1E       		.uleb128 0x1e
 1383 0480 DE000000 		.4byte	0xde
 1384 0484 FF0F     		.2byte	0xfff
 1385 0486 00       		.byte	0
 1386 0487 1C       		.uleb128 0x1c
 1387 0488 3A000000 		.4byte	.LASF47
 1388 048c 01       		.byte	0x1
 1389 048d 1E       		.byte	0x1e
 1390 048e 98040000 		.4byte	0x498
 1391 0492 05       		.uleb128 0x5
 1392 0493 03       		.byte	0x3
 1393 0494 00000000 		.4byte	UART_txBuffer
 1394 0498 05       		.uleb128 0x5
 1395 0499 76040000 		.4byte	0x476
 1396 049d 1C       		.uleb128 0x1c
 1397 049e C2030000 		.4byte	.LASF48
 1398 04a2 01       		.byte	0x1
 1399 04a3 1F       		.byte	0x1f
 1400 04a4 C1000000 		.4byte	0xc1
 1401 04a8 05       		.uleb128 0x5
 1402 04a9 03       		.byte	0x3
 1403 04aa 00000000 		.4byte	UART_txBufferRead
 1404 04ae 1C       		.uleb128 0x1c
 1405 04af 91030000 		.4byte	.LASF49
 1406 04b3 01       		.byte	0x1
 1407 04b4 20       		.byte	0x20
 1408 04b5 77000000 		.4byte	0x77
 1409 04b9 05       		.uleb128 0x5
 1410 04ba 03       		.byte	0x3
 1411 04bb 00000000 		.4byte	UART_txBufferWrite
 1412 04bf 1F       		.uleb128 0x1f
 1413 04c0 23000000 		.4byte	.LASF50
 1414 04c4 23000000 		.4byte	.LASF50
 1415 04c8 03       		.byte	0x3
 1416 04c9 88       		.byte	0x88
 1417 04ca 1F       		.uleb128 0x1f
 1418 04cb 9F020000 		.4byte	.LASF51
 1419 04cf 9F020000 		.4byte	.LASF51
 1420 04d3 03       		.byte	0x3
 1421 04d4 8B       		.byte	0x8b
 1422 04d5 1F       		.uleb128 0x1f
 1423 04d6 41020000 		.4byte	.LASF52
 1424 04da 41020000 		.4byte	.LASF52
 1425 04de 03       		.byte	0x3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 54


 1426 04df 7D       		.byte	0x7d
 1427 04e0 1F       		.uleb128 0x1f
 1428 04e1 6F000000 		.4byte	.LASF53
 1429 04e5 6F000000 		.4byte	.LASF53
 1430 04e9 04       		.byte	0x4
 1431 04ea 27       		.byte	0x27
 1432 04eb 1F       		.uleb128 0x1f
 1433 04ec 89020000 		.4byte	.LASF54
 1434 04f0 89020000 		.4byte	.LASF54
 1435 04f4 03       		.byte	0x3
 1436 04f5 7E       		.byte	0x7e
 1437 04f6 1F       		.uleb128 0x1f
 1438 04f7 10030000 		.4byte	.LASF55
 1439 04fb 10030000 		.4byte	.LASF55
 1440 04ff 04       		.byte	0x4
 1441 0500 28       		.byte	0x28
 1442 0501 00       		.byte	0
 1443              		.section	.debug_abbrev,"",%progbits
 1444              	.Ldebug_abbrev0:
 1445 0000 01       		.uleb128 0x1
 1446 0001 11       		.uleb128 0x11
 1447 0002 01       		.byte	0x1
 1448 0003 25       		.uleb128 0x25
 1449 0004 0E       		.uleb128 0xe
 1450 0005 13       		.uleb128 0x13
 1451 0006 0B       		.uleb128 0xb
 1452 0007 03       		.uleb128 0x3
 1453 0008 0E       		.uleb128 0xe
 1454 0009 1B       		.uleb128 0x1b
 1455 000a 0E       		.uleb128 0xe
 1456 000b 55       		.uleb128 0x55
 1457 000c 17       		.uleb128 0x17
 1458 000d 11       		.uleb128 0x11
 1459 000e 01       		.uleb128 0x1
 1460 000f 10       		.uleb128 0x10
 1461 0010 17       		.uleb128 0x17
 1462 0011 00       		.byte	0
 1463 0012 00       		.byte	0
 1464 0013 02       		.uleb128 0x2
 1465 0014 24       		.uleb128 0x24
 1466 0015 00       		.byte	0
 1467 0016 0B       		.uleb128 0xb
 1468 0017 0B       		.uleb128 0xb
 1469 0018 3E       		.uleb128 0x3e
 1470 0019 0B       		.uleb128 0xb
 1471 001a 03       		.uleb128 0x3
 1472 001b 0E       		.uleb128 0xe
 1473 001c 00       		.byte	0
 1474 001d 00       		.byte	0
 1475 001e 03       		.uleb128 0x3
 1476 001f 24       		.uleb128 0x24
 1477 0020 00       		.byte	0
 1478 0021 0B       		.uleb128 0xb
 1479 0022 0B       		.uleb128 0xb
 1480 0023 3E       		.uleb128 0x3e
 1481 0024 0B       		.uleb128 0xb
 1482 0025 03       		.uleb128 0x3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 55


 1483 0026 08       		.uleb128 0x8
 1484 0027 00       		.byte	0
 1485 0028 00       		.byte	0
 1486 0029 04       		.uleb128 0x4
 1487 002a 16       		.uleb128 0x16
 1488 002b 00       		.byte	0
 1489 002c 03       		.uleb128 0x3
 1490 002d 0E       		.uleb128 0xe
 1491 002e 3A       		.uleb128 0x3a
 1492 002f 0B       		.uleb128 0xb
 1493 0030 3B       		.uleb128 0x3b
 1494 0031 05       		.uleb128 0x5
 1495 0032 49       		.uleb128 0x49
 1496 0033 13       		.uleb128 0x13
 1497 0034 00       		.byte	0
 1498 0035 00       		.byte	0
 1499 0036 05       		.uleb128 0x5
 1500 0037 35       		.uleb128 0x35
 1501 0038 00       		.byte	0
 1502 0039 49       		.uleb128 0x49
 1503 003a 13       		.uleb128 0x13
 1504 003b 00       		.byte	0
 1505 003c 00       		.byte	0
 1506 003d 06       		.uleb128 0x6
 1507 003e 2E       		.uleb128 0x2e
 1508 003f 01       		.byte	0x1
 1509 0040 3F       		.uleb128 0x3f
 1510 0041 19       		.uleb128 0x19
 1511 0042 03       		.uleb128 0x3
 1512 0043 0E       		.uleb128 0xe
 1513 0044 3A       		.uleb128 0x3a
 1514 0045 0B       		.uleb128 0xb
 1515 0046 3B       		.uleb128 0x3b
 1516 0047 0B       		.uleb128 0xb
 1517 0048 27       		.uleb128 0x27
 1518 0049 19       		.uleb128 0x19
 1519 004a 11       		.uleb128 0x11
 1520 004b 01       		.uleb128 0x1
 1521 004c 12       		.uleb128 0x12
 1522 004d 06       		.uleb128 0x6
 1523 004e 40       		.uleb128 0x40
 1524 004f 18       		.uleb128 0x18
 1525 0050 9742     		.uleb128 0x2117
 1526 0052 19       		.uleb128 0x19
 1527 0053 01       		.uleb128 0x1
 1528 0054 13       		.uleb128 0x13
 1529 0055 00       		.byte	0
 1530 0056 00       		.byte	0
 1531 0057 07       		.uleb128 0x7
 1532 0058 898201   		.uleb128 0x4109
 1533 005b 01       		.byte	0x1
 1534 005c 11       		.uleb128 0x11
 1535 005d 01       		.uleb128 0x1
 1536 005e 31       		.uleb128 0x31
 1537 005f 13       		.uleb128 0x13
 1538 0060 01       		.uleb128 0x1
 1539 0061 13       		.uleb128 0x13
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 56


 1540 0062 00       		.byte	0
 1541 0063 00       		.byte	0
 1542 0064 08       		.uleb128 0x8
 1543 0065 8A8201   		.uleb128 0x410a
 1544 0068 00       		.byte	0
 1545 0069 02       		.uleb128 0x2
 1546 006a 18       		.uleb128 0x18
 1547 006b 9142     		.uleb128 0x2111
 1548 006d 18       		.uleb128 0x18
 1549 006e 00       		.byte	0
 1550 006f 00       		.byte	0
 1551 0070 09       		.uleb128 0x9
 1552 0071 898201   		.uleb128 0x4109
 1553 0074 01       		.byte	0x1
 1554 0075 11       		.uleb128 0x11
 1555 0076 01       		.uleb128 0x1
 1556 0077 31       		.uleb128 0x31
 1557 0078 13       		.uleb128 0x13
 1558 0079 00       		.byte	0
 1559 007a 00       		.byte	0
 1560 007b 0A       		.uleb128 0xa
 1561 007c 34       		.uleb128 0x34
 1562 007d 00       		.byte	0
 1563 007e 03       		.uleb128 0x3
 1564 007f 0E       		.uleb128 0xe
 1565 0080 3A       		.uleb128 0x3a
 1566 0081 0B       		.uleb128 0xb
 1567 0082 3B       		.uleb128 0x3b
 1568 0083 0B       		.uleb128 0xb
 1569 0084 49       		.uleb128 0x49
 1570 0085 13       		.uleb128 0x13
 1571 0086 02       		.uleb128 0x2
 1572 0087 17       		.uleb128 0x17
 1573 0088 00       		.byte	0
 1574 0089 00       		.byte	0
 1575 008a 0B       		.uleb128 0xb
 1576 008b 898201   		.uleb128 0x4109
 1577 008e 00       		.byte	0
 1578 008f 11       		.uleb128 0x11
 1579 0090 01       		.uleb128 0x1
 1580 0091 31       		.uleb128 0x31
 1581 0092 13       		.uleb128 0x13
 1582 0093 00       		.byte	0
 1583 0094 00       		.byte	0
 1584 0095 0C       		.uleb128 0xc
 1585 0096 898201   		.uleb128 0x4109
 1586 0099 00       		.byte	0
 1587 009a 11       		.uleb128 0x11
 1588 009b 01       		.uleb128 0x1
 1589 009c 9542     		.uleb128 0x2115
 1590 009e 19       		.uleb128 0x19
 1591 009f 31       		.uleb128 0x31
 1592 00a0 13       		.uleb128 0x13
 1593 00a1 00       		.byte	0
 1594 00a2 00       		.byte	0
 1595 00a3 0D       		.uleb128 0xd
 1596 00a4 2E       		.uleb128 0x2e
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 57


 1597 00a5 00       		.byte	0
 1598 00a6 3F       		.uleb128 0x3f
 1599 00a7 19       		.uleb128 0x19
 1600 00a8 03       		.uleb128 0x3
 1601 00a9 0E       		.uleb128 0xe
 1602 00aa 3A       		.uleb128 0x3a
 1603 00ab 0B       		.uleb128 0xb
 1604 00ac 3B       		.uleb128 0x3b
 1605 00ad 05       		.uleb128 0x5
 1606 00ae 27       		.uleb128 0x27
 1607 00af 19       		.uleb128 0x19
 1608 00b0 49       		.uleb128 0x49
 1609 00b1 13       		.uleb128 0x13
 1610 00b2 11       		.uleb128 0x11
 1611 00b3 01       		.uleb128 0x1
 1612 00b4 12       		.uleb128 0x12
 1613 00b5 06       		.uleb128 0x6
 1614 00b6 40       		.uleb128 0x40
 1615 00b7 18       		.uleb128 0x18
 1616 00b8 9742     		.uleb128 0x2117
 1617 00ba 19       		.uleb128 0x19
 1618 00bb 00       		.byte	0
 1619 00bc 00       		.byte	0
 1620 00bd 0E       		.uleb128 0xe
 1621 00be 2E       		.uleb128 0x2e
 1622 00bf 01       		.byte	0x1
 1623 00c0 3F       		.uleb128 0x3f
 1624 00c1 19       		.uleb128 0x19
 1625 00c2 03       		.uleb128 0x3
 1626 00c3 0E       		.uleb128 0xe
 1627 00c4 3A       		.uleb128 0x3a
 1628 00c5 0B       		.uleb128 0xb
 1629 00c6 3B       		.uleb128 0x3b
 1630 00c7 05       		.uleb128 0x5
 1631 00c8 27       		.uleb128 0x27
 1632 00c9 19       		.uleb128 0x19
 1633 00ca 11       		.uleb128 0x11
 1634 00cb 01       		.uleb128 0x1
 1635 00cc 12       		.uleb128 0x12
 1636 00cd 06       		.uleb128 0x6
 1637 00ce 40       		.uleb128 0x40
 1638 00cf 18       		.uleb128 0x18
 1639 00d0 9742     		.uleb128 0x2117
 1640 00d2 19       		.uleb128 0x19
 1641 00d3 01       		.uleb128 0x1
 1642 00d4 13       		.uleb128 0x13
 1643 00d5 00       		.byte	0
 1644 00d6 00       		.byte	0
 1645 00d7 0F       		.uleb128 0xf
 1646 00d8 05       		.uleb128 0x5
 1647 00d9 00       		.byte	0
 1648 00da 03       		.uleb128 0x3
 1649 00db 0E       		.uleb128 0xe
 1650 00dc 3A       		.uleb128 0x3a
 1651 00dd 0B       		.uleb128 0xb
 1652 00de 3B       		.uleb128 0x3b
 1653 00df 05       		.uleb128 0x5
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 58


 1654 00e0 49       		.uleb128 0x49
 1655 00e1 13       		.uleb128 0x13
 1656 00e2 02       		.uleb128 0x2
 1657 00e3 18       		.uleb128 0x18
 1658 00e4 00       		.byte	0
 1659 00e5 00       		.byte	0
 1660 00e6 10       		.uleb128 0x10
 1661 00e7 34       		.uleb128 0x34
 1662 00e8 00       		.byte	0
 1663 00e9 03       		.uleb128 0x3
 1664 00ea 0E       		.uleb128 0xe
 1665 00eb 3A       		.uleb128 0x3a
 1666 00ec 0B       		.uleb128 0xb
 1667 00ed 3B       		.uleb128 0x3b
 1668 00ee 05       		.uleb128 0x5
 1669 00ef 49       		.uleb128 0x49
 1670 00f0 13       		.uleb128 0x13
 1671 00f1 02       		.uleb128 0x2
 1672 00f2 17       		.uleb128 0x17
 1673 00f3 00       		.byte	0
 1674 00f4 00       		.byte	0
 1675 00f5 11       		.uleb128 0x11
 1676 00f6 05       		.uleb128 0x5
 1677 00f7 00       		.byte	0
 1678 00f8 03       		.uleb128 0x3
 1679 00f9 0E       		.uleb128 0xe
 1680 00fa 3A       		.uleb128 0x3a
 1681 00fb 0B       		.uleb128 0xb
 1682 00fc 3B       		.uleb128 0x3b
 1683 00fd 05       		.uleb128 0x5
 1684 00fe 49       		.uleb128 0x49
 1685 00ff 13       		.uleb128 0x13
 1686 0100 02       		.uleb128 0x2
 1687 0101 17       		.uleb128 0x17
 1688 0102 00       		.byte	0
 1689 0103 00       		.byte	0
 1690 0104 12       		.uleb128 0x12
 1691 0105 0F       		.uleb128 0xf
 1692 0106 00       		.byte	0
 1693 0107 0B       		.uleb128 0xb
 1694 0108 0B       		.uleb128 0xb
 1695 0109 49       		.uleb128 0x49
 1696 010a 13       		.uleb128 0x13
 1697 010b 00       		.byte	0
 1698 010c 00       		.byte	0
 1699 010d 13       		.uleb128 0x13
 1700 010e 26       		.uleb128 0x26
 1701 010f 00       		.byte	0
 1702 0110 49       		.uleb128 0x49
 1703 0111 13       		.uleb128 0x13
 1704 0112 00       		.byte	0
 1705 0113 00       		.byte	0
 1706 0114 14       		.uleb128 0x14
 1707 0115 898201   		.uleb128 0x4109
 1708 0118 01       		.byte	0x1
 1709 0119 11       		.uleb128 0x11
 1710 011a 01       		.uleb128 0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 59


 1711 011b 9542     		.uleb128 0x2115
 1712 011d 19       		.uleb128 0x19
 1713 011e 31       		.uleb128 0x31
 1714 011f 13       		.uleb128 0x13
 1715 0120 00       		.byte	0
 1716 0121 00       		.byte	0
 1717 0122 15       		.uleb128 0x15
 1718 0123 2E       		.uleb128 0x2e
 1719 0124 01       		.byte	0x1
 1720 0125 3F       		.uleb128 0x3f
 1721 0126 19       		.uleb128 0x19
 1722 0127 03       		.uleb128 0x3
 1723 0128 0E       		.uleb128 0xe
 1724 0129 3A       		.uleb128 0x3a
 1725 012a 0B       		.uleb128 0xb
 1726 012b 3B       		.uleb128 0x3b
 1727 012c 05       		.uleb128 0x5
 1728 012d 27       		.uleb128 0x27
 1729 012e 19       		.uleb128 0x19
 1730 012f 49       		.uleb128 0x49
 1731 0130 13       		.uleb128 0x13
 1732 0131 11       		.uleb128 0x11
 1733 0132 01       		.uleb128 0x1
 1734 0133 12       		.uleb128 0x12
 1735 0134 06       		.uleb128 0x6
 1736 0135 40       		.uleb128 0x40
 1737 0136 18       		.uleb128 0x18
 1738 0137 9742     		.uleb128 0x2117
 1739 0139 19       		.uleb128 0x19
 1740 013a 01       		.uleb128 0x1
 1741 013b 13       		.uleb128 0x13
 1742 013c 00       		.byte	0
 1743 013d 00       		.byte	0
 1744 013e 16       		.uleb128 0x16
 1745 013f 0B       		.uleb128 0xb
 1746 0140 01       		.byte	0x1
 1747 0141 55       		.uleb128 0x55
 1748 0142 17       		.uleb128 0x17
 1749 0143 00       		.byte	0
 1750 0144 00       		.byte	0
 1751 0145 17       		.uleb128 0x17
 1752 0146 34       		.uleb128 0x34
 1753 0147 00       		.byte	0
 1754 0148 03       		.uleb128 0x3
 1755 0149 0E       		.uleb128 0xe
 1756 014a 3A       		.uleb128 0x3a
 1757 014b 0B       		.uleb128 0xb
 1758 014c 3B       		.uleb128 0x3b
 1759 014d 05       		.uleb128 0x5
 1760 014e 49       		.uleb128 0x49
 1761 014f 13       		.uleb128 0x13
 1762 0150 02       		.uleb128 0x2
 1763 0151 18       		.uleb128 0x18
 1764 0152 00       		.byte	0
 1765 0153 00       		.byte	0
 1766 0154 18       		.uleb128 0x18
 1767 0155 2E       		.uleb128 0x2e
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 60


 1768 0156 01       		.byte	0x1
 1769 0157 3F       		.uleb128 0x3f
 1770 0158 19       		.uleb128 0x19
 1771 0159 03       		.uleb128 0x3
 1772 015a 0E       		.uleb128 0xe
 1773 015b 3A       		.uleb128 0x3a
 1774 015c 0B       		.uleb128 0xb
 1775 015d 3B       		.uleb128 0x3b
 1776 015e 05       		.uleb128 0x5
 1777 015f 27       		.uleb128 0x27
 1778 0160 19       		.uleb128 0x19
 1779 0161 20       		.uleb128 0x20
 1780 0162 0B       		.uleb128 0xb
 1781 0163 01       		.uleb128 0x1
 1782 0164 13       		.uleb128 0x13
 1783 0165 00       		.byte	0
 1784 0166 00       		.byte	0
 1785 0167 19       		.uleb128 0x19
 1786 0168 05       		.uleb128 0x5
 1787 0169 00       		.byte	0
 1788 016a 03       		.uleb128 0x3
 1789 016b 0E       		.uleb128 0xe
 1790 016c 3A       		.uleb128 0x3a
 1791 016d 0B       		.uleb128 0xb
 1792 016e 3B       		.uleb128 0x3b
 1793 016f 05       		.uleb128 0x5
 1794 0170 49       		.uleb128 0x49
 1795 0171 13       		.uleb128 0x13
 1796 0172 00       		.byte	0
 1797 0173 00       		.byte	0
 1798 0174 1A       		.uleb128 0x1a
 1799 0175 2E       		.uleb128 0x2e
 1800 0176 01       		.byte	0x1
 1801 0177 31       		.uleb128 0x31
 1802 0178 13       		.uleb128 0x13
 1803 0179 11       		.uleb128 0x11
 1804 017a 01       		.uleb128 0x1
 1805 017b 12       		.uleb128 0x12
 1806 017c 06       		.uleb128 0x6
 1807 017d 40       		.uleb128 0x40
 1808 017e 18       		.uleb128 0x18
 1809 017f 9742     		.uleb128 0x2117
 1810 0181 19       		.uleb128 0x19
 1811 0182 01       		.uleb128 0x1
 1812 0183 13       		.uleb128 0x13
 1813 0184 00       		.byte	0
 1814 0185 00       		.byte	0
 1815 0186 1B       		.uleb128 0x1b
 1816 0187 05       		.uleb128 0x5
 1817 0188 00       		.byte	0
 1818 0189 31       		.uleb128 0x31
 1819 018a 13       		.uleb128 0x13
 1820 018b 02       		.uleb128 0x2
 1821 018c 18       		.uleb128 0x18
 1822 018d 00       		.byte	0
 1823 018e 00       		.byte	0
 1824 018f 1C       		.uleb128 0x1c
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 61


 1825 0190 34       		.uleb128 0x34
 1826 0191 00       		.byte	0
 1827 0192 03       		.uleb128 0x3
 1828 0193 0E       		.uleb128 0xe
 1829 0194 3A       		.uleb128 0x3a
 1830 0195 0B       		.uleb128 0xb
 1831 0196 3B       		.uleb128 0x3b
 1832 0197 0B       		.uleb128 0xb
 1833 0198 49       		.uleb128 0x49
 1834 0199 13       		.uleb128 0x13
 1835 019a 3F       		.uleb128 0x3f
 1836 019b 19       		.uleb128 0x19
 1837 019c 02       		.uleb128 0x2
 1838 019d 18       		.uleb128 0x18
 1839 019e 00       		.byte	0
 1840 019f 00       		.byte	0
 1841 01a0 1D       		.uleb128 0x1d
 1842 01a1 01       		.uleb128 0x1
 1843 01a2 01       		.byte	0x1
 1844 01a3 49       		.uleb128 0x49
 1845 01a4 13       		.uleb128 0x13
 1846 01a5 01       		.uleb128 0x1
 1847 01a6 13       		.uleb128 0x13
 1848 01a7 00       		.byte	0
 1849 01a8 00       		.byte	0
 1850 01a9 1E       		.uleb128 0x1e
 1851 01aa 21       		.uleb128 0x21
 1852 01ab 00       		.byte	0
 1853 01ac 49       		.uleb128 0x49
 1854 01ad 13       		.uleb128 0x13
 1855 01ae 2F       		.uleb128 0x2f
 1856 01af 05       		.uleb128 0x5
 1857 01b0 00       		.byte	0
 1858 01b1 00       		.byte	0
 1859 01b2 1F       		.uleb128 0x1f
 1860 01b3 2E       		.uleb128 0x2e
 1861 01b4 00       		.byte	0
 1862 01b5 3F       		.uleb128 0x3f
 1863 01b6 19       		.uleb128 0x19
 1864 01b7 3C       		.uleb128 0x3c
 1865 01b8 19       		.uleb128 0x19
 1866 01b9 6E       		.uleb128 0x6e
 1867 01ba 0E       		.uleb128 0xe
 1868 01bb 03       		.uleb128 0x3
 1869 01bc 0E       		.uleb128 0xe
 1870 01bd 3A       		.uleb128 0x3a
 1871 01be 0B       		.uleb128 0xb
 1872 01bf 3B       		.uleb128 0x3b
 1873 01c0 0B       		.uleb128 0xb
 1874 01c1 00       		.byte	0
 1875 01c2 00       		.byte	0
 1876 01c3 00       		.byte	0
 1877              		.section	.debug_loc,"",%progbits
 1878              	.Ldebug_loc0:
 1879              	.LLST0:
 1880 0000 08000000 		.4byte	.LVL3
 1881 0004 28000000 		.4byte	.LVL5
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 62


 1882 0008 0100     		.2byte	0x1
 1883 000a 54       		.byte	0x54
 1884 000b 00000000 		.4byte	0
 1885 000f 00000000 		.4byte	0
 1886              	.LLST1:
 1887 0013 08000000 		.4byte	.LVL10
 1888 0017 22000000 		.4byte	.LVL12
 1889 001b 0100     		.2byte	0x1
 1890 001d 54       		.byte	0x54
 1891 001e 00000000 		.4byte	0
 1892 0022 00000000 		.4byte	0
 1893              	.LLST2:
 1894 0026 0A000000 		.4byte	.LVL17
 1895 002a 36000000 		.4byte	.LVL20
 1896 002e 0500     		.2byte	0x5
 1897 0030 03       		.byte	0x3
 1898 0031 00000000 		.4byte	UART_txBufferWrite
 1899 0035 38000000 		.4byte	.LVL21
 1900 0039 42000000 		.4byte	.LVL22
 1901 003d 0500     		.2byte	0x5
 1902 003f 03       		.byte	0x3
 1903 0040 00000000 		.4byte	UART_txBufferWrite
 1904 0044 42000000 		.4byte	.LVL22
 1905 0048 44000000 		.4byte	.LVL23
 1906 004c 0100     		.2byte	0x1
 1907 004e 53       		.byte	0x53
 1908 004f 44000000 		.4byte	.LVL23
 1909 0053 46000000 		.4byte	.LVL24
 1910 0057 0300     		.2byte	0x3
 1911 0059 73       		.byte	0x73
 1912 005a 01       		.sleb128 1
 1913 005b 9F       		.byte	0x9f
 1914 005c 46000000 		.4byte	.LVL24
 1915 0060 4A000000 		.4byte	.LVL25
 1916 0064 0300     		.2byte	0x3
 1917 0066 73       		.byte	0x73
 1918 0067 00       		.sleb128 0
 1919 0068 9F       		.byte	0x9f
 1920 0069 4C000000 		.4byte	.LVL26
 1921 006d 6C000000 		.4byte	.LFE9
 1922 0071 2900     		.2byte	0x29
 1923 0073 30       		.byte	0x30
 1924 0074 03       		.byte	0x3
 1925 0075 00000000 		.4byte	UART_txBufferWrite
 1926 0079 94       		.byte	0x94
 1927 007a 02       		.byte	0x2
 1928 007b 0A       		.byte	0xa
 1929 007c FFFF     		.2byte	0xffff
 1930 007e 1A       		.byte	0x1a
 1931 007f 03       		.byte	0x3
 1932 0080 00000000 		.4byte	UART_txBufferWrite
 1933 0084 94       		.byte	0x94
 1934 0085 02       		.byte	0x2
 1935 0086 0A       		.byte	0xa
 1936 0087 FFFF     		.2byte	0xffff
 1937 0089 1A       		.byte	0x1a
 1938 008a 40       		.byte	0x40
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 63


 1939 008b 4B       		.byte	0x4b
 1940 008c 24       		.byte	0x24
 1941 008d 22       		.byte	0x22
 1942 008e 0C       		.byte	0xc
 1943 008f 00100080 		.4byte	0x80001000
 1944 0093 2A       		.byte	0x2a
 1945 0094 28       		.byte	0x28
 1946 0095 0100     		.2byte	0x1
 1947 0097 16       		.byte	0x16
 1948 0098 13       		.byte	0x13
 1949 0099 23       		.byte	0x23
 1950 009a 01       		.uleb128 0x1
 1951 009b 9F       		.byte	0x9f
 1952 009c 00000000 		.4byte	0
 1953 00a0 00000000 		.4byte	0
 1954              	.LLST3:
 1955 00a4 0E000000 		.4byte	.LVL18
 1956 00a8 2A000000 		.4byte	.LVL19
 1957 00ac 0100     		.2byte	0x1
 1958 00ae 52       		.byte	0x52
 1959 00af 00000000 		.4byte	0
 1960 00b3 00000000 		.4byte	0
 1961              	.LLST4:
 1962 00b7 00000000 		.4byte	.LVL27
 1963 00bb 0C000000 		.4byte	.LVL28
 1964 00bf 0100     		.2byte	0x1
 1965 00c1 50       		.byte	0x50
 1966 00c2 0C000000 		.4byte	.LVL28
 1967 00c6 1C000000 		.4byte	.LVL32
 1968 00ca 0100     		.2byte	0x1
 1969 00cc 55       		.byte	0x55
 1970 00cd 1C000000 		.4byte	.LVL32
 1971 00d1 20000000 		.4byte	.LFE10
 1972 00d5 0400     		.2byte	0x4
 1973 00d7 F3       		.byte	0xf3
 1974 00d8 01       		.uleb128 0x1
 1975 00d9 50       		.byte	0x50
 1976 00da 9F       		.byte	0x9f
 1977 00db 00000000 		.4byte	0
 1978 00df 00000000 		.4byte	0
 1979              	.LLST5:
 1980 00e3 00000000 		.4byte	.LVL27
 1981 00e7 0C000000 		.4byte	.LVL28
 1982 00eb 0200     		.2byte	0x2
 1983 00ed 30       		.byte	0x30
 1984 00ee 9F       		.byte	0x9f
 1985 00ef 0C000000 		.4byte	.LVL28
 1986 00f3 0E000000 		.4byte	.LVL29
 1987 00f7 0100     		.2byte	0x1
 1988 00f9 54       		.byte	0x54
 1989 00fa 0E000000 		.4byte	.LVL29
 1990 00fe 17000000 		.4byte	.LVL30-1
 1991 0102 0100     		.2byte	0x1
 1992 0104 53       		.byte	0x53
 1993 0105 18000000 		.4byte	.LVL30
 1994 0109 1A000000 		.4byte	.LVL31
 1995 010d 0100     		.2byte	0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 64


 1996 010f 54       		.byte	0x54
 1997 0110 00000000 		.4byte	0
 1998 0114 00000000 		.4byte	0
 1999              	.LLST6:
 2000 0118 00000000 		.4byte	.LVL33
 2001 011c 0E000000 		.4byte	.LVL35
 2002 0120 0100     		.2byte	0x1
 2003 0122 50       		.byte	0x50
 2004 0123 0E000000 		.4byte	.LVL35
 2005 0127 24000000 		.4byte	.LFE11
 2006 012b 0400     		.2byte	0x4
 2007 012d F3       		.byte	0xf3
 2008 012e 01       		.uleb128 0x1
 2009 012f 50       		.byte	0x50
 2010 0130 9F       		.byte	0x9f
 2011 0131 00000000 		.4byte	0
 2012 0135 00000000 		.4byte	0
 2013              	.LLST7:
 2014 0139 00000000 		.4byte	.LVL33
 2015 013d 0A000000 		.4byte	.LVL34
 2016 0141 0100     		.2byte	0x1
 2017 0143 51       		.byte	0x51
 2018 0144 0A000000 		.4byte	.LVL34
 2019 0148 24000000 		.4byte	.LFE11
 2020 014c 0400     		.2byte	0x4
 2021 014e F3       		.byte	0xf3
 2022 014f 01       		.uleb128 0x1
 2023 0150 51       		.byte	0x51
 2024 0151 9F       		.byte	0x9f
 2025 0152 00000000 		.4byte	0
 2026 0156 00000000 		.4byte	0
 2027              	.LLST8:
 2028 015a 00000000 		.4byte	.LVL33
 2029 015e 0E000000 		.4byte	.LVL35
 2030 0162 0200     		.2byte	0x2
 2031 0164 30       		.byte	0x30
 2032 0165 9F       		.byte	0x9f
 2033 0166 0E000000 		.4byte	.LVL35
 2034 016a 16000000 		.4byte	.LVL36
 2035 016e 0900     		.2byte	0x9
 2036 0170 75       		.byte	0x75
 2037 0171 00       		.sleb128 0
 2038 0172 F3       		.byte	0xf3
 2039 0173 01       		.uleb128 0x1
 2040 0174 50       		.byte	0x50
 2041 0175 31       		.byte	0x31
 2042 0176 1C       		.byte	0x1c
 2043 0177 1C       		.byte	0x1c
 2044 0178 9F       		.byte	0x9f
 2045 0179 1A000000 		.4byte	.LVL37
 2046 017d 1C000000 		.4byte	.LVL38
 2047 0181 0900     		.2byte	0x9
 2048 0183 75       		.byte	0x75
 2049 0184 00       		.sleb128 0
 2050 0185 F3       		.byte	0xf3
 2051 0186 01       		.uleb128 0x1
 2052 0187 50       		.byte	0x50
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 65


 2053 0188 31       		.byte	0x31
 2054 0189 1C       		.byte	0x1c
 2055 018a 1C       		.byte	0x1c
 2056 018b 9F       		.byte	0x9f
 2057 018c 00000000 		.4byte	0
 2058 0190 00000000 		.4byte	0
 2059              	.LLST9:
 2060 0194 00000000 		.4byte	.LVL39
 2061 0198 0B000000 		.4byte	.LVL40-1
 2062 019c 0100     		.2byte	0x1
 2063 019e 50       		.byte	0x50
 2064 019f 0B000000 		.4byte	.LVL40-1
 2065 01a3 1C000000 		.4byte	.LVL42
 2066 01a7 0400     		.2byte	0x4
 2067 01a9 F3       		.byte	0xf3
 2068 01aa 01       		.uleb128 0x1
 2069 01ab 50       		.byte	0x50
 2070 01ac 9F       		.byte	0x9f
 2071 01ad 1C000000 		.4byte	.LVL42
 2072 01b1 24000000 		.4byte	.LFE12
 2073 01b5 0100     		.2byte	0x1
 2074 01b7 50       		.byte	0x50
 2075 01b8 00000000 		.4byte	0
 2076 01bc 00000000 		.4byte	0
 2077              	.LLST10:
 2078 01c0 24000000 		.4byte	.LVL43
 2079 01c4 26000000 		.4byte	.LVL44
 2080 01c8 0100     		.2byte	0x1
 2081 01ca 50       		.byte	0x50
 2082 01cb 28000000 		.4byte	.LVL45
 2083 01cf 3C000000 		.4byte	.LFE13
 2084 01d3 0100     		.2byte	0x1
 2085 01d5 50       		.byte	0x50
 2086 01d6 00000000 		.4byte	0
 2087 01da 00000000 		.4byte	0
 2088              	.LLST11:
 2089 01de 06000000 		.4byte	.LVL46
 2090 01e2 1B000000 		.4byte	.LVL47-1
 2091 01e6 0100     		.2byte	0x1
 2092 01e8 50       		.byte	0x50
 2093 01e9 00000000 		.4byte	0
 2094 01ed 00000000 		.4byte	0
 2095              	.LLST12:
 2096 01f1 00000000 		.4byte	.LVL48
 2097 01f5 2E000000 		.4byte	.LVL51
 2098 01f9 0100     		.2byte	0x1
 2099 01fb 50       		.byte	0x50
 2100 01fc 2E000000 		.4byte	.LVL51
 2101 0200 34000000 		.4byte	.LVL52
 2102 0204 0400     		.2byte	0x4
 2103 0206 F3       		.byte	0xf3
 2104 0207 01       		.uleb128 0x1
 2105 0208 50       		.byte	0x50
 2106 0209 9F       		.byte	0x9f
 2107 020a 34000000 		.4byte	.LVL52
 2108 020e 3E000000 		.4byte	.LVL55
 2109 0212 0100     		.2byte	0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 66


 2110 0214 50       		.byte	0x50
 2111 0215 3E000000 		.4byte	.LVL55
 2112 0219 46000000 		.4byte	.LVL56
 2113 021d 0400     		.2byte	0x4
 2114 021f F3       		.byte	0xf3
 2115 0220 01       		.uleb128 0x1
 2116 0221 50       		.byte	0x50
 2117 0222 9F       		.byte	0x9f
 2118 0223 46000000 		.4byte	.LVL56
 2119 0227 58000000 		.4byte	.LFE15
 2120 022b 0100     		.2byte	0x1
 2121 022d 50       		.byte	0x50
 2122 022e 00000000 		.4byte	0
 2123 0232 00000000 		.4byte	0
 2124              	.LLST13:
 2125 0236 20000000 		.4byte	.LVL49
 2126 023a 22000000 		.4byte	.LVL50
 2127 023e 0100     		.2byte	0x1
 2128 0240 52       		.byte	0x52
 2129 0241 38000000 		.4byte	.LVL53
 2130 0245 3A000000 		.4byte	.LVL54
 2131 0249 0100     		.2byte	0x1
 2132 024b 52       		.byte	0x52
 2133 024c 00000000 		.4byte	0
 2134 0250 00000000 		.4byte	0
 2135              		.section	.debug_aranges,"",%progbits
 2136 0000 94000000 		.4byte	0x94
 2137 0004 0200     		.2byte	0x2
 2138 0006 00000000 		.4byte	.Ldebug_info0
 2139 000a 04       		.byte	0x4
 2140 000b 00       		.byte	0
 2141 000c 0000     		.2byte	0
 2142 000e 0000     		.2byte	0
 2143 0010 00000000 		.4byte	.LFB1
 2144 0014 2C000000 		.4byte	.LFE1-.LFB1
 2145 0018 00000000 		.4byte	.LFB2
 2146 001c 34000000 		.4byte	.LFE2-.LFB2
 2147 0020 00000000 		.4byte	.LFB0
 2148 0024 1C000000 		.4byte	.LFE0-.LFB0
 2149 0028 00000000 		.4byte	.LFB3
 2150 002c 30000000 		.4byte	.LFE3-.LFB3
 2151 0030 00000000 		.4byte	.LFB4
 2152 0034 04000000 		.4byte	.LFE4-.LFB4
 2153 0038 00000000 		.4byte	.LFB6
 2154 003c 0C000000 		.4byte	.LFE6-.LFB6
 2155 0040 00000000 		.4byte	.LFB7
 2156 0044 5C000000 		.4byte	.LFE7-.LFB7
 2157 0048 00000000 		.4byte	.LFB8
 2158 004c 0C000000 		.4byte	.LFE8-.LFB8
 2159 0050 00000000 		.4byte	.LFB9
 2160 0054 6C000000 		.4byte	.LFE9-.LFB9
 2161 0058 00000000 		.4byte	.LFB10
 2162 005c 20000000 		.4byte	.LFE10-.LFB10
 2163 0060 00000000 		.4byte	.LFB11
 2164 0064 24000000 		.4byte	.LFE11-.LFB11
 2165 0068 00000000 		.4byte	.LFB12
 2166 006c 24000000 		.4byte	.LFE12-.LFB12
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 67


 2167 0070 00000000 		.4byte	.LFB13
 2168 0074 3C000000 		.4byte	.LFE13-.LFB13
 2169 0078 00000000 		.4byte	.LFB14
 2170 007c 40000000 		.4byte	.LFE14-.LFB14
 2171 0080 00000000 		.4byte	.LFB15
 2172 0084 58000000 		.4byte	.LFE15-.LFB15
 2173 0088 00000000 		.4byte	.LFB16
 2174 008c 02000000 		.4byte	.LFE16-.LFB16
 2175 0090 00000000 		.4byte	0
 2176 0094 00000000 		.4byte	0
 2177              		.section	.debug_ranges,"",%progbits
 2178              	.Ldebug_ranges0:
 2179 0000 06000000 		.4byte	.LBB2
 2180 0004 44000000 		.4byte	.LBE2
 2181 0008 46000000 		.4byte	.LBB3
 2182 000c 58000000 		.4byte	.LBE3
 2183 0010 00000000 		.4byte	0
 2184 0014 00000000 		.4byte	0
 2185 0018 00000000 		.4byte	.LFB1
 2186 001c 2C000000 		.4byte	.LFE1
 2187 0020 00000000 		.4byte	.LFB2
 2188 0024 34000000 		.4byte	.LFE2
 2189 0028 00000000 		.4byte	.LFB0
 2190 002c 1C000000 		.4byte	.LFE0
 2191 0030 00000000 		.4byte	.LFB3
 2192 0034 30000000 		.4byte	.LFE3
 2193 0038 00000000 		.4byte	.LFB4
 2194 003c 04000000 		.4byte	.LFE4
 2195 0040 00000000 		.4byte	.LFB6
 2196 0044 0C000000 		.4byte	.LFE6
 2197 0048 00000000 		.4byte	.LFB7
 2198 004c 5C000000 		.4byte	.LFE7
 2199 0050 00000000 		.4byte	.LFB8
 2200 0054 0C000000 		.4byte	.LFE8
 2201 0058 00000000 		.4byte	.LFB9
 2202 005c 6C000000 		.4byte	.LFE9
 2203 0060 00000000 		.4byte	.LFB10
 2204 0064 20000000 		.4byte	.LFE10
 2205 0068 00000000 		.4byte	.LFB11
 2206 006c 24000000 		.4byte	.LFE11
 2207 0070 00000000 		.4byte	.LFB12
 2208 0074 24000000 		.4byte	.LFE12
 2209 0078 00000000 		.4byte	.LFB13
 2210 007c 3C000000 		.4byte	.LFE13
 2211 0080 00000000 		.4byte	.LFB14
 2212 0084 40000000 		.4byte	.LFE14
 2213 0088 00000000 		.4byte	.LFB15
 2214 008c 58000000 		.4byte	.LFE15
 2215 0090 00000000 		.4byte	.LFB16
 2216 0094 02000000 		.4byte	.LFE16
 2217 0098 00000000 		.4byte	0
 2218 009c 00000000 		.4byte	0
 2219              		.section	.debug_line,"",%progbits
 2220              	.Ldebug_line0:
 2221 0000 29020000 		.section	.debug_str,"MS",%progbits,1
 2221      02005F00 
 2221      00000201 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 68


 2221      FB0E0D00 
 2221      01010101 
 2222              	.LASF6:
 2223 0000 6C6F6E67 		.ascii	"long long int\000"
 2223      206C6F6E 
 2223      6720696E 
 2223      7400
 2224              	.LASF17:
 2225 000e 72656733 		.ascii	"reg32\000"
 2225      3200
 2226              	.LASF45:
 2227 0014 74785065 		.ascii	"txPeriod\000"
 2227      72696F64 
 2227      00
 2228              	.LASF14:
 2229 001d 63686172 		.ascii	"char8\000"
 2229      3800
 2230              	.LASF50:
 2231 0023 4379496E 		.ascii	"CyIntSetVector\000"
 2231      74536574 
 2231      56656374 
 2231      6F7200
 2232              	.LASF44:
 2233 0032 746D7053 		.ascii	"tmpStat\000"
 2233      74617400 
 2234              	.LASF47:
 2235 003a 55415254 		.ascii	"UART_txBuffer\000"
 2235      5F747842 
 2235      75666665 
 2235      7200
 2236              	.LASF3:
 2237 0048 73686F72 		.ascii	"short unsigned int\000"
 2237      7420756E 
 2237      7369676E 
 2237      65642069 
 2237      6E7400
 2238              	.LASF46:
 2239 005b 55415254 		.ascii	"UART_initVar\000"
 2239      5F696E69 
 2239      74566172 
 2239      00
 2240              	.LASF35:
 2241 0068 73747269 		.ascii	"string\000"
 2241      6E6700
 2242              	.LASF53:
 2243 006f 55415254 		.ascii	"UART_IntClock_Start\000"
 2243      5F496E74 
 2243      436C6F63 
 2243      6B5F5374 
 2243      61727400 
 2244              	.LASF12:
 2245 0083 666C6F61 		.ascii	"float\000"
 2245      7400
 2246              	.LASF7:
 2247 0089 6C6F6E67 		.ascii	"long long unsigned int\000"
 2247      206C6F6E 
 2247      6720756E 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 69


 2247      7369676E 
 2247      65642069 
 2248              	.LASF61:
 2249 00a0 61646472 		.ascii	"addressMode\000"
 2249      6573734D 
 2249      6F646500 
 2250              	.LASF20:
 2251 00ac 55415254 		.ascii	"UART_Init\000"
 2251      5F496E69 
 2251      7400
 2252              	.LASF16:
 2253 00b6 72656738 		.ascii	"reg8\000"
 2253      00
 2254              	.LASF57:
 2255 00bb 47656E65 		.ascii	"Generated_Source\\PSoC5\\UART.c\000"
 2255      72617465 
 2255      645F536F 
 2255      75726365 
 2255      5C50536F 
 2256              	.LASF56:
 2257 00d9 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2257      43313120 
 2257      352E342E 
 2257      31203230 
 2257      31363036 
 2258 010c 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2258      20726576 
 2258      6973696F 
 2258      6E203233 
 2258      37373135 
 2259 013f 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects\000"
 2259      66756E63 
 2259      74696F6E 
 2259      2D736563 
 2259      74696F6E 
 2260              	.LASF9:
 2261 0167 75696E74 		.ascii	"uint8\000"
 2261      3800
 2262              	.LASF22:
 2263 016d 55415254 		.ascii	"UART_Start\000"
 2263      5F537461 
 2263      727400
 2264              	.LASF37:
 2265 0178 55415254 		.ascii	"UART_PutArray\000"
 2265      5F507574 
 2265      41727261 
 2265      7900
 2266              	.LASF58:
 2267 0186 433A5C55 		.ascii	"C:\\Users\\jmspi\\OneDrive\\Documents\\GitHub\\ECE4"
 2267      73657273 
 2267      5C6A6D73 
 2267      70695C4F 
 2267      6E654472 
 2268 01b3 3139315C 		.ascii	"191\\DeliveryRobot.cydsn\000"
 2268      44656C69 
 2268      76657279 
 2268      526F626F 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 70


 2268      742E6379 
 2269              	.LASF38:
 2270 01cb 62797465 		.ascii	"byteCount\000"
 2270      436F756E 
 2270      7400
 2271              	.LASF24:
 2272 01d5 656E6162 		.ascii	"enableInterrupts\000"
 2272      6C65496E 
 2272      74657272 
 2272      75707473 
 2272      00
 2273              	.LASF33:
 2274 01e6 6C6F6354 		.ascii	"locTxBufferRead\000"
 2274      78427566 
 2274      66657252 
 2274      65616400 
 2275              	.LASF13:
 2276 01f6 646F7562 		.ascii	"double\000"
 2276      6C6500
 2277              	.LASF27:
 2278 01fd 696E7453 		.ascii	"intSrc\000"
 2278      726300
 2279              	.LASF2:
 2280 0204 73686F72 		.ascii	"short int\000"
 2280      7420696E 
 2280      7400
 2281              	.LASF10:
 2282 020e 75696E74 		.ascii	"uint16\000"
 2282      313600
 2283              	.LASF42:
 2284 0215 55415254 		.ascii	"UART_SendBreak\000"
 2284      5F53656E 
 2284      64427265 
 2284      616B00
 2285              	.LASF11:
 2286 0224 75696E74 		.ascii	"uint32\000"
 2286      333200
 2287              	.LASF60:
 2288 022b 55415254 		.ascii	"UART_SetTxAddressMode\000"
 2288      5F536574 
 2288      54784164 
 2288      64726573 
 2288      734D6F64 
 2289              	.LASF52:
 2290 0241 4379456E 		.ascii	"CyEnterCriticalSection\000"
 2290      74657243 
 2290      72697469 
 2290      63616C53 
 2290      65637469 
 2291              	.LASF5:
 2292 0258 6C6F6E67 		.ascii	"long unsigned int\000"
 2292      20756E73 
 2292      69676E65 
 2292      6420696E 
 2292      7400
 2293              	.LASF8:
 2294 026a 756E7369 		.ascii	"unsigned int\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 71


 2294      676E6564 
 2294      20696E74 
 2294      00
 2295              	.LASF30:
 2296 0277 55415254 		.ascii	"UART_ReadTxStatus\000"
 2296      5F526561 
 2296      64547853 
 2296      74617475 
 2296      7300
 2297              	.LASF54:
 2298 0289 43794578 		.ascii	"CyExitCriticalSection\000"
 2298      69744372 
 2298      69746963 
 2298      616C5365 
 2298      6374696F 
 2299              	.LASF51:
 2300 029f 4379496E 		.ascii	"CyIntSetPriority\000"
 2300      74536574 
 2300      5072696F 
 2300      72697479 
 2300      00
 2301              	.LASF29:
 2302 02b0 55415254 		.ascii	"UART_ReadControlRegister\000"
 2302      5F526561 
 2302      64436F6E 
 2302      74726F6C 
 2302      52656769 
 2303              	.LASF39:
 2304 02c9 55415254 		.ascii	"UART_PutCRLF\000"
 2304      5F507574 
 2304      43524C46 
 2304      00
 2305              	.LASF36:
 2306 02d6 62756649 		.ascii	"bufIndex\000"
 2306      6E646578 
 2306      00
 2307              	.LASF25:
 2308 02df 55415254 		.ascii	"UART_SetTxInterruptMode\000"
 2308      5F536574 
 2308      5478496E 
 2308      74657272 
 2308      7570744D 
 2309              	.LASF18:
 2310 02f7 6C6F6E67 		.ascii	"long double\000"
 2310      20646F75 
 2310      626C6500 
 2311              	.LASF31:
 2312 0303 55415254 		.ascii	"UART_PutChar\000"
 2312      5F507574 
 2312      43686172 
 2312      00
 2313              	.LASF55:
 2314 0310 55415254 		.ascii	"UART_IntClock_Stop\000"
 2314      5F496E74 
 2314      436C6F63 
 2314      6B5F5374 
 2314      6F7000
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 72


 2315              	.LASF19:
 2316 0323 73697A65 		.ascii	"sizetype\000"
 2316      74797065 
 2316      00
 2317              	.LASF28:
 2318 032c 74784461 		.ascii	"txDataByte\000"
 2318      74614279 
 2318      746500
 2319              	.LASF15:
 2320 0337 63686172 		.ascii	"char\000"
 2320      00
 2321              	.LASF26:
 2322 033c 55415254 		.ascii	"UART_WriteTxData\000"
 2322      5F577269 
 2322      74655478 
 2322      44617461 
 2322      00
 2323              	.LASF43:
 2324 034d 7265744D 		.ascii	"retMode\000"
 2324      6F646500 
 2325              	.LASF32:
 2326 0355 6C6F6354 		.ascii	"locTxBufferWrite\000"
 2326      78427566 
 2326      66657257 
 2326      72697465 
 2326      00
 2327              	.LASF1:
 2328 0366 756E7369 		.ascii	"unsigned char\000"
 2328      676E6564 
 2328      20636861 
 2328      7200
 2329              	.LASF41:
 2330 0374 55415254 		.ascii	"UART_ClearTxBuffer\000"
 2330      5F436C65 
 2330      61725478 
 2330      42756666 
 2330      657200
 2331              	.LASF23:
 2332 0387 55415254 		.ascii	"UART_Stop\000"
 2332      5F53746F 
 2332      7000
 2333              	.LASF49:
 2334 0391 55415254 		.ascii	"UART_txBufferWrite\000"
 2334      5F747842 
 2334      75666665 
 2334      72577269 
 2334      746500
 2335              	.LASF59:
 2336 03a4 55415254 		.ascii	"UART_GetTxBufferSize\000"
 2336      5F476574 
 2336      54784275 
 2336      66666572 
 2336      53697A65 
 2337              	.LASF4:
 2338 03b9 6C6F6E67 		.ascii	"long int\000"
 2338      20696E74 
 2338      00
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccYbotPR.s 			page 73


 2339              	.LASF48:
 2340 03c2 55415254 		.ascii	"UART_txBufferRead\000"
 2340      5F747842 
 2340      75666665 
 2340      72526561 
 2340      6400
 2341              	.LASF21:
 2342 03d4 55415254 		.ascii	"UART_Enable\000"
 2342      5F456E61 
 2342      626C6500 
 2343              	.LASF0:
 2344 03e0 7369676E 		.ascii	"signed char\000"
 2344      65642063 
 2344      68617200 
 2345              	.LASF34:
 2346 03ec 55415254 		.ascii	"UART_PutString\000"
 2346      5F507574 
 2346      53747269 
 2346      6E6700
 2347              	.LASF40:
 2348 03fb 73697A65 		.ascii	"size\000"
 2348      00
 2349              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
