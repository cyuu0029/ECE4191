ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	PULSES_PER_REV
  20              		.section	.rodata
  21              		.align	3
  22              		.type	PULSES_PER_REV, %object
  23              		.size	PULSES_PER_REV, 8
  24              	PULSES_PER_REV:
  25 0000 A4703D0A 		.word	171798692
  26 0004 D70FAC40 		.word	1085018071
  27              		.global	POSE_UPDATE_PERIOD
  28              		.align	3
  29              		.type	POSE_UPDATE_PERIOD, %object
  30              		.size	POSE_UPDATE_PERIOD, 8
  31              	POSE_UPDATE_PERIOD:
  32 0008 7B14AE47 		.word	1202590843
  33 000c E17A943F 		.word	1066695393
  34              		.global	echo_flag
  35              		.bss
  36              		.type	echo_flag, %object
  37              		.size	echo_flag, 1
  38              	echo_flag:
  39 0000 00       		.space	1
  40              		.global	max_count
  41              		.data
  42              		.align	1
  43              		.type	max_count, %object
  44              		.size	max_count, 2
  45              	max_count:
  46 0000 FFFF     		.short	-1
  47              		.comm	echo_distance,2,2
  48              		.global	mux_select
  49              		.bss
  50              		.type	mux_select, %object
  51              		.size	mux_select, 1
  52              	mux_select:
  53 0001 00       		.space	1
  54              		.global	left_wheel_count
  55 0002 0000     		.align	2
  56              		.type	left_wheel_count, %object
  57              		.size	left_wheel_count, 4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 2


  58              	left_wheel_count:
  59 0004 00000000 		.space	4
  60              		.global	right_wheel_count
  61              		.align	2
  62              		.type	right_wheel_count, %object
  63              		.size	right_wheel_count, 4
  64              	right_wheel_count:
  65 0008 00000000 		.space	4
  66              		.comm	serial_output,150,4
  67              		.global	wall_following_flag
  68              		.align	2
  69              		.type	wall_following_flag, %object
  70              		.size	wall_following_flag, 4
  71              	wall_following_flag:
  72 000c 00000000 		.space	4
  73              		.comm	left_motor,72,8
  74              		.comm	right_motor,72,8
  75              		.comm	robot,112,8
  76              		.comm	sensors,48,4
  77              		.section	.text.Timer_Int_Handler,"ax",%progbits
  78              		.align	2
  79              		.global	Timer_Int_Handler
  80              		.thumb
  81              		.thumb_func
  82              		.type	Timer_Int_Handler, %function
  83              	Timer_Int_Handler:
  84              	.LFB64:
  85              		.file 1 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  *
   3:main.c        ****  * Copyright YOUR COMPANY, THE YEAR
   4:main.c        ****  * All Rights Reserved
   5:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:main.c        ****  *
   7:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:main.c        ****  * WHICH IS THE PROPERTY OF your company.
   9:main.c        ****  *
  10:main.c        ****  * ========================================
  11:main.c        **** */
  12:main.c        **** 
  13:main.c        **** /* Import all libraries and header files. */
  14:main.c        **** #include "project.h"
  15:main.c        **** #include <stdio.h>
  16:main.c        **** #include <stdlib.h>
  17:main.c        **** #include <math.h>
  18:main.c        **** #include <stdbool.h>
  19:main.c        **** #include "..\Helper\helper.h"
  20:main.c        **** #include "..\Robot\robot.h"
  21:main.c        **** 
  22:main.c        **** /* Define all global variables. */
  23:main.c        **** #define N_SENSORS 6     // Number of Ultrasonic Sensors
  24:main.c        **** 
  25:main.c        **** #ifndef M_PI    // Pi, duh!
  26:main.c        **** #define M_PI 3.141592653589793238462643383279502884196      
  27:main.c        **** #endif
  28:main.c        **** 
  29:main.c        **** #ifndef M_TWOPI     // 2*Pi, duh!
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 3


  30:main.c        **** #define M_TWOPI 6.2831853071795862319959        
  31:main.c        **** #endif
  32:main.c        **** 
  33:main.c        **** #ifndef M_E     // Exponential, duh!
  34:main.c        **** #define M_E 2.71828182845904523536
  35:main.c        **** #endif
  36:main.c        **** 
  37:main.c        **** const double PULSES_PER_REV = 3591.92;
  38:main.c        **** const double POSE_UPDATE_PERIOD = 1.0/50.0; // seconds
  39:main.c        **** 
  40:main.c        **** uint8_t echo_flag = 0;          // Ultrasonic flag
  41:main.c        **** uint16_t max_count = 65535;     // Ultrasonic time count
  42:main.c        **** uint16_t echo_distance;         // Ultrasonic distance
  43:main.c        **** uint8_t mux_select = 0;         // For selecting specific ultrasonic sensor
  44:main.c        **** 
  45:main.c        **** int32 left_wheel_count = 0;
  46:main.c        **** int32 right_wheel_count = 0;
  47:main.c        **** char serial_output[150];        // For UART print output
  48:main.c        **** int wall_following_flag = 0;
  49:main.c        **** 
  50:main.c        **** /* Defining/Creating all data structures*/
  51:main.c        **** Motor left_motor;     // Left Motor, duh!
  52:main.c        **** Motor right_motor;    // Right Motor, duh!
  53:main.c        **** Robot robot;          // Robot values, duh!
  54:main.c        **** Sensor sensors;       // Ultrasonics
  55:main.c        **** 
  56:main.c        **** void Drive_Left_Motor(long double duty_cycle);
  57:main.c        **** void Drive_Right_Motor(long double duty_cycle);
  58:main.c        **** void Turn_Delay(long double angle);
  59:main.c        **** void move_servo(int servo_nums);
  60:main.c        **** 
  61:main.c        **** /* Interrupt to obtain Ultrasonic measurement value. */  
  62:main.c        **** CY_ISR( Timer_Int_Handler ) {
  86              		.loc 1 62 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90 0000 98B5     		push	{r3, r4, r7, lr}
  91              		.cfi_def_cfa_offset 16
  92              		.cfi_offset 3, -16
  93              		.cfi_offset 4, -12
  94              		.cfi_offset 7, -8
  95              		.cfi_offset 14, -4
  96 0002 00AF     		add	r7, sp, #0
  97              		.cfi_def_cfa_register 7
  63:main.c        ****     // Collect measurement 
  64:main.c        ****     echo_distance = max_count - Timer_Echo_ReadCapture();   // in cm
  98              		.loc 1 64 0
  99 0004 164B     		ldr	r3, .L3
 100 0006 1C88     		ldrh	r4, [r3]
 101 0008 FFF7FEFF 		bl	Timer_Echo_ReadCapture
 102 000c 0346     		mov	r3, r0
 103 000e E31A     		subs	r3, r4, r3
 104 0010 9AB2     		uxth	r2, r3
 105 0012 144B     		ldr	r3, .L3+4
 106 0014 1A80     		strh	r2, [r3]	@ movhi
  65:main.c        ****     sensors.distance[mux_select] = echo_distance;      // Store measured value
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 4


 107              		.loc 1 65 0
 108 0016 144B     		ldr	r3, .L3+8
 109 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 110 001a 1846     		mov	r0, r3
 111 001c 114B     		ldr	r3, .L3+4
 112 001e 1B88     		ldrh	r3, [r3]
 113 0020 1946     		mov	r1, r3
 114 0022 124A     		ldr	r2, .L3+12
 115 0024 831D     		adds	r3, r0, #6
 116 0026 42F82310 		str	r1, [r2, r3, lsl #2]
  66:main.c        ****     mux_select++;   // Iterate the global ultrasonic tracker
 117              		.loc 1 66 0
 118 002a 0F4B     		ldr	r3, .L3+8
 119 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 120 002e 0133     		adds	r3, r3, #1
 121 0030 DAB2     		uxtb	r2, r3
 122 0032 0D4B     		ldr	r3, .L3+8
 123 0034 1A70     		strb	r2, [r3]
  67:main.c        **** 
  68:main.c        ****     // Reset the global ultrasonic tracker when all measurements have been updated
  69:main.c        ****     if( mux_select == N_SENSORS ) { 
 124              		.loc 1 69 0
 125 0036 0C4B     		ldr	r3, .L3+8
 126 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 127 003a 062B     		cmp	r3, #6
 128 003c 05D1     		bne	.L2
  70:main.c        ****         mux_select = 0; 
 129              		.loc 1 70 0
 130 003e 0A4B     		ldr	r3, .L3+8
 131 0040 0022     		movs	r2, #0
 132 0042 1A70     		strb	r2, [r3]
  71:main.c        ****         wall_following_flag = 1;
 133              		.loc 1 71 0
 134 0044 0A4B     		ldr	r3, .L3+16
 135 0046 0122     		movs	r2, #1
 136 0048 1A60     		str	r2, [r3]
 137              	.L2:
  72:main.c        ****     }
  73:main.c        **** 
  74:main.c        ****     Control_Reg_US_Write(mux_select);
 138              		.loc 1 74 0
 139 004a 074B     		ldr	r3, .L3+8
 140 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 141 004e 1846     		mov	r0, r3
 142 0050 FFF7FEFF 		bl	Control_Reg_US_Write
  75:main.c        ****     PWM_Trigger_WriteCounter(255);    
 143              		.loc 1 75 0
 144 0054 FF20     		movs	r0, #255
 145 0056 FFF7FEFF 		bl	PWM_Trigger_WriteCounter
  76:main.c        **** }
 146              		.loc 1 76 0
 147 005a 00BF     		nop
 148 005c 98BD     		pop	{r3, r4, r7, pc}
 149              	.L4:
 150 005e 00BF     		.align	2
 151              	.L3:
 152 0060 00000000 		.word	max_count
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 5


 153 0064 00000000 		.word	echo_distance
 154 0068 00000000 		.word	mux_select
 155 006c 00000000 		.word	sensors
 156 0070 00000000 		.word	wall_following_flag
 157              		.cfi_endproc
 158              	.LFE64:
 159              		.size	Timer_Int_Handler, .-Timer_Int_Handler
 160              		.global	__aeabi_i2d
 161              		.global	__aeabi_dmul
 162              		.global	__aeabi_ddiv
 163              		.global	__aeabi_dsub
 164              		.global	__aeabi_dadd
 165              		.global	__aeabi_dcmpgt
 166              		.global	__aeabi_dcmplt
 167              		.section	.text.Pose_Update_Int_Handler,"ax",%progbits
 168              		.align	2
 169              		.global	Pose_Update_Int_Handler
 170              		.thumb
 171              		.thumb_func
 172              		.type	Pose_Update_Int_Handler, %function
 173              	Pose_Update_Int_Handler:
 174              	.LFB65:
  77:main.c        **** 
  78:main.c        **** /* Interrupt for Robot pose and desired drive update. */
  79:main.c        **** CY_ISR( Pose_Update_Int_Handler ) {
 175              		.loc 1 79 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 32
 178              		@ frame_needed = 1, uses_anonymous_args = 0
 179 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 180              		.cfi_def_cfa_offset 36
 181              		.cfi_offset 4, -36
 182              		.cfi_offset 5, -32
 183              		.cfi_offset 6, -28
 184              		.cfi_offset 7, -24
 185              		.cfi_offset 8, -20
 186              		.cfi_offset 9, -16
 187              		.cfi_offset 10, -12
 188              		.cfi_offset 11, -8
 189              		.cfi_offset 14, -4
 190 0004 89B0     		sub	sp, sp, #36
 191              		.cfi_def_cfa_offset 72
 192 0006 00AF     		add	r7, sp, #0
 193              		.cfi_def_cfa_register 7
  80:main.c        ****     // Update encoder values for both left and right motors
  81:main.c        ****     int32 new, diff;
  82:main.c        ****     new = QuadDec_R_GetCounter();
 194              		.loc 1 82 0
 195 0008 FFF7FEFF 		bl	QuadDec_R_GetCounter
 196 000c 7861     		str	r0, [r7, #20]
  83:main.c        ****     diff = new - right_motor.enc_count;
 197              		.loc 1 83 0
 198 000e B84B     		ldr	r3, .L12+48
 199 0010 1B6C     		ldr	r3, [r3, #64]
 200 0012 7A69     		ldr	r2, [r7, #20]
 201 0014 D31A     		subs	r3, r2, r3
 202 0016 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 6


  84:main.c        ****     right_motor.enc_count = new;
 203              		.loc 1 84 0
 204 0018 B54A     		ldr	r2, .L12+48
 205 001a 7B69     		ldr	r3, [r7, #20]
 206 001c 1364     		str	r3, [r2, #64]
  85:main.c        ****     right_motor.w = M_TWOPI * diff / POSE_UPDATE_PERIOD / PULSES_PER_REV;
 207              		.loc 1 85 0
 208 001e 3869     		ldr	r0, [r7, #16]
 209 0020 FFF7FEFF 		bl	__aeabi_i2d
 210 0024 A6A3     		adr	r3, .L12
 211 0026 D3E90023 		ldrd	r2, [r3]
 212 002a FFF7FEFF 		bl	__aeabi_dmul
 213 002e 0246     		mov	r2, r0
 214 0030 0B46     		mov	r3, r1
 215 0032 1046     		mov	r0, r2
 216 0034 1946     		mov	r1, r3
 217 0036 A4A3     		adr	r3, .L12+8
 218 0038 D3E90023 		ldrd	r2, [r3]
 219 003c FFF7FEFF 		bl	__aeabi_ddiv
 220 0040 0246     		mov	r2, r0
 221 0042 0B46     		mov	r3, r1
 222 0044 1046     		mov	r0, r2
 223 0046 1946     		mov	r1, r3
 224 0048 A1A3     		adr	r3, .L12+16
 225 004a D3E90023 		ldrd	r2, [r3]
 226 004e FFF7FEFF 		bl	__aeabi_ddiv
 227 0052 0246     		mov	r2, r0
 228 0054 0B46     		mov	r3, r1
 229 0056 A649     		ldr	r1, .L12+48
 230 0058 C1E90423 		strd	r2, [r1, #16]
  86:main.c        ****     
  87:main.c        ****     new = QuadDec_L_GetCounter();
 231              		.loc 1 87 0
 232 005c FFF7FEFF 		bl	QuadDec_L_GetCounter
 233 0060 7861     		str	r0, [r7, #20]
  88:main.c        ****     diff = new - left_motor.enc_count;
 234              		.loc 1 88 0
 235 0062 A44B     		ldr	r3, .L12+52
 236 0064 1B6C     		ldr	r3, [r3, #64]
 237 0066 7A69     		ldr	r2, [r7, #20]
 238 0068 D31A     		subs	r3, r2, r3
 239 006a 3B61     		str	r3, [r7, #16]
  89:main.c        ****     left_motor.enc_count = new;
 240              		.loc 1 89 0
 241 006c A14A     		ldr	r2, .L12+52
 242 006e 7B69     		ldr	r3, [r7, #20]
 243 0070 1364     		str	r3, [r2, #64]
  90:main.c        ****     left_motor.w = M_TWOPI * diff / POSE_UPDATE_PERIOD / PULSES_PER_REV;
 244              		.loc 1 90 0
 245 0072 3869     		ldr	r0, [r7, #16]
 246 0074 FFF7FEFF 		bl	__aeabi_i2d
 247 0078 91A3     		adr	r3, .L12
 248 007a D3E90023 		ldrd	r2, [r3]
 249 007e FFF7FEFF 		bl	__aeabi_dmul
 250 0082 0246     		mov	r2, r0
 251 0084 0B46     		mov	r3, r1
 252 0086 1046     		mov	r0, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 7


 253 0088 1946     		mov	r1, r3
 254 008a 8FA3     		adr	r3, .L12+8
 255 008c D3E90023 		ldrd	r2, [r3]
 256 0090 FFF7FEFF 		bl	__aeabi_ddiv
 257 0094 0246     		mov	r2, r0
 258 0096 0B46     		mov	r3, r1
 259 0098 1046     		mov	r0, r2
 260 009a 1946     		mov	r1, r3
 261 009c 8CA3     		adr	r3, .L12+16
 262 009e D3E90023 		ldrd	r2, [r3]
 263 00a2 FFF7FEFF 		bl	__aeabi_ddiv
 264 00a6 0246     		mov	r2, r0
 265 00a8 0B46     		mov	r3, r1
 266 00aa 9249     		ldr	r1, .L12+52
 267 00ac C1E90423 		strd	r2, [r1, #16]
  91:main.c        ****     
  92:main.c        ****     // Calculate and update tangential velocity of wheels
  93:main.c        ****     left_motor.tangent_v = left_motor.w * left_motor.wheel_radius;
 268              		.loc 1 93 0
 269 00b0 904B     		ldr	r3, .L12+52
 270 00b2 D3E90401 		ldrd	r0, [r3, #16]
 271 00b6 8F4B     		ldr	r3, .L12+52
 272 00b8 D3E90E23 		ldrd	r2, [r3, #56]
 273 00bc FFF7FEFF 		bl	__aeabi_dmul
 274 00c0 0246     		mov	r2, r0
 275 00c2 0B46     		mov	r3, r1
 276 00c4 8B49     		ldr	r1, .L12+52
 277 00c6 C1E90623 		strd	r2, [r1, #24]
  94:main.c        ****     right_motor.tangent_v = right_motor.w * right_motor.wheel_radius;
 278              		.loc 1 94 0
 279 00ca 894B     		ldr	r3, .L12+48
 280 00cc D3E90401 		ldrd	r0, [r3, #16]
 281 00d0 874B     		ldr	r3, .L12+48
 282 00d2 D3E90E23 		ldrd	r2, [r3, #56]
 283 00d6 FFF7FEFF 		bl	__aeabi_dmul
 284 00da 0246     		mov	r2, r0
 285 00dc 0B46     		mov	r3, r1
 286 00de 8449     		ldr	r1, .L12+48
 287 00e0 C1E90623 		strd	r2, [r1, #24]
  95:main.c        **** 
  96:main.c        ****     // Calculate and update Robot velocity and angular velocity
  97:main.c        ****     robot.w = (right_motor.tangent_v - left_motor.tangent_v) / robot.axle_width; //instantaneous tu
 288              		.loc 1 97 0
 289 00e4 824B     		ldr	r3, .L12+48
 290 00e6 D3E90601 		ldrd	r0, [r3, #24]
 291 00ea 824B     		ldr	r3, .L12+52
 292 00ec D3E90623 		ldrd	r2, [r3, #24]
 293 00f0 FFF7FEFF 		bl	__aeabi_dsub
 294 00f4 0246     		mov	r2, r0
 295 00f6 0B46     		mov	r3, r1
 296 00f8 1046     		mov	r0, r2
 297 00fa 1946     		mov	r1, r3
 298 00fc 7E4B     		ldr	r3, .L12+56
 299 00fe D3E90023 		ldrd	r2, [r3]
 300 0102 FFF7FEFF 		bl	__aeabi_ddiv
 301 0106 0246     		mov	r2, r0
 302 0108 0B46     		mov	r3, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 8


 303 010a 7B49     		ldr	r1, .L12+56
 304 010c C1E90A23 		strd	r2, [r1, #40]
  98:main.c        ****     robot.v =  (right_motor.tangent_v + left_motor.tangent_v) / 2; //instantaneous tangential veloc
 305              		.loc 1 98 0
 306 0110 774B     		ldr	r3, .L12+48
 307 0112 D3E90601 		ldrd	r0, [r3, #24]
 308 0116 774B     		ldr	r3, .L12+52
 309 0118 D3E90623 		ldrd	r2, [r3, #24]
 310 011c FFF7FEFF 		bl	__aeabi_dadd
 311 0120 0246     		mov	r2, r0
 312 0122 0B46     		mov	r3, r1
 313 0124 1046     		mov	r0, r2
 314 0126 1946     		mov	r1, r3
 315 0128 4FF00002 		mov	r2, #0
 316 012c 4FF08043 		mov	r3, #1073741824
 317 0130 FFF7FEFF 		bl	__aeabi_ddiv
 318 0134 0246     		mov	r2, r0
 319 0136 0B46     		mov	r3, r1
 320 0138 6F49     		ldr	r1, .L12+56
 321 013a C1E90823 		strd	r2, [r1, #32]
  99:main.c        **** 
 100:main.c        ****     // Update Robot pose
 101:main.c        ****     robot.theta = calculate_angle_modulo( robot.theta + robot.w * POSE_UPDATE_PERIOD );
 322              		.loc 1 101 0
 323 013e 6E4B     		ldr	r3, .L12+56
 324 0140 D3E90289 		ldrd	r8, [r3, #8]
 325 0144 6C4B     		ldr	r3, .L12+56
 326 0146 D3E90A01 		ldrd	r0, [r3, #40]
 327 014a 5FA3     		adr	r3, .L12+8
 328 014c D3E90023 		ldrd	r2, [r3]
 329 0150 FFF7FEFF 		bl	__aeabi_dmul
 330 0154 0246     		mov	r2, r0
 331 0156 0B46     		mov	r3, r1
 332 0158 4046     		mov	r0, r8
 333 015a 4946     		mov	r1, r9
 334 015c FFF7FEFF 		bl	__aeabi_dadd
 335 0160 0246     		mov	r2, r0
 336 0162 0B46     		mov	r3, r1
 337 0164 1046     		mov	r0, r2
 338 0166 1946     		mov	r1, r3
 339 0168 FFF7FEFF 		bl	calculate_angle_modulo
 340 016c 0246     		mov	r2, r0
 341 016e 0B46     		mov	r3, r1
 342 0170 6149     		ldr	r1, .L12+56
 343 0172 C1E90223 		strd	r2, [r1, #8]
 102:main.c        ****     robot.x = robot.x + POSE_UPDATE_PERIOD * robot.v * cos(robot.theta);
 344              		.loc 1 102 0
 345 0176 604B     		ldr	r3, .L12+56
 346 0178 D3E90489 		ldrd	r8, [r3, #16]
 347 017c 5E4B     		ldr	r3, .L12+56
 348 017e D3E90801 		ldrd	r0, [r3, #32]
 349 0182 51A3     		adr	r3, .L12+8
 350 0184 D3E90023 		ldrd	r2, [r3]
 351 0188 FFF7FEFF 		bl	__aeabi_dmul
 352 018c 0246     		mov	r2, r0
 353 018e 0B46     		mov	r3, r1
 354 0190 9246     		mov	r10, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 9


 355 0192 9B46     		mov	fp, r3
 356 0194 584B     		ldr	r3, .L12+56
 357 0196 D3E90223 		ldrd	r2, [r3, #8]
 358 019a 1046     		mov	r0, r2
 359 019c 1946     		mov	r1, r3
 360 019e FFF7FEFF 		bl	cos
 361 01a2 0246     		mov	r2, r0
 362 01a4 0B46     		mov	r3, r1
 363 01a6 5046     		mov	r0, r10
 364 01a8 5946     		mov	r1, fp
 365 01aa FFF7FEFF 		bl	__aeabi_dmul
 366 01ae 0246     		mov	r2, r0
 367 01b0 0B46     		mov	r3, r1
 368 01b2 4046     		mov	r0, r8
 369 01b4 4946     		mov	r1, r9
 370 01b6 FFF7FEFF 		bl	__aeabi_dadd
 371 01ba 0246     		mov	r2, r0
 372 01bc 0B46     		mov	r3, r1
 373 01be 4E49     		ldr	r1, .L12+56
 374 01c0 C1E90423 		strd	r2, [r1, #16]
 103:main.c        ****     robot.y = robot.y + POSE_UPDATE_PERIOD * robot.v * sin(robot.theta);
 375              		.loc 1 103 0
 376 01c4 4C4B     		ldr	r3, .L12+56
 377 01c6 D3E90689 		ldrd	r8, [r3, #24]
 378 01ca 4B4B     		ldr	r3, .L12+56
 379 01cc D3E90801 		ldrd	r0, [r3, #32]
 380 01d0 3DA3     		adr	r3, .L12+8
 381 01d2 D3E90023 		ldrd	r2, [r3]
 382 01d6 FFF7FEFF 		bl	__aeabi_dmul
 383 01da 0246     		mov	r2, r0
 384 01dc 0B46     		mov	r3, r1
 385 01de 9246     		mov	r10, r2
 386 01e0 9B46     		mov	fp, r3
 387 01e2 454B     		ldr	r3, .L12+56
 388 01e4 D3E90223 		ldrd	r2, [r3, #8]
 389 01e8 1046     		mov	r0, r2
 390 01ea 1946     		mov	r1, r3
 391 01ec FFF7FEFF 		bl	sin
 392 01f0 0246     		mov	r2, r0
 393 01f2 0B46     		mov	r3, r1
 394 01f4 5046     		mov	r0, r10
 395 01f6 5946     		mov	r1, fp
 396 01f8 FFF7FEFF 		bl	__aeabi_dmul
 397 01fc 0246     		mov	r2, r0
 398 01fe 0B46     		mov	r3, r1
 399 0200 4046     		mov	r0, r8
 400 0202 4946     		mov	r1, r9
 401 0204 FFF7FEFF 		bl	__aeabi_dadd
 402 0208 0246     		mov	r2, r0
 403 020a 0B46     		mov	r3, r1
 404 020c 3A49     		ldr	r1, .L12+56
 405 020e C1E90623 		strd	r2, [r1, #24]
 104:main.c        ****     
 105:main.c        ****     
 106:main.c        ****     // Perform robot PI control
 107:main.c        ****     long double error = robot.desired_theta - robot.theta;  
 406              		.loc 1 107 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 10


 407 0212 394B     		ldr	r3, .L12+56
 408 0214 D3E90E01 		ldrd	r0, [r3, #56]
 409 0218 374B     		ldr	r3, .L12+56
 410 021a D3E90223 		ldrd	r2, [r3, #8]
 411 021e FFF7FEFF 		bl	__aeabi_dsub
 412 0222 0246     		mov	r2, r0
 413 0224 0B46     		mov	r3, r1
 414 0226 C7E90623 		strd	r2, [r7, #24]
 108:main.c        ****     if( error > M_PI ) {     // TODO: give this more thought. Want the robot to choose direction of
 415              		.loc 1 108 0
 416 022a 2BA3     		adr	r3, .L12+24
 417 022c D3E90023 		ldrd	r2, [r3]
 418 0230 D7E90601 		ldrd	r0, [r7, #24]
 419 0234 FFF7FEFF 		bl	__aeabi_dcmpgt
 420 0238 0346     		mov	r3, r0
 421 023a 002B     		cmp	r3, #0
 422 023c 0AD0     		beq	.L6
 109:main.c        ****         error = error - M_TWOPI;
 423              		.loc 1 109 0
 424 023e 20A3     		adr	r3, .L12
 425 0240 D3E90023 		ldrd	r2, [r3]
 426 0244 D7E90601 		ldrd	r0, [r7, #24]
 427 0248 FFF7FEFF 		bl	__aeabi_dsub
 428 024c 0246     		mov	r2, r0
 429 024e 0B46     		mov	r3, r1
 430 0250 C7E90623 		strd	r2, [r7, #24]
 431              	.L6:
 110:main.c        ****     }
 111:main.c        ****     if( error < -M_PI) {
 432              		.loc 1 111 0
 433 0254 22A3     		adr	r3, .L12+32
 434 0256 D3E90023 		ldrd	r2, [r3]
 435 025a D7E90601 		ldrd	r0, [r7, #24]
 436 025e FFF7FEFF 		bl	__aeabi_dcmplt
 437 0262 0346     		mov	r3, r0
 438 0264 002B     		cmp	r3, #0
 439 0266 0AD0     		beq	.L8
 112:main.c        ****         error = error + M_TWOPI;
 440              		.loc 1 112 0
 441 0268 15A3     		adr	r3, .L12
 442 026a D3E90023 		ldrd	r2, [r3]
 443 026e D7E90601 		ldrd	r0, [r7, #24]
 444 0272 FFF7FEFF 		bl	__aeabi_dadd
 445 0276 0246     		mov	r2, r0
 446 0278 0B46     		mov	r3, r1
 447 027a C7E90623 		strd	r2, [r7, #24]
 448              	.L8:
 113:main.c        ****     }
 114:main.c        ****     
 115:main.c        ****     // Calculate scaled velocity depending on how much we have to rotate (makes robot turn on spot 
 116:main.c        ****     double scaled_V = robot.desired_v *( 1 - logl( (M_E - 1) * fabsl(error) / M_PI + 1 ));
 449              		.loc 1 116 0
 450 027e 1E4B     		ldr	r3, .L12+56
 451 0280 D3E90C89 		ldrd	r8, [r3, #48]
 452 0284 BC69     		ldr	r4, [r7, #24]
 453 0286 FB69     		ldr	r3, [r7, #28]
 454 0288 23F00045 		bic	r5, r3, #-2147483648
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 11


 455 028c 16A3     		adr	r3, .L12+40
 456 028e D3E90023 		ldrd	r2, [r3]
 457 0292 2046     		mov	r0, r4
 458 0294 2946     		mov	r1, r5
 459 0296 FFF7FEFF 		bl	__aeabi_dmul
 460 029a 0346     		mov	r3, r0
 461 029c 0C46     		mov	r4, r1
 462 029e 1846     		mov	r0, r3
 463 02a0 2146     		mov	r1, r4
 464 02a2 0DA3     		adr	r3, .L12+24
 465 02a4 D3E90023 		ldrd	r2, [r3]
 466 02a8 FFF7FEFF 		bl	__aeabi_ddiv
 467 02ac 0346     		mov	r3, r0
 468 02ae 0C46     		mov	r4, r1
 469 02b0 1846     		mov	r0, r3
 470 02b2 2146     		mov	r1, r4
 471 02b4 4FF00002 		mov	r2, #0
 472 02b8 104B     		ldr	r3, .L12+60
 473 02ba FFF7FEFF 		bl	__aeabi_dadd
 474 02be 1FE0     		b	.L13
 475              	.L14:
 476              		.align	3
 477              	.L12:
 478 02c0 182D4454 		.word	1413754136
 479 02c4 FB211940 		.word	1075388923
 480 02c8 7B14AE47 		.word	1202590843
 481 02cc E17A943F 		.word	1066695393
 482 02d0 A4703D0A 		.word	171798692
 483 02d4 D70FAC40 		.word	1085018071
 484 02d8 182D4454 		.word	1413754136
 485 02dc FB210940 		.word	1074340347
 486 02e0 182D4454 		.word	1413754136
 487 02e4 FB2109C0 		.word	-1073143301
 488 02e8 D2AE2816 		.word	371764946
 489 02ec 157EFB3F 		.word	1073446421
 490 02f0 00000000 		.word	right_motor
 491 02f4 00000000 		.word	left_motor
 492 02f8 00000000 		.word	robot
 493 02fc 0000F03F 		.word	1072693248
 494              	.L13:
 495 0300 0346     		mov	r3, r0
 496 0302 0C46     		mov	r4, r1
 497 0304 1846     		mov	r0, r3
 498 0306 2146     		mov	r1, r4
 499 0308 FFF7FEFF 		bl	logl
 500 030c 0346     		mov	r3, r0
 501 030e 0C46     		mov	r4, r1
 502 0310 1A46     		mov	r2, r3
 503 0312 2346     		mov	r3, r4
 504 0314 4FF00000 		mov	r0, #0
 505 0318 4C49     		ldr	r1, .L15
 506 031a FFF7FEFF 		bl	__aeabi_dsub
 507 031e 0346     		mov	r3, r0
 508 0320 0C46     		mov	r4, r1
 509 0322 1A46     		mov	r2, r3
 510 0324 2346     		mov	r3, r4
 511 0326 4046     		mov	r0, r8
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 12


 512 0328 4946     		mov	r1, r9
 513 032a FFF7FEFF 		bl	__aeabi_dmul
 514 032e 0346     		mov	r3, r0
 515 0330 0C46     		mov	r4, r1
 516 0332 C7E90234 		strd	r3, [r7, #8]
 117:main.c        ****     
 118:main.c        ****     // Update motor tangential velocity based on error
 119:main.c        ****     robot.int_error = robot.int_error + error;
 517              		.loc 1 119 0
 518 0336 464B     		ldr	r3, .L15+4
 519 0338 D3E91401 		ldrd	r0, [r3, #80]
 520 033c D7E90623 		ldrd	r2, [r7, #24]
 521 0340 FFF7FEFF 		bl	__aeabi_dadd
 522 0344 0346     		mov	r3, r0
 523 0346 0C46     		mov	r4, r1
 524 0348 414A     		ldr	r2, .L15+4
 525 034a C2E91434 		strd	r3, [r2, #80]
 120:main.c        ****     long double new_w = robot.Kp * error + robot.Ki * robot.int_error;
 526              		.loc 1 120 0
 527 034e 404B     		ldr	r3, .L15+4
 528 0350 D3E91201 		ldrd	r0, [r3, #72]
 529 0354 D7E90623 		ldrd	r2, [r7, #24]
 530 0358 FFF7FEFF 		bl	__aeabi_dmul
 531 035c 0346     		mov	r3, r0
 532 035e 0C46     		mov	r4, r1
 533 0360 1D46     		mov	r5, r3
 534 0362 2646     		mov	r6, r4
 535 0364 3A4B     		ldr	r3, .L15+4
 536 0366 D3E91001 		ldrd	r0, [r3, #64]
 537 036a 394B     		ldr	r3, .L15+4
 538 036c 03F15004 		add	r4, r3, #80
 539 0370 D4E90034 		ldrd	r3, [r4]
 540 0374 1A46     		mov	r2, r3
 541 0376 2346     		mov	r3, r4
 542 0378 FFF7FEFF 		bl	__aeabi_dmul
 543 037c 0346     		mov	r3, r0
 544 037e 0C46     		mov	r4, r1
 545 0380 1A46     		mov	r2, r3
 546 0382 2346     		mov	r3, r4
 547 0384 2846     		mov	r0, r5
 548 0386 3146     		mov	r1, r6
 549 0388 FFF7FEFF 		bl	__aeabi_dadd
 550 038c 0346     		mov	r3, r0
 551 038e 0C46     		mov	r4, r1
 552 0390 C7E90034 		strd	r3, [r7]
 121:main.c        ****     right_motor.desired_w = (scaled_V + new_w * robot.axle_width / 2) / right_motor.wheel_radius;
 553              		.loc 1 121 0
 554 0394 2E4B     		ldr	r3, .L15+4
 555 0396 D3E90001 		ldrd	r0, [r3]
 556 039a D7E90023 		ldrd	r2, [r7]
 557 039e FFF7FEFF 		bl	__aeabi_dmul
 558 03a2 0346     		mov	r3, r0
 559 03a4 0C46     		mov	r4, r1
 560 03a6 1846     		mov	r0, r3
 561 03a8 2146     		mov	r1, r4
 562 03aa 4FF00002 		mov	r2, #0
 563 03ae 4FF08043 		mov	r3, #1073741824
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 13


 564 03b2 FFF7FEFF 		bl	__aeabi_ddiv
 565 03b6 0346     		mov	r3, r0
 566 03b8 0C46     		mov	r4, r1
 567 03ba 1846     		mov	r0, r3
 568 03bc 2146     		mov	r1, r4
 569 03be D7E90223 		ldrd	r2, [r7, #8]
 570 03c2 FFF7FEFF 		bl	__aeabi_dadd
 571 03c6 0346     		mov	r3, r0
 572 03c8 0C46     		mov	r4, r1
 573 03ca 1846     		mov	r0, r3
 574 03cc 2146     		mov	r1, r4
 575 03ce 214B     		ldr	r3, .L15+8
 576 03d0 03F13804 		add	r4, r3, #56
 577 03d4 D4E90034 		ldrd	r3, [r4]
 578 03d8 1A46     		mov	r2, r3
 579 03da 2346     		mov	r3, r4
 580 03dc FFF7FEFF 		bl	__aeabi_ddiv
 581 03e0 0346     		mov	r3, r0
 582 03e2 0C46     		mov	r4, r1
 583 03e4 1B4A     		ldr	r2, .L15+8
 584 03e6 C2E90834 		strd	r3, [r2, #32]
 122:main.c        ****     left_motor.desired_w = (scaled_V - new_w * robot.axle_width / 2) / left_motor.wheel_radius;   
 585              		.loc 1 122 0
 586 03ea 194B     		ldr	r3, .L15+4
 587 03ec D3E90001 		ldrd	r0, [r3]
 588 03f0 D7E90023 		ldrd	r2, [r7]
 589 03f4 FFF7FEFF 		bl	__aeabi_dmul
 590 03f8 0346     		mov	r3, r0
 591 03fa 0C46     		mov	r4, r1
 592 03fc 1846     		mov	r0, r3
 593 03fe 2146     		mov	r1, r4
 594 0400 4FF00002 		mov	r2, #0
 595 0404 4FF08043 		mov	r3, #1073741824
 596 0408 FFF7FEFF 		bl	__aeabi_ddiv
 597 040c 0346     		mov	r3, r0
 598 040e 0C46     		mov	r4, r1
 599 0410 1A46     		mov	r2, r3
 600 0412 2346     		mov	r3, r4
 601 0414 D7E90201 		ldrd	r0, [r7, #8]
 602 0418 FFF7FEFF 		bl	__aeabi_dsub
 603 041c 0346     		mov	r3, r0
 604 041e 0C46     		mov	r4, r1
 605 0420 1846     		mov	r0, r3
 606 0422 2146     		mov	r1, r4
 607 0424 0C4B     		ldr	r3, .L15+12
 608 0426 03F13804 		add	r4, r3, #56
 609 042a D4E90034 		ldrd	r3, [r4]
 610 042e 1A46     		mov	r2, r3
 611 0430 2346     		mov	r3, r4
 612 0432 FFF7FEFF 		bl	__aeabi_ddiv
 613 0436 0346     		mov	r3, r0
 614 0438 0C46     		mov	r4, r1
 615 043a 074A     		ldr	r2, .L15+12
 616 043c C2E90834 		strd	r3, [r2, #32]
 123:main.c        ****     
 124:main.c        **** }
 617              		.loc 1 124 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 14


 618 0440 00BF     		nop
 619 0442 2437     		adds	r7, r7, #36
 620              		.cfi_def_cfa_offset 36
 621 0444 BD46     		mov	sp, r7
 622              		.cfi_def_cfa_register 13
 623              		@ sp needed
 624 0446 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 625              	.L16:
 626 044a 00BF     		.align	2
 627              	.L15:
 628 044c 0000F03F 		.word	1072693248
 629 0450 00000000 		.word	robot
 630 0454 00000000 		.word	right_motor
 631 0458 00000000 		.word	left_motor
 632              		.cfi_endproc
 633              	.LFE65:
 634              		.size	Pose_Update_Int_Handler, .-Pose_Update_Int_Handler
 635              		.section	.text.Motor_PI_Int_Handler,"ax",%progbits
 636              		.align	2
 637              		.global	Motor_PI_Int_Handler
 638              		.thumb
 639              		.thumb_func
 640              		.type	Motor_PI_Int_Handler, %function
 641              	Motor_PI_Int_Handler:
 642              	.LFB66:
 125:main.c        **** 
 126:main.c        **** /* Interrupt for motor PI error handler and drive. */
 127:main.c        **** CY_ISR( Motor_PI_Int_Handler ) {
 643              		.loc 1 127 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 8
 646              		@ frame_needed = 1, uses_anonymous_args = 0
 647 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 648              		.cfi_def_cfa_offset 20
 649              		.cfi_offset 4, -20
 650              		.cfi_offset 5, -16
 651              		.cfi_offset 6, -12
 652              		.cfi_offset 7, -8
 653              		.cfi_offset 14, -4
 654 0002 83B0     		sub	sp, sp, #12
 655              		.cfi_def_cfa_offset 32
 656 0004 00AF     		add	r7, sp, #0
 657              		.cfi_def_cfa_register 7
 128:main.c        ****     long double error = left_motor.desired_w - left_motor.w;
 658              		.loc 1 128 0
 659 0006 514B     		ldr	r3, .L18
 660 0008 D3E90801 		ldrd	r0, [r3, #32]
 661 000c 4F4B     		ldr	r3, .L18
 662 000e 03F11004 		add	r4, r3, #16
 663 0012 D4E90034 		ldrd	r3, [r4]
 664 0016 1A46     		mov	r2, r3
 665 0018 2346     		mov	r3, r4
 666 001a FFF7FEFF 		bl	__aeabi_dsub
 667 001e 0346     		mov	r3, r0
 668 0020 0C46     		mov	r4, r1
 669 0022 C7E90034 		strd	r3, [r7]
 129:main.c        ****     left_motor.int_error  = left_motor.int_error + error;
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 15


 670              		.loc 1 129 0
 671 0026 494B     		ldr	r3, .L18
 672 0028 D3E90201 		ldrd	r0, [r3, #8]
 673 002c D7E90023 		ldrd	r2, [r7]
 674 0030 FFF7FEFF 		bl	__aeabi_dadd
 675 0034 0346     		mov	r3, r0
 676 0036 0C46     		mov	r4, r1
 677 0038 444A     		ldr	r2, .L18
 678 003a C2E90234 		strd	r3, [r2, #8]
 130:main.c        ****     left_motor.duty_cycle = left_motor.duty_cycle + left_motor.Kp * error + left_motor.Ki * left_mo
 679              		.loc 1 130 0
 680 003e 434B     		ldr	r3, .L18
 681 0040 D3E90045 		ldrd	r4, [r3]
 682 0044 414B     		ldr	r3, .L18
 683 0046 D3E90C01 		ldrd	r0, [r3, #48]
 684 004a D7E90023 		ldrd	r2, [r7]
 685 004e FFF7FEFF 		bl	__aeabi_dmul
 686 0052 0246     		mov	r2, r0
 687 0054 0B46     		mov	r3, r1
 688 0056 2046     		mov	r0, r4
 689 0058 2946     		mov	r1, r5
 690 005a FFF7FEFF 		bl	__aeabi_dadd
 691 005e 0346     		mov	r3, r0
 692 0060 0C46     		mov	r4, r1
 693 0062 1D46     		mov	r5, r3
 694 0064 2646     		mov	r6, r4
 695 0066 394B     		ldr	r3, .L18
 696 0068 D3E90A01 		ldrd	r0, [r3, #40]
 697 006c 374B     		ldr	r3, .L18
 698 006e 03F10804 		add	r4, r3, #8
 699 0072 D4E90034 		ldrd	r3, [r4]
 700 0076 1A46     		mov	r2, r3
 701 0078 2346     		mov	r3, r4
 702 007a FFF7FEFF 		bl	__aeabi_dmul
 703 007e 0346     		mov	r3, r0
 704 0080 0C46     		mov	r4, r1
 705 0082 1A46     		mov	r2, r3
 706 0084 2346     		mov	r3, r4
 707 0086 2846     		mov	r0, r5
 708 0088 3146     		mov	r1, r6
 709 008a FFF7FEFF 		bl	__aeabi_dadd
 710 008e 0346     		mov	r3, r0
 711 0090 0C46     		mov	r4, r1
 712 0092 2E4A     		ldr	r2, .L18
 713 0094 C2E90034 		strd	r3, [r2]
 131:main.c        ****     Drive_Left_Motor(left_motor.duty_cycle);
 714              		.loc 1 131 0
 715 0098 2C4B     		ldr	r3, .L18
 716 009a 18CB     		ldmia	r3, {r3-r4}
 717 009c 1846     		mov	r0, r3
 718 009e 2146     		mov	r1, r4
 719 00a0 FFF7FEFF 		bl	Drive_Left_Motor
 132:main.c        ****     
 133:main.c        ****     error = right_motor.desired_w - right_motor.w;
 720              		.loc 1 133 0
 721 00a4 2A4B     		ldr	r3, .L18+4
 722 00a6 D3E90801 		ldrd	r0, [r3, #32]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 16


 723 00aa 294B     		ldr	r3, .L18+4
 724 00ac 03F11004 		add	r4, r3, #16
 725 00b0 D4E90034 		ldrd	r3, [r4]
 726 00b4 1A46     		mov	r2, r3
 727 00b6 2346     		mov	r3, r4
 728 00b8 FFF7FEFF 		bl	__aeabi_dsub
 729 00bc 0346     		mov	r3, r0
 730 00be 0C46     		mov	r4, r1
 731 00c0 C7E90034 		strd	r3, [r7]
 134:main.c        ****     right_motor.int_error  = right_motor.int_error + error;
 732              		.loc 1 134 0
 733 00c4 224B     		ldr	r3, .L18+4
 734 00c6 D3E90201 		ldrd	r0, [r3, #8]
 735 00ca D7E90023 		ldrd	r2, [r7]
 736 00ce FFF7FEFF 		bl	__aeabi_dadd
 737 00d2 0346     		mov	r3, r0
 738 00d4 0C46     		mov	r4, r1
 739 00d6 1E4A     		ldr	r2, .L18+4
 740 00d8 C2E90234 		strd	r3, [r2, #8]
 135:main.c        ****     right_motor.duty_cycle = right_motor.duty_cycle + right_motor.Kp*error + right_motor.Ki * right
 741              		.loc 1 135 0
 742 00dc 1C4B     		ldr	r3, .L18+4
 743 00de D3E90045 		ldrd	r4, [r3]
 744 00e2 1B4B     		ldr	r3, .L18+4
 745 00e4 D3E90C01 		ldrd	r0, [r3, #48]
 746 00e8 D7E90023 		ldrd	r2, [r7]
 747 00ec FFF7FEFF 		bl	__aeabi_dmul
 748 00f0 0246     		mov	r2, r0
 749 00f2 0B46     		mov	r3, r1
 750 00f4 2046     		mov	r0, r4
 751 00f6 2946     		mov	r1, r5
 752 00f8 FFF7FEFF 		bl	__aeabi_dadd
 753 00fc 0346     		mov	r3, r0
 754 00fe 0C46     		mov	r4, r1
 755 0100 1D46     		mov	r5, r3
 756 0102 2646     		mov	r6, r4
 757 0104 124B     		ldr	r3, .L18+4
 758 0106 D3E90A01 		ldrd	r0, [r3, #40]
 759 010a 114B     		ldr	r3, .L18+4
 760 010c 03F10804 		add	r4, r3, #8
 761 0110 D4E90034 		ldrd	r3, [r4]
 762 0114 1A46     		mov	r2, r3
 763 0116 2346     		mov	r3, r4
 764 0118 FFF7FEFF 		bl	__aeabi_dmul
 765 011c 0346     		mov	r3, r0
 766 011e 0C46     		mov	r4, r1
 767 0120 1A46     		mov	r2, r3
 768 0122 2346     		mov	r3, r4
 769 0124 2846     		mov	r0, r5
 770 0126 3146     		mov	r1, r6
 771 0128 FFF7FEFF 		bl	__aeabi_dadd
 772 012c 0346     		mov	r3, r0
 773 012e 0C46     		mov	r4, r1
 774 0130 074A     		ldr	r2, .L18+4
 775 0132 C2E90034 		strd	r3, [r2]
 136:main.c        ****     Drive_Right_Motor(right_motor.duty_cycle);
 776              		.loc 1 136 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 17


 777 0136 064B     		ldr	r3, .L18+4
 778 0138 18CB     		ldmia	r3, {r3-r4}
 779 013a 1846     		mov	r0, r3
 780 013c 2146     		mov	r1, r4
 781 013e FFF7FEFF 		bl	Drive_Right_Motor
 137:main.c        **** 
 138:main.c        **** }
 782              		.loc 1 138 0
 783 0142 00BF     		nop
 784 0144 0C37     		adds	r7, r7, #12
 785              		.cfi_def_cfa_offset 20
 786 0146 BD46     		mov	sp, r7
 787              		.cfi_def_cfa_register 13
 788              		@ sp needed
 789 0148 F0BD     		pop	{r4, r5, r6, r7, pc}
 790              	.L19:
 791 014a 00BF     		.align	2
 792              	.L18:
 793 014c 00000000 		.word	left_motor
 794 0150 00000000 		.word	right_motor
 795              		.cfi_endproc
 796              	.LFE66:
 797              		.size	Motor_PI_Int_Handler, .-Motor_PI_Int_Handler
 798              		.global	__aeabi_dcmpge
 799              		.section	.text.Navigation_Test_Int_Handler,"ax",%progbits
 800              		.align	2
 801              		.global	Navigation_Test_Int_Handler
 802              		.thumb
 803              		.thumb_func
 804              		.type	Navigation_Test_Int_Handler, %function
 805              	Navigation_Test_Int_Handler:
 806              	.LFB67:
 139:main.c        **** 
 140:main.c        **** /* Interrupt for test handler? */
 141:main.c        **** CY_ISR( Navigation_Test_Int_Handler ) {
 807              		.loc 1 141 0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 8
 810              		@ frame_needed = 1, uses_anonymous_args = 0
 811 0000 90B5     		push	{r4, r7, lr}
 812              		.cfi_def_cfa_offset 12
 813              		.cfi_offset 4, -12
 814              		.cfi_offset 7, -8
 815              		.cfi_offset 14, -4
 816 0002 83B0     		sub	sp, sp, #12
 817              		.cfi_def_cfa_offset 24
 818 0004 00AF     		add	r7, sp, #0
 819              		.cfi_def_cfa_register 7
 142:main.c        ****     long double angle;
 143:main.c        ****     angle = robot.desired_theta + M_PI/8;
 820              		.loc 1 143 0
 821 0006 1A4B     		ldr	r3, .L24+16
 822 0008 D3E90E01 		ldrd	r0, [r3, #56]
 823 000c 14A3     		adr	r3, .L24
 824 000e D3E90023 		ldrd	r2, [r3]
 825 0012 FFF7FEFF 		bl	__aeabi_dadd
 826 0016 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 18


 827 0018 0C46     		mov	r4, r1
 828 001a C7E90034 		strd	r3, [r7]
 144:main.c        ****     if( angle >= M_TWOPI ) {
 829              		.loc 1 144 0
 830 001e 12A3     		adr	r3, .L24+8
 831 0020 D3E90023 		ldrd	r2, [r3]
 832 0024 D7E90001 		ldrd	r0, [r7]
 833 0028 FFF7FEFF 		bl	__aeabi_dcmpge
 834 002c 0346     		mov	r3, r0
 835 002e 002B     		cmp	r3, #0
 836 0030 0AD0     		beq	.L21
 145:main.c        ****         angle = angle - M_TWOPI;
 837              		.loc 1 145 0
 838 0032 0DA3     		adr	r3, .L24+8
 839 0034 D3E90023 		ldrd	r2, [r3]
 840 0038 D7E90001 		ldrd	r0, [r7]
 841 003c FFF7FEFF 		bl	__aeabi_dsub
 842 0040 0346     		mov	r3, r0
 843 0042 0C46     		mov	r4, r1
 844 0044 C7E90034 		strd	r3, [r7]
 845              	.L21:
 146:main.c        ****     }
 147:main.c        ****     robot.desired_theta = angle;
 846              		.loc 1 147 0
 847 0048 094A     		ldr	r2, .L24+16
 848 004a D7E90034 		ldrd	r3, [r7]
 849 004e C2E90E34 		strd	r3, [r2, #56]
 148:main.c        **** }
 850              		.loc 1 148 0
 851 0052 00BF     		nop
 852 0054 0C37     		adds	r7, r7, #12
 853              		.cfi_def_cfa_offset 12
 854 0056 BD46     		mov	sp, r7
 855              		.cfi_def_cfa_register 13
 856              		@ sp needed
 857 0058 90BD     		pop	{r4, r7, pc}
 858              	.L25:
 859 005a 00BFAFF3 		.align	3
 859      0080
 860              	.L24:
 861 0060 182D4454 		.word	1413754136
 862 0064 FB21D93F 		.word	1071194619
 863 0068 182D4454 		.word	1413754136
 864 006c FB211940 		.word	1075388923
 865 0070 00000000 		.word	robot
 866              		.cfi_endproc
 867              	.LFE67:
 868              		.size	Navigation_Test_Int_Handler, .-Navigation_Test_Int_Handler
 869              		.global	__aeabi_i2f
 870              		.global	__aeabi_fcmplt
 871              		.global	__aeabi_d2f
 872              		.global	__aeabi_f2d
 873              		.global	__aeabi_f2iz
 874              		.global	__aeabi_fsub
 875              		.global	__aeabi_fmul
 876              		.global	__aeabi_fadd
 877              		.section	.rodata
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 19


 878              		.align	2
 879              	.LC0:
 880 0010 00000000 		.word	0
 881 0014 5A000000 		.word	90
 882 0018 5A000000 		.word	90
 883 001c 5A000000 		.word	90
 884              		.section	.text.main,"ax",%progbits
 885              		.align	2
 886              		.global	main
 887              		.thumb
 888              		.thumb_func
 889              		.type	main, %function
 890              	main:
 891              	.LFB68:
 149:main.c        **** 
 150:main.c        **** 
 151:main.c        **** int main(void)
 152:main.c        **** {
 892              		.loc 1 152 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 160
 895              		@ frame_needed = 1, uses_anonymous_args = 0
 896 0000 90B5     		push	{r4, r7, lr}
 897              		.cfi_def_cfa_offset 12
 898              		.cfi_offset 4, -12
 899              		.cfi_offset 7, -8
 900              		.cfi_offset 14, -4
 901 0002 B5B0     		sub	sp, sp, #212
 902              		.cfi_def_cfa_offset 224
 903 0004 0CAF     		add	r7, sp, #48
 904              		.cfi_def_cfa 7, 176
 153:main.c        ****     CyGlobalIntEnable;
 905              		.loc 1 153 0
 906              		.syntax unified
 907              	@ 153 "main.c" 1
 908 0006 62B6     		CPSIE   i
 909              	@ 0 "" 2
 154:main.c        ****     
 155:main.c        ****     // Registration of Timer ISR
 156:main.c        ****     Timer_Echo_Int_StartEx( Timer_Int_Handler );
 910              		.loc 1 156 0
 911              		.thumb
 912              		.syntax unified
 913 0008 9148     		ldr	r0, .L56+48
 914 000a FFF7FEFF 		bl	Timer_Echo_Int_StartEx
 157:main.c        ****     Pose_Update_Int_StartEx( Pose_Update_Int_Handler );
 915              		.loc 1 157 0
 916 000e 9148     		ldr	r0, .L56+52
 917 0010 FFF7FEFF 		bl	Pose_Update_Int_StartEx
 158:main.c        ****     Motor_PI_Int_StartEx( Motor_PI_Int_Handler );
 918              		.loc 1 158 0
 919 0014 9048     		ldr	r0, .L56+56
 920 0016 FFF7FEFF 		bl	Motor_PI_Int_StartEx
 159:main.c        ****     //Testing_Int_StartEx( Navigation_Test_Int_Handler );
 160:main.c        ****     
 161:main.c        ****     // Start up code - enable UART, PWM and Timer used for ultrasonic module
 162:main.c        ****     UART_Start();
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 20


 921              		.loc 1 162 0
 922 001a FFF7FEFF 		bl	UART_Start
 163:main.c        ****     Timer_Echo_Start();
 923              		.loc 1 163 0
 924 001e FFF7FEFF 		bl	Timer_Echo_Start
 164:main.c        ****     PWM_Trigger_Start();
 925              		.loc 1 164 0
 926 0022 FFF7FEFF 		bl	PWM_Trigger_Start
 165:main.c        ****     QuadDec_L_Start();
 927              		.loc 1 165 0
 928 0026 FFF7FEFF 		bl	QuadDec_L_Start
 166:main.c        ****     PWM_Motor_L_Start();
 929              		.loc 1 166 0
 930 002a FFF7FEFF 		bl	PWM_Motor_L_Start
 167:main.c        ****     QuadDec_R_Start();
 931              		.loc 1 167 0
 932 002e FFF7FEFF 		bl	QuadDec_R_Start
 168:main.c        ****     PWM_Motor_R_Start();
 933              		.loc 1 168 0
 934 0032 FFF7FEFF 		bl	PWM_Motor_R_Start
 169:main.c        ****     Timer_Avoidance_Start();
 935              		.loc 1 169 0
 936 0036 FFF7FEFF 		bl	Timer_Avoidance_Start
 170:main.c        ****     PWM_ServoDir_Start();
 937              		.loc 1 170 0
 938 003a FFF7FEFF 		bl	PWM_ServoDir_Start
 171:main.c        ****     PWM_1_Start();
 939              		.loc 1 171 0
 940 003e FFF7FEFF 		bl	PWM_1_Start
 172:main.c        ****     
 173:main.c        ****     Timer_Avoidance_WriteCounter(60000); // Cause robot to start moving immediately
 941              		.loc 1 173 0
 942 0042 4EF66020 		movw	r0, #60000
 943 0046 FFF7FEFF 		bl	Timer_Avoidance_WriteCounter
 174:main.c        ****     
 175:main.c        ****     // Define and initialise motors
 176:main.c        ****     long double wheel_r_scale = 0.9378;
 944              		.loc 1 176 0
 945 004a 75A4     		adr	r4, .L56
 946 004c D4E90034 		ldrd	r3, [r4]
 947 0050 C7E92034 		strd	r3, [r7, #128]
 177:main.c        ****     long double motor_Ki = 3e-6;     // TODO: Determine good value
 948              		.loc 1 177 0
 949 0054 74A4     		adr	r4, .L56+8
 950 0056 D4E90034 		ldrd	r3, [r4]
 951 005a C7E91E34 		strd	r3, [r7, #120]
 178:main.c        ****     long double motor_Kp = 0.0025;   // TODO: Determine good value
 952              		.loc 1 178 0
 953 005e 74A4     		adr	r4, .L56+16
 954 0060 D4E90034 		ldrd	r3, [r4]
 955 0064 C7E91C34 		strd	r3, [r7, #112]
 179:main.c        ****     
 180:main.c        ****     motor_create(&left_motor, wheel_r_scale, motor_Ki, motor_Kp);
 956              		.loc 1 180 0
 957 0068 D7E91C34 		ldrd	r3, [r7, #112]
 958 006c CDE90234 		strd	r3, [sp, #8]
 959 0070 D7E91E34 		ldrd	r3, [r7, #120]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 21


 960 0074 CDE90034 		strd	r3, [sp]
 961 0078 D7E92023 		ldrd	r2, [r7, #128]
 962 007c 7748     		ldr	r0, .L56+60
 963 007e FFF7FEFF 		bl	motor_create
 181:main.c        ****     motor_create(&right_motor, wheel_r_scale, motor_Ki, motor_Kp);
 964              		.loc 1 181 0
 965 0082 D7E91C34 		ldrd	r3, [r7, #112]
 966 0086 CDE90234 		strd	r3, [sp, #8]
 967 008a D7E91E34 		ldrd	r3, [r7, #120]
 968 008e CDE90034 		strd	r3, [sp]
 969 0092 D7E92023 		ldrd	r2, [r7, #128]
 970 0096 7248     		ldr	r0, .L56+64
 971 0098 FFF7FEFF 		bl	motor_create
 182:main.c        ****     
 183:main.c        ****     // Define and initialise robot 
 184:main.c        ****     long double robot_axle_width = 0.936*22.5;  // TODO: get accurate measurement
 972              		.loc 1 184 0
 973 009c 66A4     		adr	r4, .L56+24
 974 009e D4E90034 		ldrd	r3, [r4]
 975 00a2 C7E91A34 		strd	r3, [r7, #104]
 185:main.c        ****     long double robot_Ki = 3e-5;    // TODO: Determine good value
 976              		.loc 1 185 0
 977 00a6 66A4     		adr	r4, .L56+32
 978 00a8 D4E90034 		ldrd	r3, [r4]
 979 00ac C7E91834 		strd	r3, [r7, #96]
 186:main.c        ****     long double robot_Kp = 0.75;     // was previously 0.75 before changing for MS1
 980              		.loc 1 186 0
 981 00b0 4FF00003 		mov	r3, #0
 982 00b4 6B4C     		ldr	r4, .L56+68
 983 00b6 C7E91634 		strd	r3, [r7, #88]
 187:main.c        ****     long double min_distance = 5;   // Minimum distance between robot position and goal
 984              		.loc 1 187 0
 985 00ba 4FF00003 		mov	r3, #0
 986 00be 6A4C     		ldr	r4, .L56+72
 987 00c0 C7E91434 		strd	r3, [r7, #80]
 188:main.c        **** 
 189:main.c        **** 
 190:main.c        ****     /*======================= ROBOT STARTING POSITION =======================*/
 191:main.c        ****     long double start_x = 0;    // Starting x, duh!
 988              		.loc 1 191 0
 989 00c4 4FF00003 		mov	r3, #0
 990 00c8 4FF00004 		mov	r4, #0
 991 00cc C7E91234 		strd	r3, [r7, #72]
 192:main.c        ****     long double start_y = 0;    // Starting y, duh!
 992              		.loc 1 192 0
 993 00d0 4FF00003 		mov	r3, #0
 994 00d4 4FF00004 		mov	r4, #0
 995 00d8 C7E91034 		strd	r3, [r7, #64]
 193:main.c        ****     long double start_th = M_PI/2;
 996              		.loc 1 193 0
 997 00dc 5AA4     		adr	r4, .L56+40
 998 00de D4E90034 		ldrd	r3, [r4]
 999 00e2 C7E90E34 		strd	r3, [r7, #56]
 194:main.c        ****     /*=======================================================================*/
 195:main.c        **** 
 196:main.c        **** 
 197:main.c        ****     robot_create(&robot, robot_axle_width, robot_Ki, robot_Kp, min_distance, start_x, start_y, star
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 22


 1000              		.loc 1 197 0
 1001 00e6 D7E90E34 		ldrd	r3, [r7, #56]
 1002 00ea CDE90A34 		strd	r3, [sp, #40]
 1003 00ee D7E91034 		ldrd	r3, [r7, #64]
 1004 00f2 CDE90834 		strd	r3, [sp, #32]
 1005 00f6 D7E91234 		ldrd	r3, [r7, #72]
 1006 00fa CDE90634 		strd	r3, [sp, #24]
 1007 00fe D7E91434 		ldrd	r3, [r7, #80]
 1008 0102 CDE90434 		strd	r3, [sp, #16]
 1009 0106 D7E91634 		ldrd	r3, [r7, #88]
 1010 010a CDE90234 		strd	r3, [sp, #8]
 1011 010e D7E91834 		ldrd	r3, [r7, #96]
 1012 0112 CDE90034 		strd	r3, [sp]
 1013 0116 D7E91A23 		ldrd	r2, [r7, #104]
 1014 011a 5448     		ldr	r0, .L56+76
 1015 011c FFF7FEFF 		bl	robot_create
 198:main.c        **** 
 199:main.c        ****     // Define sensor directions (start from front sensor, then move clockwise)
 200:main.c        ****     sensors.direction[0] = 0;
 1016              		.loc 1 200 0
 1017 0120 534B     		ldr	r3, .L56+80
 1018 0122 0022     		movs	r2, #0
 1019 0124 1A60     		str	r2, [r3]
 201:main.c        ****     sensors.direction[1] = 30;
 1020              		.loc 1 201 0
 1021 0126 524B     		ldr	r3, .L56+80
 1022 0128 1E22     		movs	r2, #30
 1023 012a 5A60     		str	r2, [r3, #4]
 202:main.c        ****     sensors.direction[2] = 90;
 1024              		.loc 1 202 0
 1025 012c 504B     		ldr	r3, .L56+80
 1026 012e 5A22     		movs	r2, #90
 1027 0130 9A60     		str	r2, [r3, #8]
 203:main.c        ****     sensors.direction[3] = 270;
 1028              		.loc 1 203 0
 1029 0132 4F4B     		ldr	r3, .L56+80
 1030 0134 4FF48772 		mov	r2, #270
 1031 0138 DA60     		str	r2, [r3, #12]
 204:main.c        ****     sensors.direction[4] = 330;
 1032              		.loc 1 204 0
 1033 013a 4D4B     		ldr	r3, .L56+80
 1034 013c 4FF4A572 		mov	r2, #330
 1035 0140 1A61     		str	r2, [r3, #16]
 205:main.c        **** 
 206:main.c        ****     /*========================= M1: Goal Definition =========================*/
 207:main.c        ****     // Goals should be defined where the bin is
 208:main.c        ****     int n_goals = 2;    // Number of goals, duh!
 1036              		.loc 1 208 0
 1037 0142 0223     		movs	r3, #2
 1038 0144 7B63     		str	r3, [r7, #52]
 209:main.c        ****     int goals[4] = {0, 90, 90, 90};    // Coordinates of goals [x1, y1, x2, y2, ..., xn, yn]
 1039              		.loc 1 209 0
 1040 0146 4B4B     		ldr	r3, .L56+84
 1041 0148 3C1D     		adds	r4, r7, #4
 1042 014a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 1043 014c 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 210:main.c        ****     robot.goal_x = goals[0];   // Update robot x goal
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 23


 1044              		.loc 1 210 0
 1045 0150 7B68     		ldr	r3, [r7, #4]
 1046 0152 1846     		mov	r0, r3
 1047 0154 FFF7FEFF 		bl	__aeabi_i2d
 1048 0158 0346     		mov	r3, r0
 1049 015a 0C46     		mov	r4, r1
 1050 015c 434A     		ldr	r2, .L56+76
 1051 015e C2E91634 		strd	r3, [r2, #88]
 211:main.c        ****     robot.goal_y = goals[1];   // Update robot y goal
 1052              		.loc 1 211 0
 1053 0162 BB68     		ldr	r3, [r7, #8]
 1054 0164 1846     		mov	r0, r3
 1055 0166 FFF7FEFF 		bl	__aeabi_i2d
 1056 016a 0346     		mov	r3, r0
 1057 016c 0C46     		mov	r4, r1
 1058 016e 3F4A     		ldr	r2, .L56+76
 1059 0170 C2E91834 		strd	r3, [r2, #96]
 212:main.c        ****     int goals_reached = 0;  // Counter for number of goas reached, duh!
 1060              		.loc 1 212 0
 1061 0174 0023     		movs	r3, #0
 1062 0176 3B63     		str	r3, [r7, #48]
 213:main.c        ****     /*=======================================================================*/    
 214:main.c        **** 
 215:main.c        ****     
 216:main.c        **** 
 217:main.c        ****     /*======================= M1: Wall Following Code =======================*/
 218:main.c        ****     // Point to goal at the beginning
 219:main.c        ****     float ref_direction = M_PI/2;
 1063              		.loc 1 219 0
 1064 0178 3F4B     		ldr	r3, .L56+88
 1065 017a C7F89C30 		str	r3, [r7, #156]	@ float
 220:main.c        ****     int ref_direction_deg = 90;
 1066              		.loc 1 220 0
 1067 017e 5A23     		movs	r3, #90
 1068 0180 C7F89830 		str	r3, [r7, #152]
 221:main.c        ****     robot.desired_theta = M_PI/2;
 1069              		.loc 1 221 0
 1070 0184 394A     		ldr	r2, .L56+76
 1071 0186 30A4     		adr	r4, .L56+40
 1072 0188 D4E90034 		ldrd	r3, [r4]
 1073 018c C2E90E34 		strd	r3, [r2, #56]
 222:main.c        ****     
 223:main.c        ****     // KP Controls
 224:main.c        ****     float theta_correction = 0;
 1074              		.loc 1 224 0
 1075 0190 4FF00003 		mov	r3, #0
 1076 0194 FB62     		str	r3, [r7, #44]	@ float
 225:main.c        ****     float wall_Kp = 0.01;
 1077              		.loc 1 225 0
 1078 0196 394B     		ldr	r3, .L56+92
 1079 0198 BB62     		str	r3, [r7, #40]	@ float
 226:main.c        ****    
 227:main.c        ****     // Thresholds
 228:main.c        ****     float front_dist_th = 50;
 1080              		.loc 1 228 0
 1081 019a 394B     		ldr	r3, .L56+96
 1082 019c C7F89430 		str	r3, [r7, #148]	@ float
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 24


 229:main.c        ****     float dist_ref = 50;
 1083              		.loc 1 229 0
 1084 01a0 374B     		ldr	r3, .L56+96
 1085 01a2 7B62     		str	r3, [r7, #36]	@ float
 230:main.c        ****     int front_count = 0;
 1086              		.loc 1 230 0
 1087 01a4 0023     		movs	r3, #0
 1088 01a6 3B62     		str	r3, [r7, #32]
 231:main.c        ****     
 232:main.c        ****     // Flags
 233:main.c        ****     int return_flag = 0;
 1089              		.loc 1 233 0
 1090 01a8 0023     		movs	r3, #0
 1091 01aa C7F89030 		str	r3, [r7, #144]
 234:main.c        ****     int B_flag = 0;
 1092              		.loc 1 234 0
 1093 01ae 0023     		movs	r3, #0
 1094 01b0 C7F88C30 		str	r3, [r7, #140]
 235:main.c        ****     
 236:main.c        ****     // Settings
 237:main.c        ****     int velocity = 15;
 1095              		.loc 1 237 0
 1096 01b4 0F23     		movs	r3, #15
 1097 01b6 FB61     		str	r3, [r7, #28]
 1098              	.L52:
 238:main.c        ****     
 239:main.c        ****     /*=======================================================================*/  
 240:main.c        ****     // starts at front left and goes clockwise
 241:main.c        ****     //move_servo(3, 1); 
 242:main.c        ****     //move_servo(0, 0);
 243:main.c        ****     //move_servo(1, 1);
 244:main.c        ****     //move_servo(2, 0);
 245:main.c        ****     
 246:main.c        ****     
 247:main.c        ****     for(;;) {  
 248:main.c        ****         // Wall follow only after sensor is updated
 249:main.c        ****         // Read 3 times
 250:main.c        ****         if ( wall_following_flag ) {
 1099              		.loc 1 250 0
 1100 01b8 324B     		ldr	r3, .L56+100
 1101 01ba 1B68     		ldr	r3, [r3]
 1102 01bc 002B     		cmp	r3, #0
 1103 01be FBD0     		beq	.L52
 1104              	.LBB2:
 251:main.c        ****             if (sensors.distance[0] < front_dist_th && sensors.distance[5] < front_dist_th) {      
 1105              		.loc 1 251 0
 1106 01c0 2B4B     		ldr	r3, .L56+80
 1107 01c2 9B69     		ldr	r3, [r3, #24]
 1108 01c4 1846     		mov	r0, r3
 1109 01c6 FFF7FEFF 		bl	__aeabi_i2f
 1110 01ca 0346     		mov	r3, r0
 1111 01cc D7F89410 		ldr	r1, [r7, #148]	@ float
 1112 01d0 1846     		mov	r0, r3
 1113 01d2 FFF7FEFF 		bl	__aeabi_fcmplt
 1114 01d6 0346     		mov	r3, r0
 1115 01d8 002B     		cmp	r3, #0
 1116 01da 00F0B582 		beq	.L28
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 25


 1117              		.loc 1 251 0 is_stmt 0 discriminator 1
 1118 01de 244B     		ldr	r3, .L56+80
 1119 01e0 DB6A     		ldr	r3, [r3, #44]
 1120 01e2 1846     		mov	r0, r3
 1121 01e4 FFF7FEFF 		bl	__aeabi_i2f
 1122 01e8 0346     		mov	r3, r0
 1123 01ea D7F89410 		ldr	r1, [r7, #148]	@ float
 1124 01ee 1846     		mov	r0, r3
 1125 01f0 FFF7FEFF 		bl	__aeabi_fcmplt
 1126 01f4 0346     		mov	r3, r0
 1127 01f6 002B     		cmp	r3, #0
 1128 01f8 00F0A682 		beq	.L28
 252:main.c        ****                 switch (ref_direction_deg) {
 1129              		.loc 1 252 0 is_stmt 1
 1130 01fc D7F89830 		ldr	r3, [r7, #152]
 1131 0200 5A2B     		cmp	r3, #90
 1132 0202 41D0     		beq	.L32
 1133 0204 5A2B     		cmp	r3, #90
 1134 0206 03DC     		bgt	.L33
 1135 0208 002B     		cmp	r3, #0
 1136 020a 00F09F80 		beq	.L34
 1137 020e 4CE2     		b	.L31
 1138              	.L33:
 1139 0210 B42B     		cmp	r3, #180
 1140 0212 00F08F81 		beq	.L35
 1141 0216 B3F5877F 		cmp	r3, #270
 1142 021a 00F0E781 		beq	.L36
 1143 021e 44E2     		b	.L31
 1144              	.L57:
 1145              		.align	3
 1146              	.L56:
 1147 0220 A60A4625 		.word	625347238
 1148 0224 7502EE3F 		.word	1072562805
 1149 0228 54E41071 		.word	1896932436
 1150 022c 732AC93E 		.word	1053370995
 1151 0230 7B14AE47 		.word	1202590843
 1152 0234 E17A643F 		.word	1063549665
 1153 0238 90C2F528 		.word	687194768
 1154 023c 5C0F3540 		.word	1077219164
 1155 0240 691D554D 		.word	1297423721
 1156 0244 1075FF3E 		.word	1056929040
 1157 0248 182D4454 		.word	1413754136
 1158 024c FB21F93F 		.word	1073291771
 1159 0250 00000000 		.word	Timer_Int_Handler
 1160 0254 00000000 		.word	Pose_Update_Int_Handler
 1161 0258 00000000 		.word	Motor_PI_Int_Handler
 1162 025c 00000000 		.word	left_motor
 1163 0260 00000000 		.word	right_motor
 1164 0264 0000E83F 		.word	1072168960
 1165 0268 00001440 		.word	1075052544
 1166 026c 00000000 		.word	robot
 1167 0270 00000000 		.word	sensors
 1168 0274 10000000 		.word	.LC0
 1169 0278 DB0FC93F 		.word	1070141403
 1170 027c 0AD7233C 		.word	1008981770
 1171 0280 00004842 		.word	1112014848
 1172 0284 00000000 		.word	wall_following_flag
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 26


 1173              	.L32:
 253:main.c        ****                     // Travelling towards box A
 254:main.c        ****                     case (90):
 255:main.c        ****          
 256:main.c        ****                         // Stop moving
 257:main.c        ****                         robot.desired_v = 0;
 1174              		.loc 1 257 0
 1175 0288 A54A     		ldr	r2, .L58+8
 1176 028a 4FF00003 		mov	r3, #0
 1177 028e 4FF00004 		mov	r4, #0
 1178 0292 C2E90C34 		strd	r3, [r2, #48]
 258:main.c        **** 
 259:main.c        ****                         // TODO: Unload Package Code
 260:main.c        ****                         move_servo(0b0101); // move servos 3 and 1 simultaneously
 1179              		.loc 1 260 0
 1180 0296 0520     		movs	r0, #5
 1181 0298 FFF7FEFF 		bl	move_servo
 261:main.c        ****                         //
 262:main.c        ****                         
 263:main.c        ****                         // Turn towards box B
 264:main.c        ****                         ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1182              		.loc 1 264 0
 1183 029c A04B     		ldr	r3, .L58+8
 1184 029e D3E90201 		ldrd	r0, [r3, #8]
 1185 02a2 9DA3     		adr	r3, .L58
 1186 02a4 D3E90023 		ldrd	r2, [r3]
 1187 02a8 FFF7FEFF 		bl	__aeabi_dsub
 1188 02ac 0346     		mov	r3, r0
 1189 02ae 0C46     		mov	r4, r1
 1190 02b0 1846     		mov	r0, r3
 1191 02b2 2146     		mov	r1, r4
 1192 02b4 FFF7FEFF 		bl	calculate_angle_modulo
 1193 02b8 0346     		mov	r3, r0
 1194 02ba 0C46     		mov	r4, r1
 1195 02bc 1846     		mov	r0, r3
 1196 02be 2146     		mov	r1, r4
 1197 02c0 FFF7FEFF 		bl	__aeabi_d2f
 1198 02c4 0346     		mov	r3, r0
 1199 02c6 C7F89C30 		str	r3, [r7, #156]	@ float
 265:main.c        ****                         Turn_Delay(ref_direction);
 1200              		.loc 1 265 0
 1201 02ca D7F89C00 		ldr	r0, [r7, #156]	@ float
 1202 02ce FFF7FEFF 		bl	__aeabi_f2d
 1203 02d2 0346     		mov	r3, r0
 1204 02d4 0C46     		mov	r4, r1
 1205 02d6 1846     		mov	r0, r3
 1206 02d8 2146     		mov	r1, r4
 1207 02da FFF7FEFF 		bl	Turn_Delay
 266:main.c        ****                         
 267:main.c        ****                         
 268:main.c        ****                         ref_direction_deg = angle_clamp(ref_direction_deg - 90);
 1208              		.loc 1 268 0
 1209 02de D7F89830 		ldr	r3, [r7, #152]
 1210 02e2 5A3B     		subs	r3, r3, #90
 1211 02e4 1846     		mov	r0, r3
 1212 02e6 FFF7FEFF 		bl	angle_clamp
 1213 02ea C7F89800 		str	r0, [r7, #152]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 27


 269:main.c        ****                         robot.desired_v = velocity;
 1214              		.loc 1 269 0
 1215 02ee F869     		ldr	r0, [r7, #28]
 1216 02f0 FFF7FEFF 		bl	__aeabi_i2d
 1217 02f4 0346     		mov	r3, r0
 1218 02f6 0C46     		mov	r4, r1
 1219 02f8 894A     		ldr	r2, .L58+8
 1220 02fa C2E90C34 		strd	r3, [r2, #48]
 270:main.c        ****                         
 271:main.c        ****                         // Update Flags
 272:main.c        ****                         wall_following_flag = 0;
 1221              		.loc 1 272 0
 1222 02fe 894B     		ldr	r3, .L58+12
 1223 0300 0022     		movs	r2, #0
 1224 0302 1A60     		str	r2, [r3]
 273:main.c        ****                         front_dist_th = 450;
 1225              		.loc 1 273 0
 1226 0304 884B     		ldr	r3, .L58+16
 1227 0306 C7F89430 		str	r3, [r7, #148]	@ float
 274:main.c        ****                         
 275:main.c        ****                         // Spoof
 276:main.c        ****                         sensors.distance[1] = dist_ref;
 1228              		.loc 1 276 0
 1229 030a 786A     		ldr	r0, [r7, #36]	@ float
 1230 030c FFF7FEFF 		bl	__aeabi_f2iz
 1231 0310 0246     		mov	r2, r0
 1232 0312 864B     		ldr	r3, .L58+20
 1233 0314 DA61     		str	r2, [r3, #28]
 277:main.c        ****                         sensors.distance[2] = dist_ref;
 1234              		.loc 1 277 0
 1235 0316 786A     		ldr	r0, [r7, #36]	@ float
 1236 0318 FFF7FEFF 		bl	__aeabi_f2iz
 1237 031c 0246     		mov	r2, r0
 1238 031e 834B     		ldr	r3, .L58+20
 1239 0320 1A62     		str	r2, [r3, #32]
 278:main.c        ****                         sensors.distance[3] = dist_ref;
 1240              		.loc 1 278 0
 1241 0322 786A     		ldr	r0, [r7, #36]	@ float
 1242 0324 FFF7FEFF 		bl	__aeabi_f2iz
 1243 0328 0246     		mov	r2, r0
 1244 032a 804B     		ldr	r3, .L58+20
 1245 032c 5A62     		str	r2, [r3, #36]
 279:main.c        ****                         sensors.distance[4] = dist_ref;
 1246              		.loc 1 279 0
 1247 032e 786A     		ldr	r0, [r7, #36]	@ float
 1248 0330 FFF7FEFF 		bl	__aeabi_f2iz
 1249 0334 0246     		mov	r2, r0
 1250 0336 7D4B     		ldr	r3, .L58+20
 1251 0338 9A62     		str	r2, [r3, #40]
 280:main.c        ****                         sensors.distance[0] = 10000;
 1252              		.loc 1 280 0
 1253 033a 7C4B     		ldr	r3, .L58+20
 1254 033c 42F21072 		movw	r2, #10000
 1255 0340 9A61     		str	r2, [r3, #24]
 281:main.c        ****                         sensors.distance[5] = 10000;
 1256              		.loc 1 281 0
 1257 0342 7A4B     		ldr	r3, .L58+20
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 28


 1258 0344 42F21072 		movw	r2, #10000
 1259 0348 DA62     		str	r2, [r3, #44]
 282:main.c        ****                         
 283:main.c        ****                         break;
 1260              		.loc 1 283 0
 1261 034a FDE1     		b	.L28
 1262              	.L34:
 284:main.c        ****                         
 285:main.c        ****                     
 286:main.c        ****                     // Travelling towards box B
 287:main.c        ****                     case (0):
 288:main.c        ****                         // If we haven't stopped at B yet
 289:main.c        ****                         if (!B_flag) {
 1263              		.loc 1 289 0
 1264 034c D7F88C30 		ldr	r3, [r7, #140]
 1265 0350 002B     		cmp	r3, #0
 1266 0352 5AD1     		bne	.L37
 290:main.c        ****                             // Stop moving
 291:main.c        ****                             robot.desired_v = 0;
 1267              		.loc 1 291 0
 1268 0354 724A     		ldr	r2, .L58+8
 1269 0356 4FF00003 		mov	r3, #0
 1270 035a 4FF00004 		mov	r4, #0
 1271 035e C2E90C34 		strd	r3, [r2, #48]
 292:main.c        ****                             
 293:main.c        ****                             // Rotate -90 deg to deliver packages
 294:main.c        ****                             ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1272              		.loc 1 294 0
 1273 0362 6F4B     		ldr	r3, .L58+8
 1274 0364 D3E90201 		ldrd	r0, [r3, #8]
 1275 0368 6BA3     		adr	r3, .L58
 1276 036a D3E90023 		ldrd	r2, [r3]
 1277 036e FFF7FEFF 		bl	__aeabi_dsub
 1278 0372 0346     		mov	r3, r0
 1279 0374 0C46     		mov	r4, r1
 1280 0376 1846     		mov	r0, r3
 1281 0378 2146     		mov	r1, r4
 1282 037a FFF7FEFF 		bl	calculate_angle_modulo
 1283 037e 0346     		mov	r3, r0
 1284 0380 0C46     		mov	r4, r1
 1285 0382 1846     		mov	r0, r3
 1286 0384 2146     		mov	r1, r4
 1287 0386 FFF7FEFF 		bl	__aeabi_d2f
 1288 038a 0346     		mov	r3, r0
 1289 038c C7F89C30 		str	r3, [r7, #156]	@ float
 295:main.c        ****                             Turn_Delay(ref_direction);
 1290              		.loc 1 295 0
 1291 0390 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1292 0394 FFF7FEFF 		bl	__aeabi_f2d
 1293 0398 0346     		mov	r3, r0
 1294 039a 0C46     		mov	r4, r1
 1295 039c 1846     		mov	r0, r3
 1296 039e 2146     		mov	r1, r4
 1297 03a0 FFF7FEFF 		bl	Turn_Delay
 296:main.c        **** 
 297:main.c        ****                             // TODO: Unload Package Code
 298:main.c        ****                             move_servo(0b0001);                                      
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 29


 1298              		.loc 1 298 0
 1299 03a4 0120     		movs	r0, #1
 1300 03a6 FFF7FEFF 		bl	move_servo
 299:main.c        ****                             
 300:main.c        ****                             //
 301:main.c        ****                             
 302:main.c        ****                             // Rotate back to go to C
 303:main.c        ****                             ref_direction = calculate_angle_modulo(robot.theta + M_PI/2);
 1301              		.loc 1 303 0
 1302 03aa 5D4B     		ldr	r3, .L58+8
 1303 03ac D3E90201 		ldrd	r0, [r3, #8]
 1304 03b0 59A3     		adr	r3, .L58
 1305 03b2 D3E90023 		ldrd	r2, [r3]
 1306 03b6 FFF7FEFF 		bl	__aeabi_dadd
 1307 03ba 0346     		mov	r3, r0
 1308 03bc 0C46     		mov	r4, r1
 1309 03be 1846     		mov	r0, r3
 1310 03c0 2146     		mov	r1, r4
 1311 03c2 FFF7FEFF 		bl	calculate_angle_modulo
 1312 03c6 0346     		mov	r3, r0
 1313 03c8 0C46     		mov	r4, r1
 1314 03ca 1846     		mov	r0, r3
 1315 03cc 2146     		mov	r1, r4
 1316 03ce FFF7FEFF 		bl	__aeabi_d2f
 1317 03d2 0346     		mov	r3, r0
 1318 03d4 C7F89C30 		str	r3, [r7, #156]	@ float
 304:main.c        ****                             Turn_Delay(ref_direction);
 1319              		.loc 1 304 0
 1320 03d8 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1321 03dc FFF7FEFF 		bl	__aeabi_f2d
 1322 03e0 0346     		mov	r3, r0
 1323 03e2 0C46     		mov	r4, r1
 1324 03e4 1846     		mov	r0, r3
 1325 03e6 2146     		mov	r1, r4
 1326 03e8 FFF7FEFF 		bl	Turn_Delay
 305:main.c        ****                             front_dist_th = 50;
 1327              		.loc 1 305 0
 1328 03ec 504B     		ldr	r3, .L58+24
 1329 03ee C7F89430 		str	r3, [r7, #148]	@ float
 306:main.c        ****                             B_flag = 1;
 1330              		.loc 1 306 0
 1331 03f2 0123     		movs	r3, #1
 1332 03f4 C7F88C30 		str	r3, [r7, #140]
 307:main.c        ****                             robot.desired_v = velocity;
 1333              		.loc 1 307 0
 1334 03f8 F869     		ldr	r0, [r7, #28]
 1335 03fa FFF7FEFF 		bl	__aeabi_i2d
 1336 03fe 0346     		mov	r3, r0
 1337 0400 0C46     		mov	r4, r1
 1338 0402 474A     		ldr	r2, .L58+8
 1339 0404 C2E90C34 		strd	r3, [r2, #48]
 1340 0408 64E0     		b	.L38
 1341              	.L37:
 308:main.c        ****                             
 309:main.c        ****                         } else {
 310:main.c        ****                             // Stop moving
 311:main.c        ****                             robot.desired_v = 0;
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 30


 1342              		.loc 1 311 0
 1343 040a 454A     		ldr	r2, .L58+8
 1344 040c 4FF00003 		mov	r3, #0
 1345 0410 4FF00004 		mov	r4, #0
 1346 0414 C2E90C34 		strd	r3, [r2, #48]
 312:main.c        ****                             
 313:main.c        ****                             // Rotate -90 deg to deliver packages
 314:main.c        ****                             ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1347              		.loc 1 314 0
 1348 0418 414B     		ldr	r3, .L58+8
 1349 041a D3E90201 		ldrd	r0, [r3, #8]
 1350 041e 3EA3     		adr	r3, .L58
 1351 0420 D3E90023 		ldrd	r2, [r3]
 1352 0424 FFF7FEFF 		bl	__aeabi_dsub
 1353 0428 0346     		mov	r3, r0
 1354 042a 0C46     		mov	r4, r1
 1355 042c 1846     		mov	r0, r3
 1356 042e 2146     		mov	r1, r4
 1357 0430 FFF7FEFF 		bl	calculate_angle_modulo
 1358 0434 0346     		mov	r3, r0
 1359 0436 0C46     		mov	r4, r1
 1360 0438 1846     		mov	r0, r3
 1361 043a 2146     		mov	r1, r4
 1362 043c FFF7FEFF 		bl	__aeabi_d2f
 1363 0440 0346     		mov	r3, r0
 1364 0442 C7F89C30 		str	r3, [r7, #156]	@ float
 315:main.c        ****                             Turn_Delay(ref_direction);
 1365              		.loc 1 315 0
 1366 0446 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1367 044a FFF7FEFF 		bl	__aeabi_f2d
 1368 044e 0346     		mov	r3, r0
 1369 0450 0C46     		mov	r4, r1
 1370 0452 1846     		mov	r0, r3
 1371 0454 2146     		mov	r1, r4
 1372 0456 FFF7FEFF 		bl	Turn_Delay
 316:main.c        **** 
 317:main.c        ****                             // TODO: Unload Package Code
 318:main.c        ****                             move_servo(0b0010);
 1373              		.loc 1 318 0
 1374 045a 0220     		movs	r0, #2
 1375 045c FFF7FEFF 		bl	move_servo
 319:main.c        ****                             //
 320:main.c        ****                             
 321:main.c        ****                             // Go back to A
 322:main.c        ****                             ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1376              		.loc 1 322 0
 1377 0460 2F4B     		ldr	r3, .L58+8
 1378 0462 D3E90201 		ldrd	r0, [r3, #8]
 1379 0466 2CA3     		adr	r3, .L58
 1380 0468 D3E90023 		ldrd	r2, [r3]
 1381 046c FFF7FEFF 		bl	__aeabi_dsub
 1382 0470 0346     		mov	r3, r0
 1383 0472 0C46     		mov	r4, r1
 1384 0474 1846     		mov	r0, r3
 1385 0476 2146     		mov	r1, r4
 1386 0478 FFF7FEFF 		bl	calculate_angle_modulo
 1387 047c 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 31


 1388 047e 0C46     		mov	r4, r1
 1389 0480 1846     		mov	r0, r3
 1390 0482 2146     		mov	r1, r4
 1391 0484 FFF7FEFF 		bl	__aeabi_d2f
 1392 0488 0346     		mov	r3, r0
 1393 048a C7F89C30 		str	r3, [r7, #156]	@ float
 323:main.c        ****                             Turn_Delay(ref_direction);
 1394              		.loc 1 323 0
 1395 048e D7F89C00 		ldr	r0, [r7, #156]	@ float
 1396 0492 FFF7FEFF 		bl	__aeabi_f2d
 1397 0496 0346     		mov	r3, r0
 1398 0498 0C46     		mov	r4, r1
 1399 049a 1846     		mov	r0, r3
 1400 049c 2146     		mov	r1, r4
 1401 049e FFF7FEFF 		bl	Turn_Delay
 324:main.c        ****                             ref_direction_deg = angle_clamp(ref_direction_deg - 180);
 1402              		.loc 1 324 0
 1403 04a2 D7F89830 		ldr	r3, [r7, #152]
 1404 04a6 B43B     		subs	r3, r3, #180
 1405 04a8 1846     		mov	r0, r3
 1406 04aa FFF7FEFF 		bl	angle_clamp
 1407 04ae C7F89800 		str	r0, [r7, #152]
 325:main.c        ****                             robot.desired_v = velocity;
 1408              		.loc 1 325 0
 1409 04b2 F869     		ldr	r0, [r7, #28]
 1410 04b4 FFF7FEFF 		bl	__aeabi_i2d
 1411 04b8 0346     		mov	r3, r0
 1412 04ba 0C46     		mov	r4, r1
 1413 04bc 184A     		ldr	r2, .L58+8
 1414 04be C2E90C34 		strd	r3, [r2, #48]
 326:main.c        ****                             
 327:main.c        ****                             // Update Flags
 328:main.c        ****                             wall_following_flag = 0;
 1415              		.loc 1 328 0
 1416 04c2 184B     		ldr	r3, .L58+12
 1417 04c4 0022     		movs	r2, #0
 1418 04c6 1A60     		str	r2, [r3]
 329:main.c        ****                             return_flag = 1;
 1419              		.loc 1 329 0
 1420 04c8 0123     		movs	r3, #1
 1421 04ca C7F89030 		str	r3, [r7, #144]
 330:main.c        ****                             B_flag = 0;
 1422              		.loc 1 330 0
 1423 04ce 0023     		movs	r3, #0
 1424 04d0 C7F88C30 		str	r3, [r7, #140]
 1425              	.L38:
 331:main.c        ****                             
 332:main.c        ****                         }
 333:main.c        ****                         
 334:main.c        ****                         // Spoof
 335:main.c        ****                         sensors.distance[1] = dist_ref;
 1426              		.loc 1 335 0
 1427 04d4 786A     		ldr	r0, [r7, #36]	@ float
 1428 04d6 FFF7FEFF 		bl	__aeabi_f2iz
 1429 04da 0246     		mov	r2, r0
 1430 04dc 134B     		ldr	r3, .L58+20
 1431 04de DA61     		str	r2, [r3, #28]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 32


 336:main.c        ****                         sensors.distance[2] = dist_ref;
 1432              		.loc 1 336 0
 1433 04e0 786A     		ldr	r0, [r7, #36]	@ float
 1434 04e2 FFF7FEFF 		bl	__aeabi_f2iz
 1435 04e6 0246     		mov	r2, r0
 1436 04e8 104B     		ldr	r3, .L58+20
 1437 04ea 1A62     		str	r2, [r3, #32]
 337:main.c        ****                         sensors.distance[3] = dist_ref;
 1438              		.loc 1 337 0
 1439 04ec 786A     		ldr	r0, [r7, #36]	@ float
 1440 04ee FFF7FEFF 		bl	__aeabi_f2iz
 1441 04f2 0246     		mov	r2, r0
 1442 04f4 0D4B     		ldr	r3, .L58+20
 1443 04f6 5A62     		str	r2, [r3, #36]
 338:main.c        ****                         sensors.distance[4] = dist_ref;
 1444              		.loc 1 338 0
 1445 04f8 786A     		ldr	r0, [r7, #36]	@ float
 1446 04fa FFF7FEFF 		bl	__aeabi_f2iz
 1447 04fe 0246     		mov	r2, r0
 1448 0500 0A4B     		ldr	r3, .L58+20
 1449 0502 9A62     		str	r2, [r3, #40]
 339:main.c        ****                         sensors.distance[0] = 10000;
 1450              		.loc 1 339 0
 1451 0504 094B     		ldr	r3, .L58+20
 1452 0506 42F21072 		movw	r2, #10000
 1453 050a 9A61     		str	r2, [r3, #24]
 340:main.c        ****                         sensors.distance[5] = 10000;
 1454              		.loc 1 340 0
 1455 050c 074B     		ldr	r3, .L58+20
 1456 050e 42F21072 		movw	r2, #10000
 1457 0512 DA62     		str	r2, [r3, #44]
 341:main.c        ****                         break;
 1458              		.loc 1 341 0
 1459 0514 18E1     		b	.L28
 1460              	.L59:
 1461 0516 00BF     		.align	3
 1462              	.L58:
 1463 0518 182D4454 		.word	1413754136
 1464 051c FB21F93F 		.word	1073291771
 1465 0520 00000000 		.word	robot
 1466 0524 00000000 		.word	wall_following_flag
 1467 0528 0000E143 		.word	1138819072
 1468 052c 00000000 		.word	sensors
 1469 0530 00004842 		.word	1112014848
 1470              	.L35:
 342:main.c        ****                     
 343:main.c        ****                     // Travelling Back to A *Can include a flag for safety measures
 344:main.c        ****                     case (180):
 345:main.c        **** 
 346:main.c        ****                         // Stop moving and turn towards loading bay
 347:main.c        ****                         robot.desired_v = 0;
 1471              		.loc 1 347 0
 1472 0534 A44A     		ldr	r2, .L60+16
 1473 0536 4FF00003 		mov	r3, #0
 1474 053a 4FF00004 		mov	r4, #0
 1475 053e C2E90C34 		strd	r3, [r2, #48]
 348:main.c        **** 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 33


 349:main.c        ****                         // Go towards beginning
 350:main.c        ****                         ref_direction = calculate_angle_modulo(robot.theta + M_PI/2);
 1476              		.loc 1 350 0
 1477 0542 A14B     		ldr	r3, .L60+16
 1478 0544 D3E90201 		ldrd	r0, [r3, #8]
 1479 0548 9BA3     		adr	r3, .L60
 1480 054a D3E90023 		ldrd	r2, [r3]
 1481 054e FFF7FEFF 		bl	__aeabi_dadd
 1482 0552 0346     		mov	r3, r0
 1483 0554 0C46     		mov	r4, r1
 1484 0556 1846     		mov	r0, r3
 1485 0558 2146     		mov	r1, r4
 1486 055a FFF7FEFF 		bl	calculate_angle_modulo
 1487 055e 0346     		mov	r3, r0
 1488 0560 0C46     		mov	r4, r1
 1489 0562 1846     		mov	r0, r3
 1490 0564 2146     		mov	r1, r4
 1491 0566 FFF7FEFF 		bl	__aeabi_d2f
 1492 056a 0346     		mov	r3, r0
 1493 056c C7F89C30 		str	r3, [r7, #156]	@ float
 351:main.c        ****                         Turn_Delay(ref_direction);
 1494              		.loc 1 351 0
 1495 0570 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1496 0574 FFF7FEFF 		bl	__aeabi_f2d
 1497 0578 0346     		mov	r3, r0
 1498 057a 0C46     		mov	r4, r1
 1499 057c 1846     		mov	r0, r3
 1500 057e 2146     		mov	r1, r4
 1501 0580 FFF7FEFF 		bl	Turn_Delay
 352:main.c        ****                         ref_direction_deg = angle_clamp(ref_direction_deg + 90);
 1502              		.loc 1 352 0
 1503 0584 D7F89830 		ldr	r3, [r7, #152]
 1504 0588 5A33     		adds	r3, r3, #90
 1505 058a 1846     		mov	r0, r3
 1506 058c FFF7FEFF 		bl	angle_clamp
 1507 0590 C7F89800 		str	r0, [r7, #152]
 353:main.c        ****                         robot.desired_v = velocity;
 1508              		.loc 1 353 0
 1509 0594 F869     		ldr	r0, [r7, #28]
 1510 0596 FFF7FEFF 		bl	__aeabi_i2d
 1511 059a 0346     		mov	r3, r0
 1512 059c 0C46     		mov	r4, r1
 1513 059e 8A4A     		ldr	r2, .L60+16
 1514 05a0 C2E90C34 		strd	r3, [r2, #48]
 354:main.c        ****                         wall_following_flag = 0;
 1515              		.loc 1 354 0
 1516 05a4 894B     		ldr	r3, .L60+20
 1517 05a6 0022     		movs	r2, #0
 1518 05a8 1A60     		str	r2, [r3]
 355:main.c        ****                     
 356:main.c        ****                         // Spoof
 357:main.c        ****                         sensors.distance[1] = dist_ref;
 1519              		.loc 1 357 0
 1520 05aa 786A     		ldr	r0, [r7, #36]	@ float
 1521 05ac FFF7FEFF 		bl	__aeabi_f2iz
 1522 05b0 0246     		mov	r2, r0
 1523 05b2 874B     		ldr	r3, .L60+24
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 34


 1524 05b4 DA61     		str	r2, [r3, #28]
 358:main.c        ****                         sensors.distance[2] = dist_ref;
 1525              		.loc 1 358 0
 1526 05b6 786A     		ldr	r0, [r7, #36]	@ float
 1527 05b8 FFF7FEFF 		bl	__aeabi_f2iz
 1528 05bc 0246     		mov	r2, r0
 1529 05be 844B     		ldr	r3, .L60+24
 1530 05c0 1A62     		str	r2, [r3, #32]
 359:main.c        ****                         sensors.distance[3] = dist_ref;
 1531              		.loc 1 359 0
 1532 05c2 786A     		ldr	r0, [r7, #36]	@ float
 1533 05c4 FFF7FEFF 		bl	__aeabi_f2iz
 1534 05c8 0246     		mov	r2, r0
 1535 05ca 814B     		ldr	r3, .L60+24
 1536 05cc 5A62     		str	r2, [r3, #36]
 360:main.c        ****                         sensors.distance[4] = dist_ref;
 1537              		.loc 1 360 0
 1538 05ce 786A     		ldr	r0, [r7, #36]	@ float
 1539 05d0 FFF7FEFF 		bl	__aeabi_f2iz
 1540 05d4 0246     		mov	r2, r0
 1541 05d6 7E4B     		ldr	r3, .L60+24
 1542 05d8 9A62     		str	r2, [r3, #40]
 361:main.c        ****                         sensors.distance[0] = 10000;
 1543              		.loc 1 361 0
 1544 05da 7D4B     		ldr	r3, .L60+24
 1545 05dc 42F21072 		movw	r2, #10000
 1546 05e0 9A61     		str	r2, [r3, #24]
 362:main.c        ****                         sensors.distance[5] = 10000;
 1547              		.loc 1 362 0
 1548 05e2 7B4B     		ldr	r3, .L60+24
 1549 05e4 42F21072 		movw	r2, #10000
 1550 05e8 DA62     		str	r2, [r3, #44]
 363:main.c        ****                         break;
 1551              		.loc 1 363 0
 1552 05ea ADE0     		b	.L28
 1553              	.L36:
 364:main.c        **** 
 365:main.c        ****                     // Travelling Back to Start
 366:main.c        ****                     case (270):
 367:main.c        ****                          
 368:main.c        ****                         // Stop moving and point back to A
 369:main.c        ****                         robot.desired_v = 0;
 1554              		.loc 1 369 0
 1555 05ec 764A     		ldr	r2, .L60+16
 1556 05ee 4FF00003 		mov	r3, #0
 1557 05f2 4FF00004 		mov	r4, #0
 1558 05f6 C2E90C34 		strd	r3, [r2, #48]
 370:main.c        **** 
 371:main.c        ****                         // Update Position
 372:main.c        ****                         ref_direction = calculate_angle_modulo(robot.theta - M_PI);
 1559              		.loc 1 372 0
 1560 05fa 734B     		ldr	r3, .L60+16
 1561 05fc D3E90201 		ldrd	r0, [r3, #8]
 1562 0600 6FA3     		adr	r3, .L60+8
 1563 0602 D3E90023 		ldrd	r2, [r3]
 1564 0606 FFF7FEFF 		bl	__aeabi_dsub
 1565 060a 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 35


 1566 060c 0C46     		mov	r4, r1
 1567 060e 1846     		mov	r0, r3
 1568 0610 2146     		mov	r1, r4
 1569 0612 FFF7FEFF 		bl	calculate_angle_modulo
 1570 0616 0346     		mov	r3, r0
 1571 0618 0C46     		mov	r4, r1
 1572 061a 1846     		mov	r0, r3
 1573 061c 2146     		mov	r1, r4
 1574 061e FFF7FEFF 		bl	__aeabi_d2f
 1575 0622 0346     		mov	r3, r0
 1576 0624 C7F89C30 		str	r3, [r7, #156]	@ float
 373:main.c        ****                         Turn_Delay(ref_direction);
 1577              		.loc 1 373 0
 1578 0628 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1579 062c FFF7FEFF 		bl	__aeabi_f2d
 1580 0630 0346     		mov	r3, r0
 1581 0632 0C46     		mov	r4, r1
 1582 0634 1846     		mov	r0, r3
 1583 0636 2146     		mov	r1, r4
 1584 0638 FFF7FEFF 		bl	Turn_Delay
 374:main.c        ****                         ref_direction_deg = angle_clamp(ref_direction_deg - 180);
 1585              		.loc 1 374 0
 1586 063c D7F89830 		ldr	r3, [r7, #152]
 1587 0640 B43B     		subs	r3, r3, #180
 1588 0642 1846     		mov	r0, r3
 1589 0644 FFF7FEFF 		bl	angle_clamp
 1590 0648 C7F89800 		str	r0, [r7, #152]
 375:main.c        ****                         robot.desired_v = velocity;
 1591              		.loc 1 375 0
 1592 064c F869     		ldr	r0, [r7, #28]
 1593 064e FFF7FEFF 		bl	__aeabi_i2d
 1594 0652 0346     		mov	r3, r0
 1595 0654 0C46     		mov	r4, r1
 1596 0656 5C4A     		ldr	r2, .L60+16
 1597 0658 C2E90C34 		strd	r3, [r2, #48]
 376:main.c        ****                         
 377:main.c        ****                         // Update Flags
 378:main.c        ****                         wall_following_flag = 0;
 1598              		.loc 1 378 0
 1599 065c 5B4B     		ldr	r3, .L60+20
 1600 065e 0022     		movs	r2, #0
 1601 0660 1A60     		str	r2, [r3]
 379:main.c        ****                         return_flag = 0;
 1602              		.loc 1 379 0
 1603 0662 0023     		movs	r3, #0
 1604 0664 C7F89030 		str	r3, [r7, #144]
 380:main.c        ****                             
 381:main.c        ****                         // Spoof
 382:main.c        ****                         sensors.distance[1] = dist_ref;
 1605              		.loc 1 382 0
 1606 0668 786A     		ldr	r0, [r7, #36]	@ float
 1607 066a FFF7FEFF 		bl	__aeabi_f2iz
 1608 066e 0246     		mov	r2, r0
 1609 0670 574B     		ldr	r3, .L60+24
 1610 0672 DA61     		str	r2, [r3, #28]
 383:main.c        ****                         sensors.distance[2] = dist_ref;
 1611              		.loc 1 383 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 36


 1612 0674 786A     		ldr	r0, [r7, #36]	@ float
 1613 0676 FFF7FEFF 		bl	__aeabi_f2iz
 1614 067a 0246     		mov	r2, r0
 1615 067c 544B     		ldr	r3, .L60+24
 1616 067e 1A62     		str	r2, [r3, #32]
 384:main.c        ****                         sensors.distance[3] = dist_ref;
 1617              		.loc 1 384 0
 1618 0680 786A     		ldr	r0, [r7, #36]	@ float
 1619 0682 FFF7FEFF 		bl	__aeabi_f2iz
 1620 0686 0246     		mov	r2, r0
 1621 0688 514B     		ldr	r3, .L60+24
 1622 068a 5A62     		str	r2, [r3, #36]
 385:main.c        ****                         sensors.distance[4] = dist_ref;
 1623              		.loc 1 385 0
 1624 068c 786A     		ldr	r0, [r7, #36]	@ float
 1625 068e FFF7FEFF 		bl	__aeabi_f2iz
 1626 0692 0246     		mov	r2, r0
 1627 0694 4E4B     		ldr	r3, .L60+24
 1628 0696 9A62     		str	r2, [r3, #40]
 386:main.c        ****                         sensors.distance[0] = 10000;
 1629              		.loc 1 386 0
 1630 0698 4D4B     		ldr	r3, .L60+24
 1631 069a 42F21072 		movw	r2, #10000
 1632 069e 9A61     		str	r2, [r3, #24]
 387:main.c        ****                         sensors.distance[5] = 10000;
 1633              		.loc 1 387 0
 1634 06a0 4B4B     		ldr	r3, .L60+24
 1635 06a2 42F21072 		movw	r2, #10000
 1636 06a6 DA62     		str	r2, [r3, #44]
 388:main.c        ****                         
 389:main.c        ****                         break;
 1637              		.loc 1 389 0
 1638 06a8 4EE0     		b	.L28
 1639              	.L31:
 390:main.c        **** 
 391:main.c        ****                     default:
 392:main.c        ****                         
 393:main.c        ****                         // Wall follow if broken
 394:main.c        ****                         robot.desired_v = 0;
 1640              		.loc 1 394 0
 1641 06aa 474A     		ldr	r2, .L60+16
 1642 06ac 4FF00003 		mov	r3, #0
 1643 06b0 4FF00004 		mov	r4, #0
 1644 06b4 C2E90C34 		strd	r3, [r2, #48]
 395:main.c        ****                         Turn_Delay(M_PI/2);
 1645              		.loc 1 395 0
 1646 06b8 3FA1     		adr	r1, .L60
 1647 06ba D1E90001 		ldrd	r0, [r1]
 1648 06be FFF7FEFF 		bl	Turn_Delay
 396:main.c        ****                         ref_direction = calculate_angle_modulo(ref_direction - M_PI/2);
 1649              		.loc 1 396 0
 1650 06c2 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1651 06c6 FFF7FEFF 		bl	__aeabi_f2d
 1652 06ca 3BA3     		adr	r3, .L60
 1653 06cc D3E90023 		ldrd	r2, [r3]
 1654 06d0 FFF7FEFF 		bl	__aeabi_dsub
 1655 06d4 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 37


 1656 06d6 0C46     		mov	r4, r1
 1657 06d8 1846     		mov	r0, r3
 1658 06da 2146     		mov	r1, r4
 1659 06dc FFF7FEFF 		bl	calculate_angle_modulo
 1660 06e0 0346     		mov	r3, r0
 1661 06e2 0C46     		mov	r4, r1
 1662 06e4 1846     		mov	r0, r3
 1663 06e6 2146     		mov	r1, r4
 1664 06e8 FFF7FEFF 		bl	__aeabi_d2f
 1665 06ec 0346     		mov	r3, r0
 1666 06ee C7F89C30 		str	r3, [r7, #156]	@ float
 397:main.c        ****                         
 398:main.c        ****                         robot.desired_v = velocity;
 1667              		.loc 1 398 0
 1668 06f2 F869     		ldr	r0, [r7, #28]
 1669 06f4 FFF7FEFF 		bl	__aeabi_i2d
 1670 06f8 0346     		mov	r3, r0
 1671 06fa 0C46     		mov	r4, r1
 1672 06fc 324A     		ldr	r2, .L60+16
 1673 06fe C2E90C34 		strd	r3, [r2, #48]
 399:main.c        ****                         wall_following_flag = 0;
 1674              		.loc 1 399 0
 1675 0702 324B     		ldr	r3, .L60+20
 1676 0704 0022     		movs	r2, #0
 1677 0706 1A60     		str	r2, [r3]
 400:main.c        **** 
 401:main.c        ****                         // Spoof sensor to avoid sensor updates during turn
 402:main.c        ****                         sensors.distance[1] = dist_ref;
 1678              		.loc 1 402 0
 1679 0708 786A     		ldr	r0, [r7, #36]	@ float
 1680 070a FFF7FEFF 		bl	__aeabi_f2iz
 1681 070e 0246     		mov	r2, r0
 1682 0710 2F4B     		ldr	r3, .L60+24
 1683 0712 DA61     		str	r2, [r3, #28]
 403:main.c        ****                         sensors.distance[2] = dist_ref;
 1684              		.loc 1 403 0
 1685 0714 786A     		ldr	r0, [r7, #36]	@ float
 1686 0716 FFF7FEFF 		bl	__aeabi_f2iz
 1687 071a 0246     		mov	r2, r0
 1688 071c 2C4B     		ldr	r3, .L60+24
 1689 071e 1A62     		str	r2, [r3, #32]
 404:main.c        ****                         sensors.distance[3] = dist_ref;
 1690              		.loc 1 404 0
 1691 0720 786A     		ldr	r0, [r7, #36]	@ float
 1692 0722 FFF7FEFF 		bl	__aeabi_f2iz
 1693 0726 0246     		mov	r2, r0
 1694 0728 294B     		ldr	r3, .L60+24
 1695 072a 5A62     		str	r2, [r3, #36]
 405:main.c        ****                         sensors.distance[4] = dist_ref;
 1696              		.loc 1 405 0
 1697 072c 786A     		ldr	r0, [r7, #36]	@ float
 1698 072e FFF7FEFF 		bl	__aeabi_f2iz
 1699 0732 0246     		mov	r2, r0
 1700 0734 264B     		ldr	r3, .L60+24
 1701 0736 9A62     		str	r2, [r3, #40]
 406:main.c        ****                         sensors.distance[0] = 10000;
 1702              		.loc 1 406 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 38


 1703 0738 254B     		ldr	r3, .L60+24
 1704 073a 42F21072 		movw	r2, #10000
 1705 073e 9A61     		str	r2, [r3, #24]
 407:main.c        ****                         sensors.distance[5] = 10000;
 1706              		.loc 1 407 0
 1707 0740 234B     		ldr	r3, .L60+24
 1708 0742 42F21072 		movw	r2, #10000
 1709 0746 DA62     		str	r2, [r3, #44]
 1710              	.L28:
 408:main.c        ****                 }
 409:main.c        ****             }
 410:main.c        **** 
 411:main.c        ****             // Wall Following
 412:main.c        ****             float error = 0;
 1711              		.loc 1 412 0
 1712 0748 4FF00003 		mov	r3, #0
 1713 074c BB61     		str	r3, [r7, #24]	@ float
 413:main.c        ****             int terminal_phase = sensors.distance[0] < 100 && sensors.distance[5] < 150;
 1714              		.loc 1 413 0
 1715 074e 204B     		ldr	r3, .L60+24
 1716 0750 9B69     		ldr	r3, [r3, #24]
 1717 0752 632B     		cmp	r3, #99
 1718 0754 05DC     		bgt	.L39
 1719              		.loc 1 413 0 is_stmt 0 discriminator 1
 1720 0756 1E4B     		ldr	r3, .L60+24
 1721 0758 DB6A     		ldr	r3, [r3, #44]
 1722 075a 952B     		cmp	r3, #149
 1723 075c 01DC     		bgt	.L39
 1724              		.loc 1 413 0 discriminator 3
 1725 075e 0123     		movs	r3, #1
 1726 0760 00E0     		b	.L40
 1727              	.L39:
 1728              		.loc 1 413 0 discriminator 4
 1729 0762 0023     		movs	r3, #0
 1730              	.L40:
 1731              		.loc 1 413 0 discriminator 6
 1732 0764 7B61     		str	r3, [r7, #20]
 414:main.c        ****             switch ( return_flag ){
 1733              		.loc 1 414 0 is_stmt 1 discriminator 6
 1734 0766 D7F89030 		ldr	r3, [r7, #144]
 1735 076a 002B     		cmp	r3, #0
 1736 076c 02D0     		beq	.L42
 1737 076e 012B     		cmp	r3, #1
 1738 0770 59D0     		beq	.L43
 1739              		.loc 1 414 0 is_stmt 0
 1740 0772 A0E0     		b	.L55
 1741              	.L42:
 415:main.c        ****                 case (0):
 416:main.c        ****                     // Follow Left Wall
 417:main.c        ****                     robot.desired_v = terminal_phase ? 5: velocity;
 1742              		.loc 1 417 0 is_stmt 1
 1743 0774 7B69     		ldr	r3, [r7, #20]
 1744 0776 002B     		cmp	r3, #0
 1745 0778 05D1     		bne	.L44
 1746              		.loc 1 417 0 is_stmt 0 discriminator 1
 1747 077a F869     		ldr	r0, [r7, #28]
 1748 077c FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 39


 1749 0780 0346     		mov	r3, r0
 1750 0782 0C46     		mov	r4, r1
 1751 0784 02E0     		b	.L45
 1752              	.L44:
 1753              		.loc 1 417 0 discriminator 2
 1754 0786 4FF00003 		mov	r3, #0
 1755 078a 124C     		ldr	r4, .L60+28
 1756              	.L45:
 1757              		.loc 1 417 0 discriminator 4
 1758 078c 0E4A     		ldr	r2, .L60+16
 1759 078e C2E90C34 		strd	r3, [r2, #48]
 418:main.c        ****                     error = (sensors.distance[1] < sensors.distance[2]) ? dist_ref - sensors.distan
 1760              		.loc 1 418 0 is_stmt 1 discriminator 4
 1761 0792 0F4B     		ldr	r3, .L60+24
 1762 0794 DA69     		ldr	r2, [r3, #28]
 1763 0796 0E4B     		ldr	r3, .L60+24
 1764 0798 1B6A     		ldr	r3, [r3, #32]
 1765 079a 9A42     		cmp	r2, r3
 1766 079c 1CDA     		bge	.L46
 1767              		.loc 1 418 0 is_stmt 0 discriminator 1
 1768 079e 0C4B     		ldr	r3, .L60+24
 1769 07a0 DB69     		ldr	r3, [r3, #28]
 1770 07a2 1846     		mov	r0, r3
 1771 07a4 FFF7FEFF 		bl	__aeabi_i2f
 1772 07a8 0346     		mov	r3, r0
 1773 07aa 1946     		mov	r1, r3
 1774 07ac 786A     		ldr	r0, [r7, #36]	@ float
 1775 07ae FFF7FEFF 		bl	__aeabi_fsub
 1776 07b2 0346     		mov	r3, r0
 1777 07b4 1BE0     		b	.L47
 1778              	.L61:
 1779 07b6 00BF     		.align	3
 1780              	.L60:
 1781 07b8 182D4454 		.word	1413754136
 1782 07bc FB21F93F 		.word	1073291771
 1783 07c0 182D4454 		.word	1413754136
 1784 07c4 FB210940 		.word	1074340347
 1785 07c8 00000000 		.word	robot
 1786 07cc 00000000 		.word	wall_following_flag
 1787 07d0 00000000 		.word	sensors
 1788 07d4 00001440 		.word	1075052544
 1789              	.L46:
 1790              		.loc 1 418 0 discriminator 2
 1791 07d8 414B     		ldr	r3, .L62+8
 1792 07da 1B6A     		ldr	r3, [r3, #32]
 1793 07dc 1846     		mov	r0, r3
 1794 07de FFF7FEFF 		bl	__aeabi_i2f
 1795 07e2 0346     		mov	r3, r0
 1796 07e4 1946     		mov	r1, r3
 1797 07e6 786A     		ldr	r0, [r7, #36]	@ float
 1798 07e8 FFF7FEFF 		bl	__aeabi_fsub
 1799 07ec 0346     		mov	r3, r0
 1800              	.L47:
 1801              		.loc 1 418 0 discriminator 4
 1802 07ee BB61     		str	r3, [r7, #24]	@ float
 419:main.c        ****                     //error = dist_ref - (sensors.distance[1] + sensors.distance[2] / 2);
 420:main.c        ****                     theta_correction = wall_Kp * -(error);
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 40


 1803              		.loc 1 420 0 is_stmt 1 discriminator 4
 1804 07f0 BB69     		ldr	r3, [r7, #24]
 1805 07f2 83F00043 		eor	r3, r3, #-2147483648
 1806 07f6 B96A     		ldr	r1, [r7, #40]	@ float
 1807 07f8 1846     		mov	r0, r3
 1808 07fa FFF7FEFF 		bl	__aeabi_fmul
 1809 07fe 0346     		mov	r3, r0
 1810 0800 FB62     		str	r3, [r7, #44]	@ float
 421:main.c        ****                     robot.desired_theta = ref_direction + theta_correction;
 1811              		.loc 1 421 0 discriminator 4
 1812 0802 F96A     		ldr	r1, [r7, #44]	@ float
 1813 0804 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1814 0808 FFF7FEFF 		bl	__aeabi_fadd
 1815 080c 0346     		mov	r3, r0
 1816 080e 1846     		mov	r0, r3
 1817 0810 FFF7FEFF 		bl	__aeabi_f2d
 1818 0814 0346     		mov	r3, r0
 1819 0816 0C46     		mov	r4, r1
 1820 0818 324A     		ldr	r2, .L62+12
 1821 081a C2E90E34 		strd	r3, [r2, #56]
 422:main.c        ****                     wall_following_flag = 0;
 1822              		.loc 1 422 0 discriminator 4
 1823 081e 324B     		ldr	r3, .L62+16
 1824 0820 0022     		movs	r2, #0
 1825 0822 1A60     		str	r2, [r3]
 423:main.c        ****                     
 424:main.c        ****                     break;    
 1826              		.loc 1 424 0 discriminator 4
 1827 0824 54E0     		b	.L27
 1828              	.L43:
 425:main.c        ****                 
 426:main.c        ****                 case (1):
 427:main.c        ****                     // Follow right wall
 428:main.c        ****                     robot.desired_v = terminal_phase ? 5: velocity;
 1829              		.loc 1 428 0
 1830 0826 7B69     		ldr	r3, [r7, #20]
 1831 0828 002B     		cmp	r3, #0
 1832 082a 05D1     		bne	.L48
 1833              		.loc 1 428 0 is_stmt 0 discriminator 1
 1834 082c F869     		ldr	r0, [r7, #28]
 1835 082e FFF7FEFF 		bl	__aeabi_i2d
 1836 0832 0346     		mov	r3, r0
 1837 0834 0C46     		mov	r4, r1
 1838 0836 02E0     		b	.L49
 1839              	.L48:
 1840              		.loc 1 428 0 discriminator 2
 1841 0838 4FF00003 		mov	r3, #0
 1842 083c 2B4C     		ldr	r4, .L62+20
 1843              	.L49:
 1844              		.loc 1 428 0 discriminator 4
 1845 083e 294A     		ldr	r2, .L62+12
 1846 0840 C2E90C34 		strd	r3, [r2, #48]
 429:main.c        ****                     
 430:main.c        ****                     error = (sensors.distance[3] < sensors.distance[4]) ? dist_ref - sensors.distan
 1847              		.loc 1 430 0 is_stmt 1 discriminator 4
 1848 0844 264B     		ldr	r3, .L62+8
 1849 0846 5A6A     		ldr	r2, [r3, #36]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 41


 1850 0848 254B     		ldr	r3, .L62+8
 1851 084a 9B6A     		ldr	r3, [r3, #40]
 1852 084c 9A42     		cmp	r2, r3
 1853 084e 0BDA     		bge	.L50
 1854              		.loc 1 430 0 is_stmt 0 discriminator 1
 1855 0850 234B     		ldr	r3, .L62+8
 1856 0852 5B6A     		ldr	r3, [r3, #36]
 1857 0854 1846     		mov	r0, r3
 1858 0856 FFF7FEFF 		bl	__aeabi_i2f
 1859 085a 0346     		mov	r3, r0
 1860 085c 1946     		mov	r1, r3
 1861 085e 786A     		ldr	r0, [r7, #36]	@ float
 1862 0860 FFF7FEFF 		bl	__aeabi_fsub
 1863 0864 0346     		mov	r3, r0
 1864 0866 0AE0     		b	.L51
 1865              	.L50:
 1866              		.loc 1 430 0 discriminator 2
 1867 0868 1D4B     		ldr	r3, .L62+8
 1868 086a 9B6A     		ldr	r3, [r3, #40]
 1869 086c 1846     		mov	r0, r3
 1870 086e FFF7FEFF 		bl	__aeabi_i2f
 1871 0872 0346     		mov	r3, r0
 1872 0874 1946     		mov	r1, r3
 1873 0876 786A     		ldr	r0, [r7, #36]	@ float
 1874 0878 FFF7FEFF 		bl	__aeabi_fsub
 1875 087c 0346     		mov	r3, r0
 1876              	.L51:
 1877              		.loc 1 430 0 discriminator 4
 1878 087e BB61     		str	r3, [r7, #24]	@ float
 431:main.c        ****                     
 432:main.c        ****                     theta_correction = wall_Kp * -(error);
 1879              		.loc 1 432 0 is_stmt 1 discriminator 4
 1880 0880 BB69     		ldr	r3, [r7, #24]
 1881 0882 83F00043 		eor	r3, r3, #-2147483648
 1882 0886 B96A     		ldr	r1, [r7, #40]	@ float
 1883 0888 1846     		mov	r0, r3
 1884 088a FFF7FEFF 		bl	__aeabi_fmul
 1885 088e 0346     		mov	r3, r0
 1886 0890 FB62     		str	r3, [r7, #44]	@ float
 433:main.c        ****                     robot.desired_theta = ref_direction - theta_correction;
 1887              		.loc 1 433 0 discriminator 4
 1888 0892 F96A     		ldr	r1, [r7, #44]	@ float
 1889 0894 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1890 0898 FFF7FEFF 		bl	__aeabi_fsub
 1891 089c 0346     		mov	r3, r0
 1892 089e 1846     		mov	r0, r3
 1893 08a0 FFF7FEFF 		bl	__aeabi_f2d
 1894 08a4 0346     		mov	r3, r0
 1895 08a6 0C46     		mov	r4, r1
 1896 08a8 0E4A     		ldr	r2, .L62+12
 1897 08aa C2E90E34 		strd	r3, [r2, #56]
 434:main.c        ****                     wall_following_flag = 0;
 1898              		.loc 1 434 0 discriminator 4
 1899 08ae 0E4B     		ldr	r3, .L62+16
 1900 08b0 0022     		movs	r2, #0
 1901 08b2 1A60     		str	r2, [r3]
 435:main.c        ****                     
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 42


 436:main.c        ****                     break;  
 1902              		.loc 1 436 0 discriminator 4
 1903 08b4 0CE0     		b	.L27
 1904              	.L55:
 437:main.c        ****                     
 438:main.c        ****                 default:
 439:main.c        ****                     robot.desired_v = 0;
 1905              		.loc 1 439 0
 1906 08b6 0B4A     		ldr	r2, .L62+12
 1907 08b8 4FF00003 		mov	r3, #0
 1908 08bc 4FF00004 		mov	r4, #0
 1909 08c0 C2E90C34 		strd	r3, [r2, #48]
 440:main.c        ****                     robot.desired_theta = 190000;
 1910              		.loc 1 440 0
 1911 08c4 074A     		ldr	r2, .L62+12
 1912 08c6 04A4     		adr	r4, .L62
 1913 08c8 D4E90034 		ldrd	r3, [r4]
 1914 08cc C2E90E34 		strd	r3, [r2, #56]
 1915              	.L27:
 1916              	.LBE2:
 441:main.c        ****                  
 442:main.c        ****             }
 443:main.c        ****             
 444:main.c        ****             
 445:main.c        ****         }
 446:main.c        **** 
 447:main.c        ****     } 
 1917              		.loc 1 447 0
 1918 08d0 72E4     		b	.L52
 1919              	.L63:
 1920 08d2 00BFAFF3 		.align	3
 1920      0080
 1921              	.L62:
 1922 08d8 00000000 		.word	0
 1923 08dc 80310741 		.word	1090990464
 1924 08e0 00000000 		.word	sensors
 1925 08e4 00000000 		.word	robot
 1926 08e8 00000000 		.word	wall_following_flag
 1927 08ec 00001440 		.word	1075052544
 1928              		.cfi_endproc
 1929              	.LFE68:
 1930              		.size	main, .-main
 1931              		.global	__aeabi_d2uiz
 1932              		.section	.text.Drive_Left_Motor,"ax",%progbits
 1933              		.align	2
 1934              		.global	Drive_Left_Motor
 1935              		.thumb
 1936              		.thumb_func
 1937              		.type	Drive_Left_Motor, %function
 1938              	Drive_Left_Motor:
 1939              	.LFB69:
 448:main.c        ****             
 449:main.c        **** }
 450:main.c        **** 
 451:main.c        **** // Drive functions
 452:main.c        **** void Drive_Left_Motor(long double duty_cycle) {
 1940              		.loc 1 452 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 43


 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 8
 1943              		@ frame_needed = 1, uses_anonymous_args = 0
 1944 0000 90B5     		push	{r4, r7, lr}
 1945              		.cfi_def_cfa_offset 12
 1946              		.cfi_offset 4, -12
 1947              		.cfi_offset 7, -8
 1948              		.cfi_offset 14, -4
 1949 0002 83B0     		sub	sp, sp, #12
 1950              		.cfi_def_cfa_offset 24
 1951 0004 00AF     		add	r7, sp, #0
 1952              		.cfi_def_cfa_register 7
 1953 0006 C7E90001 		strd	r0, [r7]
 453:main.c        ****     if (duty_cycle < -1) {
 1954              		.loc 1 453 0
 1955 000a 4FF00002 		mov	r2, #0
 1956 000e 304B     		ldr	r3, .L78+8
 1957 0010 D7E90001 		ldrd	r0, [r7]
 1958 0014 FFF7FEFF 		bl	__aeabi_dcmplt
 1959 0018 0346     		mov	r3, r0
 1960 001a 002B     		cmp	r3, #0
 1961 001c 05D0     		beq	.L75
 454:main.c        ****         duty_cycle = -1;
 1962              		.loc 1 454 0
 1963 001e 4FF00003 		mov	r3, #0
 1964 0022 2B4C     		ldr	r4, .L78+8
 1965 0024 C7E90034 		strd	r3, [r7]
 1966 0028 0EE0     		b	.L67
 1967              	.L75:
 455:main.c        ****     } else if (duty_cycle > 1) {
 1968              		.loc 1 455 0
 1969 002a 4FF00002 		mov	r2, #0
 1970 002e 294B     		ldr	r3, .L78+12
 1971 0030 D7E90001 		ldrd	r0, [r7]
 1972 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 1973 0038 0346     		mov	r3, r0
 1974 003a 002B     		cmp	r3, #0
 1975 003c 04D0     		beq	.L67
 456:main.c        ****         duty_cycle = 1;
 1976              		.loc 1 456 0
 1977 003e 4FF00003 		mov	r3, #0
 1978 0042 244C     		ldr	r4, .L78+12
 1979 0044 C7E90034 		strd	r3, [r7]
 1980              	.L67:
 457:main.c        ****     }
 458:main.c        ****     
 459:main.c        ****     if (duty_cycle < 0) {
 1981              		.loc 1 459 0
 1982 0048 4FF00002 		mov	r2, #0
 1983 004c 4FF00003 		mov	r3, #0
 1984 0050 D7E90001 		ldrd	r0, [r7]
 1985 0054 FFF7FEFF 		bl	__aeabi_dcmplt
 1986 0058 0346     		mov	r3, r0
 1987 005a 002B     		cmp	r3, #0
 1988 005c 1BD0     		beq	.L76
 460:main.c        ****         duty_cycle = -duty_cycle;
 1989              		.loc 1 460 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 44


 1990 005e 3B68     		ldr	r3, [r7]
 1991 0060 3B60     		str	r3, [r7]
 1992 0062 7B68     		ldr	r3, [r7, #4]
 1993 0064 83F00043 		eor	r3, r3, #-2147483648
 1994 0068 7B60     		str	r3, [r7, #4]
 461:main.c        ****         PWM_Motor_L_WriteCompare1(0);
 1995              		.loc 1 461 0
 1996 006a 0020     		movs	r0, #0
 1997 006c FFF7FEFF 		bl	PWM_Motor_L_WriteCompare1
 462:main.c        ****         PWM_Motor_L_WriteCompare2(duty_cycle*10000);
 1998              		.loc 1 462 0
 1999 0070 15A3     		adr	r3, .L78
 2000 0072 D3E90023 		ldrd	r2, [r3]
 2001 0076 D7E90001 		ldrd	r0, [r7]
 2002 007a FFF7FEFF 		bl	__aeabi_dmul
 2003 007e 0346     		mov	r3, r0
 2004 0080 0C46     		mov	r4, r1
 2005 0082 1846     		mov	r0, r3
 2006 0084 2146     		mov	r1, r4
 2007 0086 FFF7FEFF 		bl	__aeabi_d2uiz
 2008 008a 0346     		mov	r3, r0
 2009 008c 9BB2     		uxth	r3, r3
 2010 008e 1846     		mov	r0, r3
 2011 0090 FFF7FEFF 		bl	PWM_Motor_L_WriteCompare2
 463:main.c        ****     } else {
 464:main.c        ****         PWM_Motor_L_WriteCompare1(duty_cycle*10000);
 465:main.c        ****         PWM_Motor_L_WriteCompare2(0);
 466:main.c        ****     }
 467:main.c        **** }
 2012              		.loc 1 467 0
 2013 0094 14E0     		b	.L77
 2014              	.L76:
 464:main.c        ****         PWM_Motor_L_WriteCompare2(0);
 2015              		.loc 1 464 0
 2016 0096 0CA3     		adr	r3, .L78
 2017 0098 D3E90023 		ldrd	r2, [r3]
 2018 009c D7E90001 		ldrd	r0, [r7]
 2019 00a0 FFF7FEFF 		bl	__aeabi_dmul
 2020 00a4 0346     		mov	r3, r0
 2021 00a6 0C46     		mov	r4, r1
 2022 00a8 1846     		mov	r0, r3
 2023 00aa 2146     		mov	r1, r4
 2024 00ac FFF7FEFF 		bl	__aeabi_d2uiz
 2025 00b0 0346     		mov	r3, r0
 2026 00b2 9BB2     		uxth	r3, r3
 2027 00b4 1846     		mov	r0, r3
 2028 00b6 FFF7FEFF 		bl	PWM_Motor_L_WriteCompare1
 465:main.c        ****     }
 2029              		.loc 1 465 0
 2030 00ba 0020     		movs	r0, #0
 2031 00bc FFF7FEFF 		bl	PWM_Motor_L_WriteCompare2
 2032              	.L77:
 2033              		.loc 1 467 0
 2034 00c0 00BF     		nop
 2035 00c2 0C37     		adds	r7, r7, #12
 2036              		.cfi_def_cfa_offset 12
 2037 00c4 BD46     		mov	sp, r7
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 45


 2038              		.cfi_def_cfa_register 13
 2039              		@ sp needed
 2040 00c6 90BD     		pop	{r4, r7, pc}
 2041              	.L79:
 2042              		.align	3
 2043              	.L78:
 2044 00c8 00000000 		.word	0
 2045 00cc 0088C340 		.word	1086556160
 2046 00d0 0000F0BF 		.word	-1074790400
 2047 00d4 0000F03F 		.word	1072693248
 2048              		.cfi_endproc
 2049              	.LFE69:
 2050              		.size	Drive_Left_Motor, .-Drive_Left_Motor
 2051              		.section	.text.Drive_Right_Motor,"ax",%progbits
 2052              		.align	2
 2053              		.global	Drive_Right_Motor
 2054              		.thumb
 2055              		.thumb_func
 2056              		.type	Drive_Right_Motor, %function
 2057              	Drive_Right_Motor:
 2058              	.LFB70:
 468:main.c        **** 
 469:main.c        **** void Drive_Right_Motor(long double duty_cycle) {
 2059              		.loc 1 469 0
 2060              		.cfi_startproc
 2061              		@ args = 0, pretend = 0, frame = 8
 2062              		@ frame_needed = 1, uses_anonymous_args = 0
 2063 0000 90B5     		push	{r4, r7, lr}
 2064              		.cfi_def_cfa_offset 12
 2065              		.cfi_offset 4, -12
 2066              		.cfi_offset 7, -8
 2067              		.cfi_offset 14, -4
 2068 0002 83B0     		sub	sp, sp, #12
 2069              		.cfi_def_cfa_offset 24
 2070 0004 00AF     		add	r7, sp, #0
 2071              		.cfi_def_cfa_register 7
 2072 0006 C7E90001 		strd	r0, [r7]
 470:main.c        ****     if (duty_cycle < -1) {
 2073              		.loc 1 470 0
 2074 000a 4FF00002 		mov	r2, #0
 2075 000e 304B     		ldr	r3, .L94+8
 2076 0010 D7E90001 		ldrd	r0, [r7]
 2077 0014 FFF7FEFF 		bl	__aeabi_dcmplt
 2078 0018 0346     		mov	r3, r0
 2079 001a 002B     		cmp	r3, #0
 2080 001c 05D0     		beq	.L91
 471:main.c        ****         duty_cycle = -1;
 2081              		.loc 1 471 0
 2082 001e 4FF00003 		mov	r3, #0
 2083 0022 2B4C     		ldr	r4, .L94+8
 2084 0024 C7E90034 		strd	r3, [r7]
 2085 0028 0EE0     		b	.L83
 2086              	.L91:
 472:main.c        ****     } else if (duty_cycle > 1) {
 2087              		.loc 1 472 0
 2088 002a 4FF00002 		mov	r2, #0
 2089 002e 294B     		ldr	r3, .L94+12
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 46


 2090 0030 D7E90001 		ldrd	r0, [r7]
 2091 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 2092 0038 0346     		mov	r3, r0
 2093 003a 002B     		cmp	r3, #0
 2094 003c 04D0     		beq	.L83
 473:main.c        ****         duty_cycle = 1;
 2095              		.loc 1 473 0
 2096 003e 4FF00003 		mov	r3, #0
 2097 0042 244C     		ldr	r4, .L94+12
 2098 0044 C7E90034 		strd	r3, [r7]
 2099              	.L83:
 474:main.c        ****     }
 475:main.c        ****     
 476:main.c        ****     if (duty_cycle < 0) {
 2100              		.loc 1 476 0
 2101 0048 4FF00002 		mov	r2, #0
 2102 004c 4FF00003 		mov	r3, #0
 2103 0050 D7E90001 		ldrd	r0, [r7]
 2104 0054 FFF7FEFF 		bl	__aeabi_dcmplt
 2105 0058 0346     		mov	r3, r0
 2106 005a 002B     		cmp	r3, #0
 2107 005c 1BD0     		beq	.L92
 477:main.c        ****         duty_cycle = -duty_cycle;
 2108              		.loc 1 477 0
 2109 005e 3B68     		ldr	r3, [r7]
 2110 0060 3B60     		str	r3, [r7]
 2111 0062 7B68     		ldr	r3, [r7, #4]
 2112 0064 83F00043 		eor	r3, r3, #-2147483648
 2113 0068 7B60     		str	r3, [r7, #4]
 478:main.c        ****         PWM_Motor_R_WriteCompare1(0);
 2114              		.loc 1 478 0
 2115 006a 0020     		movs	r0, #0
 2116 006c FFF7FEFF 		bl	PWM_Motor_R_WriteCompare1
 479:main.c        ****         PWM_Motor_R_WriteCompare2(duty_cycle*5000);
 2117              		.loc 1 479 0
 2118 0070 15A3     		adr	r3, .L94
 2119 0072 D3E90023 		ldrd	r2, [r3]
 2120 0076 D7E90001 		ldrd	r0, [r7]
 2121 007a FFF7FEFF 		bl	__aeabi_dmul
 2122 007e 0346     		mov	r3, r0
 2123 0080 0C46     		mov	r4, r1
 2124 0082 1846     		mov	r0, r3
 2125 0084 2146     		mov	r1, r4
 2126 0086 FFF7FEFF 		bl	__aeabi_d2uiz
 2127 008a 0346     		mov	r3, r0
 2128 008c 9BB2     		uxth	r3, r3
 2129 008e 1846     		mov	r0, r3
 2130 0090 FFF7FEFF 		bl	PWM_Motor_R_WriteCompare2
 480:main.c        ****     } else {
 481:main.c        ****         PWM_Motor_R_WriteCompare1(duty_cycle*5000);
 482:main.c        ****         PWM_Motor_R_WriteCompare2(0);
 483:main.c        ****     }
 484:main.c        **** }
 2131              		.loc 1 484 0
 2132 0094 14E0     		b	.L93
 2133              	.L92:
 481:main.c        ****         PWM_Motor_R_WriteCompare2(0);
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 47


 2134              		.loc 1 481 0
 2135 0096 0CA3     		adr	r3, .L94
 2136 0098 D3E90023 		ldrd	r2, [r3]
 2137 009c D7E90001 		ldrd	r0, [r7]
 2138 00a0 FFF7FEFF 		bl	__aeabi_dmul
 2139 00a4 0346     		mov	r3, r0
 2140 00a6 0C46     		mov	r4, r1
 2141 00a8 1846     		mov	r0, r3
 2142 00aa 2146     		mov	r1, r4
 2143 00ac FFF7FEFF 		bl	__aeabi_d2uiz
 2144 00b0 0346     		mov	r3, r0
 2145 00b2 9BB2     		uxth	r3, r3
 2146 00b4 1846     		mov	r0, r3
 2147 00b6 FFF7FEFF 		bl	PWM_Motor_R_WriteCompare1
 482:main.c        ****     }
 2148              		.loc 1 482 0
 2149 00ba 0020     		movs	r0, #0
 2150 00bc FFF7FEFF 		bl	PWM_Motor_R_WriteCompare2
 2151              	.L93:
 2152              		.loc 1 484 0
 2153 00c0 00BF     		nop
 2154 00c2 0C37     		adds	r7, r7, #12
 2155              		.cfi_def_cfa_offset 12
 2156 00c4 BD46     		mov	sp, r7
 2157              		.cfi_def_cfa_register 13
 2158              		@ sp needed
 2159 00c6 90BD     		pop	{r4, r7, pc}
 2160              	.L95:
 2161              		.align	3
 2162              	.L94:
 2163 00c8 00000000 		.word	0
 2164 00cc 0088B340 		.word	1085507584
 2165 00d0 0000F0BF 		.word	-1074790400
 2166 00d4 0000F03F 		.word	1072693248
 2167              		.cfi_endproc
 2168              	.LFE70:
 2169              		.size	Drive_Right_Motor, .-Drive_Right_Motor
 2170              		.section	.text.Turn_Delay,"ax",%progbits
 2171              		.align	2
 2172              		.global	Turn_Delay
 2173              		.thumb
 2174              		.thumb_func
 2175              		.type	Turn_Delay, %function
 2176              	Turn_Delay:
 2177              	.LFB71:
 485:main.c        **** 
 486:main.c        **** void Turn_Delay(long double angle) {
 2178              		.loc 1 486 0
 2179              		.cfi_startproc
 2180              		@ args = 0, pretend = 0, frame = 8
 2181              		@ frame_needed = 1, uses_anonymous_args = 0
 2182 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2183              		.cfi_def_cfa_offset 20
 2184              		.cfi_offset 4, -20
 2185              		.cfi_offset 5, -16
 2186              		.cfi_offset 6, -12
 2187              		.cfi_offset 7, -8
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 48


 2188              		.cfi_offset 14, -4
 2189 0002 83B0     		sub	sp, sp, #12
 2190              		.cfi_def_cfa_offset 32
 2191 0004 00AF     		add	r7, sp, #0
 2192              		.cfi_def_cfa_register 7
 2193 0006 C7E90001 		strd	r0, [r7]
 487:main.c        ****     // Set desired turn in radians
 488:main.c        ****     robot.desired_theta = angle;
 2194              		.loc 1 488 0
 2195 000a 194A     		ldr	r2, .L99+8
 2196 000c D7E90034 		ldrd	r3, [r7]
 2197 0010 C2E90E34 		strd	r3, [r2, #56]
 489:main.c        ****     
 490:main.c        ****     // Idle loop to wait until turn is complete
 491:main.c        ****     while( !( fabs(robot.theta-robot.desired_theta) < 0.2 ) ) {}; 
 2198              		.loc 1 491 0
 2199 0014 00BF     		nop
 2200              	.L98:
 2201              		.loc 1 491 0 is_stmt 0 discriminator 1
 2202 0016 164B     		ldr	r3, .L99+8
 2203 0018 D3E90201 		ldrd	r0, [r3, #8]
 2204 001c 144B     		ldr	r3, .L99+8
 2205 001e 03F13804 		add	r4, r3, #56
 2206 0022 D4E90034 		ldrd	r3, [r4]
 2207 0026 1A46     		mov	r2, r3
 2208 0028 2346     		mov	r3, r4
 2209 002a FFF7FEFF 		bl	__aeabi_dsub
 2210 002e 0346     		mov	r3, r0
 2211 0030 0C46     		mov	r4, r1
 2212 0032 1D46     		mov	r5, r3
 2213 0034 24F00046 		bic	r6, r4, #-2147483648
 2214 0038 0123     		movs	r3, #1
 2215 003a 1C46     		mov	r4, r3
 2216 003c 0AA3     		adr	r3, .L99
 2217 003e D3E90023 		ldrd	r2, [r3]
 2218 0042 2846     		mov	r0, r5
 2219 0044 3146     		mov	r1, r6
 2220 0046 FFF7FEFF 		bl	__aeabi_dcmplt
 2221 004a 0346     		mov	r3, r0
 2222 004c 002B     		cmp	r3, #0
 2223 004e 01D1     		bne	.L97
 2224 0050 0023     		movs	r3, #0
 2225 0052 1C46     		mov	r4, r3
 2226              	.L97:
 2227 0054 E3B2     		uxtb	r3, r4
 2228 0056 83F00103 		eor	r3, r3, #1
 2229 005a DBB2     		uxtb	r3, r3
 2230 005c 002B     		cmp	r3, #0
 2231 005e DAD1     		bne	.L98
 492:main.c        **** }
 2232              		.loc 1 492 0 is_stmt 1
 2233 0060 00BF     		nop
 2234 0062 0C37     		adds	r7, r7, #12
 2235              		.cfi_def_cfa_offset 20
 2236 0064 BD46     		mov	sp, r7
 2237              		.cfi_def_cfa_register 13
 2238              		@ sp needed
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 49


 2239 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 2240              	.L100:
 2241              		.align	3
 2242              	.L99:
 2243 0068 9A999999 		.word	-1717986918
 2244 006c 9999C93F 		.word	1070176665
 2245 0070 00000000 		.word	robot
 2246              		.cfi_endproc
 2247              	.LFE71:
 2248              		.size	Turn_Delay, .-Turn_Delay
 2249              		.global	__aeabi_d2iz
 2250              		.section	.text.velocity_control,"ax",%progbits
 2251              		.align	2
 2252              		.global	velocity_control
 2253              		.thumb
 2254              		.thumb_func
 2255              		.type	velocity_control, %function
 2256              	velocity_control:
 2257              	.LFB72:
 493:main.c        **** 
 494:main.c        **** int velocity_control(int max_velocity) {
 2258              		.loc 1 494 0
 2259              		.cfi_startproc
 2260              		@ args = 0, pretend = 0, frame = 24
 2261              		@ frame_needed = 1, uses_anonymous_args = 0
 2262 0000 90B5     		push	{r4, r7, lr}
 2263              		.cfi_def_cfa_offset 12
 2264              		.cfi_offset 4, -12
 2265              		.cfi_offset 7, -8
 2266              		.cfi_offset 14, -4
 2267 0002 87B0     		sub	sp, sp, #28
 2268              		.cfi_def_cfa_offset 40
 2269 0004 00AF     		add	r7, sp, #0
 2270              		.cfi_def_cfa_register 7
 2271 0006 7860     		str	r0, [r7, #4]
 495:main.c        ****     // Adjust the velocity the closer we approach the walls
 496:main.c        ****     int avg_dist = (sensors.distance[0] + sensors.distance[1]) / 2;
 2272              		.loc 1 496 0
 2273 0008 164B     		ldr	r3, .L102
 2274 000a 9A69     		ldr	r2, [r3, #24]
 2275 000c 154B     		ldr	r3, .L102
 2276 000e DB69     		ldr	r3, [r3, #28]
 2277 0010 1344     		add	r3, r3, r2
 2278 0012 DA0F     		lsrs	r2, r3, #31
 2279 0014 1344     		add	r3, r3, r2
 2280 0016 5B10     		asrs	r3, r3, #1
 2281 0018 7B61     		str	r3, [r7, #20]
 497:main.c        ****     int thresh = 1;
 2282              		.loc 1 497 0
 2283 001a 0123     		movs	r3, #1
 2284 001c 3B61     		str	r3, [r7, #16]
 498:main.c        ****     int velocity = floor(max_velocity * (1200 - avg_dist) / 400);
 2285              		.loc 1 498 0
 2286 001e 7B69     		ldr	r3, [r7, #20]
 2287 0020 C3F59663 		rsb	r3, r3, #1200
 2288 0024 7A68     		ldr	r2, [r7, #4]
 2289 0026 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 50


 2290 002a 0F4A     		ldr	r2, .L102+4
 2291 002c 82FB0312 		smull	r1, r2, r2, r3
 2292 0030 D211     		asrs	r2, r2, #7
 2293 0032 DB17     		asrs	r3, r3, #31
 2294 0034 D31A     		subs	r3, r2, r3
 2295 0036 1846     		mov	r0, r3
 2296 0038 FFF7FEFF 		bl	__aeabi_i2d
 2297 003c 0346     		mov	r3, r0
 2298 003e 0C46     		mov	r4, r1
 2299 0040 1846     		mov	r0, r3
 2300 0042 2146     		mov	r1, r4
 2301 0044 FFF7FEFF 		bl	floor
 2302 0048 0346     		mov	r3, r0
 2303 004a 0C46     		mov	r4, r1
 2304 004c 1846     		mov	r0, r3
 2305 004e 2146     		mov	r1, r4
 2306 0050 FFF7FEFF 		bl	__aeabi_d2iz
 2307 0054 0346     		mov	r3, r0
 2308 0056 FB60     		str	r3, [r7, #12]
 499:main.c        **** }
 2309              		.loc 1 499 0
 2310 0058 00BF     		nop
 2311 005a 1846     		mov	r0, r3
 2312 005c 1C37     		adds	r7, r7, #28
 2313              		.cfi_def_cfa_offset 12
 2314 005e BD46     		mov	sp, r7
 2315              		.cfi_def_cfa_register 13
 2316              		@ sp needed
 2317 0060 90BD     		pop	{r4, r7, pc}
 2318              	.L103:
 2319 0062 00BF     		.align	2
 2320              	.L102:
 2321 0064 00000000 		.word	sensors
 2322 0068 1F85EB51 		.word	1374389535
 2323              		.cfi_endproc
 2324              	.LFE72:
 2325              		.size	velocity_control, .-velocity_control
 2326              		.section	.text.move_servo,"ax",%progbits
 2327              		.align	2
 2328              		.global	move_servo
 2329              		.thumb
 2330              		.thumb_func
 2331              		.type	move_servo, %function
 2332              	move_servo:
 2333              	.LFB73:
 500:main.c        **** 
 501:main.c        **** void move_servo(int servo_nums) {
 2334              		.loc 1 501 0
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 8
 2337              		@ frame_needed = 1, uses_anonymous_args = 0
 2338 0000 80B5     		push	{r7, lr}
 2339              		.cfi_def_cfa_offset 8
 2340              		.cfi_offset 7, -8
 2341              		.cfi_offset 14, -4
 2342 0002 82B0     		sub	sp, sp, #8
 2343              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 51


 2344 0004 00AF     		add	r7, sp, #0
 2345              		.cfi_def_cfa_register 7
 2346 0006 7860     		str	r0, [r7, #4]
 502:main.c        ****     CyDelay(100);
 2347              		.loc 1 502 0
 2348 0008 6420     		movs	r0, #100
 2349 000a FFF7FEFF 		bl	CyDelay
 503:main.c        ****     PWM_ServoDir_WriteCompare1(2000);
 2350              		.loc 1 503 0
 2351 000e 4FF4FA60 		mov	r0, #2000
 2352 0012 FFF7FEFF 		bl	PWM_ServoDir_WriteCompare1
 504:main.c        ****     PWM_ServoDir_WriteCompare2(4000);
 2353              		.loc 1 504 0
 2354 0016 4FF47A60 		mov	r0, #4000
 2355 001a FFF7FEFF 		bl	PWM_ServoDir_WriteCompare2
 505:main.c        ****     Control_Reg_ServoSelect_Write(servo_nums);
 2356              		.loc 1 505 0
 2357 001e 7B68     		ldr	r3, [r7, #4]
 2358 0020 DBB2     		uxtb	r3, r3
 2359 0022 1846     		mov	r0, r3
 2360 0024 FFF7FEFF 		bl	Control_Reg_ServoSelect_Write
 506:main.c        ****     Control_Reg_ServoTrigger_Write(1);
 2361              		.loc 1 506 0
 2362 0028 0120     		movs	r0, #1
 2363 002a FFF7FEFF 		bl	Control_Reg_ServoTrigger_Write
 507:main.c        ****     
 508:main.c        ****     CyDelay(2550);
 2364              		.loc 1 508 0
 2365 002e 40F6F610 		movw	r0, #2550
 2366 0032 FFF7FEFF 		bl	CyDelay
 509:main.c        ****     
 510:main.c        ****     PWM_ServoDir_WriteCompare1(4000);
 2367              		.loc 1 510 0
 2368 0036 4FF47A60 		mov	r0, #4000
 2369 003a FFF7FEFF 		bl	PWM_ServoDir_WriteCompare1
 511:main.c        ****     PWM_ServoDir_WriteCompare2(2000);
 2370              		.loc 1 511 0
 2371 003e 4FF4FA60 		mov	r0, #2000
 2372 0042 FFF7FEFF 		bl	PWM_ServoDir_WriteCompare2
 512:main.c        ****     Control_Reg_ServoTrigger_Write(0);
 2373              		.loc 1 512 0
 2374 0046 0020     		movs	r0, #0
 2375 0048 FFF7FEFF 		bl	Control_Reg_ServoTrigger_Write
 513:main.c        **** }
 2376              		.loc 1 513 0
 2377 004c 00BF     		nop
 2378 004e 0837     		adds	r7, r7, #8
 2379              		.cfi_def_cfa_offset 8
 2380 0050 BD46     		mov	sp, r7
 2381              		.cfi_def_cfa_register 13
 2382              		@ sp needed
 2383 0052 80BD     		pop	{r7, pc}
 2384              		.cfi_endproc
 2385              	.LFE73:
 2386              		.size	move_servo, .-move_servo
 2387              		.text
 2388              	.Letext0:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 52


 2389              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2390              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2391              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2392              		.file 5 "..\\Helper\\helper.h"
 2393              		.file 6 "..\\Robot\\robot.h"
 2394              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2395              		.section	.debug_info,"",%progbits
 2396              	.Ldebug_info0:
 2397 0000 A1060000 		.4byte	0x6a1
 2398 0004 0400     		.2byte	0x4
 2399 0006 00000000 		.4byte	.Ldebug_abbrev0
 2400 000a 04       		.byte	0x4
 2401 000b 01       		.uleb128 0x1
 2402 000c 85000000 		.4byte	.LASF96
 2403 0010 0C       		.byte	0xc
 2404 0011 20040000 		.4byte	.LASF97
 2405 0015 41020000 		.4byte	.LASF98
 2406 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2407 001d 00000000 		.4byte	0
 2408 0021 00000000 		.4byte	.Ldebug_line0
 2409 0025 02       		.uleb128 0x2
 2410 0026 01       		.byte	0x1
 2411 0027 06       		.byte	0x6
 2412 0028 33030000 		.4byte	.LASF0
 2413 002c 03       		.uleb128 0x3
 2414 002d BD020000 		.4byte	.LASF3
 2415 0031 02       		.byte	0x2
 2416 0032 1D       		.byte	0x1d
 2417 0033 37000000 		.4byte	0x37
 2418 0037 02       		.uleb128 0x2
 2419 0038 01       		.byte	0x1
 2420 0039 08       		.byte	0x8
 2421 003a 07030000 		.4byte	.LASF1
 2422 003e 02       		.uleb128 0x2
 2423 003f 02       		.byte	0x2
 2424 0040 05       		.byte	0x5
 2425 0041 3D000000 		.4byte	.LASF2
 2426 0045 03       		.uleb128 0x3
 2427 0046 1D010000 		.4byte	.LASF4
 2428 004a 02       		.byte	0x2
 2429 004b 2B       		.byte	0x2b
 2430 004c 50000000 		.4byte	0x50
 2431 0050 02       		.uleb128 0x2
 2432 0051 02       		.byte	0x2
 2433 0052 07       		.byte	0x7
 2434 0053 B3030000 		.4byte	.LASF5
 2435 0057 03       		.uleb128 0x3
 2436 0058 7D040000 		.4byte	.LASF6
 2437 005c 02       		.byte	0x2
 2438 005d 3F       		.byte	0x3f
 2439 005e 62000000 		.4byte	0x62
 2440 0062 02       		.uleb128 0x2
 2441 0063 04       		.byte	0x4
 2442 0064 05       		.byte	0x5
 2443 0065 86020000 		.4byte	.LASF7
 2444 0069 02       		.uleb128 0x2
 2445 006a 04       		.byte	0x4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 53


 2446 006b 07       		.byte	0x7
 2447 006c 8F020000 		.4byte	.LASF8
 2448 0070 02       		.uleb128 0x2
 2449 0071 08       		.byte	0x8
 2450 0072 05       		.byte	0x5
 2451 0073 F2010000 		.4byte	.LASF9
 2452 0077 02       		.uleb128 0x2
 2453 0078 08       		.byte	0x8
 2454 0079 07       		.byte	0x7
 2455 007a 47030000 		.4byte	.LASF10
 2456 007e 04       		.uleb128 0x4
 2457 007f 04       		.byte	0x4
 2458 0080 05       		.byte	0x5
 2459 0081 696E7400 		.ascii	"int\000"
 2460 0085 02       		.uleb128 0x2
 2461 0086 04       		.byte	0x4
 2462 0087 07       		.byte	0x7
 2463 0088 67030000 		.4byte	.LASF11
 2464 008c 03       		.uleb128 0x3
 2465 008d 90010000 		.4byte	.LASF12
 2466 0091 03       		.byte	0x3
 2467 0092 18       		.byte	0x18
 2468 0093 2C000000 		.4byte	0x2c
 2469 0097 03       		.uleb128 0x3
 2470 0098 74030000 		.4byte	.LASF13
 2471 009c 03       		.byte	0x3
 2472 009d 24       		.byte	0x24
 2473 009e 45000000 		.4byte	0x45
 2474 00a2 03       		.uleb128 0x3
 2475 00a3 3F030000 		.4byte	.LASF14
 2476 00a7 03       		.byte	0x3
 2477 00a8 2C       		.byte	0x2c
 2478 00a9 57000000 		.4byte	0x57
 2479 00ad 05       		.uleb128 0x5
 2480 00ae 4A040000 		.4byte	.LASF15
 2481 00b2 04       		.byte	0x4
 2482 00b3 ED01     		.2byte	0x1ed
 2483 00b5 62000000 		.4byte	0x62
 2484 00b9 02       		.uleb128 0x2
 2485 00ba 04       		.byte	0x4
 2486 00bb 04       		.byte	0x4
 2487 00bc D6010000 		.4byte	.LASF16
 2488 00c0 02       		.uleb128 0x2
 2489 00c1 08       		.byte	0x8
 2490 00c2 04       		.byte	0x4
 2491 00c3 50040000 		.4byte	.LASF17
 2492 00c7 02       		.uleb128 0x2
 2493 00c8 01       		.byte	0x1
 2494 00c9 08       		.byte	0x8
 2495 00ca CF030000 		.4byte	.LASF18
 2496 00ce 02       		.uleb128 0x2
 2497 00cf 08       		.byte	0x8
 2498 00d0 04       		.byte	0x4
 2499 00d1 EC020000 		.4byte	.LASF19
 2500 00d5 02       		.uleb128 0x2
 2501 00d6 04       		.byte	0x4
 2502 00d7 07       		.byte	0x7
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 54


 2503 00d8 5A000000 		.4byte	.LASF20
 2504 00dc 06       		.uleb128 0x6
 2505 00dd 30       		.byte	0x30
 2506 00de 05       		.byte	0x5
 2507 00df 21       		.byte	0x21
 2508 00e0 FD000000 		.4byte	0xfd
 2509 00e4 07       		.uleb128 0x7
 2510 00e5 13010000 		.4byte	.LASF21
 2511 00e9 05       		.byte	0x5
 2512 00ea 22       		.byte	0x22
 2513 00eb FD000000 		.4byte	0xfd
 2514 00ef 00       		.byte	0
 2515 00f0 07       		.uleb128 0x7
 2516 00f1 C6030000 		.4byte	.LASF22
 2517 00f5 05       		.byte	0x5
 2518 00f6 23       		.byte	0x23
 2519 00f7 FD000000 		.4byte	0xfd
 2520 00fb 18       		.byte	0x18
 2521 00fc 00       		.byte	0
 2522 00fd 08       		.uleb128 0x8
 2523 00fe 7E000000 		.4byte	0x7e
 2524 0102 0D010000 		.4byte	0x10d
 2525 0106 09       		.uleb128 0x9
 2526 0107 D5000000 		.4byte	0xd5
 2527 010b 05       		.byte	0x5
 2528 010c 00       		.byte	0
 2529 010d 03       		.uleb128 0x3
 2530 010e DE020000 		.4byte	.LASF23
 2531 0112 05       		.byte	0x5
 2532 0113 24       		.byte	0x24
 2533 0114 DC000000 		.4byte	0xdc
 2534 0118 06       		.uleb128 0x6
 2535 0119 48       		.byte	0x48
 2536 011a 06       		.byte	0x6
 2537 011b 0A       		.byte	0xa
 2538 011c 89010000 		.4byte	0x189
 2539 0120 07       		.uleb128 0x7
 2540 0121 72040000 		.4byte	.LASF24
 2541 0125 06       		.byte	0x6
 2542 0126 0B       		.byte	0xb
 2543 0127 CE000000 		.4byte	0xce
 2544 012b 00       		.byte	0
 2545 012c 07       		.uleb128 0x7
 2546 012d 87040000 		.4byte	.LASF25
 2547 0131 06       		.byte	0x6
 2548 0132 0C       		.byte	0xc
 2549 0133 CE000000 		.4byte	0xce
 2550 0137 08       		.byte	0x8
 2551 0138 0A       		.uleb128 0xa
 2552 0139 7700     		.ascii	"w\000"
 2553 013b 06       		.byte	0x6
 2554 013c 0D       		.byte	0xd
 2555 013d CE000000 		.4byte	0xce
 2556 0141 10       		.byte	0x10
 2557 0142 07       		.uleb128 0x7
 2558 0143 D5040000 		.4byte	.LASF26
 2559 0147 06       		.byte	0x6
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 55


 2560 0148 0E       		.byte	0xe
 2561 0149 CE000000 		.4byte	0xce
 2562 014d 18       		.byte	0x18
 2563 014e 07       		.uleb128 0x7
 2564 014f 29030000 		.4byte	.LASF27
 2565 0153 06       		.byte	0x6
 2566 0154 0F       		.byte	0xf
 2567 0155 CE000000 		.4byte	0xce
 2568 0159 20       		.byte	0x20
 2569 015a 0A       		.uleb128 0xa
 2570 015b 4B6900   		.ascii	"Ki\000"
 2571 015e 06       		.byte	0x6
 2572 015f 10       		.byte	0x10
 2573 0160 CE000000 		.4byte	0xce
 2574 0164 28       		.byte	0x28
 2575 0165 0A       		.uleb128 0xa
 2576 0166 4B7000   		.ascii	"Kp\000"
 2577 0169 06       		.byte	0x6
 2578 016a 11       		.byte	0x11
 2579 016b CE000000 		.4byte	0xce
 2580 016f 30       		.byte	0x30
 2581 0170 07       		.uleb128 0x7
 2582 0171 34020000 		.4byte	.LASF28
 2583 0175 06       		.byte	0x6
 2584 0176 12       		.byte	0x12
 2585 0177 C0000000 		.4byte	0xc0
 2586 017b 38       		.byte	0x38
 2587 017c 07       		.uleb128 0x7
 2588 017d BC040000 		.4byte	.LASF29
 2589 0181 06       		.byte	0x6
 2590 0182 13       		.byte	0x13
 2591 0183 7E000000 		.4byte	0x7e
 2592 0187 40       		.byte	0x40
 2593 0188 00       		.byte	0
 2594 0189 03       		.uleb128 0x3
 2595 018a F8020000 		.4byte	.LASF30
 2596 018e 06       		.byte	0x6
 2597 018f 15       		.byte	0x15
 2598 0190 18010000 		.4byte	0x118
 2599 0194 06       		.uleb128 0x6
 2600 0195 70       		.byte	0x70
 2601 0196 06       		.byte	0x6
 2602 0197 1A       		.byte	0x1a
 2603 0198 3B020000 		.4byte	0x23b
 2604 019c 07       		.uleb128 0x7
 2605 019d 09000000 		.4byte	.LASF31
 2606 01a1 06       		.byte	0x6
 2607 01a2 1C       		.byte	0x1c
 2608 01a3 CE000000 		.4byte	0xce
 2609 01a7 00       		.byte	0
 2610 01a8 07       		.uleb128 0x7
 2611 01a9 91040000 		.4byte	.LASF32
 2612 01ad 06       		.byte	0x6
 2613 01ae 1F       		.byte	0x1f
 2614 01af CE000000 		.4byte	0xce
 2615 01b3 08       		.byte	0x8
 2616 01b4 0A       		.uleb128 0xa
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 56


 2617 01b5 7800     		.ascii	"x\000"
 2618 01b7 06       		.byte	0x6
 2619 01b8 20       		.byte	0x20
 2620 01b9 CE000000 		.4byte	0xce
 2621 01bd 10       		.byte	0x10
 2622 01be 0A       		.uleb128 0xa
 2623 01bf 7900     		.ascii	"y\000"
 2624 01c1 06       		.byte	0x6
 2625 01c2 21       		.byte	0x21
 2626 01c3 CE000000 		.4byte	0xce
 2627 01c7 18       		.byte	0x18
 2628 01c8 0A       		.uleb128 0xa
 2629 01c9 7600     		.ascii	"v\000"
 2630 01cb 06       		.byte	0x6
 2631 01cc 24       		.byte	0x24
 2632 01cd CE000000 		.4byte	0xce
 2633 01d1 20       		.byte	0x20
 2634 01d2 0A       		.uleb128 0xa
 2635 01d3 7700     		.ascii	"w\000"
 2636 01d5 06       		.byte	0x6
 2637 01d6 25       		.byte	0x25
 2638 01d7 CE000000 		.4byte	0xce
 2639 01db 28       		.byte	0x28
 2640 01dc 07       		.uleb128 0x7
 2641 01dd 1F030000 		.4byte	.LASF33
 2642 01e1 06       		.byte	0x6
 2643 01e2 28       		.byte	0x28
 2644 01e3 CE000000 		.4byte	0xce
 2645 01e7 30       		.byte	0x30
 2646 01e8 07       		.uleb128 0x7
 2647 01e9 1A000000 		.4byte	.LASF34
 2648 01ed 06       		.byte	0x6
 2649 01ee 29       		.byte	0x29
 2650 01ef CE000000 		.4byte	0xce
 2651 01f3 38       		.byte	0x38
 2652 01f4 0A       		.uleb128 0xa
 2653 01f5 4B6900   		.ascii	"Ki\000"
 2654 01f8 06       		.byte	0x6
 2655 01f9 2C       		.byte	0x2c
 2656 01fa CE000000 		.4byte	0xce
 2657 01fe 40       		.byte	0x40
 2658 01ff 0A       		.uleb128 0xa
 2659 0200 4B7000   		.ascii	"Kp\000"
 2660 0203 06       		.byte	0x6
 2661 0204 2D       		.byte	0x2d
 2662 0205 CE000000 		.4byte	0xce
 2663 0209 48       		.byte	0x48
 2664 020a 07       		.uleb128 0x7
 2665 020b 87040000 		.4byte	.LASF25
 2666 020f 06       		.byte	0x6
 2667 0210 2E       		.byte	0x2e
 2668 0211 CE000000 		.4byte	0xce
 2669 0215 50       		.byte	0x50
 2670 0216 07       		.uleb128 0x7
 2671 0217 A5010000 		.4byte	.LASF35
 2672 021b 06       		.byte	0x6
 2673 021c 31       		.byte	0x31
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 57


 2674 021d CE000000 		.4byte	0xce
 2675 0221 58       		.byte	0x58
 2676 0222 07       		.uleb128 0x7
 2677 0223 BB010000 		.4byte	.LASF36
 2678 0227 06       		.byte	0x6
 2679 0228 32       		.byte	0x32
 2680 0229 CE000000 		.4byte	0xce
 2681 022d 60       		.byte	0x60
 2682 022e 07       		.uleb128 0x7
 2683 022f 08050000 		.4byte	.LASF37
 2684 0233 06       		.byte	0x6
 2685 0234 33       		.byte	0x33
 2686 0235 CE000000 		.4byte	0xce
 2687 0239 68       		.byte	0x68
 2688 023a 00       		.byte	0
 2689 023b 03       		.uleb128 0x3
 2690 023c 7F000000 		.4byte	.LASF38
 2691 0240 06       		.byte	0x6
 2692 0241 35       		.byte	0x35
 2693 0242 94010000 		.4byte	0x194
 2694 0246 0B       		.uleb128 0xb
 2695 0247 57040000 		.4byte	.LASF99
 2696 024b 01       		.byte	0x1
 2697 024c 3E       		.byte	0x3e
 2698 024d 00000000 		.4byte	.LFB64
 2699 0251 74000000 		.4byte	.LFE64-.LFB64
 2700 0255 01       		.uleb128 0x1
 2701 0256 9C       		.byte	0x9c
 2702 0257 0C       		.uleb128 0xc
 2703 0258 0E020000 		.4byte	.LASF43
 2704 025c 01       		.byte	0x1
 2705 025d 4F       		.byte	0x4f
 2706 025e 00000000 		.4byte	.LFB65
 2707 0262 5C040000 		.4byte	.LFE65-.LFB65
 2708 0266 01       		.uleb128 0x1
 2709 0267 9C       		.byte	0x9c
 2710 0268 B4020000 		.4byte	0x2b4
 2711 026c 0D       		.uleb128 0xd
 2712 026d 6E657700 		.ascii	"new\000"
 2713 0271 01       		.byte	0x1
 2714 0272 51       		.byte	0x51
 2715 0273 AD000000 		.4byte	0xad
 2716 0277 02       		.uleb128 0x2
 2717 0278 91       		.byte	0x91
 2718 0279 4C       		.sleb128 -52
 2719 027a 0E       		.uleb128 0xe
 2720 027b 28000000 		.4byte	.LASF39
 2721 027f 01       		.byte	0x1
 2722 0280 51       		.byte	0x51
 2723 0281 AD000000 		.4byte	0xad
 2724 0285 02       		.uleb128 0x2
 2725 0286 91       		.byte	0x91
 2726 0287 48       		.sleb128 -56
 2727 0288 0E       		.uleb128 0xe
 2728 0289 CF040000 		.4byte	.LASF40
 2729 028d 01       		.byte	0x1
 2730 028e 6B       		.byte	0x6b
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 58


 2731 028f CE000000 		.4byte	0xce
 2732 0293 02       		.uleb128 0x2
 2733 0294 91       		.byte	0x91
 2734 0295 50       		.sleb128 -48
 2735 0296 0E       		.uleb128 0xe
 2736 0297 69040000 		.4byte	.LASF41
 2737 029b 01       		.byte	0x1
 2738 029c 74       		.byte	0x74
 2739 029d C0000000 		.4byte	0xc0
 2740 02a1 02       		.uleb128 0x2
 2741 02a2 91       		.byte	0x91
 2742 02a3 40       		.sleb128 -64
 2743 02a4 0E       		.uleb128 0xe
 2744 02a5 9E040000 		.4byte	.LASF42
 2745 02a9 01       		.byte	0x1
 2746 02aa 78       		.byte	0x78
 2747 02ab CE000000 		.4byte	0xce
 2748 02af 03       		.uleb128 0x3
 2749 02b0 91       		.byte	0x91
 2750 02b1 B87F     		.sleb128 -72
 2751 02b3 00       		.byte	0
 2752 02b4 0C       		.uleb128 0xc
 2753 02b5 4A010000 		.4byte	.LASF44
 2754 02b9 01       		.byte	0x1
 2755 02ba 7F       		.byte	0x7f
 2756 02bb 00000000 		.4byte	.LFB66
 2757 02bf 54010000 		.4byte	.LFE66-.LFB66
 2758 02c3 01       		.uleb128 0x1
 2759 02c4 9C       		.byte	0x9c
 2760 02c5 D8020000 		.4byte	0x2d8
 2761 02c9 0E       		.uleb128 0xe
 2762 02ca CF040000 		.4byte	.LASF40
 2763 02ce 01       		.byte	0x1
 2764 02cf 80       		.byte	0x80
 2765 02d0 CE000000 		.4byte	0xce
 2766 02d4 02       		.uleb128 0x2
 2767 02d5 91       		.byte	0x91
 2768 02d6 60       		.sleb128 -32
 2769 02d7 00       		.byte	0
 2770 02d8 0C       		.uleb128 0xc
 2771 02d9 E7030000 		.4byte	.LASF45
 2772 02dd 01       		.byte	0x1
 2773 02de 8D       		.byte	0x8d
 2774 02df 00000000 		.4byte	.LFB67
 2775 02e3 74000000 		.4byte	.LFE67-.LFB67
 2776 02e7 01       		.uleb128 0x1
 2777 02e8 9C       		.byte	0x9c
 2778 02e9 FC020000 		.4byte	0x2fc
 2779 02ed 0E       		.uleb128 0xe
 2780 02ee B6040000 		.4byte	.LASF46
 2781 02f2 01       		.byte	0x1
 2782 02f3 8E       		.byte	0x8e
 2783 02f4 CE000000 		.4byte	0xce
 2784 02f8 02       		.uleb128 0x2
 2785 02f9 91       		.byte	0x91
 2786 02fa 68       		.sleb128 -24
 2787 02fb 00       		.byte	0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 59


 2788 02fc 0F       		.uleb128 0xf
 2789 02fd E2030000 		.4byte	.LASF74
 2790 0301 01       		.byte	0x1
 2791 0302 97       		.byte	0x97
 2792 0303 7E000000 		.4byte	0x7e
 2793 0307 00000000 		.4byte	.LFB68
 2794 030b F0080000 		.4byte	.LFE68-.LFB68
 2795 030f 01       		.uleb128 0x1
 2796 0310 9C       		.byte	0x9c
 2797 0311 91040000 		.4byte	0x491
 2798 0315 0E       		.uleb128 0xe
 2799 0316 16050000 		.4byte	.LASF47
 2800 031a 01       		.byte	0x1
 2801 031b B0       		.byte	0xb0
 2802 031c CE000000 		.4byte	0xce
 2803 0320 02       		.uleb128 0x2
 2804 0321 91       		.byte	0x91
 2805 0322 50       		.sleb128 -48
 2806 0323 0E       		.uleb128 0xe
 2807 0324 FE020000 		.4byte	.LASF48
 2808 0328 01       		.byte	0x1
 2809 0329 B1       		.byte	0xb1
 2810 032a CE000000 		.4byte	0xce
 2811 032e 02       		.uleb128 0x2
 2812 032f 91       		.byte	0x91
 2813 0330 48       		.sleb128 -56
 2814 0331 0E       		.uleb128 0xe
 2815 0332 5E030000 		.4byte	.LASF49
 2816 0336 01       		.byte	0x1
 2817 0337 B2       		.byte	0xb2
 2818 0338 CE000000 		.4byte	0xce
 2819 033c 02       		.uleb128 0x2
 2820 033d 91       		.byte	0x91
 2821 033e 40       		.sleb128 -64
 2822 033f 0E       		.uleb128 0xe
 2823 0340 86030000 		.4byte	.LASF50
 2824 0344 01       		.byte	0x1
 2825 0345 B8       		.byte	0xb8
 2826 0346 CE000000 		.4byte	0xce
 2827 034a 03       		.uleb128 0x3
 2828 034b 91       		.byte	0x91
 2829 034c B87F     		.sleb128 -72
 2830 034e 0E       		.uleb128 0xe
 2831 034f 6E000000 		.4byte	.LASF51
 2832 0353 01       		.byte	0x1
 2833 0354 B9       		.byte	0xb9
 2834 0355 CE000000 		.4byte	0xce
 2835 0359 03       		.uleb128 0x3
 2836 035a 91       		.byte	0x91
 2837 035b B07F     		.sleb128 -80
 2838 035d 0E       		.uleb128 0xe
 2839 035e 00000000 		.4byte	.LASF52
 2840 0362 01       		.byte	0x1
 2841 0363 BA       		.byte	0xba
 2842 0364 CE000000 		.4byte	0xce
 2843 0368 03       		.uleb128 0x3
 2844 0369 91       		.byte	0x91
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 60


 2845 036a A87F     		.sleb128 -88
 2846 036c 0E       		.uleb128 0xe
 2847 036d EC040000 		.4byte	.LASF53
 2848 0371 01       		.byte	0x1
 2849 0372 BB       		.byte	0xbb
 2850 0373 CE000000 		.4byte	0xce
 2851 0377 03       		.uleb128 0x3
 2852 0378 91       		.byte	0x91
 2853 0379 A07F     		.sleb128 -96
 2854 037b 0E       		.uleb128 0xe
 2855 037c 2D000000 		.4byte	.LASF54
 2856 0380 01       		.byte	0x1
 2857 0381 BF       		.byte	0xbf
 2858 0382 CE000000 		.4byte	0xce
 2859 0386 03       		.uleb128 0x3
 2860 0387 91       		.byte	0x91
 2861 0388 987F     		.sleb128 -104
 2862 038a 0E       		.uleb128 0xe
 2863 038b 35000000 		.4byte	.LASF55
 2864 038f 01       		.byte	0x1
 2865 0390 C0       		.byte	0xc0
 2866 0391 CE000000 		.4byte	0xce
 2867 0395 03       		.uleb128 0x3
 2868 0396 91       		.byte	0x91
 2869 0397 907F     		.sleb128 -112
 2870 0399 0E       		.uleb128 0xe
 2871 039a C6040000 		.4byte	.LASF56
 2872 039e 01       		.byte	0x1
 2873 039f C1       		.byte	0xc1
 2874 03a0 CE000000 		.4byte	0xce
 2875 03a4 03       		.uleb128 0x3
 2876 03a5 91       		.byte	0x91
 2877 03a6 887F     		.sleb128 -120
 2878 03a8 0E       		.uleb128 0xe
 2879 03a9 2A050000 		.4byte	.LASF57
 2880 03ad 01       		.byte	0x1
 2881 03ae D0       		.byte	0xd0
 2882 03af 7E000000 		.4byte	0x7e
 2883 03b3 03       		.uleb128 0x3
 2884 03b4 91       		.byte	0x91
 2885 03b5 847F     		.sleb128 -124
 2886 03b7 0E       		.uleb128 0xe
 2887 03b8 24050000 		.4byte	.LASF58
 2888 03bc 01       		.byte	0x1
 2889 03bd D1       		.byte	0xd1
 2890 03be 91040000 		.4byte	0x491
 2891 03c2 03       		.uleb128 0x3
 2892 03c3 91       		.byte	0x91
 2893 03c4 D47E     		.sleb128 -172
 2894 03c6 0E       		.uleb128 0xe
 2895 03c7 AF020000 		.4byte	.LASF59
 2896 03cb 01       		.byte	0x1
 2897 03cc D4       		.byte	0xd4
 2898 03cd 7E000000 		.4byte	0x7e
 2899 03d1 03       		.uleb128 0x3
 2900 03d2 91       		.byte	0x91
 2901 03d3 807F     		.sleb128 -128
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 61


 2902 03d5 0E       		.uleb128 0xe
 2903 03d6 26020000 		.4byte	.LASF60
 2904 03da 01       		.byte	0x1
 2905 03db DB       		.byte	0xdb
 2906 03dc B9000000 		.4byte	0xb9
 2907 03e0 02       		.uleb128 0x2
 2908 03e1 91       		.byte	0x91
 2909 03e2 6C       		.sleb128 -20
 2910 03e3 0E       		.uleb128 0xe
 2911 03e4 A4040000 		.4byte	.LASF61
 2912 03e8 01       		.byte	0x1
 2913 03e9 DC       		.byte	0xdc
 2914 03ea 7E000000 		.4byte	0x7e
 2915 03ee 02       		.uleb128 0x2
 2916 03ef 91       		.byte	0x91
 2917 03f0 68       		.sleb128 -24
 2918 03f1 0E       		.uleb128 0xe
 2919 03f2 0F040000 		.4byte	.LASF62
 2920 03f6 01       		.byte	0x1
 2921 03f7 E0       		.byte	0xe0
 2922 03f8 B9000000 		.4byte	0xb9
 2923 03fc 03       		.uleb128 0x3
 2924 03fd 91       		.byte	0x91
 2925 03fe FC7E     		.sleb128 -132
 2926 0400 0E       		.uleb128 0xe
 2927 0401 39010000 		.4byte	.LASF63
 2928 0405 01       		.byte	0x1
 2929 0406 E1       		.byte	0xe1
 2930 0407 B9000000 		.4byte	0xb9
 2931 040b 03       		.uleb128 0x3
 2932 040c 91       		.byte	0x91
 2933 040d F87E     		.sleb128 -136
 2934 040f 0E       		.uleb128 0xe
 2935 0410 00020000 		.4byte	.LASF64
 2936 0414 01       		.byte	0x1
 2937 0415 E4       		.byte	0xe4
 2938 0416 B9000000 		.4byte	0xb9
 2939 041a 02       		.uleb128 0x2
 2940 041b 91       		.byte	0x91
 2941 041c 64       		.sleb128 -28
 2942 041d 0E       		.uleb128 0xe
 2943 041e 7C010000 		.4byte	.LASF65
 2944 0422 01       		.byte	0x1
 2945 0423 E5       		.byte	0xe5
 2946 0424 B9000000 		.4byte	0xb9
 2947 0428 03       		.uleb128 0x3
 2948 0429 91       		.byte	0x91
 2949 042a F47E     		.sleb128 -140
 2950 042c 0E       		.uleb128 0xe
 2951 042d D2020000 		.4byte	.LASF66
 2952 0431 01       		.byte	0x1
 2953 0432 E6       		.byte	0xe6
 2954 0433 7E000000 		.4byte	0x7e
 2955 0437 03       		.uleb128 0x3
 2956 0438 91       		.byte	0x91
 2957 0439 F07E     		.sleb128 -144
 2958 043b 0E       		.uleb128 0xe
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 62


 2959 043c 03040000 		.4byte	.LASF67
 2960 0440 01       		.byte	0x1
 2961 0441 E9       		.byte	0xe9
 2962 0442 7E000000 		.4byte	0x7e
 2963 0446 02       		.uleb128 0x2
 2964 0447 91       		.byte	0x91
 2965 0448 60       		.sleb128 -32
 2966 0449 0E       		.uleb128 0xe
 2967 044a 97040000 		.4byte	.LASF68
 2968 044e 01       		.byte	0x1
 2969 044f EA       		.byte	0xea
 2970 0450 7E000000 		.4byte	0x7e
 2971 0454 02       		.uleb128 0x2
 2972 0455 91       		.byte	0x91
 2973 0456 5C       		.sleb128 -36
 2974 0457 0E       		.uleb128 0xe
 2975 0458 41010000 		.4byte	.LASF69
 2976 045c 01       		.byte	0x1
 2977 045d ED       		.byte	0xed
 2978 045e 7E000000 		.4byte	0x7e
 2979 0462 03       		.uleb128 0x3
 2980 0463 91       		.byte	0x91
 2981 0464 EC7E     		.sleb128 -148
 2982 0466 10       		.uleb128 0x10
 2983 0467 C0010000 		.4byte	.LBB2
 2984 046b 10070000 		.4byte	.LBE2-.LBB2
 2985 046f 11       		.uleb128 0x11
 2986 0470 CF040000 		.4byte	.LASF40
 2987 0474 01       		.byte	0x1
 2988 0475 9C01     		.2byte	0x19c
 2989 0477 B9000000 		.4byte	0xb9
 2990 047b 03       		.uleb128 0x3
 2991 047c 91       		.byte	0x91
 2992 047d E87E     		.sleb128 -152
 2993 047f 11       		.uleb128 0x11
 2994 0480 AC010000 		.4byte	.LASF70
 2995 0484 01       		.byte	0x1
 2996 0485 9D01     		.2byte	0x19d
 2997 0487 7E000000 		.4byte	0x7e
 2998 048b 03       		.uleb128 0x3
 2999 048c 91       		.byte	0x91
 3000 048d E47E     		.sleb128 -156
 3001 048f 00       		.byte	0
 3002 0490 00       		.byte	0
 3003 0491 08       		.uleb128 0x8
 3004 0492 7E000000 		.4byte	0x7e
 3005 0496 A1040000 		.4byte	0x4a1
 3006 049a 09       		.uleb128 0x9
 3007 049b D5000000 		.4byte	0xd5
 3008 049f 03       		.byte	0x3
 3009 04a0 00       		.byte	0
 3010 04a1 12       		.uleb128 0x12
 3011 04a2 5F010000 		.4byte	.LASF71
 3012 04a6 01       		.byte	0x1
 3013 04a7 C401     		.2byte	0x1c4
 3014 04a9 00000000 		.4byte	.LFB69
 3015 04ad D8000000 		.4byte	.LFE69-.LFB69
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 63


 3016 04b1 01       		.uleb128 0x1
 3017 04b2 9C       		.byte	0x9c
 3018 04b3 C7040000 		.4byte	0x4c7
 3019 04b7 13       		.uleb128 0x13
 3020 04b8 72040000 		.4byte	.LASF24
 3021 04bc 01       		.byte	0x1
 3022 04bd C401     		.2byte	0x1c4
 3023 04bf CE000000 		.4byte	0xce
 3024 04c3 02       		.uleb128 0x2
 3025 04c4 91       		.byte	0x91
 3026 04c5 68       		.sleb128 -24
 3027 04c6 00       		.byte	0
 3028 04c7 12       		.uleb128 0x12
 3029 04c8 A1030000 		.4byte	.LASF72
 3030 04cc 01       		.byte	0x1
 3031 04cd D501     		.2byte	0x1d5
 3032 04cf 00000000 		.4byte	.LFB70
 3033 04d3 D8000000 		.4byte	.LFE70-.LFB70
 3034 04d7 01       		.uleb128 0x1
 3035 04d8 9C       		.byte	0x9c
 3036 04d9 ED040000 		.4byte	0x4ed
 3037 04dd 13       		.uleb128 0x13
 3038 04de 72040000 		.4byte	.LASF24
 3039 04e2 01       		.byte	0x1
 3040 04e3 D501     		.2byte	0x1d5
 3041 04e5 CE000000 		.4byte	0xce
 3042 04e9 02       		.uleb128 0x2
 3043 04ea 91       		.byte	0x91
 3044 04eb 68       		.sleb128 -24
 3045 04ec 00       		.byte	0
 3046 04ed 12       		.uleb128 0x12
 3047 04ee C7020000 		.4byte	.LASF73
 3048 04f2 01       		.byte	0x1
 3049 04f3 E601     		.2byte	0x1e6
 3050 04f5 00000000 		.4byte	.LFB71
 3051 04f9 74000000 		.4byte	.LFE71-.LFB71
 3052 04fd 01       		.uleb128 0x1
 3053 04fe 9C       		.byte	0x9c
 3054 04ff 13050000 		.4byte	0x513
 3055 0503 13       		.uleb128 0x13
 3056 0504 B6040000 		.4byte	.LASF46
 3057 0508 01       		.byte	0x1
 3058 0509 E601     		.2byte	0x1e6
 3059 050b CE000000 		.4byte	0xce
 3060 050f 02       		.uleb128 0x2
 3061 0510 91       		.byte	0x91
 3062 0511 60       		.sleb128 -32
 3063 0512 00       		.byte	0
 3064 0513 14       		.uleb128 0x14
 3065 0514 28010000 		.4byte	.LASF75
 3066 0518 01       		.byte	0x1
 3067 0519 EE01     		.2byte	0x1ee
 3068 051b 7E000000 		.4byte	0x7e
 3069 051f 00000000 		.4byte	.LFB72
 3070 0523 6C000000 		.4byte	.LFE72-.LFB72
 3071 0527 01       		.uleb128 0x1
 3072 0528 9C       		.byte	0x9c
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 64


 3073 0529 6A050000 		.4byte	0x56a
 3074 052d 13       		.uleb128 0x13
 3075 052e 98010000 		.4byte	.LASF76
 3076 0532 01       		.byte	0x1
 3077 0533 EE01     		.2byte	0x1ee
 3078 0535 7E000000 		.4byte	0x7e
 3079 0539 02       		.uleb128 0x2
 3080 053a 91       		.byte	0x91
 3081 053b 5C       		.sleb128 -36
 3082 053c 11       		.uleb128 0x11
 3083 053d 7D030000 		.4byte	.LASF77
 3084 0541 01       		.byte	0x1
 3085 0542 F001     		.2byte	0x1f0
 3086 0544 7E000000 		.4byte	0x7e
 3087 0548 02       		.uleb128 0x2
 3088 0549 91       		.byte	0x91
 3089 054a 6C       		.sleb128 -20
 3090 054b 11       		.uleb128 0x11
 3091 054c E5020000 		.4byte	.LASF78
 3092 0550 01       		.byte	0x1
 3093 0551 F101     		.2byte	0x1f1
 3094 0553 7E000000 		.4byte	0x7e
 3095 0557 02       		.uleb128 0x2
 3096 0558 91       		.byte	0x91
 3097 0559 68       		.sleb128 -24
 3098 055a 11       		.uleb128 0x11
 3099 055b 41010000 		.4byte	.LASF69
 3100 055f 01       		.byte	0x1
 3101 0560 F201     		.2byte	0x1f2
 3102 0562 7E000000 		.4byte	0x7e
 3103 0566 02       		.uleb128 0x2
 3104 0567 91       		.byte	0x91
 3105 0568 64       		.sleb128 -28
 3106 0569 00       		.byte	0
 3107 056a 12       		.uleb128 0x12
 3108 056b 63000000 		.4byte	.LASF79
 3109 056f 01       		.byte	0x1
 3110 0570 F501     		.2byte	0x1f5
 3111 0572 00000000 		.4byte	.LFB73
 3112 0576 54000000 		.4byte	.LFE73-.LFB73
 3113 057a 01       		.uleb128 0x1
 3114 057b 9C       		.byte	0x9c
 3115 057c 90050000 		.4byte	0x590
 3116 0580 13       		.uleb128 0x13
 3117 0581 E7010000 		.4byte	.LASF80
 3118 0585 01       		.byte	0x1
 3119 0586 F501     		.2byte	0x1f5
 3120 0588 7E000000 		.4byte	0x7e
 3121 058c 02       		.uleb128 0x2
 3122 058d 91       		.byte	0x91
 3123 058e 74       		.sleb128 -12
 3124 058f 00       		.byte	0
 3125 0590 15       		.uleb128 0x15
 3126 0591 DF040000 		.4byte	.LASF81
 3127 0595 07       		.byte	0x7
 3128 0596 1207     		.2byte	0x712
 3129 0598 9C050000 		.4byte	0x59c
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 65


 3130 059c 16       		.uleb128 0x16
 3131 059d A2000000 		.4byte	0xa2
 3132 05a1 17       		.uleb128 0x17
 3133 05a2 F9040000 		.4byte	.LASF82
 3134 05a6 01       		.byte	0x1
 3135 05a7 25       		.byte	0x25
 3136 05a8 B2050000 		.4byte	0x5b2
 3137 05ac 05       		.uleb128 0x5
 3138 05ad 03       		.byte	0x3
 3139 05ae 00000000 		.4byte	PULSES_PER_REV
 3140 05b2 18       		.uleb128 0x18
 3141 05b3 C0000000 		.4byte	0xc0
 3142 05b7 17       		.uleb128 0x17
 3143 05b8 47000000 		.4byte	.LASF83
 3144 05bc 01       		.byte	0x1
 3145 05bd 26       		.byte	0x26
 3146 05be B2050000 		.4byte	0x5b2
 3147 05c2 05       		.uleb128 0x5
 3148 05c3 03       		.byte	0x3
 3149 05c4 00000000 		.4byte	POSE_UPDATE_PERIOD
 3150 05c8 17       		.uleb128 0x17
 3151 05c9 15030000 		.4byte	.LASF84
 3152 05cd 01       		.byte	0x1
 3153 05ce 28       		.byte	0x28
 3154 05cf 8C000000 		.4byte	0x8c
 3155 05d3 05       		.uleb128 0x5
 3156 05d4 03       		.byte	0x3
 3157 05d5 00000000 		.4byte	echo_flag
 3158 05d9 17       		.uleb128 0x17
 3159 05da 97030000 		.4byte	.LASF85
 3160 05de 01       		.byte	0x1
 3161 05df 29       		.byte	0x29
 3162 05e0 97000000 		.4byte	0x97
 3163 05e4 05       		.uleb128 0x5
 3164 05e5 03       		.byte	0x3
 3165 05e6 00000000 		.4byte	max_count
 3166 05ea 17       		.uleb128 0x17
 3167 05eb A1020000 		.4byte	.LASF86
 3168 05ef 01       		.byte	0x1
 3169 05f0 2A       		.byte	0x2a
 3170 05f1 97000000 		.4byte	0x97
 3171 05f5 05       		.uleb128 0x5
 3172 05f6 03       		.byte	0x3
 3173 05f7 00000000 		.4byte	echo_distance
 3174 05fb 17       		.uleb128 0x17
 3175 05fc DC010000 		.4byte	.LASF87
 3176 0600 01       		.byte	0x1
 3177 0601 2B       		.byte	0x2b
 3178 0602 8C000000 		.4byte	0x8c
 3179 0606 05       		.uleb128 0x5
 3180 0607 03       		.byte	0x3
 3181 0608 00000000 		.4byte	mux_select
 3182 060c 17       		.uleb128 0x17
 3183 060d 39040000 		.4byte	.LASF88
 3184 0611 01       		.byte	0x1
 3185 0612 2D       		.byte	0x2d
 3186 0613 AD000000 		.4byte	0xad
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 66


 3187 0617 05       		.uleb128 0x5
 3188 0618 03       		.byte	0x3
 3189 0619 00000000 		.4byte	left_wheel_count
 3190 061d 17       		.uleb128 0x17
 3191 061e 27040000 		.4byte	.LASF89
 3192 0622 01       		.byte	0x1
 3193 0623 2E       		.byte	0x2e
 3194 0624 AD000000 		.4byte	0xad
 3195 0628 05       		.uleb128 0x5
 3196 0629 03       		.byte	0x3
 3197 062a 00000000 		.4byte	right_wheel_count
 3198 062e 08       		.uleb128 0x8
 3199 062f C7000000 		.4byte	0xc7
 3200 0633 3E060000 		.4byte	0x63e
 3201 0637 09       		.uleb128 0x9
 3202 0638 D5000000 		.4byte	0xd5
 3203 063c 95       		.byte	0x95
 3204 063d 00       		.byte	0
 3205 063e 17       		.uleb128 0x17
 3206 063f D4030000 		.4byte	.LASF90
 3207 0643 01       		.byte	0x1
 3208 0644 2F       		.byte	0x2f
 3209 0645 2E060000 		.4byte	0x62e
 3210 0649 05       		.uleb128 0x5
 3211 064a 03       		.byte	0x3
 3212 064b 00000000 		.4byte	serial_output
 3213 064f 17       		.uleb128 0x17
 3214 0650 C2010000 		.4byte	.LASF91
 3215 0654 01       		.byte	0x1
 3216 0655 30       		.byte	0x30
 3217 0656 7E000000 		.4byte	0x7e
 3218 065a 05       		.uleb128 0x5
 3219 065b 03       		.byte	0x3
 3220 065c 00000000 		.4byte	wall_following_flag
 3221 0660 17       		.uleb128 0x17
 3222 0661 85010000 		.4byte	.LASF92
 3223 0665 01       		.byte	0x1
 3224 0666 33       		.byte	0x33
 3225 0667 89010000 		.4byte	0x189
 3226 066b 05       		.uleb128 0x5
 3227 066c 03       		.byte	0x3
 3228 066d 00000000 		.4byte	left_motor
 3229 0671 17       		.uleb128 0x17
 3230 0672 70010000 		.4byte	.LASF93
 3231 0676 01       		.byte	0x1
 3232 0677 34       		.byte	0x34
 3233 0678 89010000 		.4byte	0x189
 3234 067c 05       		.uleb128 0x5
 3235 067d 03       		.byte	0x3
 3236 067e 00000000 		.4byte	right_motor
 3237 0682 17       		.uleb128 0x17
 3238 0683 14000000 		.4byte	.LASF94
 3239 0687 01       		.byte	0x1
 3240 0688 35       		.byte	0x35
 3241 0689 3B020000 		.4byte	0x23b
 3242 068d 05       		.uleb128 0x5
 3243 068e 03       		.byte	0x3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 67


 3244 068f 00000000 		.4byte	robot
 3245 0693 17       		.uleb128 0x17
 3246 0694 77000000 		.4byte	.LASF95
 3247 0698 01       		.byte	0x1
 3248 0699 36       		.byte	0x36
 3249 069a 0D010000 		.4byte	0x10d
 3250 069e 05       		.uleb128 0x5
 3251 069f 03       		.byte	0x3
 3252 06a0 00000000 		.4byte	sensors
 3253 06a4 00       		.byte	0
 3254              		.section	.debug_abbrev,"",%progbits
 3255              	.Ldebug_abbrev0:
 3256 0000 01       		.uleb128 0x1
 3257 0001 11       		.uleb128 0x11
 3258 0002 01       		.byte	0x1
 3259 0003 25       		.uleb128 0x25
 3260 0004 0E       		.uleb128 0xe
 3261 0005 13       		.uleb128 0x13
 3262 0006 0B       		.uleb128 0xb
 3263 0007 03       		.uleb128 0x3
 3264 0008 0E       		.uleb128 0xe
 3265 0009 1B       		.uleb128 0x1b
 3266 000a 0E       		.uleb128 0xe
 3267 000b 55       		.uleb128 0x55
 3268 000c 17       		.uleb128 0x17
 3269 000d 11       		.uleb128 0x11
 3270 000e 01       		.uleb128 0x1
 3271 000f 10       		.uleb128 0x10
 3272 0010 17       		.uleb128 0x17
 3273 0011 00       		.byte	0
 3274 0012 00       		.byte	0
 3275 0013 02       		.uleb128 0x2
 3276 0014 24       		.uleb128 0x24
 3277 0015 00       		.byte	0
 3278 0016 0B       		.uleb128 0xb
 3279 0017 0B       		.uleb128 0xb
 3280 0018 3E       		.uleb128 0x3e
 3281 0019 0B       		.uleb128 0xb
 3282 001a 03       		.uleb128 0x3
 3283 001b 0E       		.uleb128 0xe
 3284 001c 00       		.byte	0
 3285 001d 00       		.byte	0
 3286 001e 03       		.uleb128 0x3
 3287 001f 16       		.uleb128 0x16
 3288 0020 00       		.byte	0
 3289 0021 03       		.uleb128 0x3
 3290 0022 0E       		.uleb128 0xe
 3291 0023 3A       		.uleb128 0x3a
 3292 0024 0B       		.uleb128 0xb
 3293 0025 3B       		.uleb128 0x3b
 3294 0026 0B       		.uleb128 0xb
 3295 0027 49       		.uleb128 0x49
 3296 0028 13       		.uleb128 0x13
 3297 0029 00       		.byte	0
 3298 002a 00       		.byte	0
 3299 002b 04       		.uleb128 0x4
 3300 002c 24       		.uleb128 0x24
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 68


 3301 002d 00       		.byte	0
 3302 002e 0B       		.uleb128 0xb
 3303 002f 0B       		.uleb128 0xb
 3304 0030 3E       		.uleb128 0x3e
 3305 0031 0B       		.uleb128 0xb
 3306 0032 03       		.uleb128 0x3
 3307 0033 08       		.uleb128 0x8
 3308 0034 00       		.byte	0
 3309 0035 00       		.byte	0
 3310 0036 05       		.uleb128 0x5
 3311 0037 16       		.uleb128 0x16
 3312 0038 00       		.byte	0
 3313 0039 03       		.uleb128 0x3
 3314 003a 0E       		.uleb128 0xe
 3315 003b 3A       		.uleb128 0x3a
 3316 003c 0B       		.uleb128 0xb
 3317 003d 3B       		.uleb128 0x3b
 3318 003e 05       		.uleb128 0x5
 3319 003f 49       		.uleb128 0x49
 3320 0040 13       		.uleb128 0x13
 3321 0041 00       		.byte	0
 3322 0042 00       		.byte	0
 3323 0043 06       		.uleb128 0x6
 3324 0044 13       		.uleb128 0x13
 3325 0045 01       		.byte	0x1
 3326 0046 0B       		.uleb128 0xb
 3327 0047 0B       		.uleb128 0xb
 3328 0048 3A       		.uleb128 0x3a
 3329 0049 0B       		.uleb128 0xb
 3330 004a 3B       		.uleb128 0x3b
 3331 004b 0B       		.uleb128 0xb
 3332 004c 01       		.uleb128 0x1
 3333 004d 13       		.uleb128 0x13
 3334 004e 00       		.byte	0
 3335 004f 00       		.byte	0
 3336 0050 07       		.uleb128 0x7
 3337 0051 0D       		.uleb128 0xd
 3338 0052 00       		.byte	0
 3339 0053 03       		.uleb128 0x3
 3340 0054 0E       		.uleb128 0xe
 3341 0055 3A       		.uleb128 0x3a
 3342 0056 0B       		.uleb128 0xb
 3343 0057 3B       		.uleb128 0x3b
 3344 0058 0B       		.uleb128 0xb
 3345 0059 49       		.uleb128 0x49
 3346 005a 13       		.uleb128 0x13
 3347 005b 38       		.uleb128 0x38
 3348 005c 0B       		.uleb128 0xb
 3349 005d 00       		.byte	0
 3350 005e 00       		.byte	0
 3351 005f 08       		.uleb128 0x8
 3352 0060 01       		.uleb128 0x1
 3353 0061 01       		.byte	0x1
 3354 0062 49       		.uleb128 0x49
 3355 0063 13       		.uleb128 0x13
 3356 0064 01       		.uleb128 0x1
 3357 0065 13       		.uleb128 0x13
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 69


 3358 0066 00       		.byte	0
 3359 0067 00       		.byte	0
 3360 0068 09       		.uleb128 0x9
 3361 0069 21       		.uleb128 0x21
 3362 006a 00       		.byte	0
 3363 006b 49       		.uleb128 0x49
 3364 006c 13       		.uleb128 0x13
 3365 006d 2F       		.uleb128 0x2f
 3366 006e 0B       		.uleb128 0xb
 3367 006f 00       		.byte	0
 3368 0070 00       		.byte	0
 3369 0071 0A       		.uleb128 0xa
 3370 0072 0D       		.uleb128 0xd
 3371 0073 00       		.byte	0
 3372 0074 03       		.uleb128 0x3
 3373 0075 08       		.uleb128 0x8
 3374 0076 3A       		.uleb128 0x3a
 3375 0077 0B       		.uleb128 0xb
 3376 0078 3B       		.uleb128 0x3b
 3377 0079 0B       		.uleb128 0xb
 3378 007a 49       		.uleb128 0x49
 3379 007b 13       		.uleb128 0x13
 3380 007c 38       		.uleb128 0x38
 3381 007d 0B       		.uleb128 0xb
 3382 007e 00       		.byte	0
 3383 007f 00       		.byte	0
 3384 0080 0B       		.uleb128 0xb
 3385 0081 2E       		.uleb128 0x2e
 3386 0082 00       		.byte	0
 3387 0083 3F       		.uleb128 0x3f
 3388 0084 19       		.uleb128 0x19
 3389 0085 03       		.uleb128 0x3
 3390 0086 0E       		.uleb128 0xe
 3391 0087 3A       		.uleb128 0x3a
 3392 0088 0B       		.uleb128 0xb
 3393 0089 3B       		.uleb128 0x3b
 3394 008a 0B       		.uleb128 0xb
 3395 008b 27       		.uleb128 0x27
 3396 008c 19       		.uleb128 0x19
 3397 008d 11       		.uleb128 0x11
 3398 008e 01       		.uleb128 0x1
 3399 008f 12       		.uleb128 0x12
 3400 0090 06       		.uleb128 0x6
 3401 0091 40       		.uleb128 0x40
 3402 0092 18       		.uleb128 0x18
 3403 0093 9642     		.uleb128 0x2116
 3404 0095 19       		.uleb128 0x19
 3405 0096 00       		.byte	0
 3406 0097 00       		.byte	0
 3407 0098 0C       		.uleb128 0xc
 3408 0099 2E       		.uleb128 0x2e
 3409 009a 01       		.byte	0x1
 3410 009b 3F       		.uleb128 0x3f
 3411 009c 19       		.uleb128 0x19
 3412 009d 03       		.uleb128 0x3
 3413 009e 0E       		.uleb128 0xe
 3414 009f 3A       		.uleb128 0x3a
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 70


 3415 00a0 0B       		.uleb128 0xb
 3416 00a1 3B       		.uleb128 0x3b
 3417 00a2 0B       		.uleb128 0xb
 3418 00a3 27       		.uleb128 0x27
 3419 00a4 19       		.uleb128 0x19
 3420 00a5 11       		.uleb128 0x11
 3421 00a6 01       		.uleb128 0x1
 3422 00a7 12       		.uleb128 0x12
 3423 00a8 06       		.uleb128 0x6
 3424 00a9 40       		.uleb128 0x40
 3425 00aa 18       		.uleb128 0x18
 3426 00ab 9642     		.uleb128 0x2116
 3427 00ad 19       		.uleb128 0x19
 3428 00ae 01       		.uleb128 0x1
 3429 00af 13       		.uleb128 0x13
 3430 00b0 00       		.byte	0
 3431 00b1 00       		.byte	0
 3432 00b2 0D       		.uleb128 0xd
 3433 00b3 34       		.uleb128 0x34
 3434 00b4 00       		.byte	0
 3435 00b5 03       		.uleb128 0x3
 3436 00b6 08       		.uleb128 0x8
 3437 00b7 3A       		.uleb128 0x3a
 3438 00b8 0B       		.uleb128 0xb
 3439 00b9 3B       		.uleb128 0x3b
 3440 00ba 0B       		.uleb128 0xb
 3441 00bb 49       		.uleb128 0x49
 3442 00bc 13       		.uleb128 0x13
 3443 00bd 02       		.uleb128 0x2
 3444 00be 18       		.uleb128 0x18
 3445 00bf 00       		.byte	0
 3446 00c0 00       		.byte	0
 3447 00c1 0E       		.uleb128 0xe
 3448 00c2 34       		.uleb128 0x34
 3449 00c3 00       		.byte	0
 3450 00c4 03       		.uleb128 0x3
 3451 00c5 0E       		.uleb128 0xe
 3452 00c6 3A       		.uleb128 0x3a
 3453 00c7 0B       		.uleb128 0xb
 3454 00c8 3B       		.uleb128 0x3b
 3455 00c9 0B       		.uleb128 0xb
 3456 00ca 49       		.uleb128 0x49
 3457 00cb 13       		.uleb128 0x13
 3458 00cc 02       		.uleb128 0x2
 3459 00cd 18       		.uleb128 0x18
 3460 00ce 00       		.byte	0
 3461 00cf 00       		.byte	0
 3462 00d0 0F       		.uleb128 0xf
 3463 00d1 2E       		.uleb128 0x2e
 3464 00d2 01       		.byte	0x1
 3465 00d3 3F       		.uleb128 0x3f
 3466 00d4 19       		.uleb128 0x19
 3467 00d5 03       		.uleb128 0x3
 3468 00d6 0E       		.uleb128 0xe
 3469 00d7 3A       		.uleb128 0x3a
 3470 00d8 0B       		.uleb128 0xb
 3471 00d9 3B       		.uleb128 0x3b
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 71


 3472 00da 0B       		.uleb128 0xb
 3473 00db 27       		.uleb128 0x27
 3474 00dc 19       		.uleb128 0x19
 3475 00dd 49       		.uleb128 0x49
 3476 00de 13       		.uleb128 0x13
 3477 00df 11       		.uleb128 0x11
 3478 00e0 01       		.uleb128 0x1
 3479 00e1 12       		.uleb128 0x12
 3480 00e2 06       		.uleb128 0x6
 3481 00e3 40       		.uleb128 0x40
 3482 00e4 18       		.uleb128 0x18
 3483 00e5 9642     		.uleb128 0x2116
 3484 00e7 19       		.uleb128 0x19
 3485 00e8 01       		.uleb128 0x1
 3486 00e9 13       		.uleb128 0x13
 3487 00ea 00       		.byte	0
 3488 00eb 00       		.byte	0
 3489 00ec 10       		.uleb128 0x10
 3490 00ed 0B       		.uleb128 0xb
 3491 00ee 01       		.byte	0x1
 3492 00ef 11       		.uleb128 0x11
 3493 00f0 01       		.uleb128 0x1
 3494 00f1 12       		.uleb128 0x12
 3495 00f2 06       		.uleb128 0x6
 3496 00f3 00       		.byte	0
 3497 00f4 00       		.byte	0
 3498 00f5 11       		.uleb128 0x11
 3499 00f6 34       		.uleb128 0x34
 3500 00f7 00       		.byte	0
 3501 00f8 03       		.uleb128 0x3
 3502 00f9 0E       		.uleb128 0xe
 3503 00fa 3A       		.uleb128 0x3a
 3504 00fb 0B       		.uleb128 0xb
 3505 00fc 3B       		.uleb128 0x3b
 3506 00fd 05       		.uleb128 0x5
 3507 00fe 49       		.uleb128 0x49
 3508 00ff 13       		.uleb128 0x13
 3509 0100 02       		.uleb128 0x2
 3510 0101 18       		.uleb128 0x18
 3511 0102 00       		.byte	0
 3512 0103 00       		.byte	0
 3513 0104 12       		.uleb128 0x12
 3514 0105 2E       		.uleb128 0x2e
 3515 0106 01       		.byte	0x1
 3516 0107 3F       		.uleb128 0x3f
 3517 0108 19       		.uleb128 0x19
 3518 0109 03       		.uleb128 0x3
 3519 010a 0E       		.uleb128 0xe
 3520 010b 3A       		.uleb128 0x3a
 3521 010c 0B       		.uleb128 0xb
 3522 010d 3B       		.uleb128 0x3b
 3523 010e 05       		.uleb128 0x5
 3524 010f 27       		.uleb128 0x27
 3525 0110 19       		.uleb128 0x19
 3526 0111 11       		.uleb128 0x11
 3527 0112 01       		.uleb128 0x1
 3528 0113 12       		.uleb128 0x12
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 72


 3529 0114 06       		.uleb128 0x6
 3530 0115 40       		.uleb128 0x40
 3531 0116 18       		.uleb128 0x18
 3532 0117 9642     		.uleb128 0x2116
 3533 0119 19       		.uleb128 0x19
 3534 011a 01       		.uleb128 0x1
 3535 011b 13       		.uleb128 0x13
 3536 011c 00       		.byte	0
 3537 011d 00       		.byte	0
 3538 011e 13       		.uleb128 0x13
 3539 011f 05       		.uleb128 0x5
 3540 0120 00       		.byte	0
 3541 0121 03       		.uleb128 0x3
 3542 0122 0E       		.uleb128 0xe
 3543 0123 3A       		.uleb128 0x3a
 3544 0124 0B       		.uleb128 0xb
 3545 0125 3B       		.uleb128 0x3b
 3546 0126 05       		.uleb128 0x5
 3547 0127 49       		.uleb128 0x49
 3548 0128 13       		.uleb128 0x13
 3549 0129 02       		.uleb128 0x2
 3550 012a 18       		.uleb128 0x18
 3551 012b 00       		.byte	0
 3552 012c 00       		.byte	0
 3553 012d 14       		.uleb128 0x14
 3554 012e 2E       		.uleb128 0x2e
 3555 012f 01       		.byte	0x1
 3556 0130 3F       		.uleb128 0x3f
 3557 0131 19       		.uleb128 0x19
 3558 0132 03       		.uleb128 0x3
 3559 0133 0E       		.uleb128 0xe
 3560 0134 3A       		.uleb128 0x3a
 3561 0135 0B       		.uleb128 0xb
 3562 0136 3B       		.uleb128 0x3b
 3563 0137 05       		.uleb128 0x5
 3564 0138 27       		.uleb128 0x27
 3565 0139 19       		.uleb128 0x19
 3566 013a 49       		.uleb128 0x49
 3567 013b 13       		.uleb128 0x13
 3568 013c 11       		.uleb128 0x11
 3569 013d 01       		.uleb128 0x1
 3570 013e 12       		.uleb128 0x12
 3571 013f 06       		.uleb128 0x6
 3572 0140 40       		.uleb128 0x40
 3573 0141 18       		.uleb128 0x18
 3574 0142 9642     		.uleb128 0x2116
 3575 0144 19       		.uleb128 0x19
 3576 0145 01       		.uleb128 0x1
 3577 0146 13       		.uleb128 0x13
 3578 0147 00       		.byte	0
 3579 0148 00       		.byte	0
 3580 0149 15       		.uleb128 0x15
 3581 014a 34       		.uleb128 0x34
 3582 014b 00       		.byte	0
 3583 014c 03       		.uleb128 0x3
 3584 014d 0E       		.uleb128 0xe
 3585 014e 3A       		.uleb128 0x3a
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 73


 3586 014f 0B       		.uleb128 0xb
 3587 0150 3B       		.uleb128 0x3b
 3588 0151 05       		.uleb128 0x5
 3589 0152 49       		.uleb128 0x49
 3590 0153 13       		.uleb128 0x13
 3591 0154 3F       		.uleb128 0x3f
 3592 0155 19       		.uleb128 0x19
 3593 0156 3C       		.uleb128 0x3c
 3594 0157 19       		.uleb128 0x19
 3595 0158 00       		.byte	0
 3596 0159 00       		.byte	0
 3597 015a 16       		.uleb128 0x16
 3598 015b 35       		.uleb128 0x35
 3599 015c 00       		.byte	0
 3600 015d 49       		.uleb128 0x49
 3601 015e 13       		.uleb128 0x13
 3602 015f 00       		.byte	0
 3603 0160 00       		.byte	0
 3604 0161 17       		.uleb128 0x17
 3605 0162 34       		.uleb128 0x34
 3606 0163 00       		.byte	0
 3607 0164 03       		.uleb128 0x3
 3608 0165 0E       		.uleb128 0xe
 3609 0166 3A       		.uleb128 0x3a
 3610 0167 0B       		.uleb128 0xb
 3611 0168 3B       		.uleb128 0x3b
 3612 0169 0B       		.uleb128 0xb
 3613 016a 49       		.uleb128 0x49
 3614 016b 13       		.uleb128 0x13
 3615 016c 3F       		.uleb128 0x3f
 3616 016d 19       		.uleb128 0x19
 3617 016e 02       		.uleb128 0x2
 3618 016f 18       		.uleb128 0x18
 3619 0170 00       		.byte	0
 3620 0171 00       		.byte	0
 3621 0172 18       		.uleb128 0x18
 3622 0173 26       		.uleb128 0x26
 3623 0174 00       		.byte	0
 3624 0175 49       		.uleb128 0x49
 3625 0176 13       		.uleb128 0x13
 3626 0177 00       		.byte	0
 3627 0178 00       		.byte	0
 3628 0179 00       		.byte	0
 3629              		.section	.debug_aranges,"",%progbits
 3630 0000 64000000 		.4byte	0x64
 3631 0004 0200     		.2byte	0x2
 3632 0006 00000000 		.4byte	.Ldebug_info0
 3633 000a 04       		.byte	0x4
 3634 000b 00       		.byte	0
 3635 000c 0000     		.2byte	0
 3636 000e 0000     		.2byte	0
 3637 0010 00000000 		.4byte	.LFB64
 3638 0014 74000000 		.4byte	.LFE64-.LFB64
 3639 0018 00000000 		.4byte	.LFB65
 3640 001c 5C040000 		.4byte	.LFE65-.LFB65
 3641 0020 00000000 		.4byte	.LFB66
 3642 0024 54010000 		.4byte	.LFE66-.LFB66
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 74


 3643 0028 00000000 		.4byte	.LFB67
 3644 002c 74000000 		.4byte	.LFE67-.LFB67
 3645 0030 00000000 		.4byte	.LFB68
 3646 0034 F0080000 		.4byte	.LFE68-.LFB68
 3647 0038 00000000 		.4byte	.LFB69
 3648 003c D8000000 		.4byte	.LFE69-.LFB69
 3649 0040 00000000 		.4byte	.LFB70
 3650 0044 D8000000 		.4byte	.LFE70-.LFB70
 3651 0048 00000000 		.4byte	.LFB71
 3652 004c 74000000 		.4byte	.LFE71-.LFB71
 3653 0050 00000000 		.4byte	.LFB72
 3654 0054 6C000000 		.4byte	.LFE72-.LFB72
 3655 0058 00000000 		.4byte	.LFB73
 3656 005c 54000000 		.4byte	.LFE73-.LFB73
 3657 0060 00000000 		.4byte	0
 3658 0064 00000000 		.4byte	0
 3659              		.section	.debug_ranges,"",%progbits
 3660              	.Ldebug_ranges0:
 3661 0000 00000000 		.4byte	.LFB64
 3662 0004 74000000 		.4byte	.LFE64
 3663 0008 00000000 		.4byte	.LFB65
 3664 000c 5C040000 		.4byte	.LFE65
 3665 0010 00000000 		.4byte	.LFB66
 3666 0014 54010000 		.4byte	.LFE66
 3667 0018 00000000 		.4byte	.LFB67
 3668 001c 74000000 		.4byte	.LFE67
 3669 0020 00000000 		.4byte	.LFB68
 3670 0024 F0080000 		.4byte	.LFE68
 3671 0028 00000000 		.4byte	.LFB69
 3672 002c D8000000 		.4byte	.LFE69
 3673 0030 00000000 		.4byte	.LFB70
 3674 0034 D8000000 		.4byte	.LFE70
 3675 0038 00000000 		.4byte	.LFB71
 3676 003c 74000000 		.4byte	.LFE71
 3677 0040 00000000 		.4byte	.LFB72
 3678 0044 6C000000 		.4byte	.LFE72
 3679 0048 00000000 		.4byte	.LFB73
 3680 004c 54000000 		.4byte	.LFE73
 3681 0050 00000000 		.4byte	0
 3682 0054 00000000 		.4byte	0
 3683              		.section	.debug_line,"",%progbits
 3684              	.Ldebug_line0:
 3685 0000 CC030000 		.section	.debug_str,"MS",%progbits,1
 3685      02007601 
 3685      00000201 
 3685      FB0E0D00 
 3685      01010101 
 3686              	.LASF52:
 3687 0000 726F626F 		.ascii	"robot_Kp\000"
 3687      745F4B70 
 3687      00
 3688              	.LASF31:
 3689 0009 61786C65 		.ascii	"axle_width\000"
 3689      5F776964 
 3689      746800
 3690              	.LASF94:
 3691 0014 726F626F 		.ascii	"robot\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 75


 3691      7400
 3692              	.LASF34:
 3693 001a 64657369 		.ascii	"desired_theta\000"
 3693      7265645F 
 3693      74686574 
 3693      6100
 3694              	.LASF39:
 3695 0028 64696666 		.ascii	"diff\000"
 3695      00
 3696              	.LASF54:
 3697 002d 73746172 		.ascii	"start_x\000"
 3697      745F7800 
 3698              	.LASF55:
 3699 0035 73746172 		.ascii	"start_y\000"
 3699      745F7900 
 3700              	.LASF2:
 3701 003d 73686F72 		.ascii	"short int\000"
 3701      7420696E 
 3701      7400
 3702              	.LASF83:
 3703 0047 504F5345 		.ascii	"POSE_UPDATE_PERIOD\000"
 3703      5F555044 
 3703      4154455F 
 3703      50455249 
 3703      4F4400
 3704              	.LASF20:
 3705 005a 73697A65 		.ascii	"sizetype\000"
 3705      74797065 
 3705      00
 3706              	.LASF79:
 3707 0063 6D6F7665 		.ascii	"move_servo\000"
 3707      5F736572 
 3707      766F00
 3708              	.LASF51:
 3709 006e 726F626F 		.ascii	"robot_Ki\000"
 3709      745F4B69 
 3709      00
 3710              	.LASF95:
 3711 0077 73656E73 		.ascii	"sensors\000"
 3711      6F727300 
 3712              	.LASF38:
 3713 007f 526F626F 		.ascii	"Robot\000"
 3713      7400
 3714              	.LASF96:
 3715 0085 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3715      43313120 
 3715      352E342E 
 3715      31203230 
 3715      31363036 
 3716 00b8 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3716      20726576 
 3716      6973696F 
 3716      6E203233 
 3716      37373135 
 3717 00eb 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3717      66756E63 
 3717      74696F6E 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 76


 3717      2D736563 
 3717      74696F6E 
 3718              	.LASF21:
 3719 0113 64697265 		.ascii	"direction\000"
 3719      6374696F 
 3719      6E00
 3720              	.LASF4:
 3721 011d 5F5F7569 		.ascii	"__uint16_t\000"
 3721      6E743136 
 3721      5F7400
 3722              	.LASF75:
 3723 0128 76656C6F 		.ascii	"velocity_control\000"
 3723      63697479 
 3723      5F636F6E 
 3723      74726F6C 
 3723      00
 3724              	.LASF63:
 3725 0139 77616C6C 		.ascii	"wall_Kp\000"
 3725      5F4B7000 
 3726              	.LASF69:
 3727 0141 76656C6F 		.ascii	"velocity\000"
 3727      63697479 
 3727      00
 3728              	.LASF44:
 3729 014a 4D6F746F 		.ascii	"Motor_PI_Int_Handler\000"
 3729      725F5049 
 3729      5F496E74 
 3729      5F48616E 
 3729      646C6572 
 3730              	.LASF71:
 3731 015f 44726976 		.ascii	"Drive_Left_Motor\000"
 3731      655F4C65 
 3731      66745F4D 
 3731      6F746F72 
 3731      00
 3732              	.LASF93:
 3733 0170 72696768 		.ascii	"right_motor\000"
 3733      745F6D6F 
 3733      746F7200 
 3734              	.LASF65:
 3735 017c 64697374 		.ascii	"dist_ref\000"
 3735      5F726566 
 3735      00
 3736              	.LASF92:
 3737 0185 6C656674 		.ascii	"left_motor\000"
 3737      5F6D6F74 
 3737      6F7200
 3738              	.LASF12:
 3739 0190 75696E74 		.ascii	"uint8_t\000"
 3739      385F7400 
 3740              	.LASF76:
 3741 0198 6D61785F 		.ascii	"max_velocity\000"
 3741      76656C6F 
 3741      63697479 
 3741      00
 3742              	.LASF35:
 3743 01a5 676F616C 		.ascii	"goal_x\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 77


 3743      5F7800
 3744              	.LASF70:
 3745 01ac 7465726D 		.ascii	"terminal_phase\000"
 3745      696E616C 
 3745      5F706861 
 3745      736500
 3746              	.LASF36:
 3747 01bb 676F616C 		.ascii	"goal_y\000"
 3747      5F7900
 3748              	.LASF91:
 3749 01c2 77616C6C 		.ascii	"wall_following_flag\000"
 3749      5F666F6C 
 3749      6C6F7769 
 3749      6E675F66 
 3749      6C616700 
 3750              	.LASF16:
 3751 01d6 666C6F61 		.ascii	"float\000"
 3751      7400
 3752              	.LASF87:
 3753 01dc 6D75785F 		.ascii	"mux_select\000"
 3753      73656C65 
 3753      637400
 3754              	.LASF80:
 3755 01e7 73657276 		.ascii	"servo_nums\000"
 3755      6F5F6E75 
 3755      6D7300
 3756              	.LASF9:
 3757 01f2 6C6F6E67 		.ascii	"long long int\000"
 3757      206C6F6E 
 3757      6720696E 
 3757      7400
 3758              	.LASF64:
 3759 0200 66726F6E 		.ascii	"front_dist_th\000"
 3759      745F6469 
 3759      73745F74 
 3759      6800
 3760              	.LASF43:
 3761 020e 506F7365 		.ascii	"Pose_Update_Int_Handler\000"
 3761      5F557064 
 3761      6174655F 
 3761      496E745F 
 3761      48616E64 
 3762              	.LASF60:
 3763 0226 7265665F 		.ascii	"ref_direction\000"
 3763      64697265 
 3763      6374696F 
 3763      6E00
 3764              	.LASF28:
 3765 0234 77686565 		.ascii	"wheel_radius\000"
 3765      6C5F7261 
 3765      64697573 
 3765      00
 3766              	.LASF98:
 3767 0241 433A5C55 		.ascii	"C:\\Users\\jmspi\\OneDrive\\Documents\\GitHub\\ECE4"
 3767      73657273 
 3767      5C6A6D73 
 3767      70695C4F 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 78


 3767      6E654472 
 3768 026e 3139315C 		.ascii	"191\\DeliveryRobot.cydsn\000"
 3768      44656C69 
 3768      76657279 
 3768      526F626F 
 3768      742E6379 
 3769              	.LASF7:
 3770 0286 6C6F6E67 		.ascii	"long int\000"
 3770      20696E74 
 3770      00
 3771              	.LASF8:
 3772 028f 6C6F6E67 		.ascii	"long unsigned int\000"
 3772      20756E73 
 3772      69676E65 
 3772      6420696E 
 3772      7400
 3773              	.LASF86:
 3774 02a1 6563686F 		.ascii	"echo_distance\000"
 3774      5F646973 
 3774      74616E63 
 3774      6500
 3775              	.LASF59:
 3776 02af 676F616C 		.ascii	"goals_reached\000"
 3776      735F7265 
 3776      61636865 
 3776      6400
 3777              	.LASF3:
 3778 02bd 5F5F7569 		.ascii	"__uint8_t\000"
 3778      6E74385F 
 3778      7400
 3779              	.LASF73:
 3780 02c7 5475726E 		.ascii	"Turn_Delay\000"
 3780      5F44656C 
 3780      617900
 3781              	.LASF66:
 3782 02d2 66726F6E 		.ascii	"front_count\000"
 3782      745F636F 
 3782      756E7400 
 3783              	.LASF23:
 3784 02de 53656E73 		.ascii	"Sensor\000"
 3784      6F7200
 3785              	.LASF78:
 3786 02e5 74687265 		.ascii	"thresh\000"
 3786      736800
 3787              	.LASF19:
 3788 02ec 6C6F6E67 		.ascii	"long double\000"
 3788      20646F75 
 3788      626C6500 
 3789              	.LASF30:
 3790 02f8 4D6F746F 		.ascii	"Motor\000"
 3790      7200
 3791              	.LASF48:
 3792 02fe 6D6F746F 		.ascii	"motor_Ki\000"
 3792      725F4B69 
 3792      00
 3793              	.LASF1:
 3794 0307 756E7369 		.ascii	"unsigned char\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 79


 3794      676E6564 
 3794      20636861 
 3794      7200
 3795              	.LASF84:
 3796 0315 6563686F 		.ascii	"echo_flag\000"
 3796      5F666C61 
 3796      6700
 3797              	.LASF33:
 3798 031f 64657369 		.ascii	"desired_v\000"
 3798      7265645F 
 3798      7600
 3799              	.LASF27:
 3800 0329 64657369 		.ascii	"desired_w\000"
 3800      7265645F 
 3800      7700
 3801              	.LASF0:
 3802 0333 7369676E 		.ascii	"signed char\000"
 3802      65642063 
 3802      68617200 
 3803              	.LASF14:
 3804 033f 696E7433 		.ascii	"int32_t\000"
 3804      325F7400 
 3805              	.LASF10:
 3806 0347 6C6F6E67 		.ascii	"long long unsigned int\000"
 3806      206C6F6E 
 3806      6720756E 
 3806      7369676E 
 3806      65642069 
 3807              	.LASF49:
 3808 035e 6D6F746F 		.ascii	"motor_Kp\000"
 3808      725F4B70 
 3808      00
 3809              	.LASF11:
 3810 0367 756E7369 		.ascii	"unsigned int\000"
 3810      676E6564 
 3810      20696E74 
 3810      00
 3811              	.LASF13:
 3812 0374 75696E74 		.ascii	"uint16_t\000"
 3812      31365F74 
 3812      00
 3813              	.LASF77:
 3814 037d 6176675F 		.ascii	"avg_dist\000"
 3814      64697374 
 3814      00
 3815              	.LASF50:
 3816 0386 726F626F 		.ascii	"robot_axle_width\000"
 3816      745F6178 
 3816      6C655F77 
 3816      69647468 
 3816      00
 3817              	.LASF85:
 3818 0397 6D61785F 		.ascii	"max_count\000"
 3818      636F756E 
 3818      7400
 3819              	.LASF72:
 3820 03a1 44726976 		.ascii	"Drive_Right_Motor\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 80


 3820      655F5269 
 3820      6768745F 
 3820      4D6F746F 
 3820      7200
 3821              	.LASF5:
 3822 03b3 73686F72 		.ascii	"short unsigned int\000"
 3822      7420756E 
 3822      7369676E 
 3822      65642069 
 3822      6E7400
 3823              	.LASF22:
 3824 03c6 64697374 		.ascii	"distance\000"
 3824      616E6365 
 3824      00
 3825              	.LASF18:
 3826 03cf 63686172 		.ascii	"char\000"
 3826      00
 3827              	.LASF90:
 3828 03d4 73657269 		.ascii	"serial_output\000"
 3828      616C5F6F 
 3828      75747075 
 3828      7400
 3829              	.LASF74:
 3830 03e2 6D61696E 		.ascii	"main\000"
 3830      00
 3831              	.LASF45:
 3832 03e7 4E617669 		.ascii	"Navigation_Test_Int_Handler\000"
 3832      67617469 
 3832      6F6E5F54 
 3832      6573745F 
 3832      496E745F 
 3833              	.LASF67:
 3834 0403 72657475 		.ascii	"return_flag\000"
 3834      726E5F66 
 3834      6C616700 
 3835              	.LASF62:
 3836 040f 74686574 		.ascii	"theta_correction\000"
 3836      615F636F 
 3836      72726563 
 3836      74696F6E 
 3836      00
 3837              	.LASF97:
 3838 0420 6D61696E 		.ascii	"main.c\000"
 3838      2E6300
 3839              	.LASF89:
 3840 0427 72696768 		.ascii	"right_wheel_count\000"
 3840      745F7768 
 3840      65656C5F 
 3840      636F756E 
 3840      7400
 3841              	.LASF88:
 3842 0439 6C656674 		.ascii	"left_wheel_count\000"
 3842      5F776865 
 3842      656C5F63 
 3842      6F756E74 
 3842      00
 3843              	.LASF15:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 81


 3844 044a 696E7433 		.ascii	"int32\000"
 3844      3200
 3845              	.LASF17:
 3846 0450 646F7562 		.ascii	"double\000"
 3846      6C6500
 3847              	.LASF99:
 3848 0457 54696D65 		.ascii	"Timer_Int_Handler\000"
 3848      725F496E 
 3848      745F4861 
 3848      6E646C65 
 3848      7200
 3849              	.LASF41:
 3850 0469 7363616C 		.ascii	"scaled_V\000"
 3850      65645F56 
 3850      00
 3851              	.LASF24:
 3852 0472 64757479 		.ascii	"duty_cycle\000"
 3852      5F637963 
 3852      6C6500
 3853              	.LASF6:
 3854 047d 5F5F696E 		.ascii	"__int32_t\000"
 3854      7433325F 
 3854      7400
 3855              	.LASF25:
 3856 0487 696E745F 		.ascii	"int_error\000"
 3856      6572726F 
 3856      7200
 3857              	.LASF32:
 3858 0491 74686574 		.ascii	"theta\000"
 3858      6100
 3859              	.LASF68:
 3860 0497 425F666C 		.ascii	"B_flag\000"
 3860      616700
 3861              	.LASF42:
 3862 049e 6E65775F 		.ascii	"new_w\000"
 3862      7700
 3863              	.LASF61:
 3864 04a4 7265665F 		.ascii	"ref_direction_deg\000"
 3864      64697265 
 3864      6374696F 
 3864      6E5F6465 
 3864      6700
 3865              	.LASF46:
 3866 04b6 616E676C 		.ascii	"angle\000"
 3866      6500
 3867              	.LASF29:
 3868 04bc 656E635F 		.ascii	"enc_count\000"
 3868      636F756E 
 3868      7400
 3869              	.LASF56:
 3870 04c6 73746172 		.ascii	"start_th\000"
 3870      745F7468 
 3870      00
 3871              	.LASF40:
 3872 04cf 6572726F 		.ascii	"error\000"
 3872      7200
 3873              	.LASF26:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cc7Ei7xr.s 			page 82


 3874 04d5 74616E67 		.ascii	"tangent_v\000"
 3874      656E745F 
 3874      7600
 3875              	.LASF81:
 3876 04df 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3876      52784275 
 3876      66666572 
 3876      00
 3877              	.LASF53:
 3878 04ec 6D696E5F 		.ascii	"min_distance\000"
 3878      64697374 
 3878      616E6365 
 3878      00
 3879              	.LASF82:
 3880 04f9 50554C53 		.ascii	"PULSES_PER_REV\000"
 3880      45535F50 
 3880      45525F52 
 3880      455600
 3881              	.LASF37:
 3882 0508 676F616C 		.ascii	"goal_min_dist\000"
 3882      5F6D696E 
 3882      5F646973 
 3882      7400
 3883              	.LASF47:
 3884 0516 77686565 		.ascii	"wheel_r_scale\000"
 3884      6C5F725F 
 3884      7363616C 
 3884      6500
 3885              	.LASF58:
 3886 0524 676F616C 		.ascii	"goals\000"
 3886      7300
 3887              	.LASF57:
 3888 052a 6E5F676F 		.ascii	"n_goals\000"
 3888      616C7300 
 3889              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
