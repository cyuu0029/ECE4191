ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	PULSES_PER_REV
  20              		.section	.rodata
  21              		.align	3
  22              		.type	PULSES_PER_REV, %object
  23              		.size	PULSES_PER_REV, 8
  24              	PULSES_PER_REV:
  25 0000 A4703D0A 		.word	171798692
  26 0004 D70FAC40 		.word	1085018071
  27              		.global	POSE_UPDATE_PERIOD
  28              		.align	3
  29              		.type	POSE_UPDATE_PERIOD, %object
  30              		.size	POSE_UPDATE_PERIOD, 8
  31              	POSE_UPDATE_PERIOD:
  32 0008 7B14AE47 		.word	1202590843
  33 000c E17A943F 		.word	1066695393
  34              		.global	echo_flag
  35              		.bss
  36              		.type	echo_flag, %object
  37              		.size	echo_flag, 1
  38              	echo_flag:
  39 0000 00       		.space	1
  40              		.global	max_count
  41              		.data
  42              		.align	1
  43              		.type	max_count, %object
  44              		.size	max_count, 2
  45              	max_count:
  46 0000 C409     		.short	2500
  47              		.comm	echo_distance,2,2
  48              		.global	mux_select
  49              		.bss
  50              		.type	mux_select, %object
  51              		.size	mux_select, 1
  52              	mux_select:
  53 0001 00       		.space	1
  54              		.global	dir
  55 0002 0000     		.align	2
  56              		.type	dir, %object
  57              		.size	dir, 4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 2


  58              	dir:
  59 0004 00000000 		.space	4
  60              		.global	left_wheel_count
  61              		.align	2
  62              		.type	left_wheel_count, %object
  63              		.size	left_wheel_count, 4
  64              	left_wheel_count:
  65 0008 00000000 		.space	4
  66              		.global	right_wheel_count
  67              		.align	2
  68              		.type	right_wheel_count, %object
  69              		.size	right_wheel_count, 4
  70              	right_wheel_count:
  71 000c 00000000 		.space	4
  72              		.comm	serial_output,150,4
  73              		.global	wall_following_flag
  74              		.align	2
  75              		.type	wall_following_flag, %object
  76              		.size	wall_following_flag, 4
  77              	wall_following_flag:
  78 0010 00000000 		.space	4
  79              		.global	pbutton
  80              		.align	2
  81              		.type	pbutton, %object
  82              		.size	pbutton, 4
  83              	pbutton:
  84 0014 00000000 		.space	4
  85              		.comm	left_motor,72,8
  86              		.comm	right_motor,72,8
  87              		.comm	robot,112,8
  88              		.comm	sensors,48,4
  89              		.section	.text.Timer_Int_Handler,"ax",%progbits
  90              		.align	2
  91              		.global	Timer_Int_Handler
  92              		.thumb
  93              		.thumb_func
  94              		.type	Timer_Int_Handler, %function
  95              	Timer_Int_Handler:
  96              	.LFB64:
  97              		.file 1 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  *
   3:main.c        ****  * Copyright YOUR COMPANY, THE YEAR
   4:main.c        ****  * All Rights Reserved
   5:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:main.c        ****  *
   7:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:main.c        ****  * WHICH IS THE PROPERTY OF your company.
   9:main.c        ****  *
  10:main.c        ****  * ========================================
  11:main.c        **** */
  12:main.c        **** 
  13:main.c        **** /* Import all libraries and header files. */
  14:main.c        **** #include "project.h"
  15:main.c        **** #include <stdio.h>
  16:main.c        **** #include <stdlib.h>
  17:main.c        **** #include <math.h>
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 3


  18:main.c        **** #include <stdbool.h>
  19:main.c        **** #include "..\Helper\helper.h"
  20:main.c        **** #include "..\Robot\robot.h"
  21:main.c        **** 
  22:main.c        **** /* Define all global variables. */
  23:main.c        **** #define N_SENSORS 6     // Number of Ultrasonic Sensors
  24:main.c        **** 
  25:main.c        **** #ifndef M_PI    // Pi, duh!
  26:main.c        **** #define M_PI 3.141592653589793238462643383279502884196      
  27:main.c        **** #endif
  28:main.c        **** 
  29:main.c        **** #ifndef M_TWOPI     // 2*Pi, duh!
  30:main.c        **** #define M_TWOPI 6.2831853071795862319959        
  31:main.c        **** #endif
  32:main.c        **** 
  33:main.c        **** #ifndef M_E     // Exponential, duh!
  34:main.c        **** #define M_E 2.71828182845904523536
  35:main.c        **** #endif
  36:main.c        **** 
  37:main.c        **** const double PULSES_PER_REV = 3591.92;
  38:main.c        **** const double POSE_UPDATE_PERIOD = 1.0/50.0; // seconds
  39:main.c        **** 
  40:main.c        **** uint8_t echo_flag = 0;          // Ultrasonic flag
  41:main.c        **** uint16_t max_count = 2500;     // Ultrasonic time count
  42:main.c        **** uint16_t echo_distance;         // Ultrasonic distance
  43:main.c        **** uint8_t mux_select = 0;         // For selecting specific ultrasonic sensor
  44:main.c        **** int dir = 0;
  45:main.c        **** 
  46:main.c        **** int32 left_wheel_count = 0;
  47:main.c        **** int32 right_wheel_count = 0;
  48:main.c        **** char serial_output[150];        // For UART print output
  49:main.c        **** int wall_following_flag = 0;
  50:main.c        **** int pbutton = 0;
  51:main.c        **** 
  52:main.c        **** /* Defining/Creating all data structures*/
  53:main.c        **** Motor left_motor;     // Left Motor, duh!
  54:main.c        **** Motor right_motor;    // Right Motor, duh!
  55:main.c        **** Robot robot;          // Robot values, duh!
  56:main.c        **** Sensor sensors;       // Ultrasonics
  57:main.c        **** 
  58:main.c        **** void Drive_Left_Motor(long double duty_cycle);
  59:main.c        **** void Drive_Right_Motor(long double duty_cycle);
  60:main.c        **** void Turn_Delay(long double angle);
  61:main.c        **** void move_servo(int servo_nums);
  62:main.c        **** 
  63:main.c        **** /* Interrupt to obtain Ultrasonic measurement value. */  
  64:main.c        **** CY_ISR( Timer_Int_Handler ) {
  98              		.loc 1 64 0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 1, uses_anonymous_args = 0
 102 0000 98B5     		push	{r3, r4, r7, lr}
 103              		.cfi_def_cfa_offset 16
 104              		.cfi_offset 3, -16
 105              		.cfi_offset 4, -12
 106              		.cfi_offset 7, -8
 107              		.cfi_offset 14, -4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 4


 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
  65:main.c        ****     // Collect measurement 
  66:main.c        ****     echo_distance = max_count - Timer_Echo_ReadCapture();   // in cm
 110              		.loc 1 66 0
 111 0004 164B     		ldr	r3, .L3
 112 0006 1C88     		ldrh	r4, [r3]
 113 0008 FFF7FEFF 		bl	Timer_Echo_ReadCapture
 114 000c 0346     		mov	r3, r0
 115 000e E31A     		subs	r3, r4, r3
 116 0010 9AB2     		uxth	r2, r3
 117 0012 144B     		ldr	r3, .L3+4
 118 0014 1A80     		strh	r2, [r3]	@ movhi
  67:main.c        ****     sensors.distance[mux_select] = echo_distance;      // Store measured value
 119              		.loc 1 67 0
 120 0016 144B     		ldr	r3, .L3+8
 121 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 122 001a 1846     		mov	r0, r3
 123 001c 114B     		ldr	r3, .L3+4
 124 001e 1B88     		ldrh	r3, [r3]
 125 0020 1946     		mov	r1, r3
 126 0022 124A     		ldr	r2, .L3+12
 127 0024 831D     		adds	r3, r0, #6
 128 0026 42F82310 		str	r1, [r2, r3, lsl #2]
  68:main.c        ****     mux_select++;   // Iterate the global ultrasonic tracker
 129              		.loc 1 68 0
 130 002a 0F4B     		ldr	r3, .L3+8
 131 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 132 002e 0133     		adds	r3, r3, #1
 133 0030 DAB2     		uxtb	r2, r3
 134 0032 0D4B     		ldr	r3, .L3+8
 135 0034 1A70     		strb	r2, [r3]
  69:main.c        **** 
  70:main.c        ****     // Reset the global ultrasonic tracker when all measurements have been updated
  71:main.c        ****     if( mux_select == N_SENSORS ) { 
 136              		.loc 1 71 0
 137 0036 0C4B     		ldr	r3, .L3+8
 138 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 139 003a 062B     		cmp	r3, #6
 140 003c 05D1     		bne	.L2
  72:main.c        ****         mux_select = 0; 
 141              		.loc 1 72 0
 142 003e 0A4B     		ldr	r3, .L3+8
 143 0040 0022     		movs	r2, #0
 144 0042 1A70     		strb	r2, [r3]
  73:main.c        ****         wall_following_flag = 1;
 145              		.loc 1 73 0
 146 0044 0A4B     		ldr	r3, .L3+16
 147 0046 0122     		movs	r2, #1
 148 0048 1A60     		str	r2, [r3]
 149              	.L2:
  74:main.c        ****     }
  75:main.c        **** 
  76:main.c        ****     Control_Reg_US_Write(mux_select);
 150              		.loc 1 76 0
 151 004a 074B     		ldr	r3, .L3+8
 152 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 5


 153 004e 1846     		mov	r0, r3
 154 0050 FFF7FEFF 		bl	Control_Reg_US_Write
  77:main.c        ****     PWM_Trigger_WriteCounter(1500);    
 155              		.loc 1 77 0
 156 0054 40F2DC50 		movw	r0, #1500
 157 0058 FFF7FEFF 		bl	PWM_Trigger_WriteCounter
  78:main.c        **** }
 158              		.loc 1 78 0
 159 005c 00BF     		nop
 160 005e 98BD     		pop	{r3, r4, r7, pc}
 161              	.L4:
 162              		.align	2
 163              	.L3:
 164 0060 00000000 		.word	max_count
 165 0064 00000000 		.word	echo_distance
 166 0068 00000000 		.word	mux_select
 167 006c 00000000 		.word	sensors
 168 0070 00000000 		.word	wall_following_flag
 169              		.cfi_endproc
 170              	.LFE64:
 171              		.size	Timer_Int_Handler, .-Timer_Int_Handler
 172              		.global	__aeabi_i2d
 173              		.global	__aeabi_dmul
 174              		.global	__aeabi_ddiv
 175              		.global	__aeabi_dsub
 176              		.global	__aeabi_dadd
 177              		.global	__aeabi_dcmpgt
 178              		.global	__aeabi_dcmplt
 179              		.section	.text.Pose_Update_Int_Handler,"ax",%progbits
 180              		.align	2
 181              		.global	Pose_Update_Int_Handler
 182              		.thumb
 183              		.thumb_func
 184              		.type	Pose_Update_Int_Handler, %function
 185              	Pose_Update_Int_Handler:
 186              	.LFB65:
  79:main.c        **** 
  80:main.c        **** /* Interrupt for Robot pose and desired drive update. */
  81:main.c        **** CY_ISR( Pose_Update_Int_Handler ) {
 187              		.loc 1 81 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 32
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 192              		.cfi_def_cfa_offset 36
 193              		.cfi_offset 4, -36
 194              		.cfi_offset 5, -32
 195              		.cfi_offset 6, -28
 196              		.cfi_offset 7, -24
 197              		.cfi_offset 8, -20
 198              		.cfi_offset 9, -16
 199              		.cfi_offset 10, -12
 200              		.cfi_offset 11, -8
 201              		.cfi_offset 14, -4
 202 0004 89B0     		sub	sp, sp, #36
 203              		.cfi_def_cfa_offset 72
 204 0006 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 6


 205              		.cfi_def_cfa_register 7
  82:main.c        ****     // Update encoder values for both left and right motors
  83:main.c        ****     int32 new, diff;
  84:main.c        ****     new = QuadDec_R_GetCounter();
 206              		.loc 1 84 0
 207 0008 FFF7FEFF 		bl	QuadDec_R_GetCounter
 208 000c 7861     		str	r0, [r7, #20]
  85:main.c        ****     diff = new - right_motor.enc_count;
 209              		.loc 1 85 0
 210 000e B84B     		ldr	r3, .L12+48
 211 0010 1B6C     		ldr	r3, [r3, #64]
 212 0012 7A69     		ldr	r2, [r7, #20]
 213 0014 D31A     		subs	r3, r2, r3
 214 0016 3B61     		str	r3, [r7, #16]
  86:main.c        ****     right_motor.enc_count = new;
 215              		.loc 1 86 0
 216 0018 B54A     		ldr	r2, .L12+48
 217 001a 7B69     		ldr	r3, [r7, #20]
 218 001c 1364     		str	r3, [r2, #64]
  87:main.c        ****     right_motor.w = M_TWOPI * diff / POSE_UPDATE_PERIOD / PULSES_PER_REV;
 219              		.loc 1 87 0
 220 001e 3869     		ldr	r0, [r7, #16]
 221 0020 FFF7FEFF 		bl	__aeabi_i2d
 222 0024 A6A3     		adr	r3, .L12
 223 0026 D3E90023 		ldrd	r2, [r3]
 224 002a FFF7FEFF 		bl	__aeabi_dmul
 225 002e 0246     		mov	r2, r0
 226 0030 0B46     		mov	r3, r1
 227 0032 1046     		mov	r0, r2
 228 0034 1946     		mov	r1, r3
 229 0036 A4A3     		adr	r3, .L12+8
 230 0038 D3E90023 		ldrd	r2, [r3]
 231 003c FFF7FEFF 		bl	__aeabi_ddiv
 232 0040 0246     		mov	r2, r0
 233 0042 0B46     		mov	r3, r1
 234 0044 1046     		mov	r0, r2
 235 0046 1946     		mov	r1, r3
 236 0048 A1A3     		adr	r3, .L12+16
 237 004a D3E90023 		ldrd	r2, [r3]
 238 004e FFF7FEFF 		bl	__aeabi_ddiv
 239 0052 0246     		mov	r2, r0
 240 0054 0B46     		mov	r3, r1
 241 0056 A649     		ldr	r1, .L12+48
 242 0058 C1E90423 		strd	r2, [r1, #16]
  88:main.c        ****     
  89:main.c        ****     new = QuadDec_L_GetCounter();
 243              		.loc 1 89 0
 244 005c FFF7FEFF 		bl	QuadDec_L_GetCounter
 245 0060 7861     		str	r0, [r7, #20]
  90:main.c        ****     diff = new - left_motor.enc_count;
 246              		.loc 1 90 0
 247 0062 A44B     		ldr	r3, .L12+52
 248 0064 1B6C     		ldr	r3, [r3, #64]
 249 0066 7A69     		ldr	r2, [r7, #20]
 250 0068 D31A     		subs	r3, r2, r3
 251 006a 3B61     		str	r3, [r7, #16]
  91:main.c        ****     left_motor.enc_count = new;
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 7


 252              		.loc 1 91 0
 253 006c A14A     		ldr	r2, .L12+52
 254 006e 7B69     		ldr	r3, [r7, #20]
 255 0070 1364     		str	r3, [r2, #64]
  92:main.c        ****     left_motor.w = M_TWOPI * diff / POSE_UPDATE_PERIOD / PULSES_PER_REV;
 256              		.loc 1 92 0
 257 0072 3869     		ldr	r0, [r7, #16]
 258 0074 FFF7FEFF 		bl	__aeabi_i2d
 259 0078 91A3     		adr	r3, .L12
 260 007a D3E90023 		ldrd	r2, [r3]
 261 007e FFF7FEFF 		bl	__aeabi_dmul
 262 0082 0246     		mov	r2, r0
 263 0084 0B46     		mov	r3, r1
 264 0086 1046     		mov	r0, r2
 265 0088 1946     		mov	r1, r3
 266 008a 8FA3     		adr	r3, .L12+8
 267 008c D3E90023 		ldrd	r2, [r3]
 268 0090 FFF7FEFF 		bl	__aeabi_ddiv
 269 0094 0246     		mov	r2, r0
 270 0096 0B46     		mov	r3, r1
 271 0098 1046     		mov	r0, r2
 272 009a 1946     		mov	r1, r3
 273 009c 8CA3     		adr	r3, .L12+16
 274 009e D3E90023 		ldrd	r2, [r3]
 275 00a2 FFF7FEFF 		bl	__aeabi_ddiv
 276 00a6 0246     		mov	r2, r0
 277 00a8 0B46     		mov	r3, r1
 278 00aa 9249     		ldr	r1, .L12+52
 279 00ac C1E90423 		strd	r2, [r1, #16]
  93:main.c        ****     
  94:main.c        ****     // Calculate and update tangential velocity of wheels
  95:main.c        ****     left_motor.tangent_v = left_motor.w * left_motor.wheel_radius;
 280              		.loc 1 95 0
 281 00b0 904B     		ldr	r3, .L12+52
 282 00b2 D3E90401 		ldrd	r0, [r3, #16]
 283 00b6 8F4B     		ldr	r3, .L12+52
 284 00b8 D3E90E23 		ldrd	r2, [r3, #56]
 285 00bc FFF7FEFF 		bl	__aeabi_dmul
 286 00c0 0246     		mov	r2, r0
 287 00c2 0B46     		mov	r3, r1
 288 00c4 8B49     		ldr	r1, .L12+52
 289 00c6 C1E90623 		strd	r2, [r1, #24]
  96:main.c        ****     right_motor.tangent_v = right_motor.w * right_motor.wheel_radius;
 290              		.loc 1 96 0
 291 00ca 894B     		ldr	r3, .L12+48
 292 00cc D3E90401 		ldrd	r0, [r3, #16]
 293 00d0 874B     		ldr	r3, .L12+48
 294 00d2 D3E90E23 		ldrd	r2, [r3, #56]
 295 00d6 FFF7FEFF 		bl	__aeabi_dmul
 296 00da 0246     		mov	r2, r0
 297 00dc 0B46     		mov	r3, r1
 298 00de 8449     		ldr	r1, .L12+48
 299 00e0 C1E90623 		strd	r2, [r1, #24]
  97:main.c        **** 
  98:main.c        ****     // Calculate and update Robot velocity and angular velocity
  99:main.c        ****     robot.w = (right_motor.tangent_v - left_motor.tangent_v) / robot.axle_width; //instantaneous tu
 300              		.loc 1 99 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 8


 301 00e4 824B     		ldr	r3, .L12+48
 302 00e6 D3E90601 		ldrd	r0, [r3, #24]
 303 00ea 824B     		ldr	r3, .L12+52
 304 00ec D3E90623 		ldrd	r2, [r3, #24]
 305 00f0 FFF7FEFF 		bl	__aeabi_dsub
 306 00f4 0246     		mov	r2, r0
 307 00f6 0B46     		mov	r3, r1
 308 00f8 1046     		mov	r0, r2
 309 00fa 1946     		mov	r1, r3
 310 00fc 7E4B     		ldr	r3, .L12+56
 311 00fe D3E90023 		ldrd	r2, [r3]
 312 0102 FFF7FEFF 		bl	__aeabi_ddiv
 313 0106 0246     		mov	r2, r0
 314 0108 0B46     		mov	r3, r1
 315 010a 7B49     		ldr	r1, .L12+56
 316 010c C1E90A23 		strd	r2, [r1, #40]
 100:main.c        ****     robot.v =  (right_motor.tangent_v + left_motor.tangent_v) / 2; //instantaneous tangential veloc
 317              		.loc 1 100 0
 318 0110 774B     		ldr	r3, .L12+48
 319 0112 D3E90601 		ldrd	r0, [r3, #24]
 320 0116 774B     		ldr	r3, .L12+52
 321 0118 D3E90623 		ldrd	r2, [r3, #24]
 322 011c FFF7FEFF 		bl	__aeabi_dadd
 323 0120 0246     		mov	r2, r0
 324 0122 0B46     		mov	r3, r1
 325 0124 1046     		mov	r0, r2
 326 0126 1946     		mov	r1, r3
 327 0128 4FF00002 		mov	r2, #0
 328 012c 4FF08043 		mov	r3, #1073741824
 329 0130 FFF7FEFF 		bl	__aeabi_ddiv
 330 0134 0246     		mov	r2, r0
 331 0136 0B46     		mov	r3, r1
 332 0138 6F49     		ldr	r1, .L12+56
 333 013a C1E90823 		strd	r2, [r1, #32]
 101:main.c        **** 
 102:main.c        ****     // Update Robot pose
 103:main.c        ****     robot.theta = calculate_angle_modulo( robot.theta + robot.w * POSE_UPDATE_PERIOD );
 334              		.loc 1 103 0
 335 013e 6E4B     		ldr	r3, .L12+56
 336 0140 D3E90289 		ldrd	r8, [r3, #8]
 337 0144 6C4B     		ldr	r3, .L12+56
 338 0146 D3E90A01 		ldrd	r0, [r3, #40]
 339 014a 5FA3     		adr	r3, .L12+8
 340 014c D3E90023 		ldrd	r2, [r3]
 341 0150 FFF7FEFF 		bl	__aeabi_dmul
 342 0154 0246     		mov	r2, r0
 343 0156 0B46     		mov	r3, r1
 344 0158 4046     		mov	r0, r8
 345 015a 4946     		mov	r1, r9
 346 015c FFF7FEFF 		bl	__aeabi_dadd
 347 0160 0246     		mov	r2, r0
 348 0162 0B46     		mov	r3, r1
 349 0164 1046     		mov	r0, r2
 350 0166 1946     		mov	r1, r3
 351 0168 FFF7FEFF 		bl	calculate_angle_modulo
 352 016c 0246     		mov	r2, r0
 353 016e 0B46     		mov	r3, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 9


 354 0170 6149     		ldr	r1, .L12+56
 355 0172 C1E90223 		strd	r2, [r1, #8]
 104:main.c        ****     robot.x = robot.x + POSE_UPDATE_PERIOD * robot.v * cos(robot.theta);
 356              		.loc 1 104 0
 357 0176 604B     		ldr	r3, .L12+56
 358 0178 D3E90489 		ldrd	r8, [r3, #16]
 359 017c 5E4B     		ldr	r3, .L12+56
 360 017e D3E90801 		ldrd	r0, [r3, #32]
 361 0182 51A3     		adr	r3, .L12+8
 362 0184 D3E90023 		ldrd	r2, [r3]
 363 0188 FFF7FEFF 		bl	__aeabi_dmul
 364 018c 0246     		mov	r2, r0
 365 018e 0B46     		mov	r3, r1
 366 0190 9246     		mov	r10, r2
 367 0192 9B46     		mov	fp, r3
 368 0194 584B     		ldr	r3, .L12+56
 369 0196 D3E90223 		ldrd	r2, [r3, #8]
 370 019a 1046     		mov	r0, r2
 371 019c 1946     		mov	r1, r3
 372 019e FFF7FEFF 		bl	cos
 373 01a2 0246     		mov	r2, r0
 374 01a4 0B46     		mov	r3, r1
 375 01a6 5046     		mov	r0, r10
 376 01a8 5946     		mov	r1, fp
 377 01aa FFF7FEFF 		bl	__aeabi_dmul
 378 01ae 0246     		mov	r2, r0
 379 01b0 0B46     		mov	r3, r1
 380 01b2 4046     		mov	r0, r8
 381 01b4 4946     		mov	r1, r9
 382 01b6 FFF7FEFF 		bl	__aeabi_dadd
 383 01ba 0246     		mov	r2, r0
 384 01bc 0B46     		mov	r3, r1
 385 01be 4E49     		ldr	r1, .L12+56
 386 01c0 C1E90423 		strd	r2, [r1, #16]
 105:main.c        ****     robot.y = robot.y + POSE_UPDATE_PERIOD * robot.v * sin(robot.theta);
 387              		.loc 1 105 0
 388 01c4 4C4B     		ldr	r3, .L12+56
 389 01c6 D3E90689 		ldrd	r8, [r3, #24]
 390 01ca 4B4B     		ldr	r3, .L12+56
 391 01cc D3E90801 		ldrd	r0, [r3, #32]
 392 01d0 3DA3     		adr	r3, .L12+8
 393 01d2 D3E90023 		ldrd	r2, [r3]
 394 01d6 FFF7FEFF 		bl	__aeabi_dmul
 395 01da 0246     		mov	r2, r0
 396 01dc 0B46     		mov	r3, r1
 397 01de 9246     		mov	r10, r2
 398 01e0 9B46     		mov	fp, r3
 399 01e2 454B     		ldr	r3, .L12+56
 400 01e4 D3E90223 		ldrd	r2, [r3, #8]
 401 01e8 1046     		mov	r0, r2
 402 01ea 1946     		mov	r1, r3
 403 01ec FFF7FEFF 		bl	sin
 404 01f0 0246     		mov	r2, r0
 405 01f2 0B46     		mov	r3, r1
 406 01f4 5046     		mov	r0, r10
 407 01f6 5946     		mov	r1, fp
 408 01f8 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 10


 409 01fc 0246     		mov	r2, r0
 410 01fe 0B46     		mov	r3, r1
 411 0200 4046     		mov	r0, r8
 412 0202 4946     		mov	r1, r9
 413 0204 FFF7FEFF 		bl	__aeabi_dadd
 414 0208 0246     		mov	r2, r0
 415 020a 0B46     		mov	r3, r1
 416 020c 3A49     		ldr	r1, .L12+56
 417 020e C1E90623 		strd	r2, [r1, #24]
 106:main.c        ****     
 107:main.c        ****     
 108:main.c        ****     // Perform robot PI control
 109:main.c        ****     long double error = robot.desired_theta - robot.theta;  
 418              		.loc 1 109 0
 419 0212 394B     		ldr	r3, .L12+56
 420 0214 D3E90E01 		ldrd	r0, [r3, #56]
 421 0218 374B     		ldr	r3, .L12+56
 422 021a D3E90223 		ldrd	r2, [r3, #8]
 423 021e FFF7FEFF 		bl	__aeabi_dsub
 424 0222 0246     		mov	r2, r0
 425 0224 0B46     		mov	r3, r1
 426 0226 C7E90623 		strd	r2, [r7, #24]
 110:main.c        ****     if( error > M_PI ) {     // TODO: give this more thought. Want the robot to choose direction of
 427              		.loc 1 110 0
 428 022a 2BA3     		adr	r3, .L12+24
 429 022c D3E90023 		ldrd	r2, [r3]
 430 0230 D7E90601 		ldrd	r0, [r7, #24]
 431 0234 FFF7FEFF 		bl	__aeabi_dcmpgt
 432 0238 0346     		mov	r3, r0
 433 023a 002B     		cmp	r3, #0
 434 023c 0AD0     		beq	.L6
 111:main.c        ****         error = error - M_TWOPI;
 435              		.loc 1 111 0
 436 023e 20A3     		adr	r3, .L12
 437 0240 D3E90023 		ldrd	r2, [r3]
 438 0244 D7E90601 		ldrd	r0, [r7, #24]
 439 0248 FFF7FEFF 		bl	__aeabi_dsub
 440 024c 0246     		mov	r2, r0
 441 024e 0B46     		mov	r3, r1
 442 0250 C7E90623 		strd	r2, [r7, #24]
 443              	.L6:
 112:main.c        ****     }
 113:main.c        ****     if( error < -M_PI) {
 444              		.loc 1 113 0
 445 0254 22A3     		adr	r3, .L12+32
 446 0256 D3E90023 		ldrd	r2, [r3]
 447 025a D7E90601 		ldrd	r0, [r7, #24]
 448 025e FFF7FEFF 		bl	__aeabi_dcmplt
 449 0262 0346     		mov	r3, r0
 450 0264 002B     		cmp	r3, #0
 451 0266 0AD0     		beq	.L8
 114:main.c        ****         error = error + M_TWOPI;
 452              		.loc 1 114 0
 453 0268 15A3     		adr	r3, .L12
 454 026a D3E90023 		ldrd	r2, [r3]
 455 026e D7E90601 		ldrd	r0, [r7, #24]
 456 0272 FFF7FEFF 		bl	__aeabi_dadd
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 11


 457 0276 0246     		mov	r2, r0
 458 0278 0B46     		mov	r3, r1
 459 027a C7E90623 		strd	r2, [r7, #24]
 460              	.L8:
 115:main.c        ****     }
 116:main.c        ****     
 117:main.c        ****     // Calculate scaled velocity depending on how much we have to rotate (makes robot turn on spot 
 118:main.c        ****     double scaled_V = robot.desired_v *( 1 - logl( (M_E - 1) * fabsl(error) / M_PI + 1 ));
 461              		.loc 1 118 0
 462 027e 1E4B     		ldr	r3, .L12+56
 463 0280 D3E90C89 		ldrd	r8, [r3, #48]
 464 0284 BC69     		ldr	r4, [r7, #24]
 465 0286 FB69     		ldr	r3, [r7, #28]
 466 0288 23F00045 		bic	r5, r3, #-2147483648
 467 028c 16A3     		adr	r3, .L12+40
 468 028e D3E90023 		ldrd	r2, [r3]
 469 0292 2046     		mov	r0, r4
 470 0294 2946     		mov	r1, r5
 471 0296 FFF7FEFF 		bl	__aeabi_dmul
 472 029a 0346     		mov	r3, r0
 473 029c 0C46     		mov	r4, r1
 474 029e 1846     		mov	r0, r3
 475 02a0 2146     		mov	r1, r4
 476 02a2 0DA3     		adr	r3, .L12+24
 477 02a4 D3E90023 		ldrd	r2, [r3]
 478 02a8 FFF7FEFF 		bl	__aeabi_ddiv
 479 02ac 0346     		mov	r3, r0
 480 02ae 0C46     		mov	r4, r1
 481 02b0 1846     		mov	r0, r3
 482 02b2 2146     		mov	r1, r4
 483 02b4 4FF00002 		mov	r2, #0
 484 02b8 104B     		ldr	r3, .L12+60
 485 02ba FFF7FEFF 		bl	__aeabi_dadd
 486 02be 1FE0     		b	.L13
 487              	.L14:
 488              		.align	3
 489              	.L12:
 490 02c0 182D4454 		.word	1413754136
 491 02c4 FB211940 		.word	1075388923
 492 02c8 7B14AE47 		.word	1202590843
 493 02cc E17A943F 		.word	1066695393
 494 02d0 A4703D0A 		.word	171798692
 495 02d4 D70FAC40 		.word	1085018071
 496 02d8 182D4454 		.word	1413754136
 497 02dc FB210940 		.word	1074340347
 498 02e0 182D4454 		.word	1413754136
 499 02e4 FB2109C0 		.word	-1073143301
 500 02e8 D2AE2816 		.word	371764946
 501 02ec 157EFB3F 		.word	1073446421
 502 02f0 00000000 		.word	right_motor
 503 02f4 00000000 		.word	left_motor
 504 02f8 00000000 		.word	robot
 505 02fc 0000F03F 		.word	1072693248
 506              	.L13:
 507 0300 0346     		mov	r3, r0
 508 0302 0C46     		mov	r4, r1
 509 0304 1846     		mov	r0, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 12


 510 0306 2146     		mov	r1, r4
 511 0308 FFF7FEFF 		bl	logl
 512 030c 0346     		mov	r3, r0
 513 030e 0C46     		mov	r4, r1
 514 0310 1A46     		mov	r2, r3
 515 0312 2346     		mov	r3, r4
 516 0314 4FF00000 		mov	r0, #0
 517 0318 4C49     		ldr	r1, .L15
 518 031a FFF7FEFF 		bl	__aeabi_dsub
 519 031e 0346     		mov	r3, r0
 520 0320 0C46     		mov	r4, r1
 521 0322 1A46     		mov	r2, r3
 522 0324 2346     		mov	r3, r4
 523 0326 4046     		mov	r0, r8
 524 0328 4946     		mov	r1, r9
 525 032a FFF7FEFF 		bl	__aeabi_dmul
 526 032e 0346     		mov	r3, r0
 527 0330 0C46     		mov	r4, r1
 528 0332 C7E90234 		strd	r3, [r7, #8]
 119:main.c        ****     
 120:main.c        ****     // Update motor tangential velocity based on error
 121:main.c        ****     robot.int_error = robot.int_error + error;
 529              		.loc 1 121 0
 530 0336 464B     		ldr	r3, .L15+4
 531 0338 D3E91401 		ldrd	r0, [r3, #80]
 532 033c D7E90623 		ldrd	r2, [r7, #24]
 533 0340 FFF7FEFF 		bl	__aeabi_dadd
 534 0344 0346     		mov	r3, r0
 535 0346 0C46     		mov	r4, r1
 536 0348 414A     		ldr	r2, .L15+4
 537 034a C2E91434 		strd	r3, [r2, #80]
 122:main.c        ****     long double new_w = robot.Kp * error + robot.Ki * robot.int_error;
 538              		.loc 1 122 0
 539 034e 404B     		ldr	r3, .L15+4
 540 0350 D3E91201 		ldrd	r0, [r3, #72]
 541 0354 D7E90623 		ldrd	r2, [r7, #24]
 542 0358 FFF7FEFF 		bl	__aeabi_dmul
 543 035c 0346     		mov	r3, r0
 544 035e 0C46     		mov	r4, r1
 545 0360 1D46     		mov	r5, r3
 546 0362 2646     		mov	r6, r4
 547 0364 3A4B     		ldr	r3, .L15+4
 548 0366 D3E91001 		ldrd	r0, [r3, #64]
 549 036a 394B     		ldr	r3, .L15+4
 550 036c 03F15004 		add	r4, r3, #80
 551 0370 D4E90034 		ldrd	r3, [r4]
 552 0374 1A46     		mov	r2, r3
 553 0376 2346     		mov	r3, r4
 554 0378 FFF7FEFF 		bl	__aeabi_dmul
 555 037c 0346     		mov	r3, r0
 556 037e 0C46     		mov	r4, r1
 557 0380 1A46     		mov	r2, r3
 558 0382 2346     		mov	r3, r4
 559 0384 2846     		mov	r0, r5
 560 0386 3146     		mov	r1, r6
 561 0388 FFF7FEFF 		bl	__aeabi_dadd
 562 038c 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 13


 563 038e 0C46     		mov	r4, r1
 564 0390 C7E90034 		strd	r3, [r7]
 123:main.c        ****     right_motor.desired_w = (scaled_V + new_w * robot.axle_width / 2) / right_motor.wheel_radius;
 565              		.loc 1 123 0
 566 0394 2E4B     		ldr	r3, .L15+4
 567 0396 D3E90001 		ldrd	r0, [r3]
 568 039a D7E90023 		ldrd	r2, [r7]
 569 039e FFF7FEFF 		bl	__aeabi_dmul
 570 03a2 0346     		mov	r3, r0
 571 03a4 0C46     		mov	r4, r1
 572 03a6 1846     		mov	r0, r3
 573 03a8 2146     		mov	r1, r4
 574 03aa 4FF00002 		mov	r2, #0
 575 03ae 4FF08043 		mov	r3, #1073741824
 576 03b2 FFF7FEFF 		bl	__aeabi_ddiv
 577 03b6 0346     		mov	r3, r0
 578 03b8 0C46     		mov	r4, r1
 579 03ba 1846     		mov	r0, r3
 580 03bc 2146     		mov	r1, r4
 581 03be D7E90223 		ldrd	r2, [r7, #8]
 582 03c2 FFF7FEFF 		bl	__aeabi_dadd
 583 03c6 0346     		mov	r3, r0
 584 03c8 0C46     		mov	r4, r1
 585 03ca 1846     		mov	r0, r3
 586 03cc 2146     		mov	r1, r4
 587 03ce 214B     		ldr	r3, .L15+8
 588 03d0 03F13804 		add	r4, r3, #56
 589 03d4 D4E90034 		ldrd	r3, [r4]
 590 03d8 1A46     		mov	r2, r3
 591 03da 2346     		mov	r3, r4
 592 03dc FFF7FEFF 		bl	__aeabi_ddiv
 593 03e0 0346     		mov	r3, r0
 594 03e2 0C46     		mov	r4, r1
 595 03e4 1B4A     		ldr	r2, .L15+8
 596 03e6 C2E90834 		strd	r3, [r2, #32]
 124:main.c        ****     left_motor.desired_w = (scaled_V - new_w * robot.axle_width / 2) / left_motor.wheel_radius;   
 597              		.loc 1 124 0
 598 03ea 194B     		ldr	r3, .L15+4
 599 03ec D3E90001 		ldrd	r0, [r3]
 600 03f0 D7E90023 		ldrd	r2, [r7]
 601 03f4 FFF7FEFF 		bl	__aeabi_dmul
 602 03f8 0346     		mov	r3, r0
 603 03fa 0C46     		mov	r4, r1
 604 03fc 1846     		mov	r0, r3
 605 03fe 2146     		mov	r1, r4
 606 0400 4FF00002 		mov	r2, #0
 607 0404 4FF08043 		mov	r3, #1073741824
 608 0408 FFF7FEFF 		bl	__aeabi_ddiv
 609 040c 0346     		mov	r3, r0
 610 040e 0C46     		mov	r4, r1
 611 0410 1A46     		mov	r2, r3
 612 0412 2346     		mov	r3, r4
 613 0414 D7E90201 		ldrd	r0, [r7, #8]
 614 0418 FFF7FEFF 		bl	__aeabi_dsub
 615 041c 0346     		mov	r3, r0
 616 041e 0C46     		mov	r4, r1
 617 0420 1846     		mov	r0, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 14


 618 0422 2146     		mov	r1, r4
 619 0424 0C4B     		ldr	r3, .L15+12
 620 0426 03F13804 		add	r4, r3, #56
 621 042a D4E90034 		ldrd	r3, [r4]
 622 042e 1A46     		mov	r2, r3
 623 0430 2346     		mov	r3, r4
 624 0432 FFF7FEFF 		bl	__aeabi_ddiv
 625 0436 0346     		mov	r3, r0
 626 0438 0C46     		mov	r4, r1
 627 043a 074A     		ldr	r2, .L15+12
 628 043c C2E90834 		strd	r3, [r2, #32]
 125:main.c        ****     
 126:main.c        **** }
 629              		.loc 1 126 0
 630 0440 00BF     		nop
 631 0442 2437     		adds	r7, r7, #36
 632              		.cfi_def_cfa_offset 36
 633 0444 BD46     		mov	sp, r7
 634              		.cfi_def_cfa_register 13
 635              		@ sp needed
 636 0446 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 637              	.L16:
 638 044a 00BF     		.align	2
 639              	.L15:
 640 044c 0000F03F 		.word	1072693248
 641 0450 00000000 		.word	robot
 642 0454 00000000 		.word	right_motor
 643 0458 00000000 		.word	left_motor
 644              		.cfi_endproc
 645              	.LFE65:
 646              		.size	Pose_Update_Int_Handler, .-Pose_Update_Int_Handler
 647              		.section	.text.Motor_PI_Int_Handler,"ax",%progbits
 648              		.align	2
 649              		.global	Motor_PI_Int_Handler
 650              		.thumb
 651              		.thumb_func
 652              		.type	Motor_PI_Int_Handler, %function
 653              	Motor_PI_Int_Handler:
 654              	.LFB66:
 127:main.c        **** 
 128:main.c        **** /* Interrupt for motor PI error handler and drive. */
 129:main.c        **** CY_ISR( Motor_PI_Int_Handler ) {
 655              		.loc 1 129 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 8
 658              		@ frame_needed = 1, uses_anonymous_args = 0
 659 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 660              		.cfi_def_cfa_offset 20
 661              		.cfi_offset 4, -20
 662              		.cfi_offset 5, -16
 663              		.cfi_offset 6, -12
 664              		.cfi_offset 7, -8
 665              		.cfi_offset 14, -4
 666 0002 83B0     		sub	sp, sp, #12
 667              		.cfi_def_cfa_offset 32
 668 0004 00AF     		add	r7, sp, #0
 669              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 15


 130:main.c        ****     long double error = left_motor.desired_w - left_motor.w;
 670              		.loc 1 130 0
 671 0006 514B     		ldr	r3, .L18
 672 0008 D3E90801 		ldrd	r0, [r3, #32]
 673 000c 4F4B     		ldr	r3, .L18
 674 000e 03F11004 		add	r4, r3, #16
 675 0012 D4E90034 		ldrd	r3, [r4]
 676 0016 1A46     		mov	r2, r3
 677 0018 2346     		mov	r3, r4
 678 001a FFF7FEFF 		bl	__aeabi_dsub
 679 001e 0346     		mov	r3, r0
 680 0020 0C46     		mov	r4, r1
 681 0022 C7E90034 		strd	r3, [r7]
 131:main.c        ****     left_motor.int_error  = left_motor.int_error + error;
 682              		.loc 1 131 0
 683 0026 494B     		ldr	r3, .L18
 684 0028 D3E90201 		ldrd	r0, [r3, #8]
 685 002c D7E90023 		ldrd	r2, [r7]
 686 0030 FFF7FEFF 		bl	__aeabi_dadd
 687 0034 0346     		mov	r3, r0
 688 0036 0C46     		mov	r4, r1
 689 0038 444A     		ldr	r2, .L18
 690 003a C2E90234 		strd	r3, [r2, #8]
 132:main.c        ****     left_motor.duty_cycle = left_motor.duty_cycle + left_motor.Kp * error + left_motor.Ki * left_mo
 691              		.loc 1 132 0
 692 003e 434B     		ldr	r3, .L18
 693 0040 D3E90045 		ldrd	r4, [r3]
 694 0044 414B     		ldr	r3, .L18
 695 0046 D3E90C01 		ldrd	r0, [r3, #48]
 696 004a D7E90023 		ldrd	r2, [r7]
 697 004e FFF7FEFF 		bl	__aeabi_dmul
 698 0052 0246     		mov	r2, r0
 699 0054 0B46     		mov	r3, r1
 700 0056 2046     		mov	r0, r4
 701 0058 2946     		mov	r1, r5
 702 005a FFF7FEFF 		bl	__aeabi_dadd
 703 005e 0346     		mov	r3, r0
 704 0060 0C46     		mov	r4, r1
 705 0062 1D46     		mov	r5, r3
 706 0064 2646     		mov	r6, r4
 707 0066 394B     		ldr	r3, .L18
 708 0068 D3E90A01 		ldrd	r0, [r3, #40]
 709 006c 374B     		ldr	r3, .L18
 710 006e 03F10804 		add	r4, r3, #8
 711 0072 D4E90034 		ldrd	r3, [r4]
 712 0076 1A46     		mov	r2, r3
 713 0078 2346     		mov	r3, r4
 714 007a FFF7FEFF 		bl	__aeabi_dmul
 715 007e 0346     		mov	r3, r0
 716 0080 0C46     		mov	r4, r1
 717 0082 1A46     		mov	r2, r3
 718 0084 2346     		mov	r3, r4
 719 0086 2846     		mov	r0, r5
 720 0088 3146     		mov	r1, r6
 721 008a FFF7FEFF 		bl	__aeabi_dadd
 722 008e 0346     		mov	r3, r0
 723 0090 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 16


 724 0092 2E4A     		ldr	r2, .L18
 725 0094 C2E90034 		strd	r3, [r2]
 133:main.c        ****     Drive_Left_Motor(left_motor.duty_cycle);
 726              		.loc 1 133 0
 727 0098 2C4B     		ldr	r3, .L18
 728 009a 18CB     		ldmia	r3, {r3-r4}
 729 009c 1846     		mov	r0, r3
 730 009e 2146     		mov	r1, r4
 731 00a0 FFF7FEFF 		bl	Drive_Left_Motor
 134:main.c        ****     
 135:main.c        ****     error = right_motor.desired_w - right_motor.w;
 732              		.loc 1 135 0
 733 00a4 2A4B     		ldr	r3, .L18+4
 734 00a6 D3E90801 		ldrd	r0, [r3, #32]
 735 00aa 294B     		ldr	r3, .L18+4
 736 00ac 03F11004 		add	r4, r3, #16
 737 00b0 D4E90034 		ldrd	r3, [r4]
 738 00b4 1A46     		mov	r2, r3
 739 00b6 2346     		mov	r3, r4
 740 00b8 FFF7FEFF 		bl	__aeabi_dsub
 741 00bc 0346     		mov	r3, r0
 742 00be 0C46     		mov	r4, r1
 743 00c0 C7E90034 		strd	r3, [r7]
 136:main.c        ****     right_motor.int_error  = right_motor.int_error + error;
 744              		.loc 1 136 0
 745 00c4 224B     		ldr	r3, .L18+4
 746 00c6 D3E90201 		ldrd	r0, [r3, #8]
 747 00ca D7E90023 		ldrd	r2, [r7]
 748 00ce FFF7FEFF 		bl	__aeabi_dadd
 749 00d2 0346     		mov	r3, r0
 750 00d4 0C46     		mov	r4, r1
 751 00d6 1E4A     		ldr	r2, .L18+4
 752 00d8 C2E90234 		strd	r3, [r2, #8]
 137:main.c        ****     right_motor.duty_cycle = right_motor.duty_cycle + right_motor.Kp*error + right_motor.Ki * right
 753              		.loc 1 137 0
 754 00dc 1C4B     		ldr	r3, .L18+4
 755 00de D3E90045 		ldrd	r4, [r3]
 756 00e2 1B4B     		ldr	r3, .L18+4
 757 00e4 D3E90C01 		ldrd	r0, [r3, #48]
 758 00e8 D7E90023 		ldrd	r2, [r7]
 759 00ec FFF7FEFF 		bl	__aeabi_dmul
 760 00f0 0246     		mov	r2, r0
 761 00f2 0B46     		mov	r3, r1
 762 00f4 2046     		mov	r0, r4
 763 00f6 2946     		mov	r1, r5
 764 00f8 FFF7FEFF 		bl	__aeabi_dadd
 765 00fc 0346     		mov	r3, r0
 766 00fe 0C46     		mov	r4, r1
 767 0100 1D46     		mov	r5, r3
 768 0102 2646     		mov	r6, r4
 769 0104 124B     		ldr	r3, .L18+4
 770 0106 D3E90A01 		ldrd	r0, [r3, #40]
 771 010a 114B     		ldr	r3, .L18+4
 772 010c 03F10804 		add	r4, r3, #8
 773 0110 D4E90034 		ldrd	r3, [r4]
 774 0114 1A46     		mov	r2, r3
 775 0116 2346     		mov	r3, r4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 17


 776 0118 FFF7FEFF 		bl	__aeabi_dmul
 777 011c 0346     		mov	r3, r0
 778 011e 0C46     		mov	r4, r1
 779 0120 1A46     		mov	r2, r3
 780 0122 2346     		mov	r3, r4
 781 0124 2846     		mov	r0, r5
 782 0126 3146     		mov	r1, r6
 783 0128 FFF7FEFF 		bl	__aeabi_dadd
 784 012c 0346     		mov	r3, r0
 785 012e 0C46     		mov	r4, r1
 786 0130 074A     		ldr	r2, .L18+4
 787 0132 C2E90034 		strd	r3, [r2]
 138:main.c        ****     Drive_Right_Motor(right_motor.duty_cycle);
 788              		.loc 1 138 0
 789 0136 064B     		ldr	r3, .L18+4
 790 0138 18CB     		ldmia	r3, {r3-r4}
 791 013a 1846     		mov	r0, r3
 792 013c 2146     		mov	r1, r4
 793 013e FFF7FEFF 		bl	Drive_Right_Motor
 139:main.c        **** 
 140:main.c        **** }
 794              		.loc 1 140 0
 795 0142 00BF     		nop
 796 0144 0C37     		adds	r7, r7, #12
 797              		.cfi_def_cfa_offset 20
 798 0146 BD46     		mov	sp, r7
 799              		.cfi_def_cfa_register 13
 800              		@ sp needed
 801 0148 F0BD     		pop	{r4, r5, r6, r7, pc}
 802              	.L19:
 803 014a 00BF     		.align	2
 804              	.L18:
 805 014c 00000000 		.word	left_motor
 806 0150 00000000 		.word	right_motor
 807              		.cfi_endproc
 808              	.LFE66:
 809              		.size	Motor_PI_Int_Handler, .-Motor_PI_Int_Handler
 810              		.section	.text.Button_Int_Handler,"ax",%progbits
 811              		.align	2
 812              		.global	Button_Int_Handler
 813              		.thumb
 814              		.thumb_func
 815              		.type	Button_Int_Handler, %function
 816              	Button_Int_Handler:
 817              	.LFB67:
 141:main.c        **** 
 142:main.c        **** // Button Interrupt Handler
 143:main.c        **** CY_ISR( Button_Int_Handler ) {
 818              		.loc 1 143 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 0
 821              		@ frame_needed = 1, uses_anonymous_args = 0
 822              		@ link register save eliminated.
 823 0000 80B4     		push	{r7}
 824              		.cfi_def_cfa_offset 4
 825              		.cfi_offset 7, -4
 826 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 18


 827              		.cfi_def_cfa_register 7
 144:main.c        ****     pbutton = !pbutton;
 828              		.loc 1 144 0
 829 0004 064B     		ldr	r3, .L21
 830 0006 1B68     		ldr	r3, [r3]
 831 0008 002B     		cmp	r3, #0
 832 000a 0CBF     		ite	eq
 833 000c 0123     		moveq	r3, #1
 834 000e 0023     		movne	r3, #0
 835 0010 DBB2     		uxtb	r3, r3
 836 0012 1A46     		mov	r2, r3
 837 0014 024B     		ldr	r3, .L21
 838 0016 1A60     		str	r2, [r3]
 145:main.c        **** }
 839              		.loc 1 145 0
 840 0018 00BF     		nop
 841 001a BD46     		mov	sp, r7
 842              		.cfi_def_cfa_register 13
 843              		@ sp needed
 844 001c 80BC     		pop	{r7}
 845              		.cfi_restore 7
 846              		.cfi_def_cfa_offset 0
 847 001e 7047     		bx	lr
 848              	.L22:
 849              		.align	2
 850              	.L21:
 851 0020 00000000 		.word	pbutton
 852              		.cfi_endproc
 853              	.LFE67:
 854              		.size	Button_Int_Handler, .-Button_Int_Handler
 855              		.global	__aeabi_i2f
 856              		.global	__aeabi_fcmplt
 857              		.global	__aeabi_fdiv
 858              		.global	__aeabi_f2d
 859              		.global	__aeabi_d2f
 860              		.global	__aeabi_f2iz
 861              		.global	__aeabi_fsub
 862              		.global	__aeabi_fcmpgt
 863              		.global	__aeabi_fmul
 864              		.global	__aeabi_fadd
 865              		.section	.rodata
 866              		.align	2
 867              	.LC0:
 868 0010 00000000 		.word	0
 869 0014 5A000000 		.word	90
 870 0018 5A000000 		.word	90
 871 001c 5A000000 		.word	90
 872              		.section	.text.main,"ax",%progbits
 873              		.align	2
 874              		.global	main
 875              		.thumb
 876              		.thumb_func
 877              		.type	main, %function
 878              	main:
 879              	.LFB68:
 146:main.c        **** 
 147:main.c        **** 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 19


 148:main.c        **** 
 149:main.c        **** int main(void)
 150:main.c        **** {
 880              		.loc 1 150 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 168
 883              		@ frame_needed = 1, uses_anonymous_args = 0
 884 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 885              		.cfi_def_cfa_offset 28
 886              		.cfi_offset 4, -28
 887              		.cfi_offset 5, -24
 888              		.cfi_offset 6, -20
 889              		.cfi_offset 7, -16
 890              		.cfi_offset 8, -12
 891              		.cfi_offset 9, -8
 892              		.cfi_offset 14, -4
 893 0004 B7B0     		sub	sp, sp, #220
 894              		.cfi_def_cfa_offset 248
 895 0006 0CAF     		add	r7, sp, #48
 896              		.cfi_def_cfa 7, 200
 151:main.c        ****     CyGlobalIntEnable;
 897              		.loc 1 151 0
 898              		.syntax unified
 899              	@ 151 "main.c" 1
 900 0008 62B6     		CPSIE   i
 901              	@ 0 "" 2
 152:main.c        ****     
 153:main.c        ****     // Registration of Timer ISR
 154:main.c        ****     Timer_Echo_Int_StartEx( Timer_Int_Handler );
 902              		.loc 1 154 0
 903              		.thumb
 904              		.syntax unified
 905 000a B348     		ldr	r0, .L71+48
 906 000c FFF7FEFF 		bl	Timer_Echo_Int_StartEx
 155:main.c        ****     Pose_Update_Int_StartEx( Pose_Update_Int_Handler );
 907              		.loc 1 155 0
 908 0010 B248     		ldr	r0, .L71+52
 909 0012 FFF7FEFF 		bl	Pose_Update_Int_StartEx
 156:main.c        ****     Motor_PI_Int_StartEx( Motor_PI_Int_Handler );
 910              		.loc 1 156 0
 911 0016 B248     		ldr	r0, .L71+56
 912 0018 FFF7FEFF 		bl	Motor_PI_Int_StartEx
 157:main.c        ****     Button_Int_StartEx( Button_Int_Handler );
 913              		.loc 1 157 0
 914 001c B148     		ldr	r0, .L71+60
 915 001e FFF7FEFF 		bl	Button_Int_StartEx
 158:main.c        ****     
 159:main.c        ****     
 160:main.c        ****     // Start up code - enable UART, PWM and Timer used for ultrasonic module
 161:main.c        ****     UART_Start();
 916              		.loc 1 161 0
 917 0022 FFF7FEFF 		bl	UART_Start
 162:main.c        ****     Timer_Echo_Start();
 918              		.loc 1 162 0
 919 0026 FFF7FEFF 		bl	Timer_Echo_Start
 163:main.c        ****     PWM_Trigger_Start();
 920              		.loc 1 163 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 20


 921 002a FFF7FEFF 		bl	PWM_Trigger_Start
 164:main.c        ****     QuadDec_L_Start();
 922              		.loc 1 164 0
 923 002e FFF7FEFF 		bl	QuadDec_L_Start
 165:main.c        ****     PWM_Motor_L_Start();
 924              		.loc 1 165 0
 925 0032 FFF7FEFF 		bl	PWM_Motor_L_Start
 166:main.c        ****     QuadDec_R_Start();
 926              		.loc 1 166 0
 927 0036 FFF7FEFF 		bl	QuadDec_R_Start
 167:main.c        ****     PWM_Motor_R_Start();
 928              		.loc 1 167 0
 929 003a FFF7FEFF 		bl	PWM_Motor_R_Start
 168:main.c        ****     Timer_Avoidance_Start();
 930              		.loc 1 168 0
 931 003e FFF7FEFF 		bl	Timer_Avoidance_Start
 169:main.c        ****     PWM_ServoDir_Start();
 932              		.loc 1 169 0
 933 0042 FFF7FEFF 		bl	PWM_ServoDir_Start
 170:main.c        ****     PWM_1_Start();
 934              		.loc 1 170 0
 935 0046 FFF7FEFF 		bl	PWM_1_Start
 171:main.c        ****     
 172:main.c        ****     Timer_Avoidance_WriteCounter(60000); // Cause robot to start moving immediately
 936              		.loc 1 172 0
 937 004a 4EF66020 		movw	r0, #60000
 938 004e FFF7FEFF 		bl	Timer_Avoidance_WriteCounter
 173:main.c        ****     
 174:main.c        ****     // Define and initialise motors
 175:main.c        ****     long double wheel_r_scale = 0.9378;
 939              		.loc 1 175 0
 940 0052 95A4     		adr	r4, .L71
 941 0054 D4E90034 		ldrd	r3, [r4]
 942 0058 C7E91E34 		strd	r3, [r7, #120]
 176:main.c        ****     long double motor_Ki = 3e-6;     // TODO: Determine good value
 943              		.loc 1 176 0
 944 005c 94A4     		adr	r4, .L71+8
 945 005e D4E90034 		ldrd	r3, [r4]
 946 0062 C7E91C34 		strd	r3, [r7, #112]
 177:main.c        ****     long double motor_Kp = 0.0025;   // TODO: Determine good value
 947              		.loc 1 177 0
 948 0066 94A4     		adr	r4, .L71+16
 949 0068 D4E90034 		ldrd	r3, [r4]
 950 006c C7E91A34 		strd	r3, [r7, #104]
 178:main.c        ****     
 179:main.c        ****     motor_create(&left_motor, wheel_r_scale, motor_Ki, motor_Kp);
 951              		.loc 1 179 0
 952 0070 D7E91A34 		ldrd	r3, [r7, #104]
 953 0074 CDE90234 		strd	r3, [sp, #8]
 954 0078 D7E91C34 		ldrd	r3, [r7, #112]
 955 007c CDE90034 		strd	r3, [sp]
 956 0080 D7E91E23 		ldrd	r2, [r7, #120]
 957 0084 9848     		ldr	r0, .L71+64
 958 0086 FFF7FEFF 		bl	motor_create
 180:main.c        ****     motor_create(&right_motor, wheel_r_scale, motor_Ki, motor_Kp);
 959              		.loc 1 180 0
 960 008a D7E91A34 		ldrd	r3, [r7, #104]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 21


 961 008e CDE90234 		strd	r3, [sp, #8]
 962 0092 D7E91C34 		ldrd	r3, [r7, #112]
 963 0096 CDE90034 		strd	r3, [sp]
 964 009a D7E91E23 		ldrd	r2, [r7, #120]
 965 009e 9348     		ldr	r0, .L71+68
 966 00a0 FFF7FEFF 		bl	motor_create
 181:main.c        ****     
 182:main.c        ****     // Define and initialise robot 
 183:main.c        ****     long double robot_axle_width = 0.936*22.5;  // TODO: get accurate measurement
 967              		.loc 1 183 0
 968 00a4 86A4     		adr	r4, .L71+24
 969 00a6 D4E90034 		ldrd	r3, [r4]
 970 00aa C7E91834 		strd	r3, [r7, #96]
 184:main.c        ****     long double robot_Ki = 3e-7;    // TODO: Determine good value
 971              		.loc 1 184 0
 972 00ae 86A4     		adr	r4, .L71+32
 973 00b0 D4E90034 		ldrd	r3, [r4]
 974 00b4 C7E91634 		strd	r3, [r7, #88]
 185:main.c        ****     long double robot_Kp = 1.75;     // was previously 0.75 before changing for MS1
 975              		.loc 1 185 0
 976 00b8 4FF00003 		mov	r3, #0
 977 00bc 8C4C     		ldr	r4, .L71+72
 978 00be C7E91434 		strd	r3, [r7, #80]
 186:main.c        ****     long double min_distance = 5;   // Minimum distance between robot position and goal
 979              		.loc 1 186 0
 980 00c2 4FF00003 		mov	r3, #0
 981 00c6 8B4C     		ldr	r4, .L71+76
 982 00c8 C7E91234 		strd	r3, [r7, #72]
 187:main.c        **** 
 188:main.c        **** 
 189:main.c        ****     /*======================= ROBOT STARTING POSITION =======================*/
 190:main.c        ****     long double start_x = 0;    // Starting x, duh!
 983              		.loc 1 190 0
 984 00cc 4FF00003 		mov	r3, #0
 985 00d0 4FF00004 		mov	r4, #0
 986 00d4 C7E91034 		strd	r3, [r7, #64]
 191:main.c        ****     long double start_y = 0;    // Starting y, duh!
 987              		.loc 1 191 0
 988 00d8 4FF00003 		mov	r3, #0
 989 00dc 4FF00004 		mov	r4, #0
 990 00e0 C7E90E34 		strd	r3, [r7, #56]
 192:main.c        ****     long double start_th = M_PI/2;
 991              		.loc 1 192 0
 992 00e4 7AA4     		adr	r4, .L71+40
 993 00e6 D4E90034 		ldrd	r3, [r4]
 994 00ea C7E90C34 		strd	r3, [r7, #48]
 193:main.c        ****     /*=======================================================================*/
 194:main.c        **** 
 195:main.c        **** 
 196:main.c        ****     robot_create(&robot, robot_axle_width, robot_Ki, robot_Kp, min_distance, start_x, start_y, star
 995              		.loc 1 196 0
 996 00ee D7E90C34 		ldrd	r3, [r7, #48]
 997 00f2 CDE90A34 		strd	r3, [sp, #40]
 998 00f6 D7E90E34 		ldrd	r3, [r7, #56]
 999 00fa CDE90834 		strd	r3, [sp, #32]
 1000 00fe D7E91034 		ldrd	r3, [r7, #64]
 1001 0102 CDE90634 		strd	r3, [sp, #24]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 22


 1002 0106 D7E91234 		ldrd	r3, [r7, #72]
 1003 010a CDE90434 		strd	r3, [sp, #16]
 1004 010e D7E91434 		ldrd	r3, [r7, #80]
 1005 0112 CDE90234 		strd	r3, [sp, #8]
 1006 0116 D7E91634 		ldrd	r3, [r7, #88]
 1007 011a CDE90034 		strd	r3, [sp]
 1008 011e D7E91823 		ldrd	r2, [r7, #96]
 1009 0122 7548     		ldr	r0, .L71+80
 1010 0124 FFF7FEFF 		bl	robot_create
 197:main.c        **** 
 198:main.c        ****     // Define sensor directions (start from front sensor, then move clockwise)
 199:main.c        ****     sensors.direction[0] = 0;
 1011              		.loc 1 199 0
 1012 0128 744B     		ldr	r3, .L71+84
 1013 012a 0022     		movs	r2, #0
 1014 012c 1A60     		str	r2, [r3]
 200:main.c        ****     sensors.direction[1] = 30;
 1015              		.loc 1 200 0
 1016 012e 734B     		ldr	r3, .L71+84
 1017 0130 1E22     		movs	r2, #30
 1018 0132 5A60     		str	r2, [r3, #4]
 201:main.c        ****     sensors.direction[2] = 90;
 1019              		.loc 1 201 0
 1020 0134 714B     		ldr	r3, .L71+84
 1021 0136 5A22     		movs	r2, #90
 1022 0138 9A60     		str	r2, [r3, #8]
 202:main.c        ****     sensors.direction[3] = 270;
 1023              		.loc 1 202 0
 1024 013a 704B     		ldr	r3, .L71+84
 1025 013c 4FF48772 		mov	r2, #270
 1026 0140 DA60     		str	r2, [r3, #12]
 203:main.c        ****     sensors.direction[4] = 330;
 1027              		.loc 1 203 0
 1028 0142 6E4B     		ldr	r3, .L71+84
 1029 0144 4FF4A572 		mov	r2, #330
 1030 0148 1A61     		str	r2, [r3, #16]
 204:main.c        **** 
 205:main.c        ****     /*========================= M1: Goal Definition =========================*/
 206:main.c        ****     // Goals should be defined where the bin is
 207:main.c        ****     int n_goals = 2;    // Number of goals, duh!
 1031              		.loc 1 207 0
 1032 014a 0223     		movs	r3, #2
 1033 014c FB62     		str	r3, [r7, #44]
 208:main.c        ****     int goals[4] = {0, 90, 90, 90};    // Coordinates of goals [x1, y1, x2, y2, ..., xn, yn]
 1034              		.loc 1 208 0
 1035 014e 6C4B     		ldr	r3, .L71+88
 1036 0150 3C46     		mov	r4, r7
 1037 0152 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 1038 0154 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 209:main.c        ****     robot.goal_x = 0;   // Update robot x goal
 1039              		.loc 1 209 0
 1040 0158 674A     		ldr	r2, .L71+80
 1041 015a 4FF00003 		mov	r3, #0
 1042 015e 4FF00004 		mov	r4, #0
 1043 0162 C2E91634 		strd	r3, [r2, #88]
 210:main.c        ****     robot.goal_y = 0;   // Update robot y goal
 1044              		.loc 1 210 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 23


 1045 0166 644A     		ldr	r2, .L71+80
 1046 0168 4FF00003 		mov	r3, #0
 1047 016c 4FF00004 		mov	r4, #0
 1048 0170 C2E91834 		strd	r3, [r2, #96]
 211:main.c        ****     int goals_reached = 0;  // Counter for number of goas reached, duh!
 1049              		.loc 1 211 0
 1050 0174 0023     		movs	r3, #0
 1051 0176 BB62     		str	r3, [r7, #40]
 212:main.c        ****     /*=======================================================================*/    
 213:main.c        **** 
 214:main.c        ****     
 215:main.c        **** 
 216:main.c        ****     /*======================= M1: Wall Following Code =======================*/
 217:main.c        ****     // Point to goal at the beginning
 218:main.c        ****     float ref_direction = M_PI/2;
 1052              		.loc 1 218 0
 1053 0178 624B     		ldr	r3, .L71+92
 1054 017a C7F8A430 		str	r3, [r7, #164]	@ float
 219:main.c        ****     int ref_direction_deg = 90;
 1055              		.loc 1 219 0
 1056 017e 5A23     		movs	r3, #90
 1057 0180 C7F8A030 		str	r3, [r7, #160]
 220:main.c        ****     robot.desired_theta = M_PI/2;
 1058              		.loc 1 220 0
 1059 0184 5C4A     		ldr	r2, .L71+80
 1060 0186 52A4     		adr	r4, .L71+40
 1061 0188 D4E90034 		ldrd	r3, [r4]
 1062 018c C2E90E34 		strd	r3, [r2, #56]
 221:main.c        ****     
 222:main.c        ****     // KP Controls
 223:main.c        ****     float theta_correction = 0;
 1063              		.loc 1 223 0
 1064 0190 4FF00003 		mov	r3, #0
 1065 0194 7B62     		str	r3, [r7, #36]	@ float
 224:main.c        ****     float wall_Kp = 0.0065;
 1066              		.loc 1 224 0
 1067 0196 5C4B     		ldr	r3, .L71+96
 1068 0198 3B62     		str	r3, [r7, #32]	@ float
 225:main.c        ****    
 226:main.c        ****     // Thresholds
 227:main.c        ****     float front_dist_th = 50;
 1069              		.loc 1 227 0
 1070 019a 5C4B     		ldr	r3, .L71+100
 1071 019c C7F89C30 		str	r3, [r7, #156]	@ float
 228:main.c        ****     float dist_ref = 40;
 1072              		.loc 1 228 0
 1073 01a0 5B4B     		ldr	r3, .L71+104
 1074 01a2 C7F89830 		str	r3, [r7, #152]	@ float
 229:main.c        ****     int front_count = 0;
 1075              		.loc 1 229 0
 1076 01a6 0023     		movs	r3, #0
 1077 01a8 FB61     		str	r3, [r7, #28]
 230:main.c        ****     
 231:main.c        ****     // Flags
 232:main.c        ****     int return_flag = 0;
 1078              		.loc 1 232 0
 1079 01aa 0023     		movs	r3, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 24


 1080 01ac C7F89430 		str	r3, [r7, #148]
 233:main.c        ****     int B_flag = 0;
 1081              		.loc 1 233 0
 1082 01b0 0023     		movs	r3, #0
 1083 01b2 C7F89030 		str	r3, [r7, #144]
 234:main.c        ****     int obstacle_flag = 0;
 1084              		.loc 1 234 0
 1085 01b6 0023     		movs	r3, #0
 1086 01b8 C7F88C30 		str	r3, [r7, #140]
 235:main.c        ****     
 236:main.c        ****     // Settings
 237:main.c        ****     int velocity = 15;
 1087              		.loc 1 237 0
 1088 01bc 0F23     		movs	r3, #15
 1089 01be BB61     		str	r3, [r7, #24]
 238:main.c        ****     int arena_def = 85; //cm
 1090              		.loc 1 238 0
 1091 01c0 5523     		movs	r3, #85
 1092 01c2 C7F88830 		str	r3, [r7, #136]
 1093              	.L64:
 239:main.c        ****     
 240:main.c        ****     /*=======================================================================*/  
 241:main.c        ****     // starts at front left and goes clockwise
 242:main.c        ****     //move_servo(3, 1); 
 243:main.c        ****     //move_servo(0, 0);
 244:main.c        ****     //move_servo(1, 1);
 245:main.c        ****     //move_servo(2, 0);
 246:main.c        ****     
 247:main.c        ****     for(;;) {  
 248:main.c        ****         // Wall follow only after sensor is updated
 249:main.c        ****         // Read 3 times
 250:main.c        ****         if ( wall_following_flag ) {
 1094              		.loc 1 250 0
 1095 01c6 534B     		ldr	r3, .L71+108
 1096 01c8 1B68     		ldr	r3, [r3]
 1097 01ca 002B     		cmp	r3, #0
 1098 01cc FBD0     		beq	.L64
 1099              	.LBB2:
 251:main.c        ****             if (sensors.distance[0] < front_dist_th && sensors.distance[5] < front_dist_th) {      
 1100              		.loc 1 251 0
 1101 01ce 4B4B     		ldr	r3, .L71+84
 1102 01d0 9B69     		ldr	r3, [r3, #24]
 1103 01d2 1846     		mov	r0, r3
 1104 01d4 FFF7FEFF 		bl	__aeabi_i2f
 1105 01d8 0346     		mov	r3, r0
 1106 01da D7F89C10 		ldr	r1, [r7, #156]	@ float
 1107 01de 1846     		mov	r0, r3
 1108 01e0 FFF7FEFF 		bl	__aeabi_fcmplt
 1109 01e4 0346     		mov	r3, r0
 1110 01e6 002B     		cmp	r3, #0
 1111 01e8 00F06C84 		beq	.L25
 1112              		.loc 1 251 0 is_stmt 0 discriminator 1
 1113 01ec 434B     		ldr	r3, .L71+84
 1114 01ee DB6A     		ldr	r3, [r3, #44]
 1115 01f0 1846     		mov	r0, r3
 1116 01f2 FFF7FEFF 		bl	__aeabi_i2f
 1117 01f6 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 25


 1118 01f8 D7F89C10 		ldr	r1, [r7, #156]	@ float
 1119 01fc 1846     		mov	r0, r3
 1120 01fe FFF7FEFF 		bl	__aeabi_fcmplt
 1121 0202 0346     		mov	r3, r0
 1122 0204 002B     		cmp	r3, #0
 1123 0206 00F05D84 		beq	.L25
 1124              	.LBB3:
 252:main.c        ****                 // Check current distance from position flag
 253:main.c        ****                 robot.goal_min_dist = calculate_distance_from_goal(robot.goal_x, robot.goal_y, robo
 1125              		.loc 1 253 0 is_stmt 1
 1126 020a 3B4B     		ldr	r3, .L71+80
 1127 020c D3E91656 		ldrd	r5, [r3, #88]
 1128 0210 394B     		ldr	r3, .L71+80
 1129 0212 D3E91889 		ldrd	r8, [r3, #96]
 1130 0216 384B     		ldr	r3, .L71+80
 1131 0218 03F11004 		add	r4, r3, #16
 1132 021c D4E90034 		ldrd	r3, [r4]
 1133 0220 354A     		ldr	r2, .L71+80
 1134 0222 D2E90612 		ldrd	r1, [r2, #24]
 1135 0226 CDE90212 		strd	r1, [sp, #8]
 1136 022a CDE90034 		strd	r3, [sp]
 1137 022e 4246     		mov	r2, r8
 1138 0230 4B46     		mov	r3, r9
 1139 0232 2846     		mov	r0, r5
 1140 0234 3146     		mov	r1, r6
 1141 0236 FFF7FEFF 		bl	calculate_distance_from_goal
 1142 023a 0346     		mov	r3, r0
 1143 023c 0C46     		mov	r4, r1
 1144 023e 2E4A     		ldr	r2, .L71+80
 1145 0240 C2E91A34 		strd	r3, [r2, #104]
 254:main.c        ****                 float min_sensor = (sensors.distance[0] < sensors.distance[5]) ? sensors.distance[0
 1146              		.loc 1 254 0
 1147 0244 2D4B     		ldr	r3, .L71+84
 1148 0246 DA6A     		ldr	r2, [r3, #44]
 1149 0248 2C4B     		ldr	r3, .L71+84
 1150 024a 9B69     		ldr	r3, [r3, #24]
 1151 024c 9342     		cmp	r3, r2
 1152 024e A8BF     		it	ge
 1153 0250 1346     		movge	r3, r2
 1154 0252 1846     		mov	r0, r3
 1155 0254 FFF7FEFF 		bl	__aeabi_i2f
 1156 0258 0346     		mov	r3, r0
 1157 025a C7F88430 		str	r3, [r7, #132]	@ float
 255:main.c        ****                 min_sensor /= 10;
 1158              		.loc 1 255 0
 1159 025e 2E49     		ldr	r1, .L71+112
 1160 0260 D7F88400 		ldr	r0, [r7, #132]	@ float
 1161 0264 FFF7FEFF 		bl	__aeabi_fdiv
 1162 0268 0346     		mov	r3, r0
 1163 026a C7F88430 		str	r3, [r7, #132]	@ float
 256:main.c        ****                 if ((robot.goal_min_dist + min_sensor) < arena_def) {
 1164              		.loc 1 256 0
 1165 026e 224B     		ldr	r3, .L71+80
 1166 0270 D3E91A45 		ldrd	r4, [r3, #104]
 1167 0274 D7F88400 		ldr	r0, [r7, #132]	@ float
 1168 0278 FFF7FEFF 		bl	__aeabi_f2d
 1169 027c 0246     		mov	r2, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 26


 1170 027e 0B46     		mov	r3, r1
 1171 0280 2046     		mov	r0, r4
 1172 0282 2946     		mov	r1, r5
 1173 0284 FFF7FEFF 		bl	__aeabi_dadd
 1174 0288 0346     		mov	r3, r0
 1175 028a 0C46     		mov	r4, r1
 1176 028c 2546     		mov	r5, r4
 1177 028e 1C46     		mov	r4, r3
 1178 0290 D7F88800 		ldr	r0, [r7, #136]
 1179 0294 FFF7FEFF 		bl	__aeabi_i2d
 1180 0298 0246     		mov	r2, r0
 1181 029a 0B46     		mov	r3, r1
 1182 029c 2046     		mov	r0, r4
 1183 029e 2946     		mov	r1, r5
 1184 02a0 3CE0     		b	.L72
 1185              	.L73:
 1186 02a2 00BFAFF3 		.align	3
 1186      0080
 1187              	.L71:
 1188 02a8 A60A4625 		.word	625347238
 1189 02ac 7502EE3F 		.word	1072562805
 1190 02b0 54E41071 		.word	1896932436
 1191 02b4 732AC93E 		.word	1053370995
 1192 02b8 7B14AE47 		.word	1202590843
 1193 02bc E17A643F 		.word	1063549665
 1194 02c0 90C2F528 		.word	687194768
 1195 02c4 5C0F3540 		.word	1077219164
 1196 02c8 76830DF4 		.word	-200440970
 1197 02cc F521943E 		.word	1049895413
 1198 02d0 182D4454 		.word	1413754136
 1199 02d4 FB21F93F 		.word	1073291771
 1200 02d8 00000000 		.word	Timer_Int_Handler
 1201 02dc 00000000 		.word	Pose_Update_Int_Handler
 1202 02e0 00000000 		.word	Motor_PI_Int_Handler
 1203 02e4 00000000 		.word	Button_Int_Handler
 1204 02e8 00000000 		.word	left_motor
 1205 02ec 00000000 		.word	right_motor
 1206 02f0 0000FC3F 		.word	1073479680
 1207 02f4 00001440 		.word	1075052544
 1208 02f8 00000000 		.word	robot
 1209 02fc 00000000 		.word	sensors
 1210 0300 10000000 		.word	.LC0
 1211 0304 DB0FC93F 		.word	1070141403
 1212 0308 F4FDD43B 		.word	1003814388
 1213 030c 00004842 		.word	1112014848
 1214 0310 00002042 		.word	1109393408
 1215 0314 00000000 		.word	wall_following_flag
 1216 0318 00002041 		.word	1092616192
 1217              	.L72:
 1218 031c FFF7FEFF 		bl	__aeabi_dcmplt
 1219 0320 0346     		mov	r3, r0
 1220 0322 002B     		cmp	r3, #0
 1221 0324 48D0     		beq	.L28
 257:main.c        ****                     // Stop for 30 seconds
 258:main.c        ****                     robot.desired_v = 0;
 1222              		.loc 1 258 0
 1223 0326 B64A     		ldr	r2, .L74+8
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 27


 1224 0328 4FF00003 		mov	r3, #0
 1225 032c 4FF00004 		mov	r4, #0
 1226 0330 C2E90C34 		strd	r3, [r2, #48]
 259:main.c        ****                     CyDelay(100);
 1227              		.loc 1 259 0
 1228 0334 6420     		movs	r0, #100
 1229 0336 FFF7FEFF 		bl	CyDelay
 260:main.c        ****                     
 261:main.c        ****                     while ( (robot.goal_min_dist + min_sensor) < arena_def) {
 1230              		.loc 1 261 0
 1231 033a 14E0     		b	.L30
 1232              	.L31:
 262:main.c        ****                         min_sensor = (sensors.distance[0] < sensors.distance[5]) ? sensors.distance
 1233              		.loc 1 262 0
 1234 033c B14B     		ldr	r3, .L74+12
 1235 033e DA6A     		ldr	r2, [r3, #44]
 1236 0340 B04B     		ldr	r3, .L74+12
 1237 0342 9B69     		ldr	r3, [r3, #24]
 1238 0344 9342     		cmp	r3, r2
 1239 0346 A8BF     		it	ge
 1240 0348 1346     		movge	r3, r2
 1241 034a 1846     		mov	r0, r3
 1242 034c FFF7FEFF 		bl	__aeabi_i2f
 1243 0350 0346     		mov	r3, r0
 1244 0352 C7F88430 		str	r3, [r7, #132]	@ float
 263:main.c        ****                         min_sensor /= 10;
 1245              		.loc 1 263 0
 1246 0356 AC49     		ldr	r1, .L74+16
 1247 0358 D7F88400 		ldr	r0, [r7, #132]	@ float
 1248 035c FFF7FEFF 		bl	__aeabi_fdiv
 1249 0360 0346     		mov	r3, r0
 1250 0362 C7F88430 		str	r3, [r7, #132]	@ float
 1251              	.L30:
 261:main.c        ****                         min_sensor = (sensors.distance[0] < sensors.distance[5]) ? sensors.distance
 1252              		.loc 1 261 0
 1253 0366 A64B     		ldr	r3, .L74+8
 1254 0368 D3E91A45 		ldrd	r4, [r3, #104]
 1255 036c D7F88400 		ldr	r0, [r7, #132]	@ float
 1256 0370 FFF7FEFF 		bl	__aeabi_f2d
 1257 0374 0246     		mov	r2, r0
 1258 0376 0B46     		mov	r3, r1
 1259 0378 2046     		mov	r0, r4
 1260 037a 2946     		mov	r1, r5
 1261 037c FFF7FEFF 		bl	__aeabi_dadd
 1262 0380 0346     		mov	r3, r0
 1263 0382 0C46     		mov	r4, r1
 1264 0384 2546     		mov	r5, r4
 1265 0386 1C46     		mov	r4, r3
 1266 0388 D7F88800 		ldr	r0, [r7, #136]
 1267 038c FFF7FEFF 		bl	__aeabi_i2d
 1268 0390 0246     		mov	r2, r0
 1269 0392 0B46     		mov	r3, r1
 1270 0394 2046     		mov	r0, r4
 1271 0396 2946     		mov	r1, r5
 1272 0398 FFF7FEFF 		bl	__aeabi_dcmplt
 1273 039c 0346     		mov	r3, r0
 1274 039e 002B     		cmp	r3, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 28


 1275 03a0 CCD1     		bne	.L31
 264:main.c        ****                     }
 265:main.c        ****                     obstacle_flag = 1;
 1276              		.loc 1 265 0
 1277 03a2 0123     		movs	r3, #1
 1278 03a4 C7F88C30 		str	r3, [r7, #140]
 266:main.c        ****                     robot.desired_v = velocity;
 1279              		.loc 1 266 0
 1280 03a8 B869     		ldr	r0, [r7, #24]
 1281 03aa FFF7FEFF 		bl	__aeabi_i2d
 1282 03ae 0346     		mov	r3, r0
 1283 03b0 0C46     		mov	r4, r1
 1284 03b2 934A     		ldr	r2, .L74+8
 1285 03b4 C2E90C34 		strd	r3, [r2, #48]
 1286              	.L28:
 267:main.c        ****                 }
 268:main.c        ****                 if( obstacle_flag ) {
 1287              		.loc 1 268 0
 1288 03b8 D7F88C30 		ldr	r3, [r7, #140]
 1289 03bc 002B     		cmp	r3, #0
 1290 03be 03D0     		beq	.L32
 269:main.c        ****                     obstacle_flag = 0;
 1291              		.loc 1 269 0
 1292 03c0 0023     		movs	r3, #0
 1293 03c2 C7F88C30 		str	r3, [r7, #140]
 1294 03c6 7DE3     		b	.L25
 1295              	.L32:
 270:main.c        ****                 } else {
 271:main.c        ****                     switch (ref_direction_deg) {
 1296              		.loc 1 271 0
 1297 03c8 D7F8A030 		ldr	r3, [r7, #160]
 1298 03cc 5A2B     		cmp	r3, #90
 1299 03ce 0DD0     		beq	.L34
 1300 03d0 5A2B     		cmp	r3, #90
 1301 03d2 03DC     		bgt	.L35
 1302 03d4 002B     		cmp	r3, #0
 1303 03d6 00F08780 		beq	.L36
 1304 03da 20E3     		b	.L33
 1305              	.L35:
 1306 03dc B42B     		cmp	r3, #180
 1307 03de 00F0F581 		beq	.L37
 1308 03e2 B3F5877F 		cmp	r3, #270
 1309 03e6 00F07B82 		beq	.L38
 1310 03ea 18E3     		b	.L33
 1311              	.L34:
 1312              	.LBB4:
 272:main.c        ****                         // Travelling towards box A
 273:main.c        ****                         case (90):
 274:main.c        ****                             // Stop moving
 275:main.c        ****                             robot.desired_v = 0;
 1313              		.loc 1 275 0
 1314 03ec 844A     		ldr	r2, .L74+8
 1315 03ee 4FF00003 		mov	r3, #0
 1316 03f2 4FF00004 		mov	r4, #0
 1317 03f6 C2E90C34 		strd	r3, [r2, #48]
 276:main.c        **** 
 277:main.c        ****                             // TODO: Unload Package Code
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 29


 278:main.c        ****                             move_servo(9); // move servos 3 and 1 simultaneously
 1318              		.loc 1 278 0
 1319 03fa 0920     		movs	r0, #9
 1320 03fc FFF7FEFF 		bl	move_servo
 279:main.c        ****                             //
 280:main.c        ****                             
 281:main.c        ****                             // Turn towards box B
 282:main.c        ****                             ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1321              		.loc 1 282 0
 1322 0400 7F4B     		ldr	r3, .L74+8
 1323 0402 D3E90201 		ldrd	r0, [r3, #8]
 1324 0406 7CA3     		adr	r3, .L74
 1325 0408 D3E90023 		ldrd	r2, [r3]
 1326 040c FFF7FEFF 		bl	__aeabi_dsub
 1327 0410 0346     		mov	r3, r0
 1328 0412 0C46     		mov	r4, r1
 1329 0414 1846     		mov	r0, r3
 1330 0416 2146     		mov	r1, r4
 1331 0418 FFF7FEFF 		bl	calculate_angle_modulo
 1332 041c 0346     		mov	r3, r0
 1333 041e 0C46     		mov	r4, r1
 1334 0420 1846     		mov	r0, r3
 1335 0422 2146     		mov	r1, r4
 1336 0424 FFF7FEFF 		bl	__aeabi_d2f
 1337 0428 0346     		mov	r3, r0
 1338 042a C7F8A430 		str	r3, [r7, #164]	@ float
 283:main.c        ****                             Turn_Delay(ref_direction);
 1339              		.loc 1 283 0
 1340 042e D7F8A400 		ldr	r0, [r7, #164]	@ float
 1341 0432 FFF7FEFF 		bl	__aeabi_f2d
 1342 0436 0346     		mov	r3, r0
 1343 0438 0C46     		mov	r4, r1
 1344 043a 1846     		mov	r0, r3
 1345 043c 2146     		mov	r1, r4
 1346 043e FFF7FEFF 		bl	Turn_Delay
 284:main.c        ****                             
 285:main.c        ****                             // Set position flag and track distance
 286:main.c        ****                             robot.goal_x = robot.x;
 1347              		.loc 1 286 0
 1348 0442 6F4B     		ldr	r3, .L74+8
 1349 0444 03F11004 		add	r4, r3, #16
 1350 0448 D4E90034 		ldrd	r3, [r4]
 1351 044c 6C4A     		ldr	r2, .L74+8
 1352 044e C2E91634 		strd	r3, [r2, #88]
 287:main.c        ****                             robot.goal_y = robot.y;
 1353              		.loc 1 287 0
 1354 0452 6B4B     		ldr	r3, .L74+8
 1355 0454 03F11804 		add	r4, r3, #24
 1356 0458 D4E90034 		ldrd	r3, [r4]
 1357 045c 684A     		ldr	r2, .L74+8
 1358 045e C2E91834 		strd	r3, [r2, #96]
 288:main.c        ****                             
 289:main.c        ****                             ref_direction_deg = angle_clamp(ref_direction_deg - 90);
 1359              		.loc 1 289 0
 1360 0462 D7F8A030 		ldr	r3, [r7, #160]
 1361 0466 5A3B     		subs	r3, r3, #90
 1362 0468 1846     		mov	r0, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 30


 1363 046a FFF7FEFF 		bl	angle_clamp
 1364 046e C7F8A000 		str	r0, [r7, #160]
 290:main.c        ****                             robot.desired_v = velocity;
 1365              		.loc 1 290 0
 1366 0472 B869     		ldr	r0, [r7, #24]
 1367 0474 FFF7FEFF 		bl	__aeabi_i2d
 1368 0478 0346     		mov	r3, r0
 1369 047a 0C46     		mov	r4, r1
 1370 047c 604A     		ldr	r2, .L74+8
 1371 047e C2E90C34 		strd	r3, [r2, #48]
 291:main.c        ****                             
 292:main.c        ****                             // Update Flags
 293:main.c        ****                             wall_following_flag = 0;
 1372              		.loc 1 293 0
 1373 0482 624B     		ldr	r3, .L74+20
 1374 0484 0022     		movs	r2, #0
 1375 0486 1A60     		str	r2, [r3]
 294:main.c        ****                             if( !pbutton ) {
 1376              		.loc 1 294 0
 1377 0488 614B     		ldr	r3, .L74+24
 1378 048a 1B68     		ldr	r3, [r3]
 1379 048c 002B     		cmp	r3, #0
 1380 048e 03D1     		bne	.L39
 295:main.c        ****                                 front_dist_th = 495;
 1381              		.loc 1 295 0
 1382 0490 604B     		ldr	r3, .L74+28
 1383 0492 C7F89C30 		str	r3, [r7, #156]	@ float
 1384 0496 02E0     		b	.L40
 1385              	.L39:
 296:main.c        ****                             } else {
 297:main.c        ****                                 front_dist_th = 430;
 1386              		.loc 1 297 0
 1387 0498 5F4B     		ldr	r3, .L74+32
 1388 049a C7F89C30 		str	r3, [r7, #156]	@ float
 1389              	.L40:
 298:main.c        ****                             }
 299:main.c        ****                             
 300:main.c        ****                             // Spoof
 301:main.c        ****                             sensors.distance[1] = dist_ref;
 1390              		.loc 1 301 0
 1391 049e D7F89800 		ldr	r0, [r7, #152]	@ float
 1392 04a2 FFF7FEFF 		bl	__aeabi_f2iz
 1393 04a6 0246     		mov	r2, r0
 1394 04a8 564B     		ldr	r3, .L74+12
 1395 04aa DA61     		str	r2, [r3, #28]
 302:main.c        ****                             sensors.distance[2] = dist_ref;
 1396              		.loc 1 302 0
 1397 04ac D7F89800 		ldr	r0, [r7, #152]	@ float
 1398 04b0 FFF7FEFF 		bl	__aeabi_f2iz
 1399 04b4 0246     		mov	r2, r0
 1400 04b6 534B     		ldr	r3, .L74+12
 1401 04b8 1A62     		str	r2, [r3, #32]
 303:main.c        ****                             sensors.distance[3] = dist_ref;
 1402              		.loc 1 303 0
 1403 04ba D7F89800 		ldr	r0, [r7, #152]	@ float
 1404 04be FFF7FEFF 		bl	__aeabi_f2iz
 1405 04c2 0246     		mov	r2, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 31


 1406 04c4 4F4B     		ldr	r3, .L74+12
 1407 04c6 5A62     		str	r2, [r3, #36]
 304:main.c        ****                             sensors.distance[4] = dist_ref;
 1408              		.loc 1 304 0
 1409 04c8 D7F89800 		ldr	r0, [r7, #152]	@ float
 1410 04cc FFF7FEFF 		bl	__aeabi_f2iz
 1411 04d0 0246     		mov	r2, r0
 1412 04d2 4C4B     		ldr	r3, .L74+12
 1413 04d4 9A62     		str	r2, [r3, #40]
 305:main.c        ****                             sensors.distance[0] = 10000;
 1414              		.loc 1 305 0
 1415 04d6 4B4B     		ldr	r3, .L74+12
 1416 04d8 42F21072 		movw	r2, #10000
 1417 04dc 9A61     		str	r2, [r3, #24]
 306:main.c        ****                             sensors.distance[5] = 10000;
 1418              		.loc 1 306 0
 1419 04de 494B     		ldr	r3, .L74+12
 1420 04e0 42F21072 		movw	r2, #10000
 1421 04e4 DA62     		str	r2, [r3, #44]
 307:main.c        ****                             
 308:main.c        ****                             break;
 1422              		.loc 1 308 0
 1423 04e6 EDE2     		b	.L25
 1424              	.L36:
 309:main.c        ****                             
 310:main.c        ****                         
 311:main.c        ****                         // Travelling towards box B
 312:main.c        ****                         case (0):
 313:main.c        ****                             // If we haven't stopped at B yet
 314:main.c        ****                             if (!B_flag) {
 1425              		.loc 1 314 0
 1426 04e8 D7F89030 		ldr	r3, [r7, #144]
 1427 04ec 002B     		cmp	r3, #0
 1428 04ee 40F0CA80 		bne	.L41
 315:main.c        ****                                 // Stop moving
 316:main.c        ****                                 robot.desired_v = 0;
 1429              		.loc 1 316 0
 1430 04f2 434A     		ldr	r2, .L74+8
 1431 04f4 4FF00003 		mov	r3, #0
 1432 04f8 4FF00004 		mov	r4, #0
 1433 04fc C2E90C34 		strd	r3, [r2, #48]
 317:main.c        ****                                 
 318:main.c        ****                                 // Rotate -90 deg to deliver packages
 319:main.c        ****                                 ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1434              		.loc 1 319 0
 1435 0500 3F4B     		ldr	r3, .L74+8
 1436 0502 D3E90201 		ldrd	r0, [r3, #8]
 1437 0506 3CA3     		adr	r3, .L74
 1438 0508 D3E90023 		ldrd	r2, [r3]
 1439 050c FFF7FEFF 		bl	__aeabi_dsub
 1440 0510 0346     		mov	r3, r0
 1441 0512 0C46     		mov	r4, r1
 1442 0514 1846     		mov	r0, r3
 1443 0516 2146     		mov	r1, r4
 1444 0518 FFF7FEFF 		bl	calculate_angle_modulo
 1445 051c 0346     		mov	r3, r0
 1446 051e 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 32


 1447 0520 1846     		mov	r0, r3
 1448 0522 2146     		mov	r1, r4
 1449 0524 FFF7FEFF 		bl	__aeabi_d2f
 1450 0528 0346     		mov	r3, r0
 1451 052a C7F8A430 		str	r3, [r7, #164]	@ float
 320:main.c        ****                                 Turn_Delay(ref_direction);
 1452              		.loc 1 320 0
 1453 052e D7F8A400 		ldr	r0, [r7, #164]	@ float
 1454 0532 FFF7FEFF 		bl	__aeabi_f2d
 1455 0536 0346     		mov	r3, r0
 1456 0538 0C46     		mov	r4, r1
 1457 053a 1846     		mov	r0, r3
 1458 053c 2146     		mov	r1, r4
 1459 053e FFF7FEFF 		bl	Turn_Delay
 321:main.c        **** 
 322:main.c        ****                                 // TODO: Unload Package Code
 323:main.c        ****                                 if( !pbutton ) {
 1460              		.loc 1 323 0
 1461 0542 334B     		ldr	r3, .L74+24
 1462 0544 1B68     		ldr	r3, [r3]
 1463 0546 002B     		cmp	r3, #0
 1464 0548 6AD1     		bne	.L42
 324:main.c        ****                                     move_servo(0b0110);
 1465              		.loc 1 324 0
 1466 054a 0620     		movs	r0, #6
 1467 054c FFF7FEFF 		bl	move_servo
 325:main.c        ****                                     ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1468              		.loc 1 325 0
 1469 0550 2B4B     		ldr	r3, .L74+8
 1470 0552 D3E90201 		ldrd	r0, [r3, #8]
 1471 0556 28A3     		adr	r3, .L74
 1472 0558 D3E90023 		ldrd	r2, [r3]
 1473 055c FFF7FEFF 		bl	__aeabi_dsub
 1474 0560 0346     		mov	r3, r0
 1475 0562 0C46     		mov	r4, r1
 1476 0564 1846     		mov	r0, r3
 1477 0566 2146     		mov	r1, r4
 1478 0568 FFF7FEFF 		bl	calculate_angle_modulo
 1479 056c 0346     		mov	r3, r0
 1480 056e 0C46     		mov	r4, r1
 1481 0570 1846     		mov	r0, r3
 1482 0572 2146     		mov	r1, r4
 1483 0574 FFF7FEFF 		bl	__aeabi_d2f
 1484 0578 0346     		mov	r3, r0
 1485 057a C7F8A430 		str	r3, [r7, #164]	@ float
 326:main.c        ****                                     ref_direction_deg = angle_clamp(ref_direction_deg - 180);
 1486              		.loc 1 326 0
 1487 057e D7F8A030 		ldr	r3, [r7, #160]
 1488 0582 B43B     		subs	r3, r3, #180
 1489 0584 1846     		mov	r0, r3
 1490 0586 FFF7FEFF 		bl	angle_clamp
 1491 058a C7F8A000 		str	r0, [r7, #160]
 327:main.c        ****                                     Turn_Delay(ref_direction);
 1492              		.loc 1 327 0
 1493 058e D7F8A400 		ldr	r0, [r7, #164]	@ float
 1494 0592 FFF7FEFF 		bl	__aeabi_f2d
 1495 0596 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 33


 1496 0598 0C46     		mov	r4, r1
 1497 059a 1846     		mov	r0, r3
 1498 059c 2146     		mov	r1, r4
 1499 059e FFF7FEFF 		bl	Turn_Delay
 328:main.c        ****                                     
 329:main.c        ****                                     // Plant a flag at B
 330:main.c        ****                                     robot.goal_x = robot.x;
 1500              		.loc 1 330 0
 1501 05a2 174B     		ldr	r3, .L74+8
 1502 05a4 03F11004 		add	r4, r3, #16
 1503 05a8 D4E90034 		ldrd	r3, [r4]
 1504 05ac 144A     		ldr	r2, .L74+8
 1505 05ae C2E91634 		strd	r3, [r2, #88]
 331:main.c        ****                                     robot.goal_y = robot.y;
 1506              		.loc 1 331 0
 1507 05b2 134B     		ldr	r3, .L74+8
 1508 05b4 03F11804 		add	r4, r3, #24
 1509 05b8 D4E90034 		ldrd	r3, [r4]
 1510 05bc 104A     		ldr	r2, .L74+8
 1511 05be C2E91834 		strd	r3, [r2, #96]
 332:main.c        ****                                     arena_def = 30;
 1512              		.loc 1 332 0
 1513 05c2 1E23     		movs	r3, #30
 1514 05c4 C7F88830 		str	r3, [r7, #136]
 333:main.c        ****                                     
 334:main.c        ****                                     return_flag = 1;
 1515              		.loc 1 334 0
 1516 05c8 0123     		movs	r3, #1
 1517 05ca C7F89430 		str	r3, [r7, #148]
 335:main.c        ****                                     wall_following_flag = 0;
 1518              		.loc 1 335 0
 1519 05ce 0F4B     		ldr	r3, .L74+20
 1520 05d0 0022     		movs	r2, #0
 1521 05d2 1A60     		str	r2, [r3]
 336:main.c        ****                                     robot.desired_v = velocity;
 1522              		.loc 1 336 0
 1523 05d4 B869     		ldr	r0, [r7, #24]
 1524 05d6 FFF7FEFF 		bl	__aeabi_i2d
 1525 05da 0346     		mov	r3, r0
 1526 05dc 0C46     		mov	r4, r1
 1527 05de 084A     		ldr	r2, .L74+8
 1528 05e0 C2E90C34 		strd	r3, [r2, #48]
 337:main.c        ****                                     dist_ref = 150;
 1529              		.loc 1 337 0
 1530 05e4 0D4B     		ldr	r3, .L74+36
 1531 05e6 C7F89830 		str	r3, [r7, #152]	@ float
 338:main.c        ****                                     front_dist_th = 150;
 1532              		.loc 1 338 0
 1533 05ea 0C4B     		ldr	r3, .L74+36
 1534 05ec C7F89C30 		str	r3, [r7, #156]	@ float
 1535 05f0 C7E0     		b	.L44
 1536              	.L75:
 1537 05f2 00BFAFF3 		.align	3
 1537      0080
 1538              	.L74:
 1539 05f8 182D4454 		.word	1413754136
 1540 05fc FB21F93F 		.word	1073291771
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 34


 1541 0600 00000000 		.word	robot
 1542 0604 00000000 		.word	sensors
 1543 0608 00002041 		.word	1092616192
 1544 060c 00000000 		.word	wall_following_flag
 1545 0610 00000000 		.word	pbutton
 1546 0614 0080F743 		.word	1140293632
 1547 0618 0000D743 		.word	1138163712
 1548 061c 00001643 		.word	1125515264
 1549              	.L42:
 339:main.c        ****                                     
 340:main.c        ****                                 } else {
 341:main.c        ****                                     move_servo(2);  
 1550              		.loc 1 341 0
 1551 0620 0220     		movs	r0, #2
 1552 0622 FFF7FEFF 		bl	move_servo
 342:main.c        ****                                     // Rotate back to go to C
 343:main.c        ****                                     ref_direction = calculate_angle_modulo(robot.theta + M_PI/2);
 1553              		.loc 1 343 0
 1554 0626 A84B     		ldr	r3, .L76+8
 1555 0628 D3E90201 		ldrd	r0, [r3, #8]
 1556 062c A4A3     		adr	r3, .L76
 1557 062e D3E90023 		ldrd	r2, [r3]
 1558 0632 FFF7FEFF 		bl	__aeabi_dadd
 1559 0636 0346     		mov	r3, r0
 1560 0638 0C46     		mov	r4, r1
 1561 063a 1846     		mov	r0, r3
 1562 063c 2146     		mov	r1, r4
 1563 063e FFF7FEFF 		bl	calculate_angle_modulo
 1564 0642 0346     		mov	r3, r0
 1565 0644 0C46     		mov	r4, r1
 1566 0646 1846     		mov	r0, r3
 1567 0648 2146     		mov	r1, r4
 1568 064a FFF7FEFF 		bl	__aeabi_d2f
 1569 064e 0346     		mov	r3, r0
 1570 0650 C7F8A430 		str	r3, [r7, #164]	@ float
 344:main.c        ****                                     Turn_Delay(ref_direction);
 1571              		.loc 1 344 0
 1572 0654 D7F8A400 		ldr	r0, [r7, #164]	@ float
 1573 0658 FFF7FEFF 		bl	__aeabi_f2d
 1574 065c 0346     		mov	r3, r0
 1575 065e 0C46     		mov	r4, r1
 1576 0660 1846     		mov	r0, r3
 1577 0662 2146     		mov	r1, r4
 1578 0664 FFF7FEFF 		bl	Turn_Delay
 345:main.c        ****                                     
 346:main.c        ****                                     front_dist_th = 70;
 1579              		.loc 1 346 0
 1580 0668 984B     		ldr	r3, .L76+12
 1581 066a C7F89C30 		str	r3, [r7, #156]	@ float
 347:main.c        ****                                     B_flag = 1;
 1582              		.loc 1 347 0
 1583 066e 0123     		movs	r3, #1
 1584 0670 C7F89030 		str	r3, [r7, #144]
 348:main.c        ****                                     robot.desired_v = velocity;
 1585              		.loc 1 348 0
 1586 0674 B869     		ldr	r0, [r7, #24]
 1587 0676 FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 35


 1588 067a 0346     		mov	r3, r0
 1589 067c 0C46     		mov	r4, r1
 1590 067e 924A     		ldr	r2, .L76+8
 1591 0680 C2E90C34 		strd	r3, [r2, #48]
 1592 0684 7DE0     		b	.L44
 1593              	.L41:
 349:main.c        ****                                 }
 350:main.c        ****                                 
 351:main.c        ****                             } else {
 352:main.c        ****                                 // Stop moving
 353:main.c        ****                                 robot.desired_v = 0;
 1594              		.loc 1 353 0
 1595 0686 904A     		ldr	r2, .L76+8
 1596 0688 4FF00003 		mov	r3, #0
 1597 068c 4FF00004 		mov	r4, #0
 1598 0690 C2E90C34 		strd	r3, [r2, #48]
 354:main.c        ****                                 
 355:main.c        ****                                 // Rotate -90 deg to deliver packages
 356:main.c        ****                                 ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1599              		.loc 1 356 0
 1600 0694 8C4B     		ldr	r3, .L76+8
 1601 0696 D3E90201 		ldrd	r0, [r3, #8]
 1602 069a 89A3     		adr	r3, .L76
 1603 069c D3E90023 		ldrd	r2, [r3]
 1604 06a0 FFF7FEFF 		bl	__aeabi_dsub
 1605 06a4 0346     		mov	r3, r0
 1606 06a6 0C46     		mov	r4, r1
 1607 06a8 1846     		mov	r0, r3
 1608 06aa 2146     		mov	r1, r4
 1609 06ac FFF7FEFF 		bl	calculate_angle_modulo
 1610 06b0 0346     		mov	r3, r0
 1611 06b2 0C46     		mov	r4, r1
 1612 06b4 1846     		mov	r0, r3
 1613 06b6 2146     		mov	r1, r4
 1614 06b8 FFF7FEFF 		bl	__aeabi_d2f
 1615 06bc 0346     		mov	r3, r0
 1616 06be C7F8A430 		str	r3, [r7, #164]	@ float
 357:main.c        ****                                 Turn_Delay(ref_direction);
 1617              		.loc 1 357 0
 1618 06c2 D7F8A400 		ldr	r0, [r7, #164]	@ float
 1619 06c6 FFF7FEFF 		bl	__aeabi_f2d
 1620 06ca 0346     		mov	r3, r0
 1621 06cc 0C46     		mov	r4, r1
 1622 06ce 1846     		mov	r0, r3
 1623 06d0 2146     		mov	r1, r4
 1624 06d2 FFF7FEFF 		bl	Turn_Delay
 358:main.c        **** 
 359:main.c        ****                                 // TODO: Unload Package Code
 360:main.c        ****                                 move_servo(4);
 1625              		.loc 1 360 0
 1626 06d6 0420     		movs	r0, #4
 1627 06d8 FFF7FEFF 		bl	move_servo
 361:main.c        ****                                 //
 362:main.c        ****                                 
 363:main.c        ****                                 // Go back to A
 364:main.c        ****                                 ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1628              		.loc 1 364 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 36


 1629 06dc 7A4B     		ldr	r3, .L76+8
 1630 06de D3E90201 		ldrd	r0, [r3, #8]
 1631 06e2 77A3     		adr	r3, .L76
 1632 06e4 D3E90023 		ldrd	r2, [r3]
 1633 06e8 FFF7FEFF 		bl	__aeabi_dsub
 1634 06ec 0346     		mov	r3, r0
 1635 06ee 0C46     		mov	r4, r1
 1636 06f0 1846     		mov	r0, r3
 1637 06f2 2146     		mov	r1, r4
 1638 06f4 FFF7FEFF 		bl	calculate_angle_modulo
 1639 06f8 0346     		mov	r3, r0
 1640 06fa 0C46     		mov	r4, r1
 1641 06fc 1846     		mov	r0, r3
 1642 06fe 2146     		mov	r1, r4
 1643 0700 FFF7FEFF 		bl	__aeabi_d2f
 1644 0704 0346     		mov	r3, r0
 1645 0706 C7F8A430 		str	r3, [r7, #164]	@ float
 365:main.c        ****                                 Turn_Delay(ref_direction);
 1646              		.loc 1 365 0
 1647 070a D7F8A400 		ldr	r0, [r7, #164]	@ float
 1648 070e FFF7FEFF 		bl	__aeabi_f2d
 1649 0712 0346     		mov	r3, r0
 1650 0714 0C46     		mov	r4, r1
 1651 0716 1846     		mov	r0, r3
 1652 0718 2146     		mov	r1, r4
 1653 071a FFF7FEFF 		bl	Turn_Delay
 366:main.c        ****                                 // Set position flag and track distance
 367:main.c        ****                                 robot.goal_x = robot.x;
 1654              		.loc 1 367 0
 1655 071e 6A4B     		ldr	r3, .L76+8
 1656 0720 03F11004 		add	r4, r3, #16
 1657 0724 D4E90034 		ldrd	r3, [r4]
 1658 0728 674A     		ldr	r2, .L76+8
 1659 072a C2E91634 		strd	r3, [r2, #88]
 368:main.c        ****                                 robot.goal_y = robot.y;
 1660              		.loc 1 368 0
 1661 072e 664B     		ldr	r3, .L76+8
 1662 0730 03F11804 		add	r4, r3, #24
 1663 0734 D4E90034 		ldrd	r3, [r4]
 1664 0738 634A     		ldr	r2, .L76+8
 1665 073a C2E91834 		strd	r3, [r2, #96]
 369:main.c        ****                                 
 370:main.c        ****                                 CyDelay(100);
 1666              		.loc 1 370 0
 1667 073e 6420     		movs	r0, #100
 1668 0740 FFF7FEFF 		bl	CyDelay
 371:main.c        ****                                 ref_direction_deg = angle_clamp(ref_direction_deg - 180);
 1669              		.loc 1 371 0
 1670 0744 D7F8A030 		ldr	r3, [r7, #160]
 1671 0748 B43B     		subs	r3, r3, #180
 1672 074a 1846     		mov	r0, r3
 1673 074c FFF7FEFF 		bl	angle_clamp
 1674 0750 C7F8A000 		str	r0, [r7, #160]
 372:main.c        ****                                 robot.desired_v = velocity;
 1675              		.loc 1 372 0
 1676 0754 B869     		ldr	r0, [r7, #24]
 1677 0756 FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 37


 1678 075a 0346     		mov	r3, r0
 1679 075c 0C46     		mov	r4, r1
 1680 075e 5A4A     		ldr	r2, .L76+8
 1681 0760 C2E90C34 		strd	r3, [r2, #48]
 373:main.c        ****                                 
 374:main.c        ****                                 // Update Flags
 375:main.c        ****                                 wall_following_flag = 0;
 1682              		.loc 1 375 0
 1683 0764 5A4B     		ldr	r3, .L76+16
 1684 0766 0022     		movs	r2, #0
 1685 0768 1A60     		str	r2, [r3]
 376:main.c        ****                                 return_flag = 1;
 1686              		.loc 1 376 0
 1687 076a 0123     		movs	r3, #1
 1688 076c C7F89430 		str	r3, [r7, #148]
 377:main.c        ****                                 B_flag = 0;
 1689              		.loc 1 377 0
 1690 0770 0023     		movs	r3, #0
 1691 0772 C7F89030 		str	r3, [r7, #144]
 378:main.c        ****                                 
 379:main.c        ****                                 dist_ref = 150;
 1692              		.loc 1 379 0
 1693 0776 574B     		ldr	r3, .L76+20
 1694 0778 C7F89830 		str	r3, [r7, #152]	@ float
 380:main.c        ****                                 front_dist_th = 150;
 1695              		.loc 1 380 0
 1696 077c 554B     		ldr	r3, .L76+20
 1697 077e C7F89C30 		str	r3, [r7, #156]	@ float
 1698              	.L44:
 381:main.c        ****                             }
 382:main.c        ****                                 
 383:main.c        ****                             
 384:main.c        ****                             // Spoof
 385:main.c        ****                             sensors.distance[1] = dist_ref;
 1699              		.loc 1 385 0
 1700 0782 D7F89800 		ldr	r0, [r7, #152]	@ float
 1701 0786 FFF7FEFF 		bl	__aeabi_f2iz
 1702 078a 0246     		mov	r2, r0
 1703 078c 524B     		ldr	r3, .L76+24
 1704 078e DA61     		str	r2, [r3, #28]
 386:main.c        ****                             sensors.distance[2] = dist_ref;
 1705              		.loc 1 386 0
 1706 0790 D7F89800 		ldr	r0, [r7, #152]	@ float
 1707 0794 FFF7FEFF 		bl	__aeabi_f2iz
 1708 0798 0246     		mov	r2, r0
 1709 079a 4F4B     		ldr	r3, .L76+24
 1710 079c 1A62     		str	r2, [r3, #32]
 387:main.c        ****                             sensors.distance[3] = dist_ref;
 1711              		.loc 1 387 0
 1712 079e D7F89800 		ldr	r0, [r7, #152]	@ float
 1713 07a2 FFF7FEFF 		bl	__aeabi_f2iz
 1714 07a6 0246     		mov	r2, r0
 1715 07a8 4B4B     		ldr	r3, .L76+24
 1716 07aa 5A62     		str	r2, [r3, #36]
 388:main.c        ****                             sensors.distance[4] = dist_ref;
 1717              		.loc 1 388 0
 1718 07ac D7F89800 		ldr	r0, [r7, #152]	@ float
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 38


 1719 07b0 FFF7FEFF 		bl	__aeabi_f2iz
 1720 07b4 0246     		mov	r2, r0
 1721 07b6 484B     		ldr	r3, .L76+24
 1722 07b8 9A62     		str	r2, [r3, #40]
 389:main.c        ****                             sensors.distance[0] = 10000;
 1723              		.loc 1 389 0
 1724 07ba 474B     		ldr	r3, .L76+24
 1725 07bc 42F21072 		movw	r2, #10000
 1726 07c0 9A61     		str	r2, [r3, #24]
 390:main.c        ****                             sensors.distance[5] = 10000;
 1727              		.loc 1 390 0
 1728 07c2 454B     		ldr	r3, .L76+24
 1729 07c4 42F21072 		movw	r2, #10000
 1730 07c8 DA62     		str	r2, [r3, #44]
 391:main.c        ****                             break;
 1731              		.loc 1 391 0
 1732 07ca 7BE1     		b	.L25
 1733              	.L37:
 392:main.c        ****                         
 393:main.c        ****                         // Travelling Back to A *Can include a flag for safety measures
 394:main.c        ****                         case (180):
 395:main.c        **** 
 396:main.c        ****                             // Stop moving and turn towards loading bay
 397:main.c        ****                             robot.desired_v = 0;
 1734              		.loc 1 397 0
 1735 07cc 3E4A     		ldr	r2, .L76+8
 1736 07ce 4FF00003 		mov	r3, #0
 1737 07d2 4FF00004 		mov	r4, #0
 1738 07d6 C2E90C34 		strd	r3, [r2, #48]
 398:main.c        **** 
 399:main.c        ****                             // Go towards beginning
 400:main.c        ****                             ref_direction = calculate_angle_modulo(robot.theta + M_PI/2);
 1739              		.loc 1 400 0
 1740 07da 3B4B     		ldr	r3, .L76+8
 1741 07dc D3E90201 		ldrd	r0, [r3, #8]
 1742 07e0 37A3     		adr	r3, .L76
 1743 07e2 D3E90023 		ldrd	r2, [r3]
 1744 07e6 FFF7FEFF 		bl	__aeabi_dadd
 1745 07ea 0346     		mov	r3, r0
 1746 07ec 0C46     		mov	r4, r1
 1747 07ee 1846     		mov	r0, r3
 1748 07f0 2146     		mov	r1, r4
 1749 07f2 FFF7FEFF 		bl	calculate_angle_modulo
 1750 07f6 0346     		mov	r3, r0
 1751 07f8 0C46     		mov	r4, r1
 1752 07fa 1846     		mov	r0, r3
 1753 07fc 2146     		mov	r1, r4
 1754 07fe FFF7FEFF 		bl	__aeabi_d2f
 1755 0802 0346     		mov	r3, r0
 1756 0804 C7F8A430 		str	r3, [r7, #164]	@ float
 401:main.c        ****                             Turn_Delay(ref_direction);
 1757              		.loc 1 401 0
 1758 0808 D7F8A400 		ldr	r0, [r7, #164]	@ float
 1759 080c FFF7FEFF 		bl	__aeabi_f2d
 1760 0810 0346     		mov	r3, r0
 1761 0812 0C46     		mov	r4, r1
 1762 0814 1846     		mov	r0, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 39


 1763 0816 2146     		mov	r1, r4
 1764 0818 FFF7FEFF 		bl	Turn_Delay
 402:main.c        ****                             // Set position flag and track distance
 403:main.c        ****                             robot.goal_x = robot.x;
 1765              		.loc 1 403 0
 1766 081c 2A4B     		ldr	r3, .L76+8
 1767 081e 03F11004 		add	r4, r3, #16
 1768 0822 D4E90034 		ldrd	r3, [r4]
 1769 0826 284A     		ldr	r2, .L76+8
 1770 0828 C2E91634 		strd	r3, [r2, #88]
 404:main.c        ****                             robot.goal_y = robot.y;
 1771              		.loc 1 404 0
 1772 082c 264B     		ldr	r3, .L76+8
 1773 082e 03F11804 		add	r4, r3, #24
 1774 0832 D4E90034 		ldrd	r3, [r4]
 1775 0836 244A     		ldr	r2, .L76+8
 1776 0838 C2E91834 		strd	r3, [r2, #96]
 405:main.c        ****                             ref_direction_deg = angle_clamp(ref_direction_deg + 90);
 1777              		.loc 1 405 0
 1778 083c D7F8A030 		ldr	r3, [r7, #160]
 1779 0840 5A33     		adds	r3, r3, #90
 1780 0842 1846     		mov	r0, r3
 1781 0844 FFF7FEFF 		bl	angle_clamp
 1782 0848 C7F8A000 		str	r0, [r7, #160]
 406:main.c        ****                             robot.desired_v = velocity;
 1783              		.loc 1 406 0
 1784 084c B869     		ldr	r0, [r7, #24]
 1785 084e FFF7FEFF 		bl	__aeabi_i2d
 1786 0852 0346     		mov	r3, r0
 1787 0854 0C46     		mov	r4, r1
 1788 0856 1C4A     		ldr	r2, .L76+8
 1789 0858 C2E90C34 		strd	r3, [r2, #48]
 407:main.c        ****                             front_dist_th = 100;
 1790              		.loc 1 407 0
 1791 085c 1F4B     		ldr	r3, .L76+28
 1792 085e C7F89C30 		str	r3, [r7, #156]	@ float
 408:main.c        ****                             dist_ref = 70;
 1793              		.loc 1 408 0
 1794 0862 1A4B     		ldr	r3, .L76+12
 1795 0864 C7F89830 		str	r3, [r7, #152]	@ float
 409:main.c        ****                             wall_following_flag = 0;
 1796              		.loc 1 409 0
 1797 0868 194B     		ldr	r3, .L76+16
 1798 086a 0022     		movs	r2, #0
 1799 086c 1A60     		str	r2, [r3]
 410:main.c        ****                             arena_def = 70;
 1800              		.loc 1 410 0
 1801 086e 4623     		movs	r3, #70
 1802 0870 C7F88830 		str	r3, [r7, #136]
 411:main.c        ****                         
 412:main.c        ****                             // Spoof
 413:main.c        ****                             sensors.distance[1] = dist_ref;
 1803              		.loc 1 413 0
 1804 0874 D7F89800 		ldr	r0, [r7, #152]	@ float
 1805 0878 FFF7FEFF 		bl	__aeabi_f2iz
 1806 087c 0246     		mov	r2, r0
 1807 087e 164B     		ldr	r3, .L76+24
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 40


 1808 0880 DA61     		str	r2, [r3, #28]
 414:main.c        ****                             sensors.distance[2] = dist_ref;
 1809              		.loc 1 414 0
 1810 0882 D7F89800 		ldr	r0, [r7, #152]	@ float
 1811 0886 FFF7FEFF 		bl	__aeabi_f2iz
 1812 088a 0246     		mov	r2, r0
 1813 088c 124B     		ldr	r3, .L76+24
 1814 088e 1A62     		str	r2, [r3, #32]
 415:main.c        ****                             sensors.distance[3] = dist_ref;
 1815              		.loc 1 415 0
 1816 0890 D7F89800 		ldr	r0, [r7, #152]	@ float
 1817 0894 FFF7FEFF 		bl	__aeabi_f2iz
 1818 0898 0246     		mov	r2, r0
 1819 089a 0F4B     		ldr	r3, .L76+24
 1820 089c 5A62     		str	r2, [r3, #36]
 416:main.c        ****                             sensors.distance[4] = dist_ref;
 1821              		.loc 1 416 0
 1822 089e D7F89800 		ldr	r0, [r7, #152]	@ float
 1823 08a2 FFF7FEFF 		bl	__aeabi_f2iz
 1824 08a6 0246     		mov	r2, r0
 1825 08a8 0B4B     		ldr	r3, .L76+24
 1826 08aa 9A62     		str	r2, [r3, #40]
 417:main.c        ****                             sensors.distance[0] = 10000;
 1827              		.loc 1 417 0
 1828 08ac 0A4B     		ldr	r3, .L76+24
 1829 08ae 42F21072 		movw	r2, #10000
 1830 08b2 9A61     		str	r2, [r3, #24]
 418:main.c        ****                             sensors.distance[5] = 10000;
 1831              		.loc 1 418 0
 1832 08b4 084B     		ldr	r3, .L76+24
 1833 08b6 42F21072 		movw	r2, #10000
 1834 08ba DA62     		str	r2, [r3, #44]
 419:main.c        ****                             break;
 1835              		.loc 1 419 0
 1836 08bc 02E1     		b	.L25
 1837              	.L77:
 1838 08be 00BF     		.align	3
 1839              	.L76:
 1840 08c0 182D4454 		.word	1413754136
 1841 08c4 FB21F93F 		.word	1073291771
 1842 08c8 00000000 		.word	robot
 1843 08cc 00008C42 		.word	1116471296
 1844 08d0 00000000 		.word	wall_following_flag
 1845 08d4 00001643 		.word	1125515264
 1846 08d8 00000000 		.word	sensors
 1847 08dc 0000C842 		.word	1120403456
 1848              	.L38:
 420:main.c        **** 
 421:main.c        ****                         // Travelling Back to Start
 422:main.c        ****                         case (270):
 423:main.c        ****                              
 424:main.c        ****                             // Stop moving and point back to A
 425:main.c        ****                             robot.desired_v = 0;
 1849              		.loc 1 425 0
 1850 08e0 B54A     		ldr	r2, .L78+24
 1851 08e2 4FF00003 		mov	r3, #0
 1852 08e6 4FF00004 		mov	r4, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 41


 1853 08ea C2E90C34 		strd	r3, [r2, #48]
 426:main.c        **** 
 427:main.c        ****                             // Update Position
 428:main.c        ****                             robot.Kp = 0.9;
 1854              		.loc 1 428 0
 1855 08ee B24A     		ldr	r2, .L78+24
 1856 08f0 ABA4     		adr	r4, .L78
 1857 08f2 D4E90034 		ldrd	r3, [r4]
 1858 08f6 C2E91234 		strd	r3, [r2, #72]
 429:main.c        ****                             ref_direction = calculate_angle_modulo(robot.theta - M_PI);
 1859              		.loc 1 429 0
 1860 08fa AF4B     		ldr	r3, .L78+24
 1861 08fc D3E90201 		ldrd	r0, [r3, #8]
 1862 0900 A9A3     		adr	r3, .L78+8
 1863 0902 D3E90023 		ldrd	r2, [r3]
 1864 0906 FFF7FEFF 		bl	__aeabi_dsub
 1865 090a 0346     		mov	r3, r0
 1866 090c 0C46     		mov	r4, r1
 1867 090e 1846     		mov	r0, r3
 1868 0910 2146     		mov	r1, r4
 1869 0912 FFF7FEFF 		bl	calculate_angle_modulo
 1870 0916 0346     		mov	r3, r0
 1871 0918 0C46     		mov	r4, r1
 1872 091a 1846     		mov	r0, r3
 1873 091c 2146     		mov	r1, r4
 1874 091e FFF7FEFF 		bl	__aeabi_d2f
 1875 0922 0346     		mov	r3, r0
 1876 0924 C7F8A430 		str	r3, [r7, #164]	@ float
 430:main.c        ****                             Turn_Delay(ref_direction);
 1877              		.loc 1 430 0
 1878 0928 D7F8A400 		ldr	r0, [r7, #164]	@ float
 1879 092c FFF7FEFF 		bl	__aeabi_f2d
 1880 0930 0346     		mov	r3, r0
 1881 0932 0C46     		mov	r4, r1
 1882 0934 1846     		mov	r0, r3
 1883 0936 2146     		mov	r1, r4
 1884 0938 FFF7FEFF 		bl	Turn_Delay
 431:main.c        ****                             ref_direction_deg = angle_clamp(ref_direction_deg - 180);
 1885              		.loc 1 431 0
 1886 093c D7F8A030 		ldr	r3, [r7, #160]
 1887 0940 B43B     		subs	r3, r3, #180
 1888 0942 1846     		mov	r0, r3
 1889 0944 FFF7FEFF 		bl	angle_clamp
 1890 0948 C7F8A000 		str	r0, [r7, #160]
 432:main.c        ****                             robot.Kp = 1.75;
 1891              		.loc 1 432 0
 1892 094c 9A4A     		ldr	r2, .L78+24
 1893 094e 4FF00003 		mov	r3, #0
 1894 0952 9A4C     		ldr	r4, .L78+28
 1895 0954 C2E91234 		strd	r3, [r2, #72]
 433:main.c        ****                             
 434:main.c        ****                             // Set position flag and track distance
 435:main.c        ****                             robot.goal_x = robot.x;
 1896              		.loc 1 435 0
 1897 0958 974B     		ldr	r3, .L78+24
 1898 095a 03F11004 		add	r4, r3, #16
 1899 095e D4E90034 		ldrd	r3, [r4]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 42


 1900 0962 954A     		ldr	r2, .L78+24
 1901 0964 C2E91634 		strd	r3, [r2, #88]
 436:main.c        ****                             robot.goal_y = robot.y;
 1902              		.loc 1 436 0
 1903 0968 934B     		ldr	r3, .L78+24
 1904 096a 03F11804 		add	r4, r3, #24
 1905 096e D4E90034 		ldrd	r3, [r4]
 1906 0972 914A     		ldr	r2, .L78+24
 1907 0974 C2E91834 		strd	r3, [r2, #96]
 437:main.c        ****                             
 438:main.c        ****                             
 439:main.c        ****                             // Pause to load packages
 440:main.c        ****                             int delay_flag = 1;
 1908              		.loc 1 440 0
 1909 0978 0123     		movs	r3, #1
 1910 097a C7F88030 		str	r3, [r7, #128]
 441:main.c        ****                             while( delay_flag ) {
 1911              		.loc 1 441 0
 1912 097e 0EE0     		b	.L45
 1913              	.L46:
 442:main.c        ****                                 if( sensors.distance[3] < 100 ) {
 1914              		.loc 1 442 0
 1915 0980 8F4B     		ldr	r3, .L78+32
 1916 0982 5B6A     		ldr	r3, [r3, #36]
 1917 0984 632B     		cmp	r3, #99
 1918 0986 0ADC     		bgt	.L45
 443:main.c        ****                                     CyDelay(500);
 1919              		.loc 1 443 0
 1920 0988 4FF4FA70 		mov	r0, #500
 1921 098c FFF7FEFF 		bl	CyDelay
 444:main.c        ****                                     if(sensors.distance[3] < 100) {
 1922              		.loc 1 444 0
 1923 0990 8B4B     		ldr	r3, .L78+32
 1924 0992 5B6A     		ldr	r3, [r3, #36]
 1925 0994 632B     		cmp	r3, #99
 1926 0996 02DC     		bgt	.L45
 445:main.c        ****                                         delay_flag = 0;
 1927              		.loc 1 445 0
 1928 0998 0023     		movs	r3, #0
 1929 099a C7F88030 		str	r3, [r7, #128]
 1930              	.L45:
 441:main.c        ****                                 if( sensors.distance[3] < 100 ) {
 1931              		.loc 1 441 0
 1932 099e D7F88030 		ldr	r3, [r7, #128]
 1933 09a2 002B     		cmp	r3, #0
 1934 09a4 ECD1     		bne	.L46
 446:main.c        ****                                     }
 447:main.c        ****                                 }
 448:main.c        ****                             }
 449:main.c        ****                             
 450:main.c        ****                             robot.desired_v = velocity;
 1935              		.loc 1 450 0
 1936 09a6 B869     		ldr	r0, [r7, #24]
 1937 09a8 FFF7FEFF 		bl	__aeabi_i2d
 1938 09ac 0346     		mov	r3, r0
 1939 09ae 0C46     		mov	r4, r1
 1940 09b0 814A     		ldr	r2, .L78+24
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 43


 1941 09b2 C2E90C34 		strd	r3, [r2, #48]
 451:main.c        ****                             
 452:main.c        ****                             // Update Flags
 453:main.c        ****                             wall_following_flag = 0;
 1942              		.loc 1 453 0
 1943 09b6 834B     		ldr	r3, .L78+36
 1944 09b8 0022     		movs	r2, #0
 1945 09ba 1A60     		str	r2, [r3]
 454:main.c        ****                             dist_ref = 40;
 1946              		.loc 1 454 0
 1947 09bc 824B     		ldr	r3, .L78+40
 1948 09be C7F89830 		str	r3, [r7, #152]	@ float
 455:main.c        ****                             front_dist_th = 50;
 1949              		.loc 1 455 0
 1950 09c2 824B     		ldr	r3, .L78+44
 1951 09c4 C7F89C30 		str	r3, [r7, #156]	@ float
 456:main.c        ****                             return_flag = 0;
 1952              		.loc 1 456 0
 1953 09c8 0023     		movs	r3, #0
 1954 09ca C7F89430 		str	r3, [r7, #148]
 457:main.c        ****                             arena_def = 80;
 1955              		.loc 1 457 0
 1956 09ce 5023     		movs	r3, #80
 1957 09d0 C7F88830 		str	r3, [r7, #136]
 458:main.c        ****                                 
 459:main.c        ****                             // Spoof
 460:main.c        ****                             sensors.distance[1] = dist_ref;
 1958              		.loc 1 460 0
 1959 09d4 D7F89800 		ldr	r0, [r7, #152]	@ float
 1960 09d8 FFF7FEFF 		bl	__aeabi_f2iz
 1961 09dc 0246     		mov	r2, r0
 1962 09de 784B     		ldr	r3, .L78+32
 1963 09e0 DA61     		str	r2, [r3, #28]
 461:main.c        ****                             sensors.distance[2] = dist_ref;
 1964              		.loc 1 461 0
 1965 09e2 D7F89800 		ldr	r0, [r7, #152]	@ float
 1966 09e6 FFF7FEFF 		bl	__aeabi_f2iz
 1967 09ea 0246     		mov	r2, r0
 1968 09ec 744B     		ldr	r3, .L78+32
 1969 09ee 1A62     		str	r2, [r3, #32]
 462:main.c        ****                             sensors.distance[3] = dist_ref;
 1970              		.loc 1 462 0
 1971 09f0 D7F89800 		ldr	r0, [r7, #152]	@ float
 1972 09f4 FFF7FEFF 		bl	__aeabi_f2iz
 1973 09f8 0246     		mov	r2, r0
 1974 09fa 714B     		ldr	r3, .L78+32
 1975 09fc 5A62     		str	r2, [r3, #36]
 463:main.c        ****                             sensors.distance[4] = dist_ref;
 1976              		.loc 1 463 0
 1977 09fe D7F89800 		ldr	r0, [r7, #152]	@ float
 1978 0a02 FFF7FEFF 		bl	__aeabi_f2iz
 1979 0a06 0246     		mov	r2, r0
 1980 0a08 6D4B     		ldr	r3, .L78+32
 1981 0a0a 9A62     		str	r2, [r3, #40]
 464:main.c        ****                             sensors.distance[0] = 10000;
 1982              		.loc 1 464 0
 1983 0a0c 6C4B     		ldr	r3, .L78+32
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 44


 1984 0a0e 42F21072 		movw	r2, #10000
 1985 0a12 9A61     		str	r2, [r3, #24]
 465:main.c        ****                             sensors.distance[5] = 10000;
 1986              		.loc 1 465 0
 1987 0a14 6A4B     		ldr	r3, .L78+32
 1988 0a16 42F21072 		movw	r2, #10000
 1989 0a1a DA62     		str	r2, [r3, #44]
 466:main.c        ****                             
 467:main.c        ****                             break;
 1990              		.loc 1 467 0
 1991 0a1c 52E0     		b	.L25
 1992              	.L33:
 468:main.c        **** 
 469:main.c        ****                         default:
 470:main.c        ****                             
 471:main.c        ****                             // Wall follow if broken
 472:main.c        ****                             robot.desired_v = 0;
 1993              		.loc 1 472 0
 1994 0a1e 664A     		ldr	r2, .L78+24
 1995 0a20 4FF00003 		mov	r3, #0
 1996 0a24 4FF00004 		mov	r4, #0
 1997 0a28 C2E90C34 		strd	r3, [r2, #48]
 473:main.c        ****                             Turn_Delay(M_PI/2);
 1998              		.loc 1 473 0
 1999 0a2c 60A1     		adr	r1, .L78+16
 2000 0a2e D1E90001 		ldrd	r0, [r1]
 2001 0a32 FFF7FEFF 		bl	Turn_Delay
 474:main.c        ****                             ref_direction = calculate_angle_modulo(ref_direction - M_PI/2);
 2002              		.loc 1 474 0
 2003 0a36 D7F8A400 		ldr	r0, [r7, #164]	@ float
 2004 0a3a FFF7FEFF 		bl	__aeabi_f2d
 2005 0a3e 5CA3     		adr	r3, .L78+16
 2006 0a40 D3E90023 		ldrd	r2, [r3]
 2007 0a44 FFF7FEFF 		bl	__aeabi_dsub
 2008 0a48 0346     		mov	r3, r0
 2009 0a4a 0C46     		mov	r4, r1
 2010 0a4c 1846     		mov	r0, r3
 2011 0a4e 2146     		mov	r1, r4
 2012 0a50 FFF7FEFF 		bl	calculate_angle_modulo
 2013 0a54 0346     		mov	r3, r0
 2014 0a56 0C46     		mov	r4, r1
 2015 0a58 1846     		mov	r0, r3
 2016 0a5a 2146     		mov	r1, r4
 2017 0a5c FFF7FEFF 		bl	__aeabi_d2f
 2018 0a60 0346     		mov	r3, r0
 2019 0a62 C7F8A430 		str	r3, [r7, #164]	@ float
 475:main.c        ****                             
 476:main.c        ****                             robot.desired_v = velocity;
 2020              		.loc 1 476 0
 2021 0a66 B869     		ldr	r0, [r7, #24]
 2022 0a68 FFF7FEFF 		bl	__aeabi_i2d
 2023 0a6c 0346     		mov	r3, r0
 2024 0a6e 0C46     		mov	r4, r1
 2025 0a70 514A     		ldr	r2, .L78+24
 2026 0a72 C2E90C34 		strd	r3, [r2, #48]
 477:main.c        ****                             wall_following_flag = 0;
 2027              		.loc 1 477 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 45


 2028 0a76 534B     		ldr	r3, .L78+36
 2029 0a78 0022     		movs	r2, #0
 2030 0a7a 1A60     		str	r2, [r3]
 478:main.c        **** 
 479:main.c        ****                             // Spoof sensor to avoid sensor updates during turn
 480:main.c        ****                             sensors.distance[1] = dist_ref;
 2031              		.loc 1 480 0
 2032 0a7c D7F89800 		ldr	r0, [r7, #152]	@ float
 2033 0a80 FFF7FEFF 		bl	__aeabi_f2iz
 2034 0a84 0246     		mov	r2, r0
 2035 0a86 4E4B     		ldr	r3, .L78+32
 2036 0a88 DA61     		str	r2, [r3, #28]
 481:main.c        ****                             sensors.distance[2] = dist_ref;
 2037              		.loc 1 481 0
 2038 0a8a D7F89800 		ldr	r0, [r7, #152]	@ float
 2039 0a8e FFF7FEFF 		bl	__aeabi_f2iz
 2040 0a92 0246     		mov	r2, r0
 2041 0a94 4A4B     		ldr	r3, .L78+32
 2042 0a96 1A62     		str	r2, [r3, #32]
 482:main.c        ****                             sensors.distance[3] = dist_ref;
 2043              		.loc 1 482 0
 2044 0a98 D7F89800 		ldr	r0, [r7, #152]	@ float
 2045 0a9c FFF7FEFF 		bl	__aeabi_f2iz
 2046 0aa0 0246     		mov	r2, r0
 2047 0aa2 474B     		ldr	r3, .L78+32
 2048 0aa4 5A62     		str	r2, [r3, #36]
 483:main.c        ****                             sensors.distance[4] = dist_ref;
 2049              		.loc 1 483 0
 2050 0aa6 D7F89800 		ldr	r0, [r7, #152]	@ float
 2051 0aaa FFF7FEFF 		bl	__aeabi_f2iz
 2052 0aae 0246     		mov	r2, r0
 2053 0ab0 434B     		ldr	r3, .L78+32
 2054 0ab2 9A62     		str	r2, [r3, #40]
 484:main.c        ****                             sensors.distance[0] = 10000;
 2055              		.loc 1 484 0
 2056 0ab4 424B     		ldr	r3, .L78+32
 2057 0ab6 42F21072 		movw	r2, #10000
 2058 0aba 9A61     		str	r2, [r3, #24]
 485:main.c        ****                             sensors.distance[5] = 10000;
 2059              		.loc 1 485 0
 2060 0abc 404B     		ldr	r3, .L78+32
 2061 0abe 42F21072 		movw	r2, #10000
 2062 0ac2 DA62     		str	r2, [r3, #44]
 2063              	.L25:
 2064              	.LBE4:
 2065              	.LBE3:
 486:main.c        ****                     }
 487:main.c        ****                 }
 488:main.c        ****                 
 489:main.c        ****             }
 490:main.c        **** 
 491:main.c        ****             // Wall Following
 492:main.c        ****             float error = 0;
 2066              		.loc 1 492 0
 2067 0ac4 4FF00003 		mov	r3, #0
 2068 0ac8 7B61     		str	r3, [r7, #20]	@ float
 493:main.c        ****             int terminal_phase = sensors.distance[0] < 100 && sensors.distance[5] < 100;
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 46


 2069              		.loc 1 493 0
 2070 0aca 3D4B     		ldr	r3, .L78+32
 2071 0acc 9B69     		ldr	r3, [r3, #24]
 2072 0ace 632B     		cmp	r3, #99
 2073 0ad0 05DC     		bgt	.L47
 2074              		.loc 1 493 0 is_stmt 0 discriminator 1
 2075 0ad2 3B4B     		ldr	r3, .L78+32
 2076 0ad4 DB6A     		ldr	r3, [r3, #44]
 2077 0ad6 632B     		cmp	r3, #99
 2078 0ad8 01DC     		bgt	.L47
 2079              		.loc 1 493 0 discriminator 3
 2080 0ada 0123     		movs	r3, #1
 2081 0adc 00E0     		b	.L48
 2082              	.L47:
 2083              		.loc 1 493 0 discriminator 4
 2084 0ade 0023     		movs	r3, #0
 2085              	.L48:
 2086              		.loc 1 493 0 discriminator 6
 2087 0ae0 3B61     		str	r3, [r7, #16]
 494:main.c        ****             switch ( return_flag ){
 2088              		.loc 1 494 0 is_stmt 1 discriminator 6
 2089 0ae2 D7F89430 		ldr	r3, [r7, #148]
 2090 0ae6 002B     		cmp	r3, #0
 2091 0ae8 02D0     		beq	.L50
 2092 0aea 012B     		cmp	r3, #1
 2093 0aec 74D0     		beq	.L51
 2094              		.loc 1 494 0 is_stmt 0
 2095 0aee CAE0     		b	.L68
 2096              	.L50:
 495:main.c        ****                 case (0):
 496:main.c        ****                     // Follow Left Wall
 497:main.c        ****                     robot.desired_v = terminal_phase ? 10: velocity;
 2097              		.loc 1 497 0 is_stmt 1
 2098 0af0 3B69     		ldr	r3, [r7, #16]
 2099 0af2 002B     		cmp	r3, #0
 2100 0af4 05D1     		bne	.L52
 2101              		.loc 1 497 0 is_stmt 0 discriminator 1
 2102 0af6 B869     		ldr	r0, [r7, #24]
 2103 0af8 FFF7FEFF 		bl	__aeabi_i2d
 2104 0afc 0346     		mov	r3, r0
 2105 0afe 0C46     		mov	r4, r1
 2106 0b00 02E0     		b	.L53
 2107              	.L52:
 2108              		.loc 1 497 0 discriminator 2
 2109 0b02 4FF00003 		mov	r3, #0
 2110 0b06 324C     		ldr	r4, .L78+48
 2111              	.L53:
 2112              		.loc 1 497 0 discriminator 4
 2113 0b08 2B4A     		ldr	r2, .L78+24
 2114 0b0a C2E90C34 		strd	r3, [r2, #48]
 498:main.c        ****                     error = (sensors.distance[1] < sensors.distance[2]) ? dist_ref - sensors.distan
 2115              		.loc 1 498 0 is_stmt 1 discriminator 4
 2116 0b0e 2C4B     		ldr	r3, .L78+32
 2117 0b10 DA69     		ldr	r2, [r3, #28]
 2118 0b12 2B4B     		ldr	r3, .L78+32
 2119 0b14 1B6A     		ldr	r3, [r3, #32]
 2120 0b16 9A42     		cmp	r2, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 47


 2121 0b18 0CDA     		bge	.L54
 2122              		.loc 1 498 0 is_stmt 0 discriminator 1
 2123 0b1a 294B     		ldr	r3, .L78+32
 2124 0b1c DB69     		ldr	r3, [r3, #28]
 2125 0b1e 1846     		mov	r0, r3
 2126 0b20 FFF7FEFF 		bl	__aeabi_i2f
 2127 0b24 0346     		mov	r3, r0
 2128 0b26 1946     		mov	r1, r3
 2129 0b28 D7F89800 		ldr	r0, [r7, #152]	@ float
 2130 0b2c FFF7FEFF 		bl	__aeabi_fsub
 2131 0b30 0346     		mov	r3, r0
 2132 0b32 0BE0     		b	.L55
 2133              	.L54:
 2134              		.loc 1 498 0 discriminator 2
 2135 0b34 224B     		ldr	r3, .L78+32
 2136 0b36 1B6A     		ldr	r3, [r3, #32]
 2137 0b38 1846     		mov	r0, r3
 2138 0b3a FFF7FEFF 		bl	__aeabi_i2f
 2139 0b3e 0346     		mov	r3, r0
 2140 0b40 1946     		mov	r1, r3
 2141 0b42 D7F89800 		ldr	r0, [r7, #152]	@ float
 2142 0b46 FFF7FEFF 		bl	__aeabi_fsub
 2143 0b4a 0346     		mov	r3, r0
 2144              	.L55:
 2145              		.loc 1 498 0 discriminator 4
 2146 0b4c 7B61     		str	r3, [r7, #20]	@ float
 499:main.c        ****                     //error = dist_ref - (sensors.distance[1] + sensors.distance[2] / 2);
 500:main.c        ****                     if( error > 150 ) {break;}
 2147              		.loc 1 500 0 is_stmt 1 discriminator 4
 2148 0b4e 2149     		ldr	r1, .L78+52
 2149 0b50 7869     		ldr	r0, [r7, #20]	@ float
 2150 0b52 FFF7FEFF 		bl	__aeabi_fcmpgt
 2151 0b56 0346     		mov	r3, r0
 2152 0b58 002B     		cmp	r3, #0
 2153 0b5a 40F0A380 		bne	.L69
 501:main.c        ****                     theta_correction = wall_Kp * -(error);
 2154              		.loc 1 501 0 discriminator 4
 2155 0b5e 7B69     		ldr	r3, [r7, #20]
 2156 0b60 83F00043 		eor	r3, r3, #-2147483648
 2157 0b64 396A     		ldr	r1, [r7, #32]	@ float
 2158 0b66 1846     		mov	r0, r3
 2159 0b68 FFF7FEFF 		bl	__aeabi_fmul
 2160 0b6c 0346     		mov	r3, r0
 2161 0b6e 7B62     		str	r3, [r7, #36]	@ float
 502:main.c        ****                     robot.desired_theta = calculate_angle_modulo(ref_direction + theta_correction);
 2162              		.loc 1 502 0 discriminator 4
 2163 0b70 796A     		ldr	r1, [r7, #36]	@ float
 2164 0b72 D7F8A400 		ldr	r0, [r7, #164]	@ float
 2165 0b76 FFF7FEFF 		bl	__aeabi_fadd
 2166 0b7a 0346     		mov	r3, r0
 2167 0b7c 1846     		mov	r0, r3
 2168 0b7e FFF7FEFF 		bl	__aeabi_f2d
 2169 0b82 0346     		mov	r3, r0
 2170 0b84 0C46     		mov	r4, r1
 2171 0b86 1846     		mov	r0, r3
 2172 0b88 2146     		mov	r1, r4
 2173 0b8a FFF7FEFF 		bl	calculate_angle_modulo
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 48


 2174 0b8e 0346     		mov	r3, r0
 2175 0b90 0C46     		mov	r4, r1
 2176 0b92 094A     		ldr	r2, .L78+24
 2177 0b94 C2E90E34 		strd	r3, [r2, #56]
 503:main.c        ****                     wall_following_flag = 0;
 2178              		.loc 1 503 0 discriminator 4
 2179 0b98 0A4B     		ldr	r3, .L78+36
 2180 0b9a 0022     		movs	r2, #0
 2181 0b9c 1A60     		str	r2, [r3]
 504:main.c        ****                     
 505:main.c        ****                     break;    
 2182              		.loc 1 505 0 discriminator 4
 2183 0b9e 85E0     		b	.L24
 2184              	.L79:
 2185              		.align	3
 2186              	.L78:
 2187 0ba0 CDCCCCCC 		.word	-858993459
 2188 0ba4 CCCCEC3F 		.word	1072483532
 2189 0ba8 182D4454 		.word	1413754136
 2190 0bac FB210940 		.word	1074340347
 2191 0bb0 182D4454 		.word	1413754136
 2192 0bb4 FB21F93F 		.word	1073291771
 2193 0bb8 00000000 		.word	robot
 2194 0bbc 0000FC3F 		.word	1073479680
 2195 0bc0 00000000 		.word	sensors
 2196 0bc4 00000000 		.word	wall_following_flag
 2197 0bc8 00002042 		.word	1109393408
 2198 0bcc 00004842 		.word	1112014848
 2199 0bd0 00002440 		.word	1076101120
 2200 0bd4 00001643 		.word	1125515264
 2201              	.L51:
 506:main.c        ****                 
 507:main.c        ****                 case (1):
 508:main.c        ****                     // Follow right wall
 509:main.c        ****                     robot.desired_v = terminal_phase ? 10: velocity;
 2202              		.loc 1 509 0
 2203 0bd8 3B69     		ldr	r3, [r7, #16]
 2204 0bda 002B     		cmp	r3, #0
 2205 0bdc 05D1     		bne	.L58
 2206              		.loc 1 509 0 is_stmt 0 discriminator 1
 2207 0bde B869     		ldr	r0, [r7, #24]
 2208 0be0 FFF7FEFF 		bl	__aeabi_i2d
 2209 0be4 0346     		mov	r3, r0
 2210 0be6 0C46     		mov	r4, r1
 2211 0be8 02E0     		b	.L59
 2212              	.L58:
 2213              		.loc 1 509 0 discriminator 2
 2214 0bea 4FF00003 		mov	r3, #0
 2215 0bee 324C     		ldr	r4, .L80+8
 2216              	.L59:
 2217              		.loc 1 509 0 discriminator 4
 2218 0bf0 324A     		ldr	r2, .L80+12
 2219 0bf2 C2E90C34 		strd	r3, [r2, #48]
 510:main.c        ****                     
 511:main.c        ****                     error = (sensors.distance[3] < sensors.distance[4]) ? dist_ref - sensors.distan
 2220              		.loc 1 511 0 is_stmt 1 discriminator 4
 2221 0bf6 324B     		ldr	r3, .L80+16
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 49


 2222 0bf8 5A6A     		ldr	r2, [r3, #36]
 2223 0bfa 314B     		ldr	r3, .L80+16
 2224 0bfc 9B6A     		ldr	r3, [r3, #40]
 2225 0bfe 9A42     		cmp	r2, r3
 2226 0c00 0CDA     		bge	.L60
 2227              		.loc 1 511 0 is_stmt 0 discriminator 1
 2228 0c02 2F4B     		ldr	r3, .L80+16
 2229 0c04 5B6A     		ldr	r3, [r3, #36]
 2230 0c06 1846     		mov	r0, r3
 2231 0c08 FFF7FEFF 		bl	__aeabi_i2f
 2232 0c0c 0346     		mov	r3, r0
 2233 0c0e 1946     		mov	r1, r3
 2234 0c10 D7F89800 		ldr	r0, [r7, #152]	@ float
 2235 0c14 FFF7FEFF 		bl	__aeabi_fsub
 2236 0c18 0346     		mov	r3, r0
 2237 0c1a 0BE0     		b	.L61
 2238              	.L60:
 2239              		.loc 1 511 0 discriminator 2
 2240 0c1c 284B     		ldr	r3, .L80+16
 2241 0c1e 9B6A     		ldr	r3, [r3, #40]
 2242 0c20 1846     		mov	r0, r3
 2243 0c22 FFF7FEFF 		bl	__aeabi_i2f
 2244 0c26 0346     		mov	r3, r0
 2245 0c28 1946     		mov	r1, r3
 2246 0c2a D7F89800 		ldr	r0, [r7, #152]	@ float
 2247 0c2e FFF7FEFF 		bl	__aeabi_fsub
 2248 0c32 0346     		mov	r3, r0
 2249              	.L61:
 2250              		.loc 1 511 0 discriminator 4
 2251 0c34 7B61     		str	r3, [r7, #20]	@ float
 512:main.c        ****                     //error = dist_ref - (sensors.distance[3] + sensors.distance[4] / 2);
 513:main.c        ****                     if( error > 150 ) { break; }
 2252              		.loc 1 513 0 is_stmt 1 discriminator 4
 2253 0c36 2349     		ldr	r1, .L80+20
 2254 0c38 7869     		ldr	r0, [r7, #20]	@ float
 2255 0c3a FFF7FEFF 		bl	__aeabi_fcmpgt
 2256 0c3e 0346     		mov	r3, r0
 2257 0c40 002B     		cmp	r3, #0
 2258 0c42 32D1     		bne	.L70
 514:main.c        ****                     theta_correction = wall_Kp * -(error);
 2259              		.loc 1 514 0 discriminator 4
 2260 0c44 7B69     		ldr	r3, [r7, #20]
 2261 0c46 83F00043 		eor	r3, r3, #-2147483648
 2262 0c4a 396A     		ldr	r1, [r7, #32]	@ float
 2263 0c4c 1846     		mov	r0, r3
 2264 0c4e FFF7FEFF 		bl	__aeabi_fmul
 2265 0c52 0346     		mov	r3, r0
 2266 0c54 7B62     		str	r3, [r7, #36]	@ float
 515:main.c        ****                     robot.desired_theta = calculate_angle_modulo(ref_direction - theta_correction);
 2267              		.loc 1 515 0 discriminator 4
 2268 0c56 796A     		ldr	r1, [r7, #36]	@ float
 2269 0c58 D7F8A400 		ldr	r0, [r7, #164]	@ float
 2270 0c5c FFF7FEFF 		bl	__aeabi_fsub
 2271 0c60 0346     		mov	r3, r0
 2272 0c62 1846     		mov	r0, r3
 2273 0c64 FFF7FEFF 		bl	__aeabi_f2d
 2274 0c68 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 50


 2275 0c6a 0C46     		mov	r4, r1
 2276 0c6c 1846     		mov	r0, r3
 2277 0c6e 2146     		mov	r1, r4
 2278 0c70 FFF7FEFF 		bl	calculate_angle_modulo
 2279 0c74 0346     		mov	r3, r0
 2280 0c76 0C46     		mov	r4, r1
 2281 0c78 104A     		ldr	r2, .L80+12
 2282 0c7a C2E90E34 		strd	r3, [r2, #56]
 516:main.c        ****                     wall_following_flag = 0;
 2283              		.loc 1 516 0 discriminator 4
 2284 0c7e 124B     		ldr	r3, .L80+24
 2285 0c80 0022     		movs	r2, #0
 2286 0c82 1A60     		str	r2, [r3]
 517:main.c        ****                     
 518:main.c        ****                     break;  
 2287              		.loc 1 518 0 discriminator 4
 2288 0c84 12E0     		b	.L24
 2289              	.L68:
 519:main.c        ****                     
 520:main.c        ****                 default:
 521:main.c        ****                     robot.desired_v = 0;
 2290              		.loc 1 521 0
 2291 0c86 0D4A     		ldr	r2, .L80+12
 2292 0c88 4FF00003 		mov	r3, #0
 2293 0c8c 4FF00004 		mov	r4, #0
 2294 0c90 C2E90C34 		strd	r3, [r2, #48]
 522:main.c        ****                     robot.desired_theta = 190000;
 2295              		.loc 1 522 0
 2296 0c94 094A     		ldr	r2, .L80+12
 2297 0c96 06A4     		adr	r4, .L80
 2298 0c98 D4E90034 		ldrd	r3, [r4]
 2299 0c9c C2E90E34 		strd	r3, [r2, #56]
 2300 0ca0 FFF791BA 		b	.L64
 2301              	.L69:
 500:main.c        ****                     theta_correction = wall_Kp * -(error);
 2302              		.loc 1 500 0
 2303 0ca4 00BF     		nop
 2304 0ca6 FFF78EBA 		b	.L64
 2305              	.L70:
 513:main.c        ****                     theta_correction = wall_Kp * -(error);
 2306              		.loc 1 513 0
 2307 0caa 00BF     		nop
 2308              	.L24:
 2309              	.LBE2:
 523:main.c        ****                  
 524:main.c        ****             }
 525:main.c        ****             
 526:main.c        ****             
 527:main.c        ****         }
 528:main.c        **** 
 529:main.c        ****     } 
 2310              		.loc 1 529 0 discriminator 1
 2311 0cac FFF78BBA 		b	.L64
 2312              	.L81:
 2313              		.align	3
 2314              	.L80:
 2315 0cb0 00000000 		.word	0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 51


 2316 0cb4 80310741 		.word	1090990464
 2317 0cb8 00002440 		.word	1076101120
 2318 0cbc 00000000 		.word	robot
 2319 0cc0 00000000 		.word	sensors
 2320 0cc4 00001643 		.word	1125515264
 2321 0cc8 00000000 		.word	wall_following_flag
 2322              		.cfi_endproc
 2323              	.LFE68:
 2324              		.size	main, .-main
 2325              		.global	__aeabi_d2uiz
 2326              		.section	.text.Drive_Left_Motor,"ax",%progbits
 2327              		.align	2
 2328              		.global	Drive_Left_Motor
 2329              		.thumb
 2330              		.thumb_func
 2331              		.type	Drive_Left_Motor, %function
 2332              	Drive_Left_Motor:
 2333              	.LFB69:
 530:main.c        ****             
 531:main.c        **** }
 532:main.c        **** 
 533:main.c        **** // Drive functions
 534:main.c        **** void Drive_Left_Motor(long double duty_cycle) {
 2334              		.loc 1 534 0
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 8
 2337              		@ frame_needed = 1, uses_anonymous_args = 0
 2338 0000 90B5     		push	{r4, r7, lr}
 2339              		.cfi_def_cfa_offset 12
 2340              		.cfi_offset 4, -12
 2341              		.cfi_offset 7, -8
 2342              		.cfi_offset 14, -4
 2343 0002 83B0     		sub	sp, sp, #12
 2344              		.cfi_def_cfa_offset 24
 2345 0004 00AF     		add	r7, sp, #0
 2346              		.cfi_def_cfa_register 7
 2347 0006 C7E90001 		strd	r0, [r7]
 535:main.c        ****     if (duty_cycle < -1) {
 2348              		.loc 1 535 0
 2349 000a 4FF00002 		mov	r2, #0
 2350 000e 304B     		ldr	r3, .L96+8
 2351 0010 D7E90001 		ldrd	r0, [r7]
 2352 0014 FFF7FEFF 		bl	__aeabi_dcmplt
 2353 0018 0346     		mov	r3, r0
 2354 001a 002B     		cmp	r3, #0
 2355 001c 05D0     		beq	.L93
 536:main.c        ****         duty_cycle = -1;
 2356              		.loc 1 536 0
 2357 001e 4FF00003 		mov	r3, #0
 2358 0022 2B4C     		ldr	r4, .L96+8
 2359 0024 C7E90034 		strd	r3, [r7]
 2360 0028 0EE0     		b	.L85
 2361              	.L93:
 537:main.c        ****     } else if (duty_cycle > 1) {
 2362              		.loc 1 537 0
 2363 002a 4FF00002 		mov	r2, #0
 2364 002e 294B     		ldr	r3, .L96+12
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 52


 2365 0030 D7E90001 		ldrd	r0, [r7]
 2366 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 2367 0038 0346     		mov	r3, r0
 2368 003a 002B     		cmp	r3, #0
 2369 003c 04D0     		beq	.L85
 538:main.c        ****         duty_cycle = 1;
 2370              		.loc 1 538 0
 2371 003e 4FF00003 		mov	r3, #0
 2372 0042 244C     		ldr	r4, .L96+12
 2373 0044 C7E90034 		strd	r3, [r7]
 2374              	.L85:
 539:main.c        ****     }
 540:main.c        ****     
 541:main.c        ****     if (duty_cycle < 0) {
 2375              		.loc 1 541 0
 2376 0048 4FF00002 		mov	r2, #0
 2377 004c 4FF00003 		mov	r3, #0
 2378 0050 D7E90001 		ldrd	r0, [r7]
 2379 0054 FFF7FEFF 		bl	__aeabi_dcmplt
 2380 0058 0346     		mov	r3, r0
 2381 005a 002B     		cmp	r3, #0
 2382 005c 1BD0     		beq	.L94
 542:main.c        ****         duty_cycle = -duty_cycle;
 2383              		.loc 1 542 0
 2384 005e 3B68     		ldr	r3, [r7]
 2385 0060 3B60     		str	r3, [r7]
 2386 0062 7B68     		ldr	r3, [r7, #4]
 2387 0064 83F00043 		eor	r3, r3, #-2147483648
 2388 0068 7B60     		str	r3, [r7, #4]
 543:main.c        ****         PWM_Motor_L_WriteCompare1(0);
 2389              		.loc 1 543 0
 2390 006a 0020     		movs	r0, #0
 2391 006c FFF7FEFF 		bl	PWM_Motor_L_WriteCompare1
 544:main.c        ****         PWM_Motor_L_WriteCompare2(duty_cycle*10000);
 2392              		.loc 1 544 0
 2393 0070 15A3     		adr	r3, .L96
 2394 0072 D3E90023 		ldrd	r2, [r3]
 2395 0076 D7E90001 		ldrd	r0, [r7]
 2396 007a FFF7FEFF 		bl	__aeabi_dmul
 2397 007e 0346     		mov	r3, r0
 2398 0080 0C46     		mov	r4, r1
 2399 0082 1846     		mov	r0, r3
 2400 0084 2146     		mov	r1, r4
 2401 0086 FFF7FEFF 		bl	__aeabi_d2uiz
 2402 008a 0346     		mov	r3, r0
 2403 008c 9BB2     		uxth	r3, r3
 2404 008e 1846     		mov	r0, r3
 2405 0090 FFF7FEFF 		bl	PWM_Motor_L_WriteCompare2
 545:main.c        ****     } else {
 546:main.c        ****         PWM_Motor_L_WriteCompare1(duty_cycle*10000);
 547:main.c        ****         PWM_Motor_L_WriteCompare2(0);
 548:main.c        ****     }
 549:main.c        **** }
 2406              		.loc 1 549 0
 2407 0094 14E0     		b	.L95
 2408              	.L94:
 546:main.c        ****         PWM_Motor_L_WriteCompare2(0);
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 53


 2409              		.loc 1 546 0
 2410 0096 0CA3     		adr	r3, .L96
 2411 0098 D3E90023 		ldrd	r2, [r3]
 2412 009c D7E90001 		ldrd	r0, [r7]
 2413 00a0 FFF7FEFF 		bl	__aeabi_dmul
 2414 00a4 0346     		mov	r3, r0
 2415 00a6 0C46     		mov	r4, r1
 2416 00a8 1846     		mov	r0, r3
 2417 00aa 2146     		mov	r1, r4
 2418 00ac FFF7FEFF 		bl	__aeabi_d2uiz
 2419 00b0 0346     		mov	r3, r0
 2420 00b2 9BB2     		uxth	r3, r3
 2421 00b4 1846     		mov	r0, r3
 2422 00b6 FFF7FEFF 		bl	PWM_Motor_L_WriteCompare1
 547:main.c        ****     }
 2423              		.loc 1 547 0
 2424 00ba 0020     		movs	r0, #0
 2425 00bc FFF7FEFF 		bl	PWM_Motor_L_WriteCompare2
 2426              	.L95:
 2427              		.loc 1 549 0
 2428 00c0 00BF     		nop
 2429 00c2 0C37     		adds	r7, r7, #12
 2430              		.cfi_def_cfa_offset 12
 2431 00c4 BD46     		mov	sp, r7
 2432              		.cfi_def_cfa_register 13
 2433              		@ sp needed
 2434 00c6 90BD     		pop	{r4, r7, pc}
 2435              	.L97:
 2436              		.align	3
 2437              	.L96:
 2438 00c8 00000000 		.word	0
 2439 00cc 0088C340 		.word	1086556160
 2440 00d0 0000F0BF 		.word	-1074790400
 2441 00d4 0000F03F 		.word	1072693248
 2442              		.cfi_endproc
 2443              	.LFE69:
 2444              		.size	Drive_Left_Motor, .-Drive_Left_Motor
 2445              		.section	.text.Drive_Right_Motor,"ax",%progbits
 2446              		.align	2
 2447              		.global	Drive_Right_Motor
 2448              		.thumb
 2449              		.thumb_func
 2450              		.type	Drive_Right_Motor, %function
 2451              	Drive_Right_Motor:
 2452              	.LFB70:
 550:main.c        **** 
 551:main.c        **** void Drive_Right_Motor(long double duty_cycle) {
 2453              		.loc 1 551 0
 2454              		.cfi_startproc
 2455              		@ args = 0, pretend = 0, frame = 8
 2456              		@ frame_needed = 1, uses_anonymous_args = 0
 2457 0000 90B5     		push	{r4, r7, lr}
 2458              		.cfi_def_cfa_offset 12
 2459              		.cfi_offset 4, -12
 2460              		.cfi_offset 7, -8
 2461              		.cfi_offset 14, -4
 2462 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 54


 2463              		.cfi_def_cfa_offset 24
 2464 0004 00AF     		add	r7, sp, #0
 2465              		.cfi_def_cfa_register 7
 2466 0006 C7E90001 		strd	r0, [r7]
 552:main.c        ****     if (duty_cycle < -1) {
 2467              		.loc 1 552 0
 2468 000a 4FF00002 		mov	r2, #0
 2469 000e 304B     		ldr	r3, .L112+8
 2470 0010 D7E90001 		ldrd	r0, [r7]
 2471 0014 FFF7FEFF 		bl	__aeabi_dcmplt
 2472 0018 0346     		mov	r3, r0
 2473 001a 002B     		cmp	r3, #0
 2474 001c 05D0     		beq	.L109
 553:main.c        ****         duty_cycle = -1;
 2475              		.loc 1 553 0
 2476 001e 4FF00003 		mov	r3, #0
 2477 0022 2B4C     		ldr	r4, .L112+8
 2478 0024 C7E90034 		strd	r3, [r7]
 2479 0028 0EE0     		b	.L101
 2480              	.L109:
 554:main.c        ****     } else if (duty_cycle > 1) {
 2481              		.loc 1 554 0
 2482 002a 4FF00002 		mov	r2, #0
 2483 002e 294B     		ldr	r3, .L112+12
 2484 0030 D7E90001 		ldrd	r0, [r7]
 2485 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 2486 0038 0346     		mov	r3, r0
 2487 003a 002B     		cmp	r3, #0
 2488 003c 04D0     		beq	.L101
 555:main.c        ****         duty_cycle = 1;
 2489              		.loc 1 555 0
 2490 003e 4FF00003 		mov	r3, #0
 2491 0042 244C     		ldr	r4, .L112+12
 2492 0044 C7E90034 		strd	r3, [r7]
 2493              	.L101:
 556:main.c        ****     }
 557:main.c        ****     
 558:main.c        ****     if (duty_cycle < 0) {
 2494              		.loc 1 558 0
 2495 0048 4FF00002 		mov	r2, #0
 2496 004c 4FF00003 		mov	r3, #0
 2497 0050 D7E90001 		ldrd	r0, [r7]
 2498 0054 FFF7FEFF 		bl	__aeabi_dcmplt
 2499 0058 0346     		mov	r3, r0
 2500 005a 002B     		cmp	r3, #0
 2501 005c 1BD0     		beq	.L110
 559:main.c        ****         duty_cycle = -duty_cycle;
 2502              		.loc 1 559 0
 2503 005e 3B68     		ldr	r3, [r7]
 2504 0060 3B60     		str	r3, [r7]
 2505 0062 7B68     		ldr	r3, [r7, #4]
 2506 0064 83F00043 		eor	r3, r3, #-2147483648
 2507 0068 7B60     		str	r3, [r7, #4]
 560:main.c        ****         PWM_Motor_R_WriteCompare1(0);
 2508              		.loc 1 560 0
 2509 006a 0020     		movs	r0, #0
 2510 006c FFF7FEFF 		bl	PWM_Motor_R_WriteCompare1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 55


 561:main.c        ****         PWM_Motor_R_WriteCompare2(duty_cycle*5000);
 2511              		.loc 1 561 0
 2512 0070 15A3     		adr	r3, .L112
 2513 0072 D3E90023 		ldrd	r2, [r3]
 2514 0076 D7E90001 		ldrd	r0, [r7]
 2515 007a FFF7FEFF 		bl	__aeabi_dmul
 2516 007e 0346     		mov	r3, r0
 2517 0080 0C46     		mov	r4, r1
 2518 0082 1846     		mov	r0, r3
 2519 0084 2146     		mov	r1, r4
 2520 0086 FFF7FEFF 		bl	__aeabi_d2uiz
 2521 008a 0346     		mov	r3, r0
 2522 008c 9BB2     		uxth	r3, r3
 2523 008e 1846     		mov	r0, r3
 2524 0090 FFF7FEFF 		bl	PWM_Motor_R_WriteCompare2
 562:main.c        ****     } else {
 563:main.c        ****         PWM_Motor_R_WriteCompare1(duty_cycle*5000);
 564:main.c        ****         PWM_Motor_R_WriteCompare2(0);
 565:main.c        ****     }
 566:main.c        **** }
 2525              		.loc 1 566 0
 2526 0094 14E0     		b	.L111
 2527              	.L110:
 563:main.c        ****         PWM_Motor_R_WriteCompare2(0);
 2528              		.loc 1 563 0
 2529 0096 0CA3     		adr	r3, .L112
 2530 0098 D3E90023 		ldrd	r2, [r3]
 2531 009c D7E90001 		ldrd	r0, [r7]
 2532 00a0 FFF7FEFF 		bl	__aeabi_dmul
 2533 00a4 0346     		mov	r3, r0
 2534 00a6 0C46     		mov	r4, r1
 2535 00a8 1846     		mov	r0, r3
 2536 00aa 2146     		mov	r1, r4
 2537 00ac FFF7FEFF 		bl	__aeabi_d2uiz
 2538 00b0 0346     		mov	r3, r0
 2539 00b2 9BB2     		uxth	r3, r3
 2540 00b4 1846     		mov	r0, r3
 2541 00b6 FFF7FEFF 		bl	PWM_Motor_R_WriteCompare1
 564:main.c        ****     }
 2542              		.loc 1 564 0
 2543 00ba 0020     		movs	r0, #0
 2544 00bc FFF7FEFF 		bl	PWM_Motor_R_WriteCompare2
 2545              	.L111:
 2546              		.loc 1 566 0
 2547 00c0 00BF     		nop
 2548 00c2 0C37     		adds	r7, r7, #12
 2549              		.cfi_def_cfa_offset 12
 2550 00c4 BD46     		mov	sp, r7
 2551              		.cfi_def_cfa_register 13
 2552              		@ sp needed
 2553 00c6 90BD     		pop	{r4, r7, pc}
 2554              	.L113:
 2555              		.align	3
 2556              	.L112:
 2557 00c8 00000000 		.word	0
 2558 00cc 0088B340 		.word	1085507584
 2559 00d0 0000F0BF 		.word	-1074790400
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 56


 2560 00d4 0000F03F 		.word	1072693248
 2561              		.cfi_endproc
 2562              	.LFE70:
 2563              		.size	Drive_Right_Motor, .-Drive_Right_Motor
 2564              		.section	.text.Turn_Delay,"ax",%progbits
 2565              		.align	2
 2566              		.global	Turn_Delay
 2567              		.thumb
 2568              		.thumb_func
 2569              		.type	Turn_Delay, %function
 2570              	Turn_Delay:
 2571              	.LFB71:
 567:main.c        **** 
 568:main.c        **** void Turn_Delay(long double angle) {
 2572              		.loc 1 568 0
 2573              		.cfi_startproc
 2574              		@ args = 0, pretend = 0, frame = 16
 2575              		@ frame_needed = 1, uses_anonymous_args = 0
 2576 0000 90B5     		push	{r4, r7, lr}
 2577              		.cfi_def_cfa_offset 12
 2578              		.cfi_offset 4, -12
 2579              		.cfi_offset 7, -8
 2580              		.cfi_offset 14, -4
 2581 0002 85B0     		sub	sp, sp, #20
 2582              		.cfi_def_cfa_offset 32
 2583 0004 00AF     		add	r7, sp, #0
 2584              		.cfi_def_cfa_register 7
 2585 0006 C7E90001 		strd	r0, [r7]
 569:main.c        ****     // Set desired turn in radians
 570:main.c        ****     robot.desired_theta = angle;
 2586              		.loc 1 570 0
 2587 000a 434A     		ldr	r2, .L122+16
 2588 000c D7E90034 		ldrd	r3, [r7]
 2589 0010 C2E90E34 		strd	r3, [r2, #56]
 571:main.c        ****     float diff = fabs(robot.theta-robot.desired_theta);
 2590              		.loc 1 571 0
 2591 0014 404B     		ldr	r3, .L122+16
 2592 0016 D3E90201 		ldrd	r0, [r3, #8]
 2593 001a 3F4B     		ldr	r3, .L122+16
 2594 001c 03F13804 		add	r4, r3, #56
 2595 0020 D4E90034 		ldrd	r3, [r4]
 2596 0024 1A46     		mov	r2, r3
 2597 0026 2346     		mov	r3, r4
 2598 0028 FFF7FEFF 		bl	__aeabi_dsub
 2599 002c 0346     		mov	r3, r0
 2600 002e 0C46     		mov	r4, r1
 2601 0030 1846     		mov	r0, r3
 2602 0032 2146     		mov	r1, r4
 2603 0034 FFF7FEFF 		bl	__aeabi_d2f
 2604 0038 0346     		mov	r3, r0
 2605 003a 23F00043 		bic	r3, r3, #-2147483648
 2606 003e FB60     		str	r3, [r7, #12]	@ float
 572:main.c        ****     if( diff > M_PI ) { 
 2607              		.loc 1 572 0
 2608 0040 F868     		ldr	r0, [r7, #12]	@ float
 2609 0042 FFF7FEFF 		bl	__aeabi_f2d
 2610 0046 30A3     		adr	r3, .L122
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 57


 2611 0048 D3E90023 		ldrd	r2, [r3]
 2612 004c FFF7FEFF 		bl	__aeabi_dcmpgt
 2613 0050 0346     		mov	r3, r0
 2614 0052 002B     		cmp	r3, #0
 2615 0054 13D0     		beq	.L115
 573:main.c        ****         diff = M_TWOPI - diff; 
 2616              		.loc 1 573 0
 2617 0056 F868     		ldr	r0, [r7, #12]	@ float
 2618 0058 FFF7FEFF 		bl	__aeabi_f2d
 2619 005c 0346     		mov	r3, r0
 2620 005e 0C46     		mov	r4, r1
 2621 0060 1A46     		mov	r2, r3
 2622 0062 2346     		mov	r3, r4
 2623 0064 2AA1     		adr	r1, .L122+8
 2624 0066 D1E90001 		ldrd	r0, [r1]
 2625 006a FFF7FEFF 		bl	__aeabi_dsub
 2626 006e 0346     		mov	r3, r0
 2627 0070 0C46     		mov	r4, r1
 2628 0072 1846     		mov	r0, r3
 2629 0074 2146     		mov	r1, r4
 2630 0076 FFF7FEFF 		bl	__aeabi_d2f
 2631 007a 0346     		mov	r3, r0
 2632 007c FB60     		str	r3, [r7, #12]	@ float
 2633              	.L115:
 574:main.c        ****     }
 575:main.c        ****     // Idle loop to wait until turn is complete
 576:main.c        ****     while( diff > 0.25 ) {
 2634              		.loc 1 576 0
 2635 007e 35E0     		b	.L117
 2636              	.L119:
 577:main.c        ****         diff = fabs(robot.theta-robot.desired_theta);
 2637              		.loc 1 577 0
 2638 0080 254B     		ldr	r3, .L122+16
 2639 0082 D3E90201 		ldrd	r0, [r3, #8]
 2640 0086 244B     		ldr	r3, .L122+16
 2641 0088 03F13804 		add	r4, r3, #56
 2642 008c D4E90034 		ldrd	r3, [r4]
 2643 0090 1A46     		mov	r2, r3
 2644 0092 2346     		mov	r3, r4
 2645 0094 FFF7FEFF 		bl	__aeabi_dsub
 2646 0098 0346     		mov	r3, r0
 2647 009a 0C46     		mov	r4, r1
 2648 009c 1846     		mov	r0, r3
 2649 009e 2146     		mov	r1, r4
 2650 00a0 FFF7FEFF 		bl	__aeabi_d2f
 2651 00a4 0346     		mov	r3, r0
 2652 00a6 23F00043 		bic	r3, r3, #-2147483648
 2653 00aa FB60     		str	r3, [r7, #12]	@ float
 578:main.c        ****         if( diff > M_PI ) { 
 2654              		.loc 1 578 0
 2655 00ac F868     		ldr	r0, [r7, #12]	@ float
 2656 00ae FFF7FEFF 		bl	__aeabi_f2d
 2657 00b2 15A3     		adr	r3, .L122
 2658 00b4 D3E90023 		ldrd	r2, [r3]
 2659 00b8 FFF7FEFF 		bl	__aeabi_dcmpgt
 2660 00bc 0346     		mov	r3, r0
 2661 00be 002B     		cmp	r3, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 58


 2662 00c0 00D1     		bne	.L121
 2663 00c2 13E0     		b	.L117
 2664              	.L121:
 579:main.c        ****             diff = M_TWOPI - diff; 
 2665              		.loc 1 579 0
 2666 00c4 F868     		ldr	r0, [r7, #12]	@ float
 2667 00c6 FFF7FEFF 		bl	__aeabi_f2d
 2668 00ca 0346     		mov	r3, r0
 2669 00cc 0C46     		mov	r4, r1
 2670 00ce 1A46     		mov	r2, r3
 2671 00d0 2346     		mov	r3, r4
 2672 00d2 0FA1     		adr	r1, .L122+8
 2673 00d4 D1E90001 		ldrd	r0, [r1]
 2674 00d8 FFF7FEFF 		bl	__aeabi_dsub
 2675 00dc 0346     		mov	r3, r0
 2676 00de 0C46     		mov	r4, r1
 2677 00e0 1846     		mov	r0, r3
 2678 00e2 2146     		mov	r1, r4
 2679 00e4 FFF7FEFF 		bl	__aeabi_d2f
 2680 00e8 0346     		mov	r3, r0
 2681 00ea FB60     		str	r3, [r7, #12]	@ float
 2682              	.L117:
 576:main.c        ****         diff = fabs(robot.theta-robot.desired_theta);
 2683              		.loc 1 576 0
 2684 00ec 4FF07A51 		mov	r1, #1048576000
 2685 00f0 F868     		ldr	r0, [r7, #12]	@ float
 2686 00f2 FFF7FEFF 		bl	__aeabi_fcmpgt
 2687 00f6 0346     		mov	r3, r0
 2688 00f8 002B     		cmp	r3, #0
 2689 00fa C1D1     		bne	.L119
 580:main.c        ****         }
 581:main.c        ****     }; 
 582:main.c        **** }
 2690              		.loc 1 582 0
 2691 00fc 00BF     		nop
 2692 00fe 1437     		adds	r7, r7, #20
 2693              		.cfi_def_cfa_offset 12
 2694 0100 BD46     		mov	sp, r7
 2695              		.cfi_def_cfa_register 13
 2696              		@ sp needed
 2697 0102 90BD     		pop	{r4, r7, pc}
 2698              	.L123:
 2699 0104 AFF30080 		.align	3
 2700              	.L122:
 2701 0108 182D4454 		.word	1413754136
 2702 010c FB210940 		.word	1074340347
 2703 0110 182D4454 		.word	1413754136
 2704 0114 FB211940 		.word	1075388923
 2705 0118 00000000 		.word	robot
 2706              		.cfi_endproc
 2707              	.LFE71:
 2708              		.size	Turn_Delay, .-Turn_Delay
 2709              		.global	__aeabi_d2iz
 2710              		.section	.text.velocity_control,"ax",%progbits
 2711              		.align	2
 2712              		.global	velocity_control
 2713              		.thumb
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 59


 2714              		.thumb_func
 2715              		.type	velocity_control, %function
 2716              	velocity_control:
 2717              	.LFB72:
 583:main.c        **** 
 584:main.c        **** int velocity_control(int max_velocity) {
 2718              		.loc 1 584 0
 2719              		.cfi_startproc
 2720              		@ args = 0, pretend = 0, frame = 24
 2721              		@ frame_needed = 1, uses_anonymous_args = 0
 2722 0000 90B5     		push	{r4, r7, lr}
 2723              		.cfi_def_cfa_offset 12
 2724              		.cfi_offset 4, -12
 2725              		.cfi_offset 7, -8
 2726              		.cfi_offset 14, -4
 2727 0002 87B0     		sub	sp, sp, #28
 2728              		.cfi_def_cfa_offset 40
 2729 0004 00AF     		add	r7, sp, #0
 2730              		.cfi_def_cfa_register 7
 2731 0006 7860     		str	r0, [r7, #4]
 585:main.c        ****     // Adjust the velocity the closer we approach the walls
 586:main.c        ****     int avg_dist = (sensors.distance[0] + sensors.distance[1]) / 2;
 2732              		.loc 1 586 0
 2733 0008 164B     		ldr	r3, .L125
 2734 000a 9A69     		ldr	r2, [r3, #24]
 2735 000c 154B     		ldr	r3, .L125
 2736 000e DB69     		ldr	r3, [r3, #28]
 2737 0010 1344     		add	r3, r3, r2
 2738 0012 DA0F     		lsrs	r2, r3, #31
 2739 0014 1344     		add	r3, r3, r2
 2740 0016 5B10     		asrs	r3, r3, #1
 2741 0018 7B61     		str	r3, [r7, #20]
 587:main.c        ****     int thresh = 1;
 2742              		.loc 1 587 0
 2743 001a 0123     		movs	r3, #1
 2744 001c 3B61     		str	r3, [r7, #16]
 588:main.c        ****     int velocity = floor(max_velocity * (1200 - avg_dist) / 400);
 2745              		.loc 1 588 0
 2746 001e 7B69     		ldr	r3, [r7, #20]
 2747 0020 C3F59663 		rsb	r3, r3, #1200
 2748 0024 7A68     		ldr	r2, [r7, #4]
 2749 0026 02FB03F3 		mul	r3, r2, r3
 2750 002a 0F4A     		ldr	r2, .L125+4
 2751 002c 82FB0312 		smull	r1, r2, r2, r3
 2752 0030 D211     		asrs	r2, r2, #7
 2753 0032 DB17     		asrs	r3, r3, #31
 2754 0034 D31A     		subs	r3, r2, r3
 2755 0036 1846     		mov	r0, r3
 2756 0038 FFF7FEFF 		bl	__aeabi_i2d
 2757 003c 0346     		mov	r3, r0
 2758 003e 0C46     		mov	r4, r1
 2759 0040 1846     		mov	r0, r3
 2760 0042 2146     		mov	r1, r4
 2761 0044 FFF7FEFF 		bl	floor
 2762 0048 0346     		mov	r3, r0
 2763 004a 0C46     		mov	r4, r1
 2764 004c 1846     		mov	r0, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 60


 2765 004e 2146     		mov	r1, r4
 2766 0050 FFF7FEFF 		bl	__aeabi_d2iz
 2767 0054 0346     		mov	r3, r0
 2768 0056 FB60     		str	r3, [r7, #12]
 589:main.c        **** }
 2769              		.loc 1 589 0
 2770 0058 00BF     		nop
 2771 005a 1846     		mov	r0, r3
 2772 005c 1C37     		adds	r7, r7, #28
 2773              		.cfi_def_cfa_offset 12
 2774 005e BD46     		mov	sp, r7
 2775              		.cfi_def_cfa_register 13
 2776              		@ sp needed
 2777 0060 90BD     		pop	{r4, r7, pc}
 2778              	.L126:
 2779 0062 00BF     		.align	2
 2780              	.L125:
 2781 0064 00000000 		.word	sensors
 2782 0068 1F85EB51 		.word	1374389535
 2783              		.cfi_endproc
 2784              	.LFE72:
 2785              		.size	velocity_control, .-velocity_control
 2786              		.section	.text.move_servo,"ax",%progbits
 2787              		.align	2
 2788              		.global	move_servo
 2789              		.thumb
 2790              		.thumb_func
 2791              		.type	move_servo, %function
 2792              	move_servo:
 2793              	.LFB73:
 590:main.c        **** 
 591:main.c        **** void move_servo(int servo_nums) {
 2794              		.loc 1 591 0
 2795              		.cfi_startproc
 2796              		@ args = 0, pretend = 0, frame = 8
 2797              		@ frame_needed = 1, uses_anonymous_args = 0
 2798 0000 80B5     		push	{r7, lr}
 2799              		.cfi_def_cfa_offset 8
 2800              		.cfi_offset 7, -8
 2801              		.cfi_offset 14, -4
 2802 0002 82B0     		sub	sp, sp, #8
 2803              		.cfi_def_cfa_offset 16
 2804 0004 00AF     		add	r7, sp, #0
 2805              		.cfi_def_cfa_register 7
 2806 0006 7860     		str	r0, [r7, #4]
 592:main.c        ****     CyDelay(100);
 2807              		.loc 1 592 0
 2808 0008 6420     		movs	r0, #100
 2809 000a FFF7FEFF 		bl	CyDelay
 593:main.c        ****     PWM_ServoDir_WriteCompare1(2000);
 2810              		.loc 1 593 0
 2811 000e 4FF4FA60 		mov	r0, #2000
 2812 0012 FFF7FEFF 		bl	PWM_ServoDir_WriteCompare1
 594:main.c        ****     PWM_ServoDir_WriteCompare2(4000);
 2813              		.loc 1 594 0
 2814 0016 4FF47A60 		mov	r0, #4000
 2815 001a FFF7FEFF 		bl	PWM_ServoDir_WriteCompare2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 61


 595:main.c        ****     Control_Reg_ServoSelect_Write(servo_nums);
 2816              		.loc 1 595 0
 2817 001e 7B68     		ldr	r3, [r7, #4]
 2818 0020 DBB2     		uxtb	r3, r3
 2819 0022 1846     		mov	r0, r3
 2820 0024 FFF7FEFF 		bl	Control_Reg_ServoSelect_Write
 596:main.c        ****     CyDelayUs(100);
 2821              		.loc 1 596 0
 2822 0028 6420     		movs	r0, #100
 2823 002a FFF7FEFF 		bl	CyDelayUs
 597:main.c        ****     Control_Reg_ServoTrigger_Write(1);
 2824              		.loc 1 597 0
 2825 002e 0120     		movs	r0, #1
 2826 0030 FFF7FEFF 		bl	Control_Reg_ServoTrigger_Write
 598:main.c        ****     CyDelay(2300);
 2827              		.loc 1 598 0
 2828 0034 40F6FC00 		movw	r0, #2300
 2829 0038 FFF7FEFF 		bl	CyDelay
 599:main.c        ****     
 600:main.c        ****     PWM_ServoDir_WriteCompare1(4000);
 2830              		.loc 1 600 0
 2831 003c 4FF47A60 		mov	r0, #4000
 2832 0040 FFF7FEFF 		bl	PWM_ServoDir_WriteCompare1
 601:main.c        ****     PWM_ServoDir_WriteCompare2(2000);
 2833              		.loc 1 601 0
 2834 0044 4FF4FA60 		mov	r0, #2000
 2835 0048 FFF7FEFF 		bl	PWM_ServoDir_WriteCompare2
 602:main.c        ****     Control_Reg_ServoTrigger_Write(0);
 2836              		.loc 1 602 0
 2837 004c 0020     		movs	r0, #0
 2838 004e FFF7FEFF 		bl	Control_Reg_ServoTrigger_Write
 603:main.c        **** }
 2839              		.loc 1 603 0
 2840 0052 00BF     		nop
 2841 0054 0837     		adds	r7, r7, #8
 2842              		.cfi_def_cfa_offset 8
 2843 0056 BD46     		mov	sp, r7
 2844              		.cfi_def_cfa_register 13
 2845              		@ sp needed
 2846 0058 80BD     		pop	{r7, pc}
 2847              		.cfi_endproc
 2848              	.LFE73:
 2849              		.size	move_servo, .-move_servo
 2850 005a 00BF     		.text
 2851              	.Letext0:
 2852              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2853              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2854              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2855              		.file 5 "..\\Helper\\helper.h"
 2856              		.file 6 "..\\Robot\\robot.h"
 2857              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2858              		.section	.debug_info,"",%progbits
 2859              	.Ldebug_info0:
 2860 0000 10070000 		.4byte	0x710
 2861 0004 0400     		.2byte	0x4
 2862 0006 00000000 		.4byte	.Ldebug_abbrev0
 2863 000a 04       		.byte	0x4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 62


 2864 000b 01       		.uleb128 0x1
 2865 000c 90000000 		.4byte	.LASF102
 2866 0010 0C       		.byte	0xc
 2867 0011 3A040000 		.4byte	.LASF103
 2868 0015 5A020000 		.4byte	.LASF104
 2869 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2870 001d 00000000 		.4byte	0
 2871 0021 00000000 		.4byte	.Ldebug_line0
 2872 0025 02       		.uleb128 0x2
 2873 0026 01       		.byte	0x1
 2874 0027 06       		.byte	0x6
 2875 0028 50030000 		.4byte	.LASF0
 2876 002c 03       		.uleb128 0x3
 2877 002d DA020000 		.4byte	.LASF3
 2878 0031 02       		.byte	0x2
 2879 0032 1D       		.byte	0x1d
 2880 0033 37000000 		.4byte	0x37
 2881 0037 02       		.uleb128 0x2
 2882 0038 01       		.byte	0x1
 2883 0039 08       		.byte	0x8
 2884 003a 27030000 		.4byte	.LASF1
 2885 003e 02       		.uleb128 0x2
 2886 003f 02       		.byte	0x2
 2887 0040 05       		.byte	0x5
 2888 0041 48000000 		.4byte	.LASF2
 2889 0045 03       		.uleb128 0x3
 2890 0046 28010000 		.4byte	.LASF4
 2891 004a 02       		.byte	0x2
 2892 004b 2B       		.byte	0x2b
 2893 004c 50000000 		.4byte	0x50
 2894 0050 02       		.uleb128 0x2
 2895 0051 02       		.byte	0x2
 2896 0052 07       		.byte	0x7
 2897 0053 D0030000 		.4byte	.LASF5
 2898 0057 03       		.uleb128 0x3
 2899 0058 97040000 		.4byte	.LASF6
 2900 005c 02       		.byte	0x2
 2901 005d 3F       		.byte	0x3f
 2902 005e 62000000 		.4byte	0x62
 2903 0062 02       		.uleb128 0x2
 2904 0063 04       		.byte	0x4
 2905 0064 05       		.byte	0x5
 2906 0065 9F020000 		.4byte	.LASF7
 2907 0069 02       		.uleb128 0x2
 2908 006a 04       		.byte	0x4
 2909 006b 07       		.byte	0x7
 2910 006c B0020000 		.4byte	.LASF8
 2911 0070 02       		.uleb128 0x2
 2912 0071 08       		.byte	0x8
 2913 0072 05       		.byte	0x5
 2914 0073 0B020000 		.4byte	.LASF9
 2915 0077 02       		.uleb128 0x2
 2916 0078 08       		.byte	0x8
 2917 0079 07       		.byte	0x7
 2918 007a 64030000 		.4byte	.LASF10
 2919 007e 04       		.uleb128 0x4
 2920 007f 04       		.byte	0x4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 63


 2921 0080 05       		.byte	0x5
 2922 0081 696E7400 		.ascii	"int\000"
 2923 0085 02       		.uleb128 0x2
 2924 0086 04       		.byte	0x4
 2925 0087 07       		.byte	0x7
 2926 0088 84030000 		.4byte	.LASF11
 2927 008c 03       		.uleb128 0x3
 2928 008d 9B010000 		.4byte	.LASF12
 2929 0091 03       		.byte	0x3
 2930 0092 18       		.byte	0x18
 2931 0093 2C000000 		.4byte	0x2c
 2932 0097 03       		.uleb128 0x3
 2933 0098 91030000 		.4byte	.LASF13
 2934 009c 03       		.byte	0x3
 2935 009d 24       		.byte	0x24
 2936 009e 45000000 		.4byte	0x45
 2937 00a2 03       		.uleb128 0x3
 2938 00a3 5C030000 		.4byte	.LASF14
 2939 00a7 03       		.byte	0x3
 2940 00a8 2C       		.byte	0x2c
 2941 00a9 57000000 		.4byte	0x57
 2942 00ad 05       		.uleb128 0x5
 2943 00ae 64040000 		.4byte	.LASF15
 2944 00b2 04       		.byte	0x4
 2945 00b3 ED01     		.2byte	0x1ed
 2946 00b5 62000000 		.4byte	0x62
 2947 00b9 02       		.uleb128 0x2
 2948 00ba 04       		.byte	0x4
 2949 00bb 04       		.byte	0x4
 2950 00bc EF010000 		.4byte	.LASF16
 2951 00c0 02       		.uleb128 0x2
 2952 00c1 08       		.byte	0x8
 2953 00c2 04       		.byte	0x4
 2954 00c3 6A040000 		.4byte	.LASF17
 2955 00c7 02       		.uleb128 0x2
 2956 00c8 01       		.byte	0x1
 2957 00c9 08       		.byte	0x8
 2958 00ca FA030000 		.4byte	.LASF18
 2959 00ce 02       		.uleb128 0x2
 2960 00cf 08       		.byte	0x8
 2961 00d0 04       		.byte	0x4
 2962 00d1 0C030000 		.4byte	.LASF19
 2963 00d5 02       		.uleb128 0x2
 2964 00d6 04       		.byte	0x4
 2965 00d7 07       		.byte	0x7
 2966 00d8 65000000 		.4byte	.LASF20
 2967 00dc 06       		.uleb128 0x6
 2968 00dd 30       		.byte	0x30
 2969 00de 05       		.byte	0x5
 2970 00df 21       		.byte	0x21
 2971 00e0 FD000000 		.4byte	0xfd
 2972 00e4 07       		.uleb128 0x7
 2973 00e5 1E010000 		.4byte	.LASF21
 2974 00e9 05       		.byte	0x5
 2975 00ea 22       		.byte	0x22
 2976 00eb FD000000 		.4byte	0xfd
 2977 00ef 00       		.byte	0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 64


 2978 00f0 07       		.uleb128 0x7
 2979 00f1 F1030000 		.4byte	.LASF22
 2980 00f5 05       		.byte	0x5
 2981 00f6 23       		.byte	0x23
 2982 00f7 FD000000 		.4byte	0xfd
 2983 00fb 18       		.byte	0x18
 2984 00fc 00       		.byte	0
 2985 00fd 08       		.uleb128 0x8
 2986 00fe 7E000000 		.4byte	0x7e
 2987 0102 0D010000 		.4byte	0x10d
 2988 0106 09       		.uleb128 0x9
 2989 0107 D5000000 		.4byte	0xd5
 2990 010b 05       		.byte	0x5
 2991 010c 00       		.byte	0
 2992 010d 03       		.uleb128 0x3
 2993 010e FB020000 		.4byte	.LASF23
 2994 0112 05       		.byte	0x5
 2995 0113 24       		.byte	0x24
 2996 0114 DC000000 		.4byte	0xdc
 2997 0118 06       		.uleb128 0x6
 2998 0119 48       		.byte	0x48
 2999 011a 06       		.byte	0x6
 3000 011b 0A       		.byte	0xa
 3001 011c 89010000 		.4byte	0x189
 3002 0120 07       		.uleb128 0x7
 3003 0121 8C040000 		.4byte	.LASF24
 3004 0125 06       		.byte	0x6
 3005 0126 0B       		.byte	0xb
 3006 0127 CE000000 		.4byte	0xce
 3007 012b 00       		.byte	0
 3008 012c 07       		.uleb128 0x7
 3009 012d A1040000 		.4byte	.LASF25
 3010 0131 06       		.byte	0x6
 3011 0132 0C       		.byte	0xc
 3012 0133 CE000000 		.4byte	0xce
 3013 0137 08       		.byte	0x8
 3014 0138 0A       		.uleb128 0xa
 3015 0139 7700     		.ascii	"w\000"
 3016 013b 06       		.byte	0x6
 3017 013c 0D       		.byte	0xd
 3018 013d CE000000 		.4byte	0xce
 3019 0141 10       		.byte	0x10
 3020 0142 07       		.uleb128 0x7
 3021 0143 02050000 		.4byte	.LASF26
 3022 0147 06       		.byte	0x6
 3023 0148 0E       		.byte	0xe
 3024 0149 CE000000 		.4byte	0xce
 3025 014d 18       		.byte	0x18
 3026 014e 07       		.uleb128 0x7
 3027 014f 46030000 		.4byte	.LASF27
 3028 0153 06       		.byte	0x6
 3029 0154 0F       		.byte	0xf
 3030 0155 CE000000 		.4byte	0xce
 3031 0159 20       		.byte	0x20
 3032 015a 0A       		.uleb128 0xa
 3033 015b 4B6900   		.ascii	"Ki\000"
 3034 015e 06       		.byte	0x6
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 65


 3035 015f 10       		.byte	0x10
 3036 0160 CE000000 		.4byte	0xce
 3037 0164 28       		.byte	0x28
 3038 0165 0A       		.uleb128 0xa
 3039 0166 4B7000   		.ascii	"Kp\000"
 3040 0169 06       		.byte	0x6
 3041 016a 11       		.byte	0x11
 3042 016b CE000000 		.4byte	0xce
 3043 016f 30       		.byte	0x30
 3044 0170 07       		.uleb128 0x7
 3045 0171 4D020000 		.4byte	.LASF28
 3046 0175 06       		.byte	0x6
 3047 0176 12       		.byte	0x12
 3048 0177 C0000000 		.4byte	0xc0
 3049 017b 38       		.byte	0x38
 3050 017c 07       		.uleb128 0x7
 3051 017d E9040000 		.4byte	.LASF29
 3052 0181 06       		.byte	0x6
 3053 0182 13       		.byte	0x13
 3054 0183 7E000000 		.4byte	0x7e
 3055 0187 40       		.byte	0x40
 3056 0188 00       		.byte	0
 3057 0189 03       		.uleb128 0x3
 3058 018a 18030000 		.4byte	.LASF30
 3059 018e 06       		.byte	0x6
 3060 018f 15       		.byte	0x15
 3061 0190 18010000 		.4byte	0x118
 3062 0194 06       		.uleb128 0x6
 3063 0195 70       		.byte	0x70
 3064 0196 06       		.byte	0x6
 3065 0197 1A       		.byte	0x1a
 3066 0198 3B020000 		.4byte	0x23b
 3067 019c 07       		.uleb128 0x7
 3068 019d 09000000 		.4byte	.LASF31
 3069 01a1 06       		.byte	0x6
 3070 01a2 1C       		.byte	0x1c
 3071 01a3 CE000000 		.4byte	0xce
 3072 01a7 00       		.byte	0
 3073 01a8 07       		.uleb128 0x7
 3074 01a9 AB040000 		.4byte	.LASF32
 3075 01ad 06       		.byte	0x6
 3076 01ae 1F       		.byte	0x1f
 3077 01af CE000000 		.4byte	0xce
 3078 01b3 08       		.byte	0x8
 3079 01b4 0A       		.uleb128 0xa
 3080 01b5 7800     		.ascii	"x\000"
 3081 01b7 06       		.byte	0x6
 3082 01b8 20       		.byte	0x20
 3083 01b9 CE000000 		.4byte	0xce
 3084 01bd 10       		.byte	0x10
 3085 01be 0A       		.uleb128 0xa
 3086 01bf 7900     		.ascii	"y\000"
 3087 01c1 06       		.byte	0x6
 3088 01c2 21       		.byte	0x21
 3089 01c3 CE000000 		.4byte	0xce
 3090 01c7 18       		.byte	0x18
 3091 01c8 0A       		.uleb128 0xa
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 66


 3092 01c9 7600     		.ascii	"v\000"
 3093 01cb 06       		.byte	0x6
 3094 01cc 24       		.byte	0x24
 3095 01cd CE000000 		.4byte	0xce
 3096 01d1 20       		.byte	0x20
 3097 01d2 0A       		.uleb128 0xa
 3098 01d3 7700     		.ascii	"w\000"
 3099 01d5 06       		.byte	0x6
 3100 01d6 25       		.byte	0x25
 3101 01d7 CE000000 		.4byte	0xce
 3102 01db 28       		.byte	0x28
 3103 01dc 07       		.uleb128 0x7
 3104 01dd C2020000 		.4byte	.LASF33
 3105 01e1 06       		.byte	0x6
 3106 01e2 28       		.byte	0x28
 3107 01e3 CE000000 		.4byte	0xce
 3108 01e7 30       		.byte	0x30
 3109 01e8 07       		.uleb128 0x7
 3110 01e9 C6010000 		.4byte	.LASF34
 3111 01ed 06       		.byte	0x6
 3112 01ee 29       		.byte	0x29
 3113 01ef CE000000 		.4byte	0xce
 3114 01f3 38       		.byte	0x38
 3115 01f4 0A       		.uleb128 0xa
 3116 01f5 4B6900   		.ascii	"Ki\000"
 3117 01f8 06       		.byte	0x6
 3118 01f9 2C       		.byte	0x2c
 3119 01fa CE000000 		.4byte	0xce
 3120 01fe 40       		.byte	0x40
 3121 01ff 0A       		.uleb128 0xa
 3122 0200 4B7000   		.ascii	"Kp\000"
 3123 0203 06       		.byte	0x6
 3124 0204 2D       		.byte	0x2d
 3125 0205 CE000000 		.4byte	0xce
 3126 0209 48       		.byte	0x48
 3127 020a 07       		.uleb128 0x7
 3128 020b A1040000 		.4byte	.LASF25
 3129 020f 06       		.byte	0x6
 3130 0210 2E       		.byte	0x2e
 3131 0211 CE000000 		.4byte	0xce
 3132 0215 50       		.byte	0x50
 3133 0216 07       		.uleb128 0x7
 3134 0217 B0010000 		.4byte	.LASF35
 3135 021b 06       		.byte	0x6
 3136 021c 31       		.byte	0x31
 3137 021d CE000000 		.4byte	0xce
 3138 0221 58       		.byte	0x58
 3139 0222 07       		.uleb128 0x7
 3140 0223 3F030000 		.4byte	.LASF36
 3141 0227 06       		.byte	0x6
 3142 0228 32       		.byte	0x32
 3143 0229 CE000000 		.4byte	0xce
 3144 022d 60       		.byte	0x60
 3145 022e 07       		.uleb128 0x7
 3146 022f 35050000 		.4byte	.LASF37
 3147 0233 06       		.byte	0x6
 3148 0234 33       		.byte	0x33
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 67


 3149 0235 CE000000 		.4byte	0xce
 3150 0239 68       		.byte	0x68
 3151 023a 00       		.byte	0
 3152 023b 03       		.uleb128 0x3
 3153 023c 8A000000 		.4byte	.LASF38
 3154 0240 06       		.byte	0x6
 3155 0241 35       		.byte	0x35
 3156 0242 94010000 		.4byte	0x194
 3157 0246 0B       		.uleb128 0xb
 3158 0247 71040000 		.4byte	.LASF45
 3159 024b 01       		.byte	0x1
 3160 024c 40       		.byte	0x40
 3161 024d 00000000 		.4byte	.LFB64
 3162 0251 74000000 		.4byte	.LFE64-.LFB64
 3163 0255 01       		.uleb128 0x1
 3164 0256 9C       		.byte	0x9c
 3165 0257 0C       		.uleb128 0xc
 3166 0258 27020000 		.4byte	.LASF43
 3167 025c 01       		.byte	0x1
 3168 025d 51       		.byte	0x51
 3169 025e 00000000 		.4byte	.LFB65
 3170 0262 5C040000 		.4byte	.LFE65-.LFB65
 3171 0266 01       		.uleb128 0x1
 3172 0267 9C       		.byte	0x9c
 3173 0268 B4020000 		.4byte	0x2b4
 3174 026c 0D       		.uleb128 0xd
 3175 026d 6E657700 		.ascii	"new\000"
 3176 0271 01       		.byte	0x1
 3177 0272 53       		.byte	0x53
 3178 0273 AD000000 		.4byte	0xad
 3179 0277 02       		.uleb128 0x2
 3180 0278 91       		.byte	0x91
 3181 0279 4C       		.sleb128 -52
 3182 027a 0E       		.uleb128 0xe
 3183 027b 33000000 		.4byte	.LASF39
 3184 027f 01       		.byte	0x1
 3185 0280 53       		.byte	0x53
 3186 0281 AD000000 		.4byte	0xad
 3187 0285 02       		.uleb128 0x2
 3188 0286 91       		.byte	0x91
 3189 0287 48       		.sleb128 -56
 3190 0288 0E       		.uleb128 0xe
 3191 0289 FC040000 		.4byte	.LASF40
 3192 028d 01       		.byte	0x1
 3193 028e 6D       		.byte	0x6d
 3194 028f CE000000 		.4byte	0xce
 3195 0293 02       		.uleb128 0x2
 3196 0294 91       		.byte	0x91
 3197 0295 50       		.sleb128 -48
 3198 0296 0E       		.uleb128 0xe
 3199 0297 83040000 		.4byte	.LASF41
 3200 029b 01       		.byte	0x1
 3201 029c 76       		.byte	0x76
 3202 029d C0000000 		.4byte	0xc0
 3203 02a1 02       		.uleb128 0x2
 3204 02a2 91       		.byte	0x91
 3205 02a3 40       		.sleb128 -64
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 68


 3206 02a4 0E       		.uleb128 0xe
 3207 02a5 B8040000 		.4byte	.LASF42
 3208 02a9 01       		.byte	0x1
 3209 02aa 7A       		.byte	0x7a
 3210 02ab CE000000 		.4byte	0xce
 3211 02af 03       		.uleb128 0x3
 3212 02b0 91       		.byte	0x91
 3213 02b1 B87F     		.sleb128 -72
 3214 02b3 00       		.byte	0
 3215 02b4 0C       		.uleb128 0xc
 3216 02b5 55010000 		.4byte	.LASF44
 3217 02b9 01       		.byte	0x1
 3218 02ba 81       		.byte	0x81
 3219 02bb 00000000 		.4byte	.LFB66
 3220 02bf 54010000 		.4byte	.LFE66-.LFB66
 3221 02c3 01       		.uleb128 0x1
 3222 02c4 9C       		.byte	0x9c
 3223 02c5 D8020000 		.4byte	0x2d8
 3224 02c9 0E       		.uleb128 0xe
 3225 02ca FC040000 		.4byte	.LASF40
 3226 02ce 01       		.byte	0x1
 3227 02cf 82       		.byte	0x82
 3228 02d0 CE000000 		.4byte	0xce
 3229 02d4 02       		.uleb128 0x2
 3230 02d5 91       		.byte	0x91
 3231 02d6 60       		.sleb128 -32
 3232 02d7 00       		.byte	0
 3233 02d8 0F       		.uleb128 0xf
 3234 02d9 D0040000 		.4byte	.LASF46
 3235 02dd 01       		.byte	0x1
 3236 02de 8F       		.byte	0x8f
 3237 02df 00000000 		.4byte	.LFB67
 3238 02e3 24000000 		.4byte	.LFE67-.LFB67
 3239 02e7 01       		.uleb128 0x1
 3240 02e8 9C       		.byte	0x9c
 3241 02e9 10       		.uleb128 0x10
 3242 02ea 0D040000 		.4byte	.LASF79
 3243 02ee 01       		.byte	0x1
 3244 02ef 95       		.byte	0x95
 3245 02f0 7E000000 		.4byte	0x7e
 3246 02f4 00000000 		.4byte	.LFB68
 3247 02f8 CC0C0000 		.4byte	.LFE68-.LFB68
 3248 02fc 01       		.uleb128 0x1
 3249 02fd 9C       		.byte	0x9c
 3250 02fe CF040000 		.4byte	0x4cf
 3251 0302 0E       		.uleb128 0xe
 3252 0303 43050000 		.4byte	.LASF47
 3253 0307 01       		.byte	0x1
 3254 0308 AF       		.byte	0xaf
 3255 0309 CE000000 		.4byte	0xce
 3256 030d 03       		.uleb128 0x3
 3257 030e 91       		.byte	0x91
 3258 030f B07F     		.sleb128 -80
 3259 0311 0E       		.uleb128 0xe
 3260 0312 1E030000 		.4byte	.LASF48
 3261 0316 01       		.byte	0x1
 3262 0317 B0       		.byte	0xb0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 69


 3263 0318 CE000000 		.4byte	0xce
 3264 031c 03       		.uleb128 0x3
 3265 031d 91       		.byte	0x91
 3266 031e A87F     		.sleb128 -88
 3267 0320 0E       		.uleb128 0xe
 3268 0321 7B030000 		.4byte	.LASF49
 3269 0325 01       		.byte	0x1
 3270 0326 B1       		.byte	0xb1
 3271 0327 CE000000 		.4byte	0xce
 3272 032b 03       		.uleb128 0x3
 3273 032c 91       		.byte	0x91
 3274 032d A07F     		.sleb128 -96
 3275 032f 0E       		.uleb128 0xe
 3276 0330 A3030000 		.4byte	.LASF50
 3277 0334 01       		.byte	0x1
 3278 0335 B7       		.byte	0xb7
 3279 0336 CE000000 		.4byte	0xce
 3280 033a 03       		.uleb128 0x3
 3281 033b 91       		.byte	0x91
 3282 033c 987F     		.sleb128 -104
 3283 033e 0E       		.uleb128 0xe
 3284 033f 79000000 		.4byte	.LASF51
 3285 0343 01       		.byte	0x1
 3286 0344 B8       		.byte	0xb8
 3287 0345 CE000000 		.4byte	0xce
 3288 0349 03       		.uleb128 0x3
 3289 034a 91       		.byte	0x91
 3290 034b 907F     		.sleb128 -112
 3291 034d 0E       		.uleb128 0xe
 3292 034e 00000000 		.4byte	.LASF52
 3293 0352 01       		.byte	0x1
 3294 0353 B9       		.byte	0xb9
 3295 0354 CE000000 		.4byte	0xce
 3296 0358 03       		.uleb128 0x3
 3297 0359 91       		.byte	0x91
 3298 035a 887F     		.sleb128 -120
 3299 035c 0E       		.uleb128 0xe
 3300 035d 19050000 		.4byte	.LASF53
 3301 0361 01       		.byte	0x1
 3302 0362 BA       		.byte	0xba
 3303 0363 CE000000 		.4byte	0xce
 3304 0367 03       		.uleb128 0x3
 3305 0368 91       		.byte	0x91
 3306 0369 807F     		.sleb128 -128
 3307 036b 0E       		.uleb128 0xe
 3308 036c 38000000 		.4byte	.LASF54
 3309 0370 01       		.byte	0x1
 3310 0371 BE       		.byte	0xbe
 3311 0372 CE000000 		.4byte	0xce
 3312 0376 03       		.uleb128 0x3
 3313 0377 91       		.byte	0x91
 3314 0378 F87E     		.sleb128 -136
 3315 037a 0E       		.uleb128 0xe
 3316 037b 40000000 		.4byte	.LASF55
 3317 037f 01       		.byte	0x1
 3318 0380 BF       		.byte	0xbf
 3319 0381 CE000000 		.4byte	0xce
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 70


 3320 0385 03       		.uleb128 0x3
 3321 0386 91       		.byte	0x91
 3322 0387 F07E     		.sleb128 -144
 3323 0389 0E       		.uleb128 0xe
 3324 038a F3040000 		.4byte	.LASF56
 3325 038e 01       		.byte	0x1
 3326 038f C0       		.byte	0xc0
 3327 0390 CE000000 		.4byte	0xce
 3328 0394 03       		.uleb128 0x3
 3329 0395 91       		.byte	0x91
 3330 0396 E87E     		.sleb128 -152
 3331 0398 0E       		.uleb128 0xe
 3332 0399 57050000 		.4byte	.LASF57
 3333 039d 01       		.byte	0x1
 3334 039e CF       		.byte	0xcf
 3335 039f 7E000000 		.4byte	0x7e
 3336 03a3 03       		.uleb128 0x3
 3337 03a4 91       		.byte	0x91
 3338 03a5 E47E     		.sleb128 -156
 3339 03a7 0E       		.uleb128 0xe
 3340 03a8 51050000 		.4byte	.LASF58
 3341 03ac 01       		.byte	0x1
 3342 03ad D0       		.byte	0xd0
 3343 03ae CF040000 		.4byte	0x4cf
 3344 03b2 03       		.uleb128 0x3
 3345 03b3 91       		.byte	0x91
 3346 03b4 B87E     		.sleb128 -200
 3347 03b6 0E       		.uleb128 0xe
 3348 03b7 CC020000 		.4byte	.LASF59
 3349 03bb 01       		.byte	0x1
 3350 03bc D3       		.byte	0xd3
 3351 03bd 7E000000 		.4byte	0x7e
 3352 03c1 03       		.uleb128 0x3
 3353 03c2 91       		.byte	0x91
 3354 03c3 E07E     		.sleb128 -160
 3355 03c5 0E       		.uleb128 0xe
 3356 03c6 3F020000 		.4byte	.LASF60
 3357 03ca 01       		.byte	0x1
 3358 03cb DA       		.byte	0xda
 3359 03cc B9000000 		.4byte	0xb9
 3360 03d0 02       		.uleb128 0x2
 3361 03d1 91       		.byte	0x91
 3362 03d2 5C       		.sleb128 -36
 3363 03d3 0E       		.uleb128 0xe
 3364 03d4 BE040000 		.4byte	.LASF61
 3365 03d8 01       		.byte	0x1
 3366 03d9 DB       		.byte	0xdb
 3367 03da 7E000000 		.4byte	0x7e
 3368 03de 02       		.uleb128 0x2
 3369 03df 91       		.byte	0x91
 3370 03e0 58       		.sleb128 -40
 3371 03e1 0E       		.uleb128 0xe
 3372 03e2 29040000 		.4byte	.LASF62
 3373 03e6 01       		.byte	0x1
 3374 03e7 DF       		.byte	0xdf
 3375 03e8 B9000000 		.4byte	0xb9
 3376 03ec 03       		.uleb128 0x3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 71


 3377 03ed 91       		.byte	0x91
 3378 03ee DC7E     		.sleb128 -164
 3379 03f0 0E       		.uleb128 0xe
 3380 03f1 44010000 		.4byte	.LASF63
 3381 03f5 01       		.byte	0x1
 3382 03f6 E0       		.byte	0xe0
 3383 03f7 B9000000 		.4byte	0xb9
 3384 03fb 03       		.uleb128 0x3
 3385 03fc 91       		.byte	0x91
 3386 03fd D87E     		.sleb128 -168
 3387 03ff 0E       		.uleb128 0xe
 3388 0400 19020000 		.4byte	.LASF64
 3389 0404 01       		.byte	0x1
 3390 0405 E3       		.byte	0xe3
 3391 0406 B9000000 		.4byte	0xb9
 3392 040a 02       		.uleb128 0x2
 3393 040b 91       		.byte	0x91
 3394 040c 54       		.sleb128 -44
 3395 040d 0E       		.uleb128 0xe
 3396 040e 87010000 		.4byte	.LASF65
 3397 0412 01       		.byte	0x1
 3398 0413 E4       		.byte	0xe4
 3399 0414 B9000000 		.4byte	0xb9
 3400 0418 02       		.uleb128 0x2
 3401 0419 91       		.byte	0x91
 3402 041a 50       		.sleb128 -48
 3403 041b 0E       		.uleb128 0xe
 3404 041c EF020000 		.4byte	.LASF66
 3405 0420 01       		.byte	0x1
 3406 0421 E5       		.byte	0xe5
 3407 0422 7E000000 		.4byte	0x7e
 3408 0426 03       		.uleb128 0x3
 3409 0427 91       		.byte	0x91
 3410 0428 D47E     		.sleb128 -172
 3411 042a 0E       		.uleb128 0xe
 3412 042b 1D040000 		.4byte	.LASF67
 3413 042f 01       		.byte	0x1
 3414 0430 E8       		.byte	0xe8
 3415 0431 7E000000 		.4byte	0x7e
 3416 0435 02       		.uleb128 0x2
 3417 0436 91       		.byte	0x91
 3418 0437 4C       		.sleb128 -52
 3419 0438 0E       		.uleb128 0xe
 3420 0439 B1040000 		.4byte	.LASF68
 3421 043d 01       		.byte	0x1
 3422 043e E9       		.byte	0xe9
 3423 043f 7E000000 		.4byte	0x7e
 3424 0443 02       		.uleb128 0x2
 3425 0444 91       		.byte	0x91
 3426 0445 48       		.sleb128 -56
 3427 0446 0E       		.uleb128 0xe
 3428 0447 25000000 		.4byte	.LASF69
 3429 044b 01       		.byte	0x1
 3430 044c EA       		.byte	0xea
 3431 044d 7E000000 		.4byte	0x7e
 3432 0451 02       		.uleb128 0x2
 3433 0452 91       		.byte	0x91
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 72


 3434 0453 44       		.sleb128 -60
 3435 0454 0E       		.uleb128 0xe
 3436 0455 4C010000 		.4byte	.LASF70
 3437 0459 01       		.byte	0x1
 3438 045a ED       		.byte	0xed
 3439 045b 7E000000 		.4byte	0x7e
 3440 045f 03       		.uleb128 0x3
 3441 0460 91       		.byte	0x91
 3442 0461 D07E     		.sleb128 -176
 3443 0463 0E       		.uleb128 0xe
 3444 0464 02030000 		.4byte	.LASF71
 3445 0468 01       		.byte	0x1
 3446 0469 EE       		.byte	0xee
 3447 046a 7E000000 		.4byte	0x7e
 3448 046e 02       		.uleb128 0x2
 3449 046f 91       		.byte	0x91
 3450 0470 40       		.sleb128 -64
 3451 0471 11       		.uleb128 0x11
 3452 0472 CE010000 		.4byte	.LBB2
 3453 0476 DE0A0000 		.4byte	.LBE2-.LBB2
 3454 047a 12       		.uleb128 0x12
 3455 047b FC040000 		.4byte	.LASF40
 3456 047f 01       		.byte	0x1
 3457 0480 EC01     		.2byte	0x1ec
 3458 0482 B9000000 		.4byte	0xb9
 3459 0486 03       		.uleb128 0x3
 3460 0487 91       		.byte	0x91
 3461 0488 CC7E     		.sleb128 -180
 3462 048a 12       		.uleb128 0x12
 3463 048b B7010000 		.4byte	.LASF72
 3464 048f 01       		.byte	0x1
 3465 0490 ED01     		.2byte	0x1ed
 3466 0492 7E000000 		.4byte	0x7e
 3467 0496 03       		.uleb128 0x3
 3468 0497 91       		.byte	0x91
 3469 0498 C87E     		.sleb128 -184
 3470 049a 11       		.uleb128 0x11
 3471 049b 0A020000 		.4byte	.LBB3
 3472 049f BA080000 		.4byte	.LBE3-.LBB3
 3473 04a3 0E       		.uleb128 0xe
 3474 04a4 1A000000 		.4byte	.LASF73
 3475 04a8 01       		.byte	0x1
 3476 04a9 FE       		.byte	0xfe
 3477 04aa B9000000 		.4byte	0xb9
 3478 04ae 03       		.uleb128 0x3
 3479 04af 91       		.byte	0x91
 3480 04b0 BC7F     		.sleb128 -68
 3481 04b2 11       		.uleb128 0x11
 3482 04b3 EC030000 		.4byte	.LBB4
 3483 04b7 D8060000 		.4byte	.LBE4-.LBB4
 3484 04bb 12       		.uleb128 0x12
 3485 04bc 12040000 		.4byte	.LASF74
 3486 04c0 01       		.byte	0x1
 3487 04c1 B801     		.2byte	0x1b8
 3488 04c3 7E000000 		.4byte	0x7e
 3489 04c7 03       		.uleb128 0x3
 3490 04c8 91       		.byte	0x91
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 73


 3491 04c9 B87F     		.sleb128 -72
 3492 04cb 00       		.byte	0
 3493 04cc 00       		.byte	0
 3494 04cd 00       		.byte	0
 3495 04ce 00       		.byte	0
 3496 04cf 08       		.uleb128 0x8
 3497 04d0 7E000000 		.4byte	0x7e
 3498 04d4 DF040000 		.4byte	0x4df
 3499 04d8 09       		.uleb128 0x9
 3500 04d9 D5000000 		.4byte	0xd5
 3501 04dd 03       		.byte	0x3
 3502 04de 00       		.byte	0
 3503 04df 13       		.uleb128 0x13
 3504 04e0 6A010000 		.4byte	.LASF75
 3505 04e4 01       		.byte	0x1
 3506 04e5 1602     		.2byte	0x216
 3507 04e7 00000000 		.4byte	.LFB69
 3508 04eb D8000000 		.4byte	.LFE69-.LFB69
 3509 04ef 01       		.uleb128 0x1
 3510 04f0 9C       		.byte	0x9c
 3511 04f1 05050000 		.4byte	0x505
 3512 04f5 14       		.uleb128 0x14
 3513 04f6 8C040000 		.4byte	.LASF24
 3514 04fa 01       		.byte	0x1
 3515 04fb 1602     		.2byte	0x216
 3516 04fd CE000000 		.4byte	0xce
 3517 0501 02       		.uleb128 0x2
 3518 0502 91       		.byte	0x91
 3519 0503 68       		.sleb128 -24
 3520 0504 00       		.byte	0
 3521 0505 13       		.uleb128 0x13
 3522 0506 BE030000 		.4byte	.LASF76
 3523 050a 01       		.byte	0x1
 3524 050b 2702     		.2byte	0x227
 3525 050d 00000000 		.4byte	.LFB70
 3526 0511 D8000000 		.4byte	.LFE70-.LFB70
 3527 0515 01       		.uleb128 0x1
 3528 0516 9C       		.byte	0x9c
 3529 0517 2B050000 		.4byte	0x52b
 3530 051b 14       		.uleb128 0x14
 3531 051c 8C040000 		.4byte	.LASF24
 3532 0520 01       		.byte	0x1
 3533 0521 2702     		.2byte	0x227
 3534 0523 CE000000 		.4byte	0xce
 3535 0527 02       		.uleb128 0x2
 3536 0528 91       		.byte	0x91
 3537 0529 68       		.sleb128 -24
 3538 052a 00       		.byte	0
 3539 052b 13       		.uleb128 0x13
 3540 052c E4020000 		.4byte	.LASF77
 3541 0530 01       		.byte	0x1
 3542 0531 3802     		.2byte	0x238
 3543 0533 00000000 		.4byte	.LFB71
 3544 0537 1C010000 		.4byte	.LFE71-.LFB71
 3545 053b 01       		.uleb128 0x1
 3546 053c 9C       		.byte	0x9c
 3547 053d 60050000 		.4byte	0x560
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 74


 3548 0541 14       		.uleb128 0x14
 3549 0542 E3040000 		.4byte	.LASF78
 3550 0546 01       		.byte	0x1
 3551 0547 3802     		.2byte	0x238
 3552 0549 CE000000 		.4byte	0xce
 3553 054d 02       		.uleb128 0x2
 3554 054e 91       		.byte	0x91
 3555 054f 60       		.sleb128 -32
 3556 0550 12       		.uleb128 0x12
 3557 0551 33000000 		.4byte	.LASF39
 3558 0555 01       		.byte	0x1
 3559 0556 3B02     		.2byte	0x23b
 3560 0558 B9000000 		.4byte	0xb9
 3561 055c 02       		.uleb128 0x2
 3562 055d 91       		.byte	0x91
 3563 055e 6C       		.sleb128 -20
 3564 055f 00       		.byte	0
 3565 0560 15       		.uleb128 0x15
 3566 0561 33010000 		.4byte	.LASF80
 3567 0565 01       		.byte	0x1
 3568 0566 4802     		.2byte	0x248
 3569 0568 7E000000 		.4byte	0x7e
 3570 056c 00000000 		.4byte	.LFB72
 3571 0570 6C000000 		.4byte	.LFE72-.LFB72
 3572 0574 01       		.uleb128 0x1
 3573 0575 9C       		.byte	0x9c
 3574 0576 B7050000 		.4byte	0x5b7
 3575 057a 14       		.uleb128 0x14
 3576 057b A3010000 		.4byte	.LASF81
 3577 057f 01       		.byte	0x1
 3578 0580 4802     		.2byte	0x248
 3579 0582 7E000000 		.4byte	0x7e
 3580 0586 02       		.uleb128 0x2
 3581 0587 91       		.byte	0x91
 3582 0588 5C       		.sleb128 -36
 3583 0589 12       		.uleb128 0x12
 3584 058a 9A030000 		.4byte	.LASF82
 3585 058e 01       		.byte	0x1
 3586 058f 4A02     		.2byte	0x24a
 3587 0591 7E000000 		.4byte	0x7e
 3588 0595 02       		.uleb128 0x2
 3589 0596 91       		.byte	0x91
 3590 0597 6C       		.sleb128 -20
 3591 0598 12       		.uleb128 0x12
 3592 0599 D4010000 		.4byte	.LASF83
 3593 059d 01       		.byte	0x1
 3594 059e 4B02     		.2byte	0x24b
 3595 05a0 7E000000 		.4byte	0x7e
 3596 05a4 02       		.uleb128 0x2
 3597 05a5 91       		.byte	0x91
 3598 05a6 68       		.sleb128 -24
 3599 05a7 12       		.uleb128 0x12
 3600 05a8 4C010000 		.4byte	.LASF70
 3601 05ac 01       		.byte	0x1
 3602 05ad 4C02     		.2byte	0x24c
 3603 05af 7E000000 		.4byte	0x7e
 3604 05b3 02       		.uleb128 0x2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 75


 3605 05b4 91       		.byte	0x91
 3606 05b5 64       		.sleb128 -28
 3607 05b6 00       		.byte	0
 3608 05b7 13       		.uleb128 0x13
 3609 05b8 6E000000 		.4byte	.LASF84
 3610 05bc 01       		.byte	0x1
 3611 05bd 4F02     		.2byte	0x24f
 3612 05bf 00000000 		.4byte	.LFB73
 3613 05c3 5A000000 		.4byte	.LFE73-.LFB73
 3614 05c7 01       		.uleb128 0x1
 3615 05c8 9C       		.byte	0x9c
 3616 05c9 DD050000 		.4byte	0x5dd
 3617 05cd 14       		.uleb128 0x14
 3618 05ce 00020000 		.4byte	.LASF85
 3619 05d2 01       		.byte	0x1
 3620 05d3 4F02     		.2byte	0x24f
 3621 05d5 7E000000 		.4byte	0x7e
 3622 05d9 02       		.uleb128 0x2
 3623 05da 91       		.byte	0x91
 3624 05db 74       		.sleb128 -12
 3625 05dc 00       		.byte	0
 3626 05dd 16       		.uleb128 0x16
 3627 05de 0C050000 		.4byte	.LASF86
 3628 05e2 07       		.byte	0x7
 3629 05e3 1207     		.2byte	0x712
 3630 05e5 E9050000 		.4byte	0x5e9
 3631 05e9 17       		.uleb128 0x17
 3632 05ea A2000000 		.4byte	0xa2
 3633 05ee 18       		.uleb128 0x18
 3634 05ef 26050000 		.4byte	.LASF87
 3635 05f3 01       		.byte	0x1
 3636 05f4 25       		.byte	0x25
 3637 05f5 FF050000 		.4byte	0x5ff
 3638 05f9 05       		.uleb128 0x5
 3639 05fa 03       		.byte	0x3
 3640 05fb 00000000 		.4byte	PULSES_PER_REV
 3641 05ff 19       		.uleb128 0x19
 3642 0600 C0000000 		.4byte	0xc0
 3643 0604 18       		.uleb128 0x18
 3644 0605 52000000 		.4byte	.LASF88
 3645 0609 01       		.byte	0x1
 3646 060a 26       		.byte	0x26
 3647 060b FF050000 		.4byte	0x5ff
 3648 060f 05       		.uleb128 0x5
 3649 0610 03       		.byte	0x3
 3650 0611 00000000 		.4byte	POSE_UPDATE_PERIOD
 3651 0615 18       		.uleb128 0x18
 3652 0616 35030000 		.4byte	.LASF89
 3653 061a 01       		.byte	0x1
 3654 061b 28       		.byte	0x28
 3655 061c 8C000000 		.4byte	0x8c
 3656 0620 05       		.uleb128 0x5
 3657 0621 03       		.byte	0x3
 3658 0622 00000000 		.4byte	echo_flag
 3659 0626 18       		.uleb128 0x18
 3660 0627 B4030000 		.4byte	.LASF90
 3661 062b 01       		.byte	0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 76


 3662 062c 29       		.byte	0x29
 3663 062d 97000000 		.4byte	0x97
 3664 0631 05       		.uleb128 0x5
 3665 0632 03       		.byte	0x3
 3666 0633 00000000 		.4byte	max_count
 3667 0637 18       		.uleb128 0x18
 3668 0638 E3030000 		.4byte	.LASF91
 3669 063c 01       		.byte	0x1
 3670 063d 2A       		.byte	0x2a
 3671 063e 97000000 		.4byte	0x97
 3672 0642 05       		.uleb128 0x5
 3673 0643 03       		.byte	0x3
 3674 0644 00000000 		.4byte	echo_distance
 3675 0648 18       		.uleb128 0x18
 3676 0649 F5010000 		.4byte	.LASF92
 3677 064d 01       		.byte	0x1
 3678 064e 2B       		.byte	0x2b
 3679 064f 8C000000 		.4byte	0x8c
 3680 0653 05       		.uleb128 0x5
 3681 0654 03       		.byte	0x3
 3682 0655 00000000 		.4byte	mux_select
 3683 0659 1A       		.uleb128 0x1a
 3684 065a 64697200 		.ascii	"dir\000"
 3685 065e 01       		.byte	0x1
 3686 065f 2C       		.byte	0x2c
 3687 0660 7E000000 		.4byte	0x7e
 3688 0664 05       		.uleb128 0x5
 3689 0665 03       		.byte	0x3
 3690 0666 00000000 		.4byte	dir
 3691 066a 18       		.uleb128 0x18
 3692 066b 53040000 		.4byte	.LASF93
 3693 066f 01       		.byte	0x1
 3694 0670 2E       		.byte	0x2e
 3695 0671 AD000000 		.4byte	0xad
 3696 0675 05       		.uleb128 0x5
 3697 0676 03       		.byte	0x3
 3698 0677 00000000 		.4byte	left_wheel_count
 3699 067b 18       		.uleb128 0x18
 3700 067c 41040000 		.4byte	.LASF94
 3701 0680 01       		.byte	0x1
 3702 0681 2F       		.byte	0x2f
 3703 0682 AD000000 		.4byte	0xad
 3704 0686 05       		.uleb128 0x5
 3705 0687 03       		.byte	0x3
 3706 0688 00000000 		.4byte	right_wheel_count
 3707 068c 08       		.uleb128 0x8
 3708 068d C7000000 		.4byte	0xc7
 3709 0691 9C060000 		.4byte	0x69c
 3710 0695 09       		.uleb128 0x9
 3711 0696 D5000000 		.4byte	0xd5
 3712 069a 95       		.byte	0x95
 3713 069b 00       		.byte	0
 3714 069c 18       		.uleb128 0x18
 3715 069d FF030000 		.4byte	.LASF95
 3716 06a1 01       		.byte	0x1
 3717 06a2 30       		.byte	0x30
 3718 06a3 8C060000 		.4byte	0x68c
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 77


 3719 06a7 05       		.uleb128 0x5
 3720 06a8 03       		.byte	0x3
 3721 06a9 00000000 		.4byte	serial_output
 3722 06ad 18       		.uleb128 0x18
 3723 06ae DB010000 		.4byte	.LASF96
 3724 06b2 01       		.byte	0x1
 3725 06b3 31       		.byte	0x31
 3726 06b4 7E000000 		.4byte	0x7e
 3727 06b8 05       		.uleb128 0x5
 3728 06b9 03       		.byte	0x3
 3729 06ba 00000000 		.4byte	wall_following_flag
 3730 06be 18       		.uleb128 0x18
 3731 06bf A8020000 		.4byte	.LASF97
 3732 06c3 01       		.byte	0x1
 3733 06c4 32       		.byte	0x32
 3734 06c5 7E000000 		.4byte	0x7e
 3735 06c9 05       		.uleb128 0x5
 3736 06ca 03       		.byte	0x3
 3737 06cb 00000000 		.4byte	pbutton
 3738 06cf 18       		.uleb128 0x18
 3739 06d0 90010000 		.4byte	.LASF98
 3740 06d4 01       		.byte	0x1
 3741 06d5 35       		.byte	0x35
 3742 06d6 89010000 		.4byte	0x189
 3743 06da 05       		.uleb128 0x5
 3744 06db 03       		.byte	0x3
 3745 06dc 00000000 		.4byte	left_motor
 3746 06e0 18       		.uleb128 0x18
 3747 06e1 7B010000 		.4byte	.LASF99
 3748 06e5 01       		.byte	0x1
 3749 06e6 36       		.byte	0x36
 3750 06e7 89010000 		.4byte	0x189
 3751 06eb 05       		.uleb128 0x5
 3752 06ec 03       		.byte	0x3
 3753 06ed 00000000 		.4byte	right_motor
 3754 06f1 18       		.uleb128 0x18
 3755 06f2 14000000 		.4byte	.LASF100
 3756 06f6 01       		.byte	0x1
 3757 06f7 37       		.byte	0x37
 3758 06f8 3B020000 		.4byte	0x23b
 3759 06fc 05       		.uleb128 0x5
 3760 06fd 03       		.byte	0x3
 3761 06fe 00000000 		.4byte	robot
 3762 0702 18       		.uleb128 0x18
 3763 0703 82000000 		.4byte	.LASF101
 3764 0707 01       		.byte	0x1
 3765 0708 38       		.byte	0x38
 3766 0709 0D010000 		.4byte	0x10d
 3767 070d 05       		.uleb128 0x5
 3768 070e 03       		.byte	0x3
 3769 070f 00000000 		.4byte	sensors
 3770 0713 00       		.byte	0
 3771              		.section	.debug_abbrev,"",%progbits
 3772              	.Ldebug_abbrev0:
 3773 0000 01       		.uleb128 0x1
 3774 0001 11       		.uleb128 0x11
 3775 0002 01       		.byte	0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 78


 3776 0003 25       		.uleb128 0x25
 3777 0004 0E       		.uleb128 0xe
 3778 0005 13       		.uleb128 0x13
 3779 0006 0B       		.uleb128 0xb
 3780 0007 03       		.uleb128 0x3
 3781 0008 0E       		.uleb128 0xe
 3782 0009 1B       		.uleb128 0x1b
 3783 000a 0E       		.uleb128 0xe
 3784 000b 55       		.uleb128 0x55
 3785 000c 17       		.uleb128 0x17
 3786 000d 11       		.uleb128 0x11
 3787 000e 01       		.uleb128 0x1
 3788 000f 10       		.uleb128 0x10
 3789 0010 17       		.uleb128 0x17
 3790 0011 00       		.byte	0
 3791 0012 00       		.byte	0
 3792 0013 02       		.uleb128 0x2
 3793 0014 24       		.uleb128 0x24
 3794 0015 00       		.byte	0
 3795 0016 0B       		.uleb128 0xb
 3796 0017 0B       		.uleb128 0xb
 3797 0018 3E       		.uleb128 0x3e
 3798 0019 0B       		.uleb128 0xb
 3799 001a 03       		.uleb128 0x3
 3800 001b 0E       		.uleb128 0xe
 3801 001c 00       		.byte	0
 3802 001d 00       		.byte	0
 3803 001e 03       		.uleb128 0x3
 3804 001f 16       		.uleb128 0x16
 3805 0020 00       		.byte	0
 3806 0021 03       		.uleb128 0x3
 3807 0022 0E       		.uleb128 0xe
 3808 0023 3A       		.uleb128 0x3a
 3809 0024 0B       		.uleb128 0xb
 3810 0025 3B       		.uleb128 0x3b
 3811 0026 0B       		.uleb128 0xb
 3812 0027 49       		.uleb128 0x49
 3813 0028 13       		.uleb128 0x13
 3814 0029 00       		.byte	0
 3815 002a 00       		.byte	0
 3816 002b 04       		.uleb128 0x4
 3817 002c 24       		.uleb128 0x24
 3818 002d 00       		.byte	0
 3819 002e 0B       		.uleb128 0xb
 3820 002f 0B       		.uleb128 0xb
 3821 0030 3E       		.uleb128 0x3e
 3822 0031 0B       		.uleb128 0xb
 3823 0032 03       		.uleb128 0x3
 3824 0033 08       		.uleb128 0x8
 3825 0034 00       		.byte	0
 3826 0035 00       		.byte	0
 3827 0036 05       		.uleb128 0x5
 3828 0037 16       		.uleb128 0x16
 3829 0038 00       		.byte	0
 3830 0039 03       		.uleb128 0x3
 3831 003a 0E       		.uleb128 0xe
 3832 003b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 79


 3833 003c 0B       		.uleb128 0xb
 3834 003d 3B       		.uleb128 0x3b
 3835 003e 05       		.uleb128 0x5
 3836 003f 49       		.uleb128 0x49
 3837 0040 13       		.uleb128 0x13
 3838 0041 00       		.byte	0
 3839 0042 00       		.byte	0
 3840 0043 06       		.uleb128 0x6
 3841 0044 13       		.uleb128 0x13
 3842 0045 01       		.byte	0x1
 3843 0046 0B       		.uleb128 0xb
 3844 0047 0B       		.uleb128 0xb
 3845 0048 3A       		.uleb128 0x3a
 3846 0049 0B       		.uleb128 0xb
 3847 004a 3B       		.uleb128 0x3b
 3848 004b 0B       		.uleb128 0xb
 3849 004c 01       		.uleb128 0x1
 3850 004d 13       		.uleb128 0x13
 3851 004e 00       		.byte	0
 3852 004f 00       		.byte	0
 3853 0050 07       		.uleb128 0x7
 3854 0051 0D       		.uleb128 0xd
 3855 0052 00       		.byte	0
 3856 0053 03       		.uleb128 0x3
 3857 0054 0E       		.uleb128 0xe
 3858 0055 3A       		.uleb128 0x3a
 3859 0056 0B       		.uleb128 0xb
 3860 0057 3B       		.uleb128 0x3b
 3861 0058 0B       		.uleb128 0xb
 3862 0059 49       		.uleb128 0x49
 3863 005a 13       		.uleb128 0x13
 3864 005b 38       		.uleb128 0x38
 3865 005c 0B       		.uleb128 0xb
 3866 005d 00       		.byte	0
 3867 005e 00       		.byte	0
 3868 005f 08       		.uleb128 0x8
 3869 0060 01       		.uleb128 0x1
 3870 0061 01       		.byte	0x1
 3871 0062 49       		.uleb128 0x49
 3872 0063 13       		.uleb128 0x13
 3873 0064 01       		.uleb128 0x1
 3874 0065 13       		.uleb128 0x13
 3875 0066 00       		.byte	0
 3876 0067 00       		.byte	0
 3877 0068 09       		.uleb128 0x9
 3878 0069 21       		.uleb128 0x21
 3879 006a 00       		.byte	0
 3880 006b 49       		.uleb128 0x49
 3881 006c 13       		.uleb128 0x13
 3882 006d 2F       		.uleb128 0x2f
 3883 006e 0B       		.uleb128 0xb
 3884 006f 00       		.byte	0
 3885 0070 00       		.byte	0
 3886 0071 0A       		.uleb128 0xa
 3887 0072 0D       		.uleb128 0xd
 3888 0073 00       		.byte	0
 3889 0074 03       		.uleb128 0x3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 80


 3890 0075 08       		.uleb128 0x8
 3891 0076 3A       		.uleb128 0x3a
 3892 0077 0B       		.uleb128 0xb
 3893 0078 3B       		.uleb128 0x3b
 3894 0079 0B       		.uleb128 0xb
 3895 007a 49       		.uleb128 0x49
 3896 007b 13       		.uleb128 0x13
 3897 007c 38       		.uleb128 0x38
 3898 007d 0B       		.uleb128 0xb
 3899 007e 00       		.byte	0
 3900 007f 00       		.byte	0
 3901 0080 0B       		.uleb128 0xb
 3902 0081 2E       		.uleb128 0x2e
 3903 0082 00       		.byte	0
 3904 0083 3F       		.uleb128 0x3f
 3905 0084 19       		.uleb128 0x19
 3906 0085 03       		.uleb128 0x3
 3907 0086 0E       		.uleb128 0xe
 3908 0087 3A       		.uleb128 0x3a
 3909 0088 0B       		.uleb128 0xb
 3910 0089 3B       		.uleb128 0x3b
 3911 008a 0B       		.uleb128 0xb
 3912 008b 27       		.uleb128 0x27
 3913 008c 19       		.uleb128 0x19
 3914 008d 11       		.uleb128 0x11
 3915 008e 01       		.uleb128 0x1
 3916 008f 12       		.uleb128 0x12
 3917 0090 06       		.uleb128 0x6
 3918 0091 40       		.uleb128 0x40
 3919 0092 18       		.uleb128 0x18
 3920 0093 9642     		.uleb128 0x2116
 3921 0095 19       		.uleb128 0x19
 3922 0096 00       		.byte	0
 3923 0097 00       		.byte	0
 3924 0098 0C       		.uleb128 0xc
 3925 0099 2E       		.uleb128 0x2e
 3926 009a 01       		.byte	0x1
 3927 009b 3F       		.uleb128 0x3f
 3928 009c 19       		.uleb128 0x19
 3929 009d 03       		.uleb128 0x3
 3930 009e 0E       		.uleb128 0xe
 3931 009f 3A       		.uleb128 0x3a
 3932 00a0 0B       		.uleb128 0xb
 3933 00a1 3B       		.uleb128 0x3b
 3934 00a2 0B       		.uleb128 0xb
 3935 00a3 27       		.uleb128 0x27
 3936 00a4 19       		.uleb128 0x19
 3937 00a5 11       		.uleb128 0x11
 3938 00a6 01       		.uleb128 0x1
 3939 00a7 12       		.uleb128 0x12
 3940 00a8 06       		.uleb128 0x6
 3941 00a9 40       		.uleb128 0x40
 3942 00aa 18       		.uleb128 0x18
 3943 00ab 9642     		.uleb128 0x2116
 3944 00ad 19       		.uleb128 0x19
 3945 00ae 01       		.uleb128 0x1
 3946 00af 13       		.uleb128 0x13
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 81


 3947 00b0 00       		.byte	0
 3948 00b1 00       		.byte	0
 3949 00b2 0D       		.uleb128 0xd
 3950 00b3 34       		.uleb128 0x34
 3951 00b4 00       		.byte	0
 3952 00b5 03       		.uleb128 0x3
 3953 00b6 08       		.uleb128 0x8
 3954 00b7 3A       		.uleb128 0x3a
 3955 00b8 0B       		.uleb128 0xb
 3956 00b9 3B       		.uleb128 0x3b
 3957 00ba 0B       		.uleb128 0xb
 3958 00bb 49       		.uleb128 0x49
 3959 00bc 13       		.uleb128 0x13
 3960 00bd 02       		.uleb128 0x2
 3961 00be 18       		.uleb128 0x18
 3962 00bf 00       		.byte	0
 3963 00c0 00       		.byte	0
 3964 00c1 0E       		.uleb128 0xe
 3965 00c2 34       		.uleb128 0x34
 3966 00c3 00       		.byte	0
 3967 00c4 03       		.uleb128 0x3
 3968 00c5 0E       		.uleb128 0xe
 3969 00c6 3A       		.uleb128 0x3a
 3970 00c7 0B       		.uleb128 0xb
 3971 00c8 3B       		.uleb128 0x3b
 3972 00c9 0B       		.uleb128 0xb
 3973 00ca 49       		.uleb128 0x49
 3974 00cb 13       		.uleb128 0x13
 3975 00cc 02       		.uleb128 0x2
 3976 00cd 18       		.uleb128 0x18
 3977 00ce 00       		.byte	0
 3978 00cf 00       		.byte	0
 3979 00d0 0F       		.uleb128 0xf
 3980 00d1 2E       		.uleb128 0x2e
 3981 00d2 00       		.byte	0
 3982 00d3 3F       		.uleb128 0x3f
 3983 00d4 19       		.uleb128 0x19
 3984 00d5 03       		.uleb128 0x3
 3985 00d6 0E       		.uleb128 0xe
 3986 00d7 3A       		.uleb128 0x3a
 3987 00d8 0B       		.uleb128 0xb
 3988 00d9 3B       		.uleb128 0x3b
 3989 00da 0B       		.uleb128 0xb
 3990 00db 27       		.uleb128 0x27
 3991 00dc 19       		.uleb128 0x19
 3992 00dd 11       		.uleb128 0x11
 3993 00de 01       		.uleb128 0x1
 3994 00df 12       		.uleb128 0x12
 3995 00e0 06       		.uleb128 0x6
 3996 00e1 40       		.uleb128 0x40
 3997 00e2 18       		.uleb128 0x18
 3998 00e3 9742     		.uleb128 0x2117
 3999 00e5 19       		.uleb128 0x19
 4000 00e6 00       		.byte	0
 4001 00e7 00       		.byte	0
 4002 00e8 10       		.uleb128 0x10
 4003 00e9 2E       		.uleb128 0x2e
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 82


 4004 00ea 01       		.byte	0x1
 4005 00eb 3F       		.uleb128 0x3f
 4006 00ec 19       		.uleb128 0x19
 4007 00ed 03       		.uleb128 0x3
 4008 00ee 0E       		.uleb128 0xe
 4009 00ef 3A       		.uleb128 0x3a
 4010 00f0 0B       		.uleb128 0xb
 4011 00f1 3B       		.uleb128 0x3b
 4012 00f2 0B       		.uleb128 0xb
 4013 00f3 27       		.uleb128 0x27
 4014 00f4 19       		.uleb128 0x19
 4015 00f5 49       		.uleb128 0x49
 4016 00f6 13       		.uleb128 0x13
 4017 00f7 11       		.uleb128 0x11
 4018 00f8 01       		.uleb128 0x1
 4019 00f9 12       		.uleb128 0x12
 4020 00fa 06       		.uleb128 0x6
 4021 00fb 40       		.uleb128 0x40
 4022 00fc 18       		.uleb128 0x18
 4023 00fd 9642     		.uleb128 0x2116
 4024 00ff 19       		.uleb128 0x19
 4025 0100 01       		.uleb128 0x1
 4026 0101 13       		.uleb128 0x13
 4027 0102 00       		.byte	0
 4028 0103 00       		.byte	0
 4029 0104 11       		.uleb128 0x11
 4030 0105 0B       		.uleb128 0xb
 4031 0106 01       		.byte	0x1
 4032 0107 11       		.uleb128 0x11
 4033 0108 01       		.uleb128 0x1
 4034 0109 12       		.uleb128 0x12
 4035 010a 06       		.uleb128 0x6
 4036 010b 00       		.byte	0
 4037 010c 00       		.byte	0
 4038 010d 12       		.uleb128 0x12
 4039 010e 34       		.uleb128 0x34
 4040 010f 00       		.byte	0
 4041 0110 03       		.uleb128 0x3
 4042 0111 0E       		.uleb128 0xe
 4043 0112 3A       		.uleb128 0x3a
 4044 0113 0B       		.uleb128 0xb
 4045 0114 3B       		.uleb128 0x3b
 4046 0115 05       		.uleb128 0x5
 4047 0116 49       		.uleb128 0x49
 4048 0117 13       		.uleb128 0x13
 4049 0118 02       		.uleb128 0x2
 4050 0119 18       		.uleb128 0x18
 4051 011a 00       		.byte	0
 4052 011b 00       		.byte	0
 4053 011c 13       		.uleb128 0x13
 4054 011d 2E       		.uleb128 0x2e
 4055 011e 01       		.byte	0x1
 4056 011f 3F       		.uleb128 0x3f
 4057 0120 19       		.uleb128 0x19
 4058 0121 03       		.uleb128 0x3
 4059 0122 0E       		.uleb128 0xe
 4060 0123 3A       		.uleb128 0x3a
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 83


 4061 0124 0B       		.uleb128 0xb
 4062 0125 3B       		.uleb128 0x3b
 4063 0126 05       		.uleb128 0x5
 4064 0127 27       		.uleb128 0x27
 4065 0128 19       		.uleb128 0x19
 4066 0129 11       		.uleb128 0x11
 4067 012a 01       		.uleb128 0x1
 4068 012b 12       		.uleb128 0x12
 4069 012c 06       		.uleb128 0x6
 4070 012d 40       		.uleb128 0x40
 4071 012e 18       		.uleb128 0x18
 4072 012f 9642     		.uleb128 0x2116
 4073 0131 19       		.uleb128 0x19
 4074 0132 01       		.uleb128 0x1
 4075 0133 13       		.uleb128 0x13
 4076 0134 00       		.byte	0
 4077 0135 00       		.byte	0
 4078 0136 14       		.uleb128 0x14
 4079 0137 05       		.uleb128 0x5
 4080 0138 00       		.byte	0
 4081 0139 03       		.uleb128 0x3
 4082 013a 0E       		.uleb128 0xe
 4083 013b 3A       		.uleb128 0x3a
 4084 013c 0B       		.uleb128 0xb
 4085 013d 3B       		.uleb128 0x3b
 4086 013e 05       		.uleb128 0x5
 4087 013f 49       		.uleb128 0x49
 4088 0140 13       		.uleb128 0x13
 4089 0141 02       		.uleb128 0x2
 4090 0142 18       		.uleb128 0x18
 4091 0143 00       		.byte	0
 4092 0144 00       		.byte	0
 4093 0145 15       		.uleb128 0x15
 4094 0146 2E       		.uleb128 0x2e
 4095 0147 01       		.byte	0x1
 4096 0148 3F       		.uleb128 0x3f
 4097 0149 19       		.uleb128 0x19
 4098 014a 03       		.uleb128 0x3
 4099 014b 0E       		.uleb128 0xe
 4100 014c 3A       		.uleb128 0x3a
 4101 014d 0B       		.uleb128 0xb
 4102 014e 3B       		.uleb128 0x3b
 4103 014f 05       		.uleb128 0x5
 4104 0150 27       		.uleb128 0x27
 4105 0151 19       		.uleb128 0x19
 4106 0152 49       		.uleb128 0x49
 4107 0153 13       		.uleb128 0x13
 4108 0154 11       		.uleb128 0x11
 4109 0155 01       		.uleb128 0x1
 4110 0156 12       		.uleb128 0x12
 4111 0157 06       		.uleb128 0x6
 4112 0158 40       		.uleb128 0x40
 4113 0159 18       		.uleb128 0x18
 4114 015a 9642     		.uleb128 0x2116
 4115 015c 19       		.uleb128 0x19
 4116 015d 01       		.uleb128 0x1
 4117 015e 13       		.uleb128 0x13
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 84


 4118 015f 00       		.byte	0
 4119 0160 00       		.byte	0
 4120 0161 16       		.uleb128 0x16
 4121 0162 34       		.uleb128 0x34
 4122 0163 00       		.byte	0
 4123 0164 03       		.uleb128 0x3
 4124 0165 0E       		.uleb128 0xe
 4125 0166 3A       		.uleb128 0x3a
 4126 0167 0B       		.uleb128 0xb
 4127 0168 3B       		.uleb128 0x3b
 4128 0169 05       		.uleb128 0x5
 4129 016a 49       		.uleb128 0x49
 4130 016b 13       		.uleb128 0x13
 4131 016c 3F       		.uleb128 0x3f
 4132 016d 19       		.uleb128 0x19
 4133 016e 3C       		.uleb128 0x3c
 4134 016f 19       		.uleb128 0x19
 4135 0170 00       		.byte	0
 4136 0171 00       		.byte	0
 4137 0172 17       		.uleb128 0x17
 4138 0173 35       		.uleb128 0x35
 4139 0174 00       		.byte	0
 4140 0175 49       		.uleb128 0x49
 4141 0176 13       		.uleb128 0x13
 4142 0177 00       		.byte	0
 4143 0178 00       		.byte	0
 4144 0179 18       		.uleb128 0x18
 4145 017a 34       		.uleb128 0x34
 4146 017b 00       		.byte	0
 4147 017c 03       		.uleb128 0x3
 4148 017d 0E       		.uleb128 0xe
 4149 017e 3A       		.uleb128 0x3a
 4150 017f 0B       		.uleb128 0xb
 4151 0180 3B       		.uleb128 0x3b
 4152 0181 0B       		.uleb128 0xb
 4153 0182 49       		.uleb128 0x49
 4154 0183 13       		.uleb128 0x13
 4155 0184 3F       		.uleb128 0x3f
 4156 0185 19       		.uleb128 0x19
 4157 0186 02       		.uleb128 0x2
 4158 0187 18       		.uleb128 0x18
 4159 0188 00       		.byte	0
 4160 0189 00       		.byte	0
 4161 018a 19       		.uleb128 0x19
 4162 018b 26       		.uleb128 0x26
 4163 018c 00       		.byte	0
 4164 018d 49       		.uleb128 0x49
 4165 018e 13       		.uleb128 0x13
 4166 018f 00       		.byte	0
 4167 0190 00       		.byte	0
 4168 0191 1A       		.uleb128 0x1a
 4169 0192 34       		.uleb128 0x34
 4170 0193 00       		.byte	0
 4171 0194 03       		.uleb128 0x3
 4172 0195 08       		.uleb128 0x8
 4173 0196 3A       		.uleb128 0x3a
 4174 0197 0B       		.uleb128 0xb
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 85


 4175 0198 3B       		.uleb128 0x3b
 4176 0199 0B       		.uleb128 0xb
 4177 019a 49       		.uleb128 0x49
 4178 019b 13       		.uleb128 0x13
 4179 019c 3F       		.uleb128 0x3f
 4180 019d 19       		.uleb128 0x19
 4181 019e 02       		.uleb128 0x2
 4182 019f 18       		.uleb128 0x18
 4183 01a0 00       		.byte	0
 4184 01a1 00       		.byte	0
 4185 01a2 00       		.byte	0
 4186              		.section	.debug_aranges,"",%progbits
 4187 0000 64000000 		.4byte	0x64
 4188 0004 0200     		.2byte	0x2
 4189 0006 00000000 		.4byte	.Ldebug_info0
 4190 000a 04       		.byte	0x4
 4191 000b 00       		.byte	0
 4192 000c 0000     		.2byte	0
 4193 000e 0000     		.2byte	0
 4194 0010 00000000 		.4byte	.LFB64
 4195 0014 74000000 		.4byte	.LFE64-.LFB64
 4196 0018 00000000 		.4byte	.LFB65
 4197 001c 5C040000 		.4byte	.LFE65-.LFB65
 4198 0020 00000000 		.4byte	.LFB66
 4199 0024 54010000 		.4byte	.LFE66-.LFB66
 4200 0028 00000000 		.4byte	.LFB67
 4201 002c 24000000 		.4byte	.LFE67-.LFB67
 4202 0030 00000000 		.4byte	.LFB68
 4203 0034 CC0C0000 		.4byte	.LFE68-.LFB68
 4204 0038 00000000 		.4byte	.LFB69
 4205 003c D8000000 		.4byte	.LFE69-.LFB69
 4206 0040 00000000 		.4byte	.LFB70
 4207 0044 D8000000 		.4byte	.LFE70-.LFB70
 4208 0048 00000000 		.4byte	.LFB71
 4209 004c 1C010000 		.4byte	.LFE71-.LFB71
 4210 0050 00000000 		.4byte	.LFB72
 4211 0054 6C000000 		.4byte	.LFE72-.LFB72
 4212 0058 00000000 		.4byte	.LFB73
 4213 005c 5A000000 		.4byte	.LFE73-.LFB73
 4214 0060 00000000 		.4byte	0
 4215 0064 00000000 		.4byte	0
 4216              		.section	.debug_ranges,"",%progbits
 4217              	.Ldebug_ranges0:
 4218 0000 00000000 		.4byte	.LFB64
 4219 0004 74000000 		.4byte	.LFE64
 4220 0008 00000000 		.4byte	.LFB65
 4221 000c 5C040000 		.4byte	.LFE65
 4222 0010 00000000 		.4byte	.LFB66
 4223 0014 54010000 		.4byte	.LFE66
 4224 0018 00000000 		.4byte	.LFB67
 4225 001c 24000000 		.4byte	.LFE67
 4226 0020 00000000 		.4byte	.LFB68
 4227 0024 CC0C0000 		.4byte	.LFE68
 4228 0028 00000000 		.4byte	.LFB69
 4229 002c D8000000 		.4byte	.LFE69
 4230 0030 00000000 		.4byte	.LFB70
 4231 0034 D8000000 		.4byte	.LFE70
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 86


 4232 0038 00000000 		.4byte	.LFB71
 4233 003c 1C010000 		.4byte	.LFE71
 4234 0040 00000000 		.4byte	.LFB72
 4235 0044 6C000000 		.4byte	.LFE72
 4236 0048 00000000 		.4byte	.LFB73
 4237 004c 5A000000 		.4byte	.LFE73
 4238 0050 00000000 		.4byte	0
 4239 0054 00000000 		.4byte	0
 4240              		.section	.debug_line,"",%progbits
 4241              	.Ldebug_line0:
 4242 0000 27040000 		.section	.debug_str,"MS",%progbits,1
 4242      02007601 
 4242      00000201 
 4242      FB0E0D00 
 4242      01010101 
 4243              	.LASF52:
 4244 0000 726F626F 		.ascii	"robot_Kp\000"
 4244      745F4B70 
 4244      00
 4245              	.LASF31:
 4246 0009 61786C65 		.ascii	"axle_width\000"
 4246      5F776964 
 4246      746800
 4247              	.LASF100:
 4248 0014 726F626F 		.ascii	"robot\000"
 4248      7400
 4249              	.LASF73:
 4250 001a 6D696E5F 		.ascii	"min_sensor\000"
 4250      73656E73 
 4250      6F7200
 4251              	.LASF69:
 4252 0025 6F627374 		.ascii	"obstacle_flag\000"
 4252      61636C65 
 4252      5F666C61 
 4252      6700
 4253              	.LASF39:
 4254 0033 64696666 		.ascii	"diff\000"
 4254      00
 4255              	.LASF54:
 4256 0038 73746172 		.ascii	"start_x\000"
 4256      745F7800 
 4257              	.LASF55:
 4258 0040 73746172 		.ascii	"start_y\000"
 4258      745F7900 
 4259              	.LASF2:
 4260 0048 73686F72 		.ascii	"short int\000"
 4260      7420696E 
 4260      7400
 4261              	.LASF88:
 4262 0052 504F5345 		.ascii	"POSE_UPDATE_PERIOD\000"
 4262      5F555044 
 4262      4154455F 
 4262      50455249 
 4262      4F4400
 4263              	.LASF20:
 4264 0065 73697A65 		.ascii	"sizetype\000"
 4264      74797065 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 87


 4264      00
 4265              	.LASF84:
 4266 006e 6D6F7665 		.ascii	"move_servo\000"
 4266      5F736572 
 4266      766F00
 4267              	.LASF51:
 4268 0079 726F626F 		.ascii	"robot_Ki\000"
 4268      745F4B69 
 4268      00
 4269              	.LASF101:
 4270 0082 73656E73 		.ascii	"sensors\000"
 4270      6F727300 
 4271              	.LASF38:
 4272 008a 526F626F 		.ascii	"Robot\000"
 4272      7400
 4273              	.LASF102:
 4274 0090 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4274      43313120 
 4274      352E342E 
 4274      31203230 
 4274      31363036 
 4275 00c3 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4275      20726576 
 4275      6973696F 
 4275      6E203233 
 4275      37373135 
 4276 00f6 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4276      66756E63 
 4276      74696F6E 
 4276      2D736563 
 4276      74696F6E 
 4277              	.LASF21:
 4278 011e 64697265 		.ascii	"direction\000"
 4278      6374696F 
 4278      6E00
 4279              	.LASF4:
 4280 0128 5F5F7569 		.ascii	"__uint16_t\000"
 4280      6E743136 
 4280      5F7400
 4281              	.LASF80:
 4282 0133 76656C6F 		.ascii	"velocity_control\000"
 4282      63697479 
 4282      5F636F6E 
 4282      74726F6C 
 4282      00
 4283              	.LASF63:
 4284 0144 77616C6C 		.ascii	"wall_Kp\000"
 4284      5F4B7000 
 4285              	.LASF70:
 4286 014c 76656C6F 		.ascii	"velocity\000"
 4286      63697479 
 4286      00
 4287              	.LASF44:
 4288 0155 4D6F746F 		.ascii	"Motor_PI_Int_Handler\000"
 4288      725F5049 
 4288      5F496E74 
 4288      5F48616E 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 88


 4288      646C6572 
 4289              	.LASF75:
 4290 016a 44726976 		.ascii	"Drive_Left_Motor\000"
 4290      655F4C65 
 4290      66745F4D 
 4290      6F746F72 
 4290      00
 4291              	.LASF99:
 4292 017b 72696768 		.ascii	"right_motor\000"
 4292      745F6D6F 
 4292      746F7200 
 4293              	.LASF65:
 4294 0187 64697374 		.ascii	"dist_ref\000"
 4294      5F726566 
 4294      00
 4295              	.LASF98:
 4296 0190 6C656674 		.ascii	"left_motor\000"
 4296      5F6D6F74 
 4296      6F7200
 4297              	.LASF12:
 4298 019b 75696E74 		.ascii	"uint8_t\000"
 4298      385F7400 
 4299              	.LASF81:
 4300 01a3 6D61785F 		.ascii	"max_velocity\000"
 4300      76656C6F 
 4300      63697479 
 4300      00
 4301              	.LASF35:
 4302 01b0 676F616C 		.ascii	"goal_x\000"
 4302      5F7800
 4303              	.LASF72:
 4304 01b7 7465726D 		.ascii	"terminal_phase\000"
 4304      696E616C 
 4304      5F706861 
 4304      736500
 4305              	.LASF34:
 4306 01c6 64657369 		.ascii	"desired_theta\000"
 4306      7265645F 
 4306      74686574 
 4306      6100
 4307              	.LASF83:
 4308 01d4 74687265 		.ascii	"thresh\000"
 4308      736800
 4309              	.LASF96:
 4310 01db 77616C6C 		.ascii	"wall_following_flag\000"
 4310      5F666F6C 
 4310      6C6F7769 
 4310      6E675F66 
 4310      6C616700 
 4311              	.LASF16:
 4312 01ef 666C6F61 		.ascii	"float\000"
 4312      7400
 4313              	.LASF92:
 4314 01f5 6D75785F 		.ascii	"mux_select\000"
 4314      73656C65 
 4314      637400
 4315              	.LASF85:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 89


 4316 0200 73657276 		.ascii	"servo_nums\000"
 4316      6F5F6E75 
 4316      6D7300
 4317              	.LASF9:
 4318 020b 6C6F6E67 		.ascii	"long long int\000"
 4318      206C6F6E 
 4318      6720696E 
 4318      7400
 4319              	.LASF64:
 4320 0219 66726F6E 		.ascii	"front_dist_th\000"
 4320      745F6469 
 4320      73745F74 
 4320      6800
 4321              	.LASF43:
 4322 0227 506F7365 		.ascii	"Pose_Update_Int_Handler\000"
 4322      5F557064 
 4322      6174655F 
 4322      496E745F 
 4322      48616E64 
 4323              	.LASF60:
 4324 023f 7265665F 		.ascii	"ref_direction\000"
 4324      64697265 
 4324      6374696F 
 4324      6E00
 4325              	.LASF28:
 4326 024d 77686565 		.ascii	"wheel_radius\000"
 4326      6C5F7261 
 4326      64697573 
 4326      00
 4327              	.LASF104:
 4328 025a 433A5C55 		.ascii	"C:\\Users\\jmspi\\OneDrive\\Documents\\GitHub\\ECE4"
 4328      73657273 
 4328      5C6A6D73 
 4328      70695C4F 
 4328      6E654472 
 4329 0287 3139315C 		.ascii	"191\\DeliveryRobot.cydsn\000"
 4329      44656C69 
 4329      76657279 
 4329      526F626F 
 4329      742E6379 
 4330              	.LASF7:
 4331 029f 6C6F6E67 		.ascii	"long int\000"
 4331      20696E74 
 4331      00
 4332              	.LASF97:
 4333 02a8 70627574 		.ascii	"pbutton\000"
 4333      746F6E00 
 4334              	.LASF8:
 4335 02b0 6C6F6E67 		.ascii	"long unsigned int\000"
 4335      20756E73 
 4335      69676E65 
 4335      6420696E 
 4335      7400
 4336              	.LASF33:
 4337 02c2 64657369 		.ascii	"desired_v\000"
 4337      7265645F 
 4337      7600
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 90


 4338              	.LASF59:
 4339 02cc 676F616C 		.ascii	"goals_reached\000"
 4339      735F7265 
 4339      61636865 
 4339      6400
 4340              	.LASF3:
 4341 02da 5F5F7569 		.ascii	"__uint8_t\000"
 4341      6E74385F 
 4341      7400
 4342              	.LASF77:
 4343 02e4 5475726E 		.ascii	"Turn_Delay\000"
 4343      5F44656C 
 4343      617900
 4344              	.LASF66:
 4345 02ef 66726F6E 		.ascii	"front_count\000"
 4345      745F636F 
 4345      756E7400 
 4346              	.LASF23:
 4347 02fb 53656E73 		.ascii	"Sensor\000"
 4347      6F7200
 4348              	.LASF71:
 4349 0302 6172656E 		.ascii	"arena_def\000"
 4349      615F6465 
 4349      6600
 4350              	.LASF19:
 4351 030c 6C6F6E67 		.ascii	"long double\000"
 4351      20646F75 
 4351      626C6500 
 4352              	.LASF30:
 4353 0318 4D6F746F 		.ascii	"Motor\000"
 4353      7200
 4354              	.LASF48:
 4355 031e 6D6F746F 		.ascii	"motor_Ki\000"
 4355      725F4B69 
 4355      00
 4356              	.LASF1:
 4357 0327 756E7369 		.ascii	"unsigned char\000"
 4357      676E6564 
 4357      20636861 
 4357      7200
 4358              	.LASF89:
 4359 0335 6563686F 		.ascii	"echo_flag\000"
 4359      5F666C61 
 4359      6700
 4360              	.LASF36:
 4361 033f 676F616C 		.ascii	"goal_y\000"
 4361      5F7900
 4362              	.LASF27:
 4363 0346 64657369 		.ascii	"desired_w\000"
 4363      7265645F 
 4363      7700
 4364              	.LASF0:
 4365 0350 7369676E 		.ascii	"signed char\000"
 4365      65642063 
 4365      68617200 
 4366              	.LASF14:
 4367 035c 696E7433 		.ascii	"int32_t\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 91


 4367      325F7400 
 4368              	.LASF10:
 4369 0364 6C6F6E67 		.ascii	"long long unsigned int\000"
 4369      206C6F6E 
 4369      6720756E 
 4369      7369676E 
 4369      65642069 
 4370              	.LASF49:
 4371 037b 6D6F746F 		.ascii	"motor_Kp\000"
 4371      725F4B70 
 4371      00
 4372              	.LASF11:
 4373 0384 756E7369 		.ascii	"unsigned int\000"
 4373      676E6564 
 4373      20696E74 
 4373      00
 4374              	.LASF13:
 4375 0391 75696E74 		.ascii	"uint16_t\000"
 4375      31365F74 
 4375      00
 4376              	.LASF82:
 4377 039a 6176675F 		.ascii	"avg_dist\000"
 4377      64697374 
 4377      00
 4378              	.LASF50:
 4379 03a3 726F626F 		.ascii	"robot_axle_width\000"
 4379      745F6178 
 4379      6C655F77 
 4379      69647468 
 4379      00
 4380              	.LASF90:
 4381 03b4 6D61785F 		.ascii	"max_count\000"
 4381      636F756E 
 4381      7400
 4382              	.LASF76:
 4383 03be 44726976 		.ascii	"Drive_Right_Motor\000"
 4383      655F5269 
 4383      6768745F 
 4383      4D6F746F 
 4383      7200
 4384              	.LASF5:
 4385 03d0 73686F72 		.ascii	"short unsigned int\000"
 4385      7420756E 
 4385      7369676E 
 4385      65642069 
 4385      6E7400
 4386              	.LASF91:
 4387 03e3 6563686F 		.ascii	"echo_distance\000"
 4387      5F646973 
 4387      74616E63 
 4387      6500
 4388              	.LASF22:
 4389 03f1 64697374 		.ascii	"distance\000"
 4389      616E6365 
 4389      00
 4390              	.LASF18:
 4391 03fa 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 92


 4391      00
 4392              	.LASF95:
 4393 03ff 73657269 		.ascii	"serial_output\000"
 4393      616C5F6F 
 4393      75747075 
 4393      7400
 4394              	.LASF79:
 4395 040d 6D61696E 		.ascii	"main\000"
 4395      00
 4396              	.LASF74:
 4397 0412 64656C61 		.ascii	"delay_flag\000"
 4397      795F666C 
 4397      616700
 4398              	.LASF67:
 4399 041d 72657475 		.ascii	"return_flag\000"
 4399      726E5F66 
 4399      6C616700 
 4400              	.LASF62:
 4401 0429 74686574 		.ascii	"theta_correction\000"
 4401      615F636F 
 4401      72726563 
 4401      74696F6E 
 4401      00
 4402              	.LASF103:
 4403 043a 6D61696E 		.ascii	"main.c\000"
 4403      2E6300
 4404              	.LASF94:
 4405 0441 72696768 		.ascii	"right_wheel_count\000"
 4405      745F7768 
 4405      65656C5F 
 4405      636F756E 
 4405      7400
 4406              	.LASF93:
 4407 0453 6C656674 		.ascii	"left_wheel_count\000"
 4407      5F776865 
 4407      656C5F63 
 4407      6F756E74 
 4407      00
 4408              	.LASF15:
 4409 0464 696E7433 		.ascii	"int32\000"
 4409      3200
 4410              	.LASF17:
 4411 046a 646F7562 		.ascii	"double\000"
 4411      6C6500
 4412              	.LASF45:
 4413 0471 54696D65 		.ascii	"Timer_Int_Handler\000"
 4413      725F496E 
 4413      745F4861 
 4413      6E646C65 
 4413      7200
 4414              	.LASF41:
 4415 0483 7363616C 		.ascii	"scaled_V\000"
 4415      65645F56 
 4415      00
 4416              	.LASF24:
 4417 048c 64757479 		.ascii	"duty_cycle\000"
 4417      5F637963 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 93


 4417      6C6500
 4418              	.LASF6:
 4419 0497 5F5F696E 		.ascii	"__int32_t\000"
 4419      7433325F 
 4419      7400
 4420              	.LASF25:
 4421 04a1 696E745F 		.ascii	"int_error\000"
 4421      6572726F 
 4421      7200
 4422              	.LASF32:
 4423 04ab 74686574 		.ascii	"theta\000"
 4423      6100
 4424              	.LASF68:
 4425 04b1 425F666C 		.ascii	"B_flag\000"
 4425      616700
 4426              	.LASF42:
 4427 04b8 6E65775F 		.ascii	"new_w\000"
 4427      7700
 4428              	.LASF61:
 4429 04be 7265665F 		.ascii	"ref_direction_deg\000"
 4429      64697265 
 4429      6374696F 
 4429      6E5F6465 
 4429      6700
 4430              	.LASF46:
 4431 04d0 42757474 		.ascii	"Button_Int_Handler\000"
 4431      6F6E5F49 
 4431      6E745F48 
 4431      616E646C 
 4431      657200
 4432              	.LASF78:
 4433 04e3 616E676C 		.ascii	"angle\000"
 4433      6500
 4434              	.LASF29:
 4435 04e9 656E635F 		.ascii	"enc_count\000"
 4435      636F756E 
 4435      7400
 4436              	.LASF56:
 4437 04f3 73746172 		.ascii	"start_th\000"
 4437      745F7468 
 4437      00
 4438              	.LASF40:
 4439 04fc 6572726F 		.ascii	"error\000"
 4439      7200
 4440              	.LASF26:
 4441 0502 74616E67 		.ascii	"tangent_v\000"
 4441      656E745F 
 4441      7600
 4442              	.LASF86:
 4443 050c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4443      52784275 
 4443      66666572 
 4443      00
 4444              	.LASF53:
 4445 0519 6D696E5F 		.ascii	"min_distance\000"
 4445      64697374 
 4445      616E6365 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccJ64F89.s 			page 94


 4445      00
 4446              	.LASF87:
 4447 0526 50554C53 		.ascii	"PULSES_PER_REV\000"
 4447      45535F50 
 4447      45525F52 
 4447      455600
 4448              	.LASF37:
 4449 0535 676F616C 		.ascii	"goal_min_dist\000"
 4449      5F6D696E 
 4449      5F646973 
 4449      7400
 4450              	.LASF47:
 4451 0543 77686565 		.ascii	"wheel_r_scale\000"
 4451      6C5F725F 
 4451      7363616C 
 4451      6500
 4452              	.LASF58:
 4453 0551 676F616C 		.ascii	"goals\000"
 4453      7300
 4454              	.LASF57:
 4455 0557 6E5F676F 		.ascii	"n_goals\000"
 4455      616C7300 
 4456              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
