ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	PULSES_PER_REV
  20              		.section	.rodata
  21              		.align	3
  22              		.type	PULSES_PER_REV, %object
  23              		.size	PULSES_PER_REV, 8
  24              	PULSES_PER_REV:
  25 0000 A4703D0A 		.word	171798692
  26 0004 D70FAC40 		.word	1085018071
  27              		.global	POSE_UPDATE_PERIOD
  28              		.align	3
  29              		.type	POSE_UPDATE_PERIOD, %object
  30              		.size	POSE_UPDATE_PERIOD, 8
  31              	POSE_UPDATE_PERIOD:
  32 0008 7B14AE47 		.word	1202590843
  33 000c E17A943F 		.word	1066695393
  34              		.global	echo_flag
  35              		.bss
  36              		.type	echo_flag, %object
  37              		.size	echo_flag, 1
  38              	echo_flag:
  39 0000 00       		.space	1
  40              		.global	max_count
  41              		.data
  42              		.align	1
  43              		.type	max_count, %object
  44              		.size	max_count, 2
  45              	max_count:
  46 0000 FFFF     		.short	-1
  47              		.comm	echo_distance,2,2
  48              		.global	mux_select
  49              		.bss
  50              		.type	mux_select, %object
  51              		.size	mux_select, 1
  52              	mux_select:
  53 0001 00       		.space	1
  54              		.global	left_wheel_count
  55 0002 0000     		.align	2
  56              		.type	left_wheel_count, %object
  57              		.size	left_wheel_count, 4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 2


  58              	left_wheel_count:
  59 0004 00000000 		.space	4
  60              		.global	right_wheel_count
  61              		.align	2
  62              		.type	right_wheel_count, %object
  63              		.size	right_wheel_count, 4
  64              	right_wheel_count:
  65 0008 00000000 		.space	4
  66              		.comm	serial_output,150,4
  67              		.global	wall_following_flag
  68              		.align	2
  69              		.type	wall_following_flag, %object
  70              		.size	wall_following_flag, 4
  71              	wall_following_flag:
  72 000c 00000000 		.space	4
  73              		.comm	left_motor,72,8
  74              		.comm	right_motor,72,8
  75              		.comm	robot,112,8
  76              		.comm	sensors,48,4
  77              		.section	.text.Timer_Int_Handler,"ax",%progbits
  78              		.align	2
  79              		.global	Timer_Int_Handler
  80              		.thumb
  81              		.thumb_func
  82              		.type	Timer_Int_Handler, %function
  83              	Timer_Int_Handler:
  84              	.LFB64:
  85              		.file 1 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  *
   3:main.c        ****  * Copyright YOUR COMPANY, THE YEAR
   4:main.c        ****  * All Rights Reserved
   5:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:main.c        ****  *
   7:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:main.c        ****  * WHICH IS THE PROPERTY OF your company.
   9:main.c        ****  *
  10:main.c        ****  * ========================================
  11:main.c        **** */
  12:main.c        **** 
  13:main.c        **** /* Import all libraries and header files. */
  14:main.c        **** #include "project.h"
  15:main.c        **** #include <stdio.h>
  16:main.c        **** #include <stdlib.h>
  17:main.c        **** #include <math.h>
  18:main.c        **** #include <stdbool.h>
  19:main.c        **** #include "..\Helper\helper.h"
  20:main.c        **** #include "..\Robot\robot.h"
  21:main.c        **** 
  22:main.c        **** /* Define all global variables. */
  23:main.c        **** #define N_SENSORS 6     // Number of Ultrasonic Sensors
  24:main.c        **** 
  25:main.c        **** #ifndef M_PI    // Pi, duh!
  26:main.c        **** #define M_PI 3.141592653589793238462643383279502884196      
  27:main.c        **** #endif
  28:main.c        **** 
  29:main.c        **** #ifndef M_TWOPI     // 2*Pi, duh!
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 3


  30:main.c        **** #define M_TWOPI 6.2831853071795862319959        
  31:main.c        **** #endif
  32:main.c        **** 
  33:main.c        **** #ifndef M_E     // Exponential, duh!
  34:main.c        **** #define M_E 2.71828182845904523536
  35:main.c        **** #endif
  36:main.c        **** 
  37:main.c        **** const double PULSES_PER_REV = 3591.92;
  38:main.c        **** const double POSE_UPDATE_PERIOD = 1.0/50.0; // seconds
  39:main.c        **** 
  40:main.c        **** uint8_t echo_flag = 0;          // Ultrasonic flag
  41:main.c        **** uint16_t max_count = 65535;     // Ultrasonic time count
  42:main.c        **** uint16_t echo_distance;         // Ultrasonic distance
  43:main.c        **** uint8_t mux_select = 0;         // For selecting specific ultrasonic sensor
  44:main.c        **** 
  45:main.c        **** int32 left_wheel_count = 0;
  46:main.c        **** int32 right_wheel_count = 0;
  47:main.c        **** char serial_output[150];        // For UART print output
  48:main.c        **** int wall_following_flag = 0;
  49:main.c        **** 
  50:main.c        **** /* Defining/Creating all data structures*/
  51:main.c        **** Motor left_motor;     // Left Motor, duh!
  52:main.c        **** Motor right_motor;    // Right Motor, duh!
  53:main.c        **** Robot robot;          // Robot values, duh!
  54:main.c        **** Sensor sensors;       // Ultrasonics
  55:main.c        **** 
  56:main.c        **** void Drive_Left_Motor(long double duty_cycle);
  57:main.c        **** void Drive_Right_Motor(long double duty_cycle);
  58:main.c        **** void Turn_Delay(long double angle);
  59:main.c        **** void move_servo(int servo_num, int dir);
  60:main.c        **** 
  61:main.c        **** /* Interrupt to obtain Ultrasonic measurement value. */  
  62:main.c        **** CY_ISR( Timer_Int_Handler ) {
  86              		.loc 1 62 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90 0000 98B5     		push	{r3, r4, r7, lr}
  91              		.cfi_def_cfa_offset 16
  92              		.cfi_offset 3, -16
  93              		.cfi_offset 4, -12
  94              		.cfi_offset 7, -8
  95              		.cfi_offset 14, -4
  96 0002 00AF     		add	r7, sp, #0
  97              		.cfi_def_cfa_register 7
  63:main.c        ****     // Collect measurement 
  64:main.c        ****     echo_distance = max_count - Timer_Echo_ReadCapture();   // in cm
  98              		.loc 1 64 0
  99 0004 164B     		ldr	r3, .L3
 100 0006 1C88     		ldrh	r4, [r3]
 101 0008 FFF7FEFF 		bl	Timer_Echo_ReadCapture
 102 000c 0346     		mov	r3, r0
 103 000e E31A     		subs	r3, r4, r3
 104 0010 9AB2     		uxth	r2, r3
 105 0012 144B     		ldr	r3, .L3+4
 106 0014 1A80     		strh	r2, [r3]	@ movhi
  65:main.c        ****     sensors.distance[mux_select] = echo_distance;      // Store measured value
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 4


 107              		.loc 1 65 0
 108 0016 144B     		ldr	r3, .L3+8
 109 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 110 001a 1846     		mov	r0, r3
 111 001c 114B     		ldr	r3, .L3+4
 112 001e 1B88     		ldrh	r3, [r3]
 113 0020 1946     		mov	r1, r3
 114 0022 124A     		ldr	r2, .L3+12
 115 0024 831D     		adds	r3, r0, #6
 116 0026 42F82310 		str	r1, [r2, r3, lsl #2]
  66:main.c        ****     mux_select++;   // Iterate the global ultrasonic tracker
 117              		.loc 1 66 0
 118 002a 0F4B     		ldr	r3, .L3+8
 119 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 120 002e 0133     		adds	r3, r3, #1
 121 0030 DAB2     		uxtb	r2, r3
 122 0032 0D4B     		ldr	r3, .L3+8
 123 0034 1A70     		strb	r2, [r3]
  67:main.c        **** 
  68:main.c        ****     // Reset the global ultrasonic tracker when all measurements have been updated
  69:main.c        ****     if( mux_select == N_SENSORS ) { 
 124              		.loc 1 69 0
 125 0036 0C4B     		ldr	r3, .L3+8
 126 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 127 003a 062B     		cmp	r3, #6
 128 003c 05D1     		bne	.L2
  70:main.c        ****         mux_select = 0; 
 129              		.loc 1 70 0
 130 003e 0A4B     		ldr	r3, .L3+8
 131 0040 0022     		movs	r2, #0
 132 0042 1A70     		strb	r2, [r3]
  71:main.c        ****         wall_following_flag = 1;
 133              		.loc 1 71 0
 134 0044 0A4B     		ldr	r3, .L3+16
 135 0046 0122     		movs	r2, #1
 136 0048 1A60     		str	r2, [r3]
 137              	.L2:
  72:main.c        ****     }
  73:main.c        **** 
  74:main.c        ****     Control_Reg_US_Write(mux_select);
 138              		.loc 1 74 0
 139 004a 074B     		ldr	r3, .L3+8
 140 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 141 004e 1846     		mov	r0, r3
 142 0050 FFF7FEFF 		bl	Control_Reg_US_Write
  75:main.c        ****     PWM_Trigger_WriteCounter(255);    
 143              		.loc 1 75 0
 144 0054 FF20     		movs	r0, #255
 145 0056 FFF7FEFF 		bl	PWM_Trigger_WriteCounter
  76:main.c        **** }
 146              		.loc 1 76 0
 147 005a 00BF     		nop
 148 005c 98BD     		pop	{r3, r4, r7, pc}
 149              	.L4:
 150 005e 00BF     		.align	2
 151              	.L3:
 152 0060 00000000 		.word	max_count
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 5


 153 0064 00000000 		.word	echo_distance
 154 0068 00000000 		.word	mux_select
 155 006c 00000000 		.word	sensors
 156 0070 00000000 		.word	wall_following_flag
 157              		.cfi_endproc
 158              	.LFE64:
 159              		.size	Timer_Int_Handler, .-Timer_Int_Handler
 160              		.global	__aeabi_i2d
 161              		.global	__aeabi_dmul
 162              		.global	__aeabi_ddiv
 163              		.global	__aeabi_dsub
 164              		.global	__aeabi_dadd
 165              		.global	__aeabi_dcmpgt
 166              		.global	__aeabi_dcmplt
 167              		.section	.text.Pose_Update_Int_Handler,"ax",%progbits
 168              		.align	2
 169              		.global	Pose_Update_Int_Handler
 170              		.thumb
 171              		.thumb_func
 172              		.type	Pose_Update_Int_Handler, %function
 173              	Pose_Update_Int_Handler:
 174              	.LFB65:
  77:main.c        **** 
  78:main.c        **** /* Interrupt for Robot pose and desired drive update. */
  79:main.c        **** CY_ISR( Pose_Update_Int_Handler ) {
 175              		.loc 1 79 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 32
 178              		@ frame_needed = 1, uses_anonymous_args = 0
 179 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 180              		.cfi_def_cfa_offset 36
 181              		.cfi_offset 4, -36
 182              		.cfi_offset 5, -32
 183              		.cfi_offset 6, -28
 184              		.cfi_offset 7, -24
 185              		.cfi_offset 8, -20
 186              		.cfi_offset 9, -16
 187              		.cfi_offset 10, -12
 188              		.cfi_offset 11, -8
 189              		.cfi_offset 14, -4
 190 0004 89B0     		sub	sp, sp, #36
 191              		.cfi_def_cfa_offset 72
 192 0006 00AF     		add	r7, sp, #0
 193              		.cfi_def_cfa_register 7
  80:main.c        ****     // Update encoder values for both left and right motors
  81:main.c        ****     int32 new, diff;
  82:main.c        ****     new = QuadDec_R_GetCounter();
 194              		.loc 1 82 0
 195 0008 FFF7FEFF 		bl	QuadDec_R_GetCounter
 196 000c 7861     		str	r0, [r7, #20]
  83:main.c        ****     diff = new - right_motor.enc_count;
 197              		.loc 1 83 0
 198 000e B84B     		ldr	r3, .L12+48
 199 0010 1B6C     		ldr	r3, [r3, #64]
 200 0012 7A69     		ldr	r2, [r7, #20]
 201 0014 D31A     		subs	r3, r2, r3
 202 0016 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 6


  84:main.c        ****     right_motor.enc_count = new;
 203              		.loc 1 84 0
 204 0018 B54A     		ldr	r2, .L12+48
 205 001a 7B69     		ldr	r3, [r7, #20]
 206 001c 1364     		str	r3, [r2, #64]
  85:main.c        ****     right_motor.w = M_TWOPI * diff / POSE_UPDATE_PERIOD / PULSES_PER_REV;
 207              		.loc 1 85 0
 208 001e 3869     		ldr	r0, [r7, #16]
 209 0020 FFF7FEFF 		bl	__aeabi_i2d
 210 0024 A6A3     		adr	r3, .L12
 211 0026 D3E90023 		ldrd	r2, [r3]
 212 002a FFF7FEFF 		bl	__aeabi_dmul
 213 002e 0246     		mov	r2, r0
 214 0030 0B46     		mov	r3, r1
 215 0032 1046     		mov	r0, r2
 216 0034 1946     		mov	r1, r3
 217 0036 A4A3     		adr	r3, .L12+8
 218 0038 D3E90023 		ldrd	r2, [r3]
 219 003c FFF7FEFF 		bl	__aeabi_ddiv
 220 0040 0246     		mov	r2, r0
 221 0042 0B46     		mov	r3, r1
 222 0044 1046     		mov	r0, r2
 223 0046 1946     		mov	r1, r3
 224 0048 A1A3     		adr	r3, .L12+16
 225 004a D3E90023 		ldrd	r2, [r3]
 226 004e FFF7FEFF 		bl	__aeabi_ddiv
 227 0052 0246     		mov	r2, r0
 228 0054 0B46     		mov	r3, r1
 229 0056 A649     		ldr	r1, .L12+48
 230 0058 C1E90423 		strd	r2, [r1, #16]
  86:main.c        ****     
  87:main.c        ****     new = QuadDec_L_GetCounter();
 231              		.loc 1 87 0
 232 005c FFF7FEFF 		bl	QuadDec_L_GetCounter
 233 0060 7861     		str	r0, [r7, #20]
  88:main.c        ****     diff = new - left_motor.enc_count;
 234              		.loc 1 88 0
 235 0062 A44B     		ldr	r3, .L12+52
 236 0064 1B6C     		ldr	r3, [r3, #64]
 237 0066 7A69     		ldr	r2, [r7, #20]
 238 0068 D31A     		subs	r3, r2, r3
 239 006a 3B61     		str	r3, [r7, #16]
  89:main.c        ****     left_motor.enc_count = new;
 240              		.loc 1 89 0
 241 006c A14A     		ldr	r2, .L12+52
 242 006e 7B69     		ldr	r3, [r7, #20]
 243 0070 1364     		str	r3, [r2, #64]
  90:main.c        ****     left_motor.w = M_TWOPI * diff / POSE_UPDATE_PERIOD / PULSES_PER_REV;
 244              		.loc 1 90 0
 245 0072 3869     		ldr	r0, [r7, #16]
 246 0074 FFF7FEFF 		bl	__aeabi_i2d
 247 0078 91A3     		adr	r3, .L12
 248 007a D3E90023 		ldrd	r2, [r3]
 249 007e FFF7FEFF 		bl	__aeabi_dmul
 250 0082 0246     		mov	r2, r0
 251 0084 0B46     		mov	r3, r1
 252 0086 1046     		mov	r0, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 7


 253 0088 1946     		mov	r1, r3
 254 008a 8FA3     		adr	r3, .L12+8
 255 008c D3E90023 		ldrd	r2, [r3]
 256 0090 FFF7FEFF 		bl	__aeabi_ddiv
 257 0094 0246     		mov	r2, r0
 258 0096 0B46     		mov	r3, r1
 259 0098 1046     		mov	r0, r2
 260 009a 1946     		mov	r1, r3
 261 009c 8CA3     		adr	r3, .L12+16
 262 009e D3E90023 		ldrd	r2, [r3]
 263 00a2 FFF7FEFF 		bl	__aeabi_ddiv
 264 00a6 0246     		mov	r2, r0
 265 00a8 0B46     		mov	r3, r1
 266 00aa 9249     		ldr	r1, .L12+52
 267 00ac C1E90423 		strd	r2, [r1, #16]
  91:main.c        ****     
  92:main.c        ****     // Calculate and update tangential velocity of wheels
  93:main.c        ****     left_motor.tangent_v = left_motor.w * left_motor.wheel_radius;
 268              		.loc 1 93 0
 269 00b0 904B     		ldr	r3, .L12+52
 270 00b2 D3E90401 		ldrd	r0, [r3, #16]
 271 00b6 8F4B     		ldr	r3, .L12+52
 272 00b8 D3E90E23 		ldrd	r2, [r3, #56]
 273 00bc FFF7FEFF 		bl	__aeabi_dmul
 274 00c0 0246     		mov	r2, r0
 275 00c2 0B46     		mov	r3, r1
 276 00c4 8B49     		ldr	r1, .L12+52
 277 00c6 C1E90623 		strd	r2, [r1, #24]
  94:main.c        ****     right_motor.tangent_v = right_motor.w * right_motor.wheel_radius;
 278              		.loc 1 94 0
 279 00ca 894B     		ldr	r3, .L12+48
 280 00cc D3E90401 		ldrd	r0, [r3, #16]
 281 00d0 874B     		ldr	r3, .L12+48
 282 00d2 D3E90E23 		ldrd	r2, [r3, #56]
 283 00d6 FFF7FEFF 		bl	__aeabi_dmul
 284 00da 0246     		mov	r2, r0
 285 00dc 0B46     		mov	r3, r1
 286 00de 8449     		ldr	r1, .L12+48
 287 00e0 C1E90623 		strd	r2, [r1, #24]
  95:main.c        **** 
  96:main.c        ****     // Calculate and update Robot velocity and angular velocity
  97:main.c        ****     robot.w = (right_motor.tangent_v - left_motor.tangent_v) / robot.axle_width; //instantaneous tu
 288              		.loc 1 97 0
 289 00e4 824B     		ldr	r3, .L12+48
 290 00e6 D3E90601 		ldrd	r0, [r3, #24]
 291 00ea 824B     		ldr	r3, .L12+52
 292 00ec D3E90623 		ldrd	r2, [r3, #24]
 293 00f0 FFF7FEFF 		bl	__aeabi_dsub
 294 00f4 0246     		mov	r2, r0
 295 00f6 0B46     		mov	r3, r1
 296 00f8 1046     		mov	r0, r2
 297 00fa 1946     		mov	r1, r3
 298 00fc 7E4B     		ldr	r3, .L12+56
 299 00fe D3E90023 		ldrd	r2, [r3]
 300 0102 FFF7FEFF 		bl	__aeabi_ddiv
 301 0106 0246     		mov	r2, r0
 302 0108 0B46     		mov	r3, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 8


 303 010a 7B49     		ldr	r1, .L12+56
 304 010c C1E90A23 		strd	r2, [r1, #40]
  98:main.c        ****     robot.v =  (right_motor.tangent_v + left_motor.tangent_v) / 2; //instantaneous tangential veloc
 305              		.loc 1 98 0
 306 0110 774B     		ldr	r3, .L12+48
 307 0112 D3E90601 		ldrd	r0, [r3, #24]
 308 0116 774B     		ldr	r3, .L12+52
 309 0118 D3E90623 		ldrd	r2, [r3, #24]
 310 011c FFF7FEFF 		bl	__aeabi_dadd
 311 0120 0246     		mov	r2, r0
 312 0122 0B46     		mov	r3, r1
 313 0124 1046     		mov	r0, r2
 314 0126 1946     		mov	r1, r3
 315 0128 4FF00002 		mov	r2, #0
 316 012c 4FF08043 		mov	r3, #1073741824
 317 0130 FFF7FEFF 		bl	__aeabi_ddiv
 318 0134 0246     		mov	r2, r0
 319 0136 0B46     		mov	r3, r1
 320 0138 6F49     		ldr	r1, .L12+56
 321 013a C1E90823 		strd	r2, [r1, #32]
  99:main.c        **** 
 100:main.c        ****     // Update Robot pose
 101:main.c        ****     robot.theta = calculate_angle_modulo( robot.theta + robot.w * POSE_UPDATE_PERIOD );
 322              		.loc 1 101 0
 323 013e 6E4B     		ldr	r3, .L12+56
 324 0140 D3E90289 		ldrd	r8, [r3, #8]
 325 0144 6C4B     		ldr	r3, .L12+56
 326 0146 D3E90A01 		ldrd	r0, [r3, #40]
 327 014a 5FA3     		adr	r3, .L12+8
 328 014c D3E90023 		ldrd	r2, [r3]
 329 0150 FFF7FEFF 		bl	__aeabi_dmul
 330 0154 0246     		mov	r2, r0
 331 0156 0B46     		mov	r3, r1
 332 0158 4046     		mov	r0, r8
 333 015a 4946     		mov	r1, r9
 334 015c FFF7FEFF 		bl	__aeabi_dadd
 335 0160 0246     		mov	r2, r0
 336 0162 0B46     		mov	r3, r1
 337 0164 1046     		mov	r0, r2
 338 0166 1946     		mov	r1, r3
 339 0168 FFF7FEFF 		bl	calculate_angle_modulo
 340 016c 0246     		mov	r2, r0
 341 016e 0B46     		mov	r3, r1
 342 0170 6149     		ldr	r1, .L12+56
 343 0172 C1E90223 		strd	r2, [r1, #8]
 102:main.c        ****     robot.x = robot.x + POSE_UPDATE_PERIOD * robot.v * cos(robot.theta);
 344              		.loc 1 102 0
 345 0176 604B     		ldr	r3, .L12+56
 346 0178 D3E90489 		ldrd	r8, [r3, #16]
 347 017c 5E4B     		ldr	r3, .L12+56
 348 017e D3E90801 		ldrd	r0, [r3, #32]
 349 0182 51A3     		adr	r3, .L12+8
 350 0184 D3E90023 		ldrd	r2, [r3]
 351 0188 FFF7FEFF 		bl	__aeabi_dmul
 352 018c 0246     		mov	r2, r0
 353 018e 0B46     		mov	r3, r1
 354 0190 9246     		mov	r10, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 9


 355 0192 9B46     		mov	fp, r3
 356 0194 584B     		ldr	r3, .L12+56
 357 0196 D3E90223 		ldrd	r2, [r3, #8]
 358 019a 1046     		mov	r0, r2
 359 019c 1946     		mov	r1, r3
 360 019e FFF7FEFF 		bl	cos
 361 01a2 0246     		mov	r2, r0
 362 01a4 0B46     		mov	r3, r1
 363 01a6 5046     		mov	r0, r10
 364 01a8 5946     		mov	r1, fp
 365 01aa FFF7FEFF 		bl	__aeabi_dmul
 366 01ae 0246     		mov	r2, r0
 367 01b0 0B46     		mov	r3, r1
 368 01b2 4046     		mov	r0, r8
 369 01b4 4946     		mov	r1, r9
 370 01b6 FFF7FEFF 		bl	__aeabi_dadd
 371 01ba 0246     		mov	r2, r0
 372 01bc 0B46     		mov	r3, r1
 373 01be 4E49     		ldr	r1, .L12+56
 374 01c0 C1E90423 		strd	r2, [r1, #16]
 103:main.c        ****     robot.y = robot.y + POSE_UPDATE_PERIOD * robot.v * sin(robot.theta);
 375              		.loc 1 103 0
 376 01c4 4C4B     		ldr	r3, .L12+56
 377 01c6 D3E90689 		ldrd	r8, [r3, #24]
 378 01ca 4B4B     		ldr	r3, .L12+56
 379 01cc D3E90801 		ldrd	r0, [r3, #32]
 380 01d0 3DA3     		adr	r3, .L12+8
 381 01d2 D3E90023 		ldrd	r2, [r3]
 382 01d6 FFF7FEFF 		bl	__aeabi_dmul
 383 01da 0246     		mov	r2, r0
 384 01dc 0B46     		mov	r3, r1
 385 01de 9246     		mov	r10, r2
 386 01e0 9B46     		mov	fp, r3
 387 01e2 454B     		ldr	r3, .L12+56
 388 01e4 D3E90223 		ldrd	r2, [r3, #8]
 389 01e8 1046     		mov	r0, r2
 390 01ea 1946     		mov	r1, r3
 391 01ec FFF7FEFF 		bl	sin
 392 01f0 0246     		mov	r2, r0
 393 01f2 0B46     		mov	r3, r1
 394 01f4 5046     		mov	r0, r10
 395 01f6 5946     		mov	r1, fp
 396 01f8 FFF7FEFF 		bl	__aeabi_dmul
 397 01fc 0246     		mov	r2, r0
 398 01fe 0B46     		mov	r3, r1
 399 0200 4046     		mov	r0, r8
 400 0202 4946     		mov	r1, r9
 401 0204 FFF7FEFF 		bl	__aeabi_dadd
 402 0208 0246     		mov	r2, r0
 403 020a 0B46     		mov	r3, r1
 404 020c 3A49     		ldr	r1, .L12+56
 405 020e C1E90623 		strd	r2, [r1, #24]
 104:main.c        ****     
 105:main.c        ****     
 106:main.c        ****     // Perform robot PI control
 107:main.c        ****     long double error = robot.desired_theta - robot.theta;  
 406              		.loc 1 107 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 10


 407 0212 394B     		ldr	r3, .L12+56
 408 0214 D3E90E01 		ldrd	r0, [r3, #56]
 409 0218 374B     		ldr	r3, .L12+56
 410 021a D3E90223 		ldrd	r2, [r3, #8]
 411 021e FFF7FEFF 		bl	__aeabi_dsub
 412 0222 0246     		mov	r2, r0
 413 0224 0B46     		mov	r3, r1
 414 0226 C7E90623 		strd	r2, [r7, #24]
 108:main.c        ****     if( error > M_PI ) {     // TODO: give this more thought. Want the robot to choose direction of
 415              		.loc 1 108 0
 416 022a 2BA3     		adr	r3, .L12+24
 417 022c D3E90023 		ldrd	r2, [r3]
 418 0230 D7E90601 		ldrd	r0, [r7, #24]
 419 0234 FFF7FEFF 		bl	__aeabi_dcmpgt
 420 0238 0346     		mov	r3, r0
 421 023a 002B     		cmp	r3, #0
 422 023c 0AD0     		beq	.L6
 109:main.c        ****         error = error - M_TWOPI;
 423              		.loc 1 109 0
 424 023e 20A3     		adr	r3, .L12
 425 0240 D3E90023 		ldrd	r2, [r3]
 426 0244 D7E90601 		ldrd	r0, [r7, #24]
 427 0248 FFF7FEFF 		bl	__aeabi_dsub
 428 024c 0246     		mov	r2, r0
 429 024e 0B46     		mov	r3, r1
 430 0250 C7E90623 		strd	r2, [r7, #24]
 431              	.L6:
 110:main.c        ****     }
 111:main.c        ****     if( error < -M_PI) {
 432              		.loc 1 111 0
 433 0254 22A3     		adr	r3, .L12+32
 434 0256 D3E90023 		ldrd	r2, [r3]
 435 025a D7E90601 		ldrd	r0, [r7, #24]
 436 025e FFF7FEFF 		bl	__aeabi_dcmplt
 437 0262 0346     		mov	r3, r0
 438 0264 002B     		cmp	r3, #0
 439 0266 0AD0     		beq	.L8
 112:main.c        ****         error = error + M_TWOPI;
 440              		.loc 1 112 0
 441 0268 15A3     		adr	r3, .L12
 442 026a D3E90023 		ldrd	r2, [r3]
 443 026e D7E90601 		ldrd	r0, [r7, #24]
 444 0272 FFF7FEFF 		bl	__aeabi_dadd
 445 0276 0246     		mov	r2, r0
 446 0278 0B46     		mov	r3, r1
 447 027a C7E90623 		strd	r2, [r7, #24]
 448              	.L8:
 113:main.c        ****     }
 114:main.c        ****     
 115:main.c        ****     // Calculate scaled velocity depending on how much we have to rotate (makes robot turn on spot 
 116:main.c        ****     double scaled_V = robot.desired_v *( 1 - logl( (M_E - 1) * fabsl(error) / M_PI + 1 ));
 449              		.loc 1 116 0
 450 027e 1E4B     		ldr	r3, .L12+56
 451 0280 D3E90C89 		ldrd	r8, [r3, #48]
 452 0284 BC69     		ldr	r4, [r7, #24]
 453 0286 FB69     		ldr	r3, [r7, #28]
 454 0288 23F00045 		bic	r5, r3, #-2147483648
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 11


 455 028c 16A3     		adr	r3, .L12+40
 456 028e D3E90023 		ldrd	r2, [r3]
 457 0292 2046     		mov	r0, r4
 458 0294 2946     		mov	r1, r5
 459 0296 FFF7FEFF 		bl	__aeabi_dmul
 460 029a 0346     		mov	r3, r0
 461 029c 0C46     		mov	r4, r1
 462 029e 1846     		mov	r0, r3
 463 02a0 2146     		mov	r1, r4
 464 02a2 0DA3     		adr	r3, .L12+24
 465 02a4 D3E90023 		ldrd	r2, [r3]
 466 02a8 FFF7FEFF 		bl	__aeabi_ddiv
 467 02ac 0346     		mov	r3, r0
 468 02ae 0C46     		mov	r4, r1
 469 02b0 1846     		mov	r0, r3
 470 02b2 2146     		mov	r1, r4
 471 02b4 4FF00002 		mov	r2, #0
 472 02b8 104B     		ldr	r3, .L12+60
 473 02ba FFF7FEFF 		bl	__aeabi_dadd
 474 02be 1FE0     		b	.L13
 475              	.L14:
 476              		.align	3
 477              	.L12:
 478 02c0 182D4454 		.word	1413754136
 479 02c4 FB211940 		.word	1075388923
 480 02c8 7B14AE47 		.word	1202590843
 481 02cc E17A943F 		.word	1066695393
 482 02d0 A4703D0A 		.word	171798692
 483 02d4 D70FAC40 		.word	1085018071
 484 02d8 182D4454 		.word	1413754136
 485 02dc FB210940 		.word	1074340347
 486 02e0 182D4454 		.word	1413754136
 487 02e4 FB2109C0 		.word	-1073143301
 488 02e8 D2AE2816 		.word	371764946
 489 02ec 157EFB3F 		.word	1073446421
 490 02f0 00000000 		.word	right_motor
 491 02f4 00000000 		.word	left_motor
 492 02f8 00000000 		.word	robot
 493 02fc 0000F03F 		.word	1072693248
 494              	.L13:
 495 0300 0346     		mov	r3, r0
 496 0302 0C46     		mov	r4, r1
 497 0304 1846     		mov	r0, r3
 498 0306 2146     		mov	r1, r4
 499 0308 FFF7FEFF 		bl	logl
 500 030c 0346     		mov	r3, r0
 501 030e 0C46     		mov	r4, r1
 502 0310 1A46     		mov	r2, r3
 503 0312 2346     		mov	r3, r4
 504 0314 4FF00000 		mov	r0, #0
 505 0318 4C49     		ldr	r1, .L15
 506 031a FFF7FEFF 		bl	__aeabi_dsub
 507 031e 0346     		mov	r3, r0
 508 0320 0C46     		mov	r4, r1
 509 0322 1A46     		mov	r2, r3
 510 0324 2346     		mov	r3, r4
 511 0326 4046     		mov	r0, r8
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 12


 512 0328 4946     		mov	r1, r9
 513 032a FFF7FEFF 		bl	__aeabi_dmul
 514 032e 0346     		mov	r3, r0
 515 0330 0C46     		mov	r4, r1
 516 0332 C7E90234 		strd	r3, [r7, #8]
 117:main.c        ****     
 118:main.c        ****     // Update motor tangential velocity based on error
 119:main.c        ****     robot.int_error = robot.int_error + error;
 517              		.loc 1 119 0
 518 0336 464B     		ldr	r3, .L15+4
 519 0338 D3E91401 		ldrd	r0, [r3, #80]
 520 033c D7E90623 		ldrd	r2, [r7, #24]
 521 0340 FFF7FEFF 		bl	__aeabi_dadd
 522 0344 0346     		mov	r3, r0
 523 0346 0C46     		mov	r4, r1
 524 0348 414A     		ldr	r2, .L15+4
 525 034a C2E91434 		strd	r3, [r2, #80]
 120:main.c        ****     long double new_w = robot.Kp * error + robot.Ki * robot.int_error;
 526              		.loc 1 120 0
 527 034e 404B     		ldr	r3, .L15+4
 528 0350 D3E91201 		ldrd	r0, [r3, #72]
 529 0354 D7E90623 		ldrd	r2, [r7, #24]
 530 0358 FFF7FEFF 		bl	__aeabi_dmul
 531 035c 0346     		mov	r3, r0
 532 035e 0C46     		mov	r4, r1
 533 0360 1D46     		mov	r5, r3
 534 0362 2646     		mov	r6, r4
 535 0364 3A4B     		ldr	r3, .L15+4
 536 0366 D3E91001 		ldrd	r0, [r3, #64]
 537 036a 394B     		ldr	r3, .L15+4
 538 036c 03F15004 		add	r4, r3, #80
 539 0370 D4E90034 		ldrd	r3, [r4]
 540 0374 1A46     		mov	r2, r3
 541 0376 2346     		mov	r3, r4
 542 0378 FFF7FEFF 		bl	__aeabi_dmul
 543 037c 0346     		mov	r3, r0
 544 037e 0C46     		mov	r4, r1
 545 0380 1A46     		mov	r2, r3
 546 0382 2346     		mov	r3, r4
 547 0384 2846     		mov	r0, r5
 548 0386 3146     		mov	r1, r6
 549 0388 FFF7FEFF 		bl	__aeabi_dadd
 550 038c 0346     		mov	r3, r0
 551 038e 0C46     		mov	r4, r1
 552 0390 C7E90034 		strd	r3, [r7]
 121:main.c        ****     right_motor.desired_w = (scaled_V + new_w * robot.axle_width / 2) / right_motor.wheel_radius;
 553              		.loc 1 121 0
 554 0394 2E4B     		ldr	r3, .L15+4
 555 0396 D3E90001 		ldrd	r0, [r3]
 556 039a D7E90023 		ldrd	r2, [r7]
 557 039e FFF7FEFF 		bl	__aeabi_dmul
 558 03a2 0346     		mov	r3, r0
 559 03a4 0C46     		mov	r4, r1
 560 03a6 1846     		mov	r0, r3
 561 03a8 2146     		mov	r1, r4
 562 03aa 4FF00002 		mov	r2, #0
 563 03ae 4FF08043 		mov	r3, #1073741824
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 13


 564 03b2 FFF7FEFF 		bl	__aeabi_ddiv
 565 03b6 0346     		mov	r3, r0
 566 03b8 0C46     		mov	r4, r1
 567 03ba 1846     		mov	r0, r3
 568 03bc 2146     		mov	r1, r4
 569 03be D7E90223 		ldrd	r2, [r7, #8]
 570 03c2 FFF7FEFF 		bl	__aeabi_dadd
 571 03c6 0346     		mov	r3, r0
 572 03c8 0C46     		mov	r4, r1
 573 03ca 1846     		mov	r0, r3
 574 03cc 2146     		mov	r1, r4
 575 03ce 214B     		ldr	r3, .L15+8
 576 03d0 03F13804 		add	r4, r3, #56
 577 03d4 D4E90034 		ldrd	r3, [r4]
 578 03d8 1A46     		mov	r2, r3
 579 03da 2346     		mov	r3, r4
 580 03dc FFF7FEFF 		bl	__aeabi_ddiv
 581 03e0 0346     		mov	r3, r0
 582 03e2 0C46     		mov	r4, r1
 583 03e4 1B4A     		ldr	r2, .L15+8
 584 03e6 C2E90834 		strd	r3, [r2, #32]
 122:main.c        ****     left_motor.desired_w = (scaled_V - new_w * robot.axle_width / 2) / left_motor.wheel_radius;   
 585              		.loc 1 122 0
 586 03ea 194B     		ldr	r3, .L15+4
 587 03ec D3E90001 		ldrd	r0, [r3]
 588 03f0 D7E90023 		ldrd	r2, [r7]
 589 03f4 FFF7FEFF 		bl	__aeabi_dmul
 590 03f8 0346     		mov	r3, r0
 591 03fa 0C46     		mov	r4, r1
 592 03fc 1846     		mov	r0, r3
 593 03fe 2146     		mov	r1, r4
 594 0400 4FF00002 		mov	r2, #0
 595 0404 4FF08043 		mov	r3, #1073741824
 596 0408 FFF7FEFF 		bl	__aeabi_ddiv
 597 040c 0346     		mov	r3, r0
 598 040e 0C46     		mov	r4, r1
 599 0410 1A46     		mov	r2, r3
 600 0412 2346     		mov	r3, r4
 601 0414 D7E90201 		ldrd	r0, [r7, #8]
 602 0418 FFF7FEFF 		bl	__aeabi_dsub
 603 041c 0346     		mov	r3, r0
 604 041e 0C46     		mov	r4, r1
 605 0420 1846     		mov	r0, r3
 606 0422 2146     		mov	r1, r4
 607 0424 0C4B     		ldr	r3, .L15+12
 608 0426 03F13804 		add	r4, r3, #56
 609 042a D4E90034 		ldrd	r3, [r4]
 610 042e 1A46     		mov	r2, r3
 611 0430 2346     		mov	r3, r4
 612 0432 FFF7FEFF 		bl	__aeabi_ddiv
 613 0436 0346     		mov	r3, r0
 614 0438 0C46     		mov	r4, r1
 615 043a 074A     		ldr	r2, .L15+12
 616 043c C2E90834 		strd	r3, [r2, #32]
 123:main.c        ****     
 124:main.c        **** }
 617              		.loc 1 124 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 14


 618 0440 00BF     		nop
 619 0442 2437     		adds	r7, r7, #36
 620              		.cfi_def_cfa_offset 36
 621 0444 BD46     		mov	sp, r7
 622              		.cfi_def_cfa_register 13
 623              		@ sp needed
 624 0446 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 625              	.L16:
 626 044a 00BF     		.align	2
 627              	.L15:
 628 044c 0000F03F 		.word	1072693248
 629 0450 00000000 		.word	robot
 630 0454 00000000 		.word	right_motor
 631 0458 00000000 		.word	left_motor
 632              		.cfi_endproc
 633              	.LFE65:
 634              		.size	Pose_Update_Int_Handler, .-Pose_Update_Int_Handler
 635              		.section	.text.Motor_PI_Int_Handler,"ax",%progbits
 636              		.align	2
 637              		.global	Motor_PI_Int_Handler
 638              		.thumb
 639              		.thumb_func
 640              		.type	Motor_PI_Int_Handler, %function
 641              	Motor_PI_Int_Handler:
 642              	.LFB66:
 125:main.c        **** 
 126:main.c        **** /* Interrupt for motor PI error handler and drive. */
 127:main.c        **** CY_ISR( Motor_PI_Int_Handler ) {
 643              		.loc 1 127 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 8
 646              		@ frame_needed = 1, uses_anonymous_args = 0
 647 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 648              		.cfi_def_cfa_offset 20
 649              		.cfi_offset 4, -20
 650              		.cfi_offset 5, -16
 651              		.cfi_offset 6, -12
 652              		.cfi_offset 7, -8
 653              		.cfi_offset 14, -4
 654 0002 83B0     		sub	sp, sp, #12
 655              		.cfi_def_cfa_offset 32
 656 0004 00AF     		add	r7, sp, #0
 657              		.cfi_def_cfa_register 7
 128:main.c        ****     long double error = left_motor.desired_w - left_motor.w;
 658              		.loc 1 128 0
 659 0006 514B     		ldr	r3, .L18
 660 0008 D3E90801 		ldrd	r0, [r3, #32]
 661 000c 4F4B     		ldr	r3, .L18
 662 000e 03F11004 		add	r4, r3, #16
 663 0012 D4E90034 		ldrd	r3, [r4]
 664 0016 1A46     		mov	r2, r3
 665 0018 2346     		mov	r3, r4
 666 001a FFF7FEFF 		bl	__aeabi_dsub
 667 001e 0346     		mov	r3, r0
 668 0020 0C46     		mov	r4, r1
 669 0022 C7E90034 		strd	r3, [r7]
 129:main.c        ****     left_motor.int_error  = left_motor.int_error + error;
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 15


 670              		.loc 1 129 0
 671 0026 494B     		ldr	r3, .L18
 672 0028 D3E90201 		ldrd	r0, [r3, #8]
 673 002c D7E90023 		ldrd	r2, [r7]
 674 0030 FFF7FEFF 		bl	__aeabi_dadd
 675 0034 0346     		mov	r3, r0
 676 0036 0C46     		mov	r4, r1
 677 0038 444A     		ldr	r2, .L18
 678 003a C2E90234 		strd	r3, [r2, #8]
 130:main.c        ****     left_motor.duty_cycle = left_motor.duty_cycle + left_motor.Kp * error + left_motor.Ki * left_mo
 679              		.loc 1 130 0
 680 003e 434B     		ldr	r3, .L18
 681 0040 D3E90045 		ldrd	r4, [r3]
 682 0044 414B     		ldr	r3, .L18
 683 0046 D3E90C01 		ldrd	r0, [r3, #48]
 684 004a D7E90023 		ldrd	r2, [r7]
 685 004e FFF7FEFF 		bl	__aeabi_dmul
 686 0052 0246     		mov	r2, r0
 687 0054 0B46     		mov	r3, r1
 688 0056 2046     		mov	r0, r4
 689 0058 2946     		mov	r1, r5
 690 005a FFF7FEFF 		bl	__aeabi_dadd
 691 005e 0346     		mov	r3, r0
 692 0060 0C46     		mov	r4, r1
 693 0062 1D46     		mov	r5, r3
 694 0064 2646     		mov	r6, r4
 695 0066 394B     		ldr	r3, .L18
 696 0068 D3E90A01 		ldrd	r0, [r3, #40]
 697 006c 374B     		ldr	r3, .L18
 698 006e 03F10804 		add	r4, r3, #8
 699 0072 D4E90034 		ldrd	r3, [r4]
 700 0076 1A46     		mov	r2, r3
 701 0078 2346     		mov	r3, r4
 702 007a FFF7FEFF 		bl	__aeabi_dmul
 703 007e 0346     		mov	r3, r0
 704 0080 0C46     		mov	r4, r1
 705 0082 1A46     		mov	r2, r3
 706 0084 2346     		mov	r3, r4
 707 0086 2846     		mov	r0, r5
 708 0088 3146     		mov	r1, r6
 709 008a FFF7FEFF 		bl	__aeabi_dadd
 710 008e 0346     		mov	r3, r0
 711 0090 0C46     		mov	r4, r1
 712 0092 2E4A     		ldr	r2, .L18
 713 0094 C2E90034 		strd	r3, [r2]
 131:main.c        ****     Drive_Left_Motor(left_motor.duty_cycle);
 714              		.loc 1 131 0
 715 0098 2C4B     		ldr	r3, .L18
 716 009a 18CB     		ldmia	r3, {r3-r4}
 717 009c 1846     		mov	r0, r3
 718 009e 2146     		mov	r1, r4
 719 00a0 FFF7FEFF 		bl	Drive_Left_Motor
 132:main.c        ****     
 133:main.c        ****     error = right_motor.desired_w - right_motor.w;
 720              		.loc 1 133 0
 721 00a4 2A4B     		ldr	r3, .L18+4
 722 00a6 D3E90801 		ldrd	r0, [r3, #32]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 16


 723 00aa 294B     		ldr	r3, .L18+4
 724 00ac 03F11004 		add	r4, r3, #16
 725 00b0 D4E90034 		ldrd	r3, [r4]
 726 00b4 1A46     		mov	r2, r3
 727 00b6 2346     		mov	r3, r4
 728 00b8 FFF7FEFF 		bl	__aeabi_dsub
 729 00bc 0346     		mov	r3, r0
 730 00be 0C46     		mov	r4, r1
 731 00c0 C7E90034 		strd	r3, [r7]
 134:main.c        ****     right_motor.int_error  = right_motor.int_error + error;
 732              		.loc 1 134 0
 733 00c4 224B     		ldr	r3, .L18+4
 734 00c6 D3E90201 		ldrd	r0, [r3, #8]
 735 00ca D7E90023 		ldrd	r2, [r7]
 736 00ce FFF7FEFF 		bl	__aeabi_dadd
 737 00d2 0346     		mov	r3, r0
 738 00d4 0C46     		mov	r4, r1
 739 00d6 1E4A     		ldr	r2, .L18+4
 740 00d8 C2E90234 		strd	r3, [r2, #8]
 135:main.c        ****     right_motor.duty_cycle = right_motor.duty_cycle + right_motor.Kp*error + right_motor.Ki * right
 741              		.loc 1 135 0
 742 00dc 1C4B     		ldr	r3, .L18+4
 743 00de D3E90045 		ldrd	r4, [r3]
 744 00e2 1B4B     		ldr	r3, .L18+4
 745 00e4 D3E90C01 		ldrd	r0, [r3, #48]
 746 00e8 D7E90023 		ldrd	r2, [r7]
 747 00ec FFF7FEFF 		bl	__aeabi_dmul
 748 00f0 0246     		mov	r2, r0
 749 00f2 0B46     		mov	r3, r1
 750 00f4 2046     		mov	r0, r4
 751 00f6 2946     		mov	r1, r5
 752 00f8 FFF7FEFF 		bl	__aeabi_dadd
 753 00fc 0346     		mov	r3, r0
 754 00fe 0C46     		mov	r4, r1
 755 0100 1D46     		mov	r5, r3
 756 0102 2646     		mov	r6, r4
 757 0104 124B     		ldr	r3, .L18+4
 758 0106 D3E90A01 		ldrd	r0, [r3, #40]
 759 010a 114B     		ldr	r3, .L18+4
 760 010c 03F10804 		add	r4, r3, #8
 761 0110 D4E90034 		ldrd	r3, [r4]
 762 0114 1A46     		mov	r2, r3
 763 0116 2346     		mov	r3, r4
 764 0118 FFF7FEFF 		bl	__aeabi_dmul
 765 011c 0346     		mov	r3, r0
 766 011e 0C46     		mov	r4, r1
 767 0120 1A46     		mov	r2, r3
 768 0122 2346     		mov	r3, r4
 769 0124 2846     		mov	r0, r5
 770 0126 3146     		mov	r1, r6
 771 0128 FFF7FEFF 		bl	__aeabi_dadd
 772 012c 0346     		mov	r3, r0
 773 012e 0C46     		mov	r4, r1
 774 0130 074A     		ldr	r2, .L18+4
 775 0132 C2E90034 		strd	r3, [r2]
 136:main.c        ****     Drive_Right_Motor(right_motor.duty_cycle);
 776              		.loc 1 136 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 17


 777 0136 064B     		ldr	r3, .L18+4
 778 0138 18CB     		ldmia	r3, {r3-r4}
 779 013a 1846     		mov	r0, r3
 780 013c 2146     		mov	r1, r4
 781 013e FFF7FEFF 		bl	Drive_Right_Motor
 137:main.c        **** 
 138:main.c        **** }
 782              		.loc 1 138 0
 783 0142 00BF     		nop
 784 0144 0C37     		adds	r7, r7, #12
 785              		.cfi_def_cfa_offset 20
 786 0146 BD46     		mov	sp, r7
 787              		.cfi_def_cfa_register 13
 788              		@ sp needed
 789 0148 F0BD     		pop	{r4, r5, r6, r7, pc}
 790              	.L19:
 791 014a 00BF     		.align	2
 792              	.L18:
 793 014c 00000000 		.word	left_motor
 794 0150 00000000 		.word	right_motor
 795              		.cfi_endproc
 796              	.LFE66:
 797              		.size	Motor_PI_Int_Handler, .-Motor_PI_Int_Handler
 798              		.global	__aeabi_dcmpge
 799              		.section	.text.Navigation_Test_Int_Handler,"ax",%progbits
 800              		.align	2
 801              		.global	Navigation_Test_Int_Handler
 802              		.thumb
 803              		.thumb_func
 804              		.type	Navigation_Test_Int_Handler, %function
 805              	Navigation_Test_Int_Handler:
 806              	.LFB67:
 139:main.c        **** 
 140:main.c        **** /* Interrupt for test handler? */
 141:main.c        **** CY_ISR( Navigation_Test_Int_Handler ) {
 807              		.loc 1 141 0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 8
 810              		@ frame_needed = 1, uses_anonymous_args = 0
 811 0000 90B5     		push	{r4, r7, lr}
 812              		.cfi_def_cfa_offset 12
 813              		.cfi_offset 4, -12
 814              		.cfi_offset 7, -8
 815              		.cfi_offset 14, -4
 816 0002 83B0     		sub	sp, sp, #12
 817              		.cfi_def_cfa_offset 24
 818 0004 00AF     		add	r7, sp, #0
 819              		.cfi_def_cfa_register 7
 142:main.c        ****     long double angle;
 143:main.c        ****     angle = robot.desired_theta + M_PI/8;
 820              		.loc 1 143 0
 821 0006 1A4B     		ldr	r3, .L24+16
 822 0008 D3E90E01 		ldrd	r0, [r3, #56]
 823 000c 14A3     		adr	r3, .L24
 824 000e D3E90023 		ldrd	r2, [r3]
 825 0012 FFF7FEFF 		bl	__aeabi_dadd
 826 0016 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 18


 827 0018 0C46     		mov	r4, r1
 828 001a C7E90034 		strd	r3, [r7]
 144:main.c        ****     if( angle >= M_TWOPI ) {
 829              		.loc 1 144 0
 830 001e 12A3     		adr	r3, .L24+8
 831 0020 D3E90023 		ldrd	r2, [r3]
 832 0024 D7E90001 		ldrd	r0, [r7]
 833 0028 FFF7FEFF 		bl	__aeabi_dcmpge
 834 002c 0346     		mov	r3, r0
 835 002e 002B     		cmp	r3, #0
 836 0030 0AD0     		beq	.L21
 145:main.c        ****         angle = angle - M_TWOPI;
 837              		.loc 1 145 0
 838 0032 0DA3     		adr	r3, .L24+8
 839 0034 D3E90023 		ldrd	r2, [r3]
 840 0038 D7E90001 		ldrd	r0, [r7]
 841 003c FFF7FEFF 		bl	__aeabi_dsub
 842 0040 0346     		mov	r3, r0
 843 0042 0C46     		mov	r4, r1
 844 0044 C7E90034 		strd	r3, [r7]
 845              	.L21:
 146:main.c        ****     }
 147:main.c        ****     robot.desired_theta = angle;
 846              		.loc 1 147 0
 847 0048 094A     		ldr	r2, .L24+16
 848 004a D7E90034 		ldrd	r3, [r7]
 849 004e C2E90E34 		strd	r3, [r2, #56]
 148:main.c        **** }
 850              		.loc 1 148 0
 851 0052 00BF     		nop
 852 0054 0C37     		adds	r7, r7, #12
 853              		.cfi_def_cfa_offset 12
 854 0056 BD46     		mov	sp, r7
 855              		.cfi_def_cfa_register 13
 856              		@ sp needed
 857 0058 90BD     		pop	{r4, r7, pc}
 858              	.L25:
 859 005a 00BFAFF3 		.align	3
 859      0080
 860              	.L24:
 861 0060 182D4454 		.word	1413754136
 862 0064 FB21D93F 		.word	1071194619
 863 0068 182D4454 		.word	1413754136
 864 006c FB211940 		.word	1075388923
 865 0070 00000000 		.word	robot
 866              		.cfi_endproc
 867              	.LFE67:
 868              		.size	Navigation_Test_Int_Handler, .-Navigation_Test_Int_Handler
 869              		.global	__aeabi_i2f
 870              		.global	__aeabi_fcmplt
 871              		.global	__aeabi_d2f
 872              		.global	__aeabi_f2d
 873              		.global	__aeabi_f2iz
 874              		.global	__aeabi_fsub
 875              		.global	__aeabi_fmul
 876              		.global	__aeabi_fadd
 877              		.section	.rodata
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 19


 878              		.align	2
 879              	.LC0:
 880 0010 00000000 		.word	0
 881 0014 5A000000 		.word	90
 882 0018 5A000000 		.word	90
 883 001c 5A000000 		.word	90
 884              		.section	.text.main,"ax",%progbits
 885              		.align	2
 886              		.global	main
 887              		.thumb
 888              		.thumb_func
 889              		.type	main, %function
 890              	main:
 891              	.LFB68:
 149:main.c        **** 
 150:main.c        **** 
 151:main.c        **** int main(void)
 152:main.c        **** {
 892              		.loc 1 152 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 160
 895              		@ frame_needed = 1, uses_anonymous_args = 0
 896 0000 90B5     		push	{r4, r7, lr}
 897              		.cfi_def_cfa_offset 12
 898              		.cfi_offset 4, -12
 899              		.cfi_offset 7, -8
 900              		.cfi_offset 14, -4
 901 0002 B5B0     		sub	sp, sp, #212
 902              		.cfi_def_cfa_offset 224
 903 0004 0CAF     		add	r7, sp, #48
 904              		.cfi_def_cfa 7, 176
 153:main.c        ****     CyGlobalIntEnable;
 905              		.loc 1 153 0
 906              		.syntax unified
 907              	@ 153 "main.c" 1
 908 0006 62B6     		CPSIE   i
 909              	@ 0 "" 2
 154:main.c        ****     
 155:main.c        ****     // Registration of Timer ISR
 156:main.c        ****     Timer_Echo_Int_StartEx( Timer_Int_Handler );
 910              		.loc 1 156 0
 911              		.thumb
 912              		.syntax unified
 913 0008 9148     		ldr	r0, .L56+48
 914 000a FFF7FEFF 		bl	Timer_Echo_Int_StartEx
 157:main.c        ****     Pose_Update_Int_StartEx( Pose_Update_Int_Handler );
 915              		.loc 1 157 0
 916 000e 9148     		ldr	r0, .L56+52
 917 0010 FFF7FEFF 		bl	Pose_Update_Int_StartEx
 158:main.c        ****     Motor_PI_Int_StartEx( Motor_PI_Int_Handler );
 918              		.loc 1 158 0
 919 0014 9048     		ldr	r0, .L56+56
 920 0016 FFF7FEFF 		bl	Motor_PI_Int_StartEx
 159:main.c        ****     //Testing_Int_StartEx( Navigation_Test_Int_Handler );
 160:main.c        ****     
 161:main.c        ****     // Start up code - enable UART, PWM and Timer used for ultrasonic module
 162:main.c        ****     UART_Start();
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 20


 921              		.loc 1 162 0
 922 001a FFF7FEFF 		bl	UART_Start
 163:main.c        ****     Timer_Echo_Start();
 923              		.loc 1 163 0
 924 001e FFF7FEFF 		bl	Timer_Echo_Start
 164:main.c        ****     PWM_Trigger_Start();
 925              		.loc 1 164 0
 926 0022 FFF7FEFF 		bl	PWM_Trigger_Start
 165:main.c        ****     QuadDec_L_Start();
 927              		.loc 1 165 0
 928 0026 FFF7FEFF 		bl	QuadDec_L_Start
 166:main.c        ****     PWM_Motor_L_Start();
 929              		.loc 1 166 0
 930 002a FFF7FEFF 		bl	PWM_Motor_L_Start
 167:main.c        ****     QuadDec_R_Start();
 931              		.loc 1 167 0
 932 002e FFF7FEFF 		bl	QuadDec_R_Start
 168:main.c        ****     PWM_Motor_R_Start();
 933              		.loc 1 168 0
 934 0032 FFF7FEFF 		bl	PWM_Motor_R_Start
 169:main.c        ****     Timer_Avoidance_Start();
 935              		.loc 1 169 0
 936 0036 FFF7FEFF 		bl	Timer_Avoidance_Start
 170:main.c        ****     PWM_ServoDir_Start();
 937              		.loc 1 170 0
 938 003a FFF7FEFF 		bl	PWM_ServoDir_Start
 171:main.c        ****     PWM_1_Start();
 939              		.loc 1 171 0
 940 003e FFF7FEFF 		bl	PWM_1_Start
 172:main.c        ****     
 173:main.c        ****     Timer_Avoidance_WriteCounter(60000); // Cause robot to start moving immediately
 941              		.loc 1 173 0
 942 0042 4EF66020 		movw	r0, #60000
 943 0046 FFF7FEFF 		bl	Timer_Avoidance_WriteCounter
 174:main.c        ****     
 175:main.c        ****     // Define and initialise motors
 176:main.c        ****     long double wheel_r_scale = 0.9378;
 944              		.loc 1 176 0
 945 004a 75A4     		adr	r4, .L56
 946 004c D4E90034 		ldrd	r3, [r4]
 947 0050 C7E92034 		strd	r3, [r7, #128]
 177:main.c        ****     long double motor_Ki = 3e-6;     // TODO: Determine good value
 948              		.loc 1 177 0
 949 0054 74A4     		adr	r4, .L56+8
 950 0056 D4E90034 		ldrd	r3, [r4]
 951 005a C7E91E34 		strd	r3, [r7, #120]
 178:main.c        ****     long double motor_Kp = 0.0025;   // TODO: Determine good value
 952              		.loc 1 178 0
 953 005e 74A4     		adr	r4, .L56+16
 954 0060 D4E90034 		ldrd	r3, [r4]
 955 0064 C7E91C34 		strd	r3, [r7, #112]
 179:main.c        ****     
 180:main.c        ****     motor_create(&left_motor, wheel_r_scale, motor_Ki, motor_Kp);
 956              		.loc 1 180 0
 957 0068 D7E91C34 		ldrd	r3, [r7, #112]
 958 006c CDE90234 		strd	r3, [sp, #8]
 959 0070 D7E91E34 		ldrd	r3, [r7, #120]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 21


 960 0074 CDE90034 		strd	r3, [sp]
 961 0078 D7E92023 		ldrd	r2, [r7, #128]
 962 007c 7748     		ldr	r0, .L56+60
 963 007e FFF7FEFF 		bl	motor_create
 181:main.c        ****     motor_create(&right_motor, wheel_r_scale, motor_Ki, motor_Kp);
 964              		.loc 1 181 0
 965 0082 D7E91C34 		ldrd	r3, [r7, #112]
 966 0086 CDE90234 		strd	r3, [sp, #8]
 967 008a D7E91E34 		ldrd	r3, [r7, #120]
 968 008e CDE90034 		strd	r3, [sp]
 969 0092 D7E92023 		ldrd	r2, [r7, #128]
 970 0096 7248     		ldr	r0, .L56+64
 971 0098 FFF7FEFF 		bl	motor_create
 182:main.c        ****     
 183:main.c        ****     // Define and initialise robot 
 184:main.c        ****     long double robot_axle_width = 0.936*22.5;  // TODO: get accurate measurement
 972              		.loc 1 184 0
 973 009c 66A4     		adr	r4, .L56+24
 974 009e D4E90034 		ldrd	r3, [r4]
 975 00a2 C7E91A34 		strd	r3, [r7, #104]
 185:main.c        ****     long double robot_Ki = 3e-5;    // TODO: Determine good value
 976              		.loc 1 185 0
 977 00a6 66A4     		adr	r4, .L56+32
 978 00a8 D4E90034 		ldrd	r3, [r4]
 979 00ac C7E91834 		strd	r3, [r7, #96]
 186:main.c        ****     long double robot_Kp = 0.75;     // was previously 0.75 before changing for MS1
 980              		.loc 1 186 0
 981 00b0 4FF00003 		mov	r3, #0
 982 00b4 6B4C     		ldr	r4, .L56+68
 983 00b6 C7E91634 		strd	r3, [r7, #88]
 187:main.c        ****     long double min_distance = 5;   // Minimum distance between robot position and goal
 984              		.loc 1 187 0
 985 00ba 4FF00003 		mov	r3, #0
 986 00be 6A4C     		ldr	r4, .L56+72
 987 00c0 C7E91434 		strd	r3, [r7, #80]
 188:main.c        **** 
 189:main.c        **** 
 190:main.c        ****     /*======================= ROBOT STARTING POSITION =======================*/
 191:main.c        ****     long double start_x = 0;    // Starting x, duh!
 988              		.loc 1 191 0
 989 00c4 4FF00003 		mov	r3, #0
 990 00c8 4FF00004 		mov	r4, #0
 991 00cc C7E91234 		strd	r3, [r7, #72]
 192:main.c        ****     long double start_y = 0;    // Starting y, duh!
 992              		.loc 1 192 0
 993 00d0 4FF00003 		mov	r3, #0
 994 00d4 4FF00004 		mov	r4, #0
 995 00d8 C7E91034 		strd	r3, [r7, #64]
 193:main.c        ****     long double start_th = M_PI/2;
 996              		.loc 1 193 0
 997 00dc 5AA4     		adr	r4, .L56+40
 998 00de D4E90034 		ldrd	r3, [r4]
 999 00e2 C7E90E34 		strd	r3, [r7, #56]
 194:main.c        ****     /*=======================================================================*/
 195:main.c        **** 
 196:main.c        **** 
 197:main.c        ****     robot_create(&robot, robot_axle_width, robot_Ki, robot_Kp, min_distance, start_x, start_y, star
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 22


 1000              		.loc 1 197 0
 1001 00e6 D7E90E34 		ldrd	r3, [r7, #56]
 1002 00ea CDE90A34 		strd	r3, [sp, #40]
 1003 00ee D7E91034 		ldrd	r3, [r7, #64]
 1004 00f2 CDE90834 		strd	r3, [sp, #32]
 1005 00f6 D7E91234 		ldrd	r3, [r7, #72]
 1006 00fa CDE90634 		strd	r3, [sp, #24]
 1007 00fe D7E91434 		ldrd	r3, [r7, #80]
 1008 0102 CDE90434 		strd	r3, [sp, #16]
 1009 0106 D7E91634 		ldrd	r3, [r7, #88]
 1010 010a CDE90234 		strd	r3, [sp, #8]
 1011 010e D7E91834 		ldrd	r3, [r7, #96]
 1012 0112 CDE90034 		strd	r3, [sp]
 1013 0116 D7E91A23 		ldrd	r2, [r7, #104]
 1014 011a 5448     		ldr	r0, .L56+76
 1015 011c FFF7FEFF 		bl	robot_create
 198:main.c        **** 
 199:main.c        ****     // Define sensor directions (start from front sensor, then move clockwise)
 200:main.c        ****     sensors.direction[0] = 0;
 1016              		.loc 1 200 0
 1017 0120 534B     		ldr	r3, .L56+80
 1018 0122 0022     		movs	r2, #0
 1019 0124 1A60     		str	r2, [r3]
 201:main.c        ****     sensors.direction[1] = 30;
 1020              		.loc 1 201 0
 1021 0126 524B     		ldr	r3, .L56+80
 1022 0128 1E22     		movs	r2, #30
 1023 012a 5A60     		str	r2, [r3, #4]
 202:main.c        ****     sensors.direction[2] = 90;
 1024              		.loc 1 202 0
 1025 012c 504B     		ldr	r3, .L56+80
 1026 012e 5A22     		movs	r2, #90
 1027 0130 9A60     		str	r2, [r3, #8]
 203:main.c        ****     sensors.direction[3] = 270;
 1028              		.loc 1 203 0
 1029 0132 4F4B     		ldr	r3, .L56+80
 1030 0134 4FF48772 		mov	r2, #270
 1031 0138 DA60     		str	r2, [r3, #12]
 204:main.c        ****     sensors.direction[4] = 330;
 1032              		.loc 1 204 0
 1033 013a 4D4B     		ldr	r3, .L56+80
 1034 013c 4FF4A572 		mov	r2, #330
 1035 0140 1A61     		str	r2, [r3, #16]
 205:main.c        **** 
 206:main.c        ****     /*========================= M1: Goal Definition =========================*/
 207:main.c        ****     // Goals should be defined where the bin is
 208:main.c        ****     int n_goals = 2;    // Number of goals, duh!
 1036              		.loc 1 208 0
 1037 0142 0223     		movs	r3, #2
 1038 0144 7B63     		str	r3, [r7, #52]
 209:main.c        ****     int goals[4] = {0, 90, 90, 90};    // Coordinates of goals [x1, y1, x2, y2, ..., xn, yn]
 1039              		.loc 1 209 0
 1040 0146 4B4B     		ldr	r3, .L56+84
 1041 0148 3C1D     		adds	r4, r7, #4
 1042 014a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 1043 014c 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 210:main.c        ****     robot.goal_x = goals[0];   // Update robot x goal
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 23


 1044              		.loc 1 210 0
 1045 0150 7B68     		ldr	r3, [r7, #4]
 1046 0152 1846     		mov	r0, r3
 1047 0154 FFF7FEFF 		bl	__aeabi_i2d
 1048 0158 0346     		mov	r3, r0
 1049 015a 0C46     		mov	r4, r1
 1050 015c 434A     		ldr	r2, .L56+76
 1051 015e C2E91634 		strd	r3, [r2, #88]
 211:main.c        ****     robot.goal_y = goals[1];   // Update robot y goal
 1052              		.loc 1 211 0
 1053 0162 BB68     		ldr	r3, [r7, #8]
 1054 0164 1846     		mov	r0, r3
 1055 0166 FFF7FEFF 		bl	__aeabi_i2d
 1056 016a 0346     		mov	r3, r0
 1057 016c 0C46     		mov	r4, r1
 1058 016e 3F4A     		ldr	r2, .L56+76
 1059 0170 C2E91834 		strd	r3, [r2, #96]
 212:main.c        ****     int goals_reached = 0;  // Counter for number of goas reached, duh!
 1060              		.loc 1 212 0
 1061 0174 0023     		movs	r3, #0
 1062 0176 3B63     		str	r3, [r7, #48]
 213:main.c        ****     /*=======================================================================*/    
 214:main.c        **** 
 215:main.c        ****     
 216:main.c        **** 
 217:main.c        ****     /*======================= M1: Wall Following Code =======================*/
 218:main.c        ****     // Point to goal at the beginning
 219:main.c        ****     float ref_direction = M_PI/2;
 1063              		.loc 1 219 0
 1064 0178 3F4B     		ldr	r3, .L56+88
 1065 017a C7F89C30 		str	r3, [r7, #156]	@ float
 220:main.c        ****     int ref_direction_deg = 90;
 1066              		.loc 1 220 0
 1067 017e 5A23     		movs	r3, #90
 1068 0180 C7F89830 		str	r3, [r7, #152]
 221:main.c        ****     robot.desired_theta = M_PI/2;
 1069              		.loc 1 221 0
 1070 0184 394A     		ldr	r2, .L56+76
 1071 0186 30A4     		adr	r4, .L56+40
 1072 0188 D4E90034 		ldrd	r3, [r4]
 1073 018c C2E90E34 		strd	r3, [r2, #56]
 222:main.c        ****     
 223:main.c        ****     // KP Controls
 224:main.c        ****     float theta_correction = 0;
 1074              		.loc 1 224 0
 1075 0190 4FF00003 		mov	r3, #0
 1076 0194 FB62     		str	r3, [r7, #44]	@ float
 225:main.c        ****     float wall_Kp = 0.01;
 1077              		.loc 1 225 0
 1078 0196 394B     		ldr	r3, .L56+92
 1079 0198 BB62     		str	r3, [r7, #40]	@ float
 226:main.c        ****    
 227:main.c        ****     // Thresholds
 228:main.c        ****     float front_dist_th = 50;
 1080              		.loc 1 228 0
 1081 019a 394B     		ldr	r3, .L56+96
 1082 019c C7F89430 		str	r3, [r7, #148]	@ float
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 24


 229:main.c        ****     float dist_ref = 50;
 1083              		.loc 1 229 0
 1084 01a0 374B     		ldr	r3, .L56+96
 1085 01a2 7B62     		str	r3, [r7, #36]	@ float
 230:main.c        ****     int front_count = 0;
 1086              		.loc 1 230 0
 1087 01a4 0023     		movs	r3, #0
 1088 01a6 3B62     		str	r3, [r7, #32]
 231:main.c        ****     
 232:main.c        ****     // Flags
 233:main.c        ****     int return_flag = 0;
 1089              		.loc 1 233 0
 1090 01a8 0023     		movs	r3, #0
 1091 01aa C7F89030 		str	r3, [r7, #144]
 234:main.c        ****     int B_flag = 0;
 1092              		.loc 1 234 0
 1093 01ae 0023     		movs	r3, #0
 1094 01b0 C7F88C30 		str	r3, [r7, #140]
 235:main.c        ****     
 236:main.c        ****     // Settings
 237:main.c        ****     int velocity = 15;
 1095              		.loc 1 237 0
 1096 01b4 0F23     		movs	r3, #15
 1097 01b6 FB61     		str	r3, [r7, #28]
 1098              	.L52:
 238:main.c        ****     
 239:main.c        ****     /*=======================================================================*/  
 240:main.c        ****     // starts at front left and goes clockwise
 241:main.c        ****     //move_servo(3, 1); 
 242:main.c        ****     //move_servo(0, 0);
 243:main.c        ****     //move_servo(1, 1);
 244:main.c        ****     //move_servo(2, 0);
 245:main.c        ****     
 246:main.c        ****     
 247:main.c        ****     for(;;) {  
 248:main.c        ****         // Wall follow only after sensor is updated
 249:main.c        ****         // Read 3 times
 250:main.c        ****         if ( wall_following_flag ) {
 1099              		.loc 1 250 0
 1100 01b8 324B     		ldr	r3, .L56+100
 1101 01ba 1B68     		ldr	r3, [r3]
 1102 01bc 002B     		cmp	r3, #0
 1103 01be FBD0     		beq	.L52
 1104              	.LBB2:
 251:main.c        ****             if (sensors.distance[0] < front_dist_th && sensors.distance[5] < front_dist_th) {      
 1105              		.loc 1 251 0
 1106 01c0 2B4B     		ldr	r3, .L56+80
 1107 01c2 9B69     		ldr	r3, [r3, #24]
 1108 01c4 1846     		mov	r0, r3
 1109 01c6 FFF7FEFF 		bl	__aeabi_i2f
 1110 01ca 0346     		mov	r3, r0
 1111 01cc D7F89410 		ldr	r1, [r7, #148]	@ float
 1112 01d0 1846     		mov	r0, r3
 1113 01d2 FFF7FEFF 		bl	__aeabi_fcmplt
 1114 01d6 0346     		mov	r3, r0
 1115 01d8 002B     		cmp	r3, #0
 1116 01da 00F0B582 		beq	.L28
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 25


 1117              		.loc 1 251 0 is_stmt 0 discriminator 1
 1118 01de 244B     		ldr	r3, .L56+80
 1119 01e0 DB6A     		ldr	r3, [r3, #44]
 1120 01e2 1846     		mov	r0, r3
 1121 01e4 FFF7FEFF 		bl	__aeabi_i2f
 1122 01e8 0346     		mov	r3, r0
 1123 01ea D7F89410 		ldr	r1, [r7, #148]	@ float
 1124 01ee 1846     		mov	r0, r3
 1125 01f0 FFF7FEFF 		bl	__aeabi_fcmplt
 1126 01f4 0346     		mov	r3, r0
 1127 01f6 002B     		cmp	r3, #0
 1128 01f8 00F0A682 		beq	.L28
 252:main.c        ****                 switch (ref_direction_deg) {
 1129              		.loc 1 252 0 is_stmt 1
 1130 01fc D7F89830 		ldr	r3, [r7, #152]
 1131 0200 5A2B     		cmp	r3, #90
 1132 0202 41D0     		beq	.L32
 1133 0204 5A2B     		cmp	r3, #90
 1134 0206 03DC     		bgt	.L33
 1135 0208 002B     		cmp	r3, #0
 1136 020a 00F0A480 		beq	.L34
 1137 020e 4CE2     		b	.L31
 1138              	.L33:
 1139 0210 B42B     		cmp	r3, #180
 1140 0212 00F08F81 		beq	.L35
 1141 0216 B3F5877F 		cmp	r3, #270
 1142 021a 00F0E781 		beq	.L36
 1143 021e 44E2     		b	.L31
 1144              	.L57:
 1145              		.align	3
 1146              	.L56:
 1147 0220 A60A4625 		.word	625347238
 1148 0224 7502EE3F 		.word	1072562805
 1149 0228 54E41071 		.word	1896932436
 1150 022c 732AC93E 		.word	1053370995
 1151 0230 7B14AE47 		.word	1202590843
 1152 0234 E17A643F 		.word	1063549665
 1153 0238 90C2F528 		.word	687194768
 1154 023c 5C0F3540 		.word	1077219164
 1155 0240 691D554D 		.word	1297423721
 1156 0244 1075FF3E 		.word	1056929040
 1157 0248 182D4454 		.word	1413754136
 1158 024c FB21F93F 		.word	1073291771
 1159 0250 00000000 		.word	Timer_Int_Handler
 1160 0254 00000000 		.word	Pose_Update_Int_Handler
 1161 0258 00000000 		.word	Motor_PI_Int_Handler
 1162 025c 00000000 		.word	left_motor
 1163 0260 00000000 		.word	right_motor
 1164 0264 0000E83F 		.word	1072168960
 1165 0268 00001440 		.word	1075052544
 1166 026c 00000000 		.word	robot
 1167 0270 00000000 		.word	sensors
 1168 0274 10000000 		.word	.LC0
 1169 0278 DB0FC93F 		.word	1070141403
 1170 027c 0AD7233C 		.word	1008981770
 1171 0280 00004842 		.word	1112014848
 1172 0284 00000000 		.word	wall_following_flag
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 26


 1173              	.L32:
 253:main.c        ****                     // Travelling towards box A
 254:main.c        ****                     case (90):
 255:main.c        ****          
 256:main.c        ****                         // Stop moving
 257:main.c        ****                         robot.desired_v = 0;
 1174              		.loc 1 257 0
 1175 0288 A54A     		ldr	r2, .L58+8
 1176 028a 4FF00003 		mov	r3, #0
 1177 028e 4FF00004 		mov	r4, #0
 1178 0292 C2E90C34 		strd	r3, [r2, #48]
 258:main.c        **** 
 259:main.c        ****                         // TODO: Unload Package Code
 260:main.c        ****                         move_servo(3, 1);
 1179              		.loc 1 260 0
 1180 0296 0121     		movs	r1, #1
 1181 0298 0320     		movs	r0, #3
 1182 029a FFF7FEFF 		bl	move_servo
 261:main.c        ****                         move_servo(0, 0);
 1183              		.loc 1 261 0
 1184 029e 0021     		movs	r1, #0
 1185 02a0 0020     		movs	r0, #0
 1186 02a2 FFF7FEFF 		bl	move_servo
 262:main.c        ****                         //
 263:main.c        ****                         
 264:main.c        ****                         // Turn towards box B
 265:main.c        ****                         ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1187              		.loc 1 265 0
 1188 02a6 9E4B     		ldr	r3, .L58+8
 1189 02a8 D3E90201 		ldrd	r0, [r3, #8]
 1190 02ac 9AA3     		adr	r3, .L58
 1191 02ae D3E90023 		ldrd	r2, [r3]
 1192 02b2 FFF7FEFF 		bl	__aeabi_dsub
 1193 02b6 0346     		mov	r3, r0
 1194 02b8 0C46     		mov	r4, r1
 1195 02ba 1846     		mov	r0, r3
 1196 02bc 2146     		mov	r1, r4
 1197 02be FFF7FEFF 		bl	calculate_angle_modulo
 1198 02c2 0346     		mov	r3, r0
 1199 02c4 0C46     		mov	r4, r1
 1200 02c6 1846     		mov	r0, r3
 1201 02c8 2146     		mov	r1, r4
 1202 02ca FFF7FEFF 		bl	__aeabi_d2f
 1203 02ce 0346     		mov	r3, r0
 1204 02d0 C7F89C30 		str	r3, [r7, #156]	@ float
 266:main.c        ****                         Turn_Delay(ref_direction);
 1205              		.loc 1 266 0
 1206 02d4 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1207 02d8 FFF7FEFF 		bl	__aeabi_f2d
 1208 02dc 0346     		mov	r3, r0
 1209 02de 0C46     		mov	r4, r1
 1210 02e0 1846     		mov	r0, r3
 1211 02e2 2146     		mov	r1, r4
 1212 02e4 FFF7FEFF 		bl	Turn_Delay
 267:main.c        ****                         
 268:main.c        ****                         
 269:main.c        ****                         ref_direction_deg = angle_clamp(ref_direction_deg - 90);
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 27


 1213              		.loc 1 269 0
 1214 02e8 D7F89830 		ldr	r3, [r7, #152]
 1215 02ec 5A3B     		subs	r3, r3, #90
 1216 02ee 1846     		mov	r0, r3
 1217 02f0 FFF7FEFF 		bl	angle_clamp
 1218 02f4 C7F89800 		str	r0, [r7, #152]
 270:main.c        ****                         robot.desired_v = velocity;
 1219              		.loc 1 270 0
 1220 02f8 F869     		ldr	r0, [r7, #28]
 1221 02fa FFF7FEFF 		bl	__aeabi_i2d
 1222 02fe 0346     		mov	r3, r0
 1223 0300 0C46     		mov	r4, r1
 1224 0302 874A     		ldr	r2, .L58+8
 1225 0304 C2E90C34 		strd	r3, [r2, #48]
 271:main.c        ****                         
 272:main.c        ****                         // Update Flags
 273:main.c        ****                         wall_following_flag = 0;
 1226              		.loc 1 273 0
 1227 0308 864B     		ldr	r3, .L58+12
 1228 030a 0022     		movs	r2, #0
 1229 030c 1A60     		str	r2, [r3]
 274:main.c        ****                         front_dist_th = 450;
 1230              		.loc 1 274 0
 1231 030e 864B     		ldr	r3, .L58+16
 1232 0310 C7F89430 		str	r3, [r7, #148]	@ float
 275:main.c        ****                         
 276:main.c        ****                         // Spoof
 277:main.c        ****                         sensors.distance[1] = dist_ref;
 1233              		.loc 1 277 0
 1234 0314 786A     		ldr	r0, [r7, #36]	@ float
 1235 0316 FFF7FEFF 		bl	__aeabi_f2iz
 1236 031a 0246     		mov	r2, r0
 1237 031c 834B     		ldr	r3, .L58+20
 1238 031e DA61     		str	r2, [r3, #28]
 278:main.c        ****                         sensors.distance[2] = dist_ref;
 1239              		.loc 1 278 0
 1240 0320 786A     		ldr	r0, [r7, #36]	@ float
 1241 0322 FFF7FEFF 		bl	__aeabi_f2iz
 1242 0326 0246     		mov	r2, r0
 1243 0328 804B     		ldr	r3, .L58+20
 1244 032a 1A62     		str	r2, [r3, #32]
 279:main.c        ****                         sensors.distance[3] = dist_ref;
 1245              		.loc 1 279 0
 1246 032c 786A     		ldr	r0, [r7, #36]	@ float
 1247 032e FFF7FEFF 		bl	__aeabi_f2iz
 1248 0332 0246     		mov	r2, r0
 1249 0334 7D4B     		ldr	r3, .L58+20
 1250 0336 5A62     		str	r2, [r3, #36]
 280:main.c        ****                         sensors.distance[4] = dist_ref;
 1251              		.loc 1 280 0
 1252 0338 786A     		ldr	r0, [r7, #36]	@ float
 1253 033a FFF7FEFF 		bl	__aeabi_f2iz
 1254 033e 0246     		mov	r2, r0
 1255 0340 7A4B     		ldr	r3, .L58+20
 1256 0342 9A62     		str	r2, [r3, #40]
 281:main.c        ****                         sensors.distance[0] = 10000;
 1257              		.loc 1 281 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 28


 1258 0344 794B     		ldr	r3, .L58+20
 1259 0346 42F21072 		movw	r2, #10000
 1260 034a 9A61     		str	r2, [r3, #24]
 282:main.c        ****                         sensors.distance[5] = 10000;
 1261              		.loc 1 282 0
 1262 034c 774B     		ldr	r3, .L58+20
 1263 034e 42F21072 		movw	r2, #10000
 1264 0352 DA62     		str	r2, [r3, #44]
 283:main.c        ****                         
 284:main.c        ****                         break;
 1265              		.loc 1 284 0
 1266 0354 F8E1     		b	.L28
 1267              	.L34:
 285:main.c        ****                         
 286:main.c        ****                     
 287:main.c        ****                     // Travelling towards box B
 288:main.c        ****                     case (0):
 289:main.c        ****                         // If we haven't stopped at B yet
 290:main.c        ****                         if (!B_flag) {
 1268              		.loc 1 290 0
 1269 0356 D7F88C30 		ldr	r3, [r7, #140]
 1270 035a 002B     		cmp	r3, #0
 1271 035c 53D1     		bne	.L37
 291:main.c        ****                             // Stop moving
 292:main.c        ****                             robot.desired_v = 0;
 1272              		.loc 1 292 0
 1273 035e 704A     		ldr	r2, .L58+8
 1274 0360 4FF00003 		mov	r3, #0
 1275 0364 4FF00004 		mov	r4, #0
 1276 0368 C2E90C34 		strd	r3, [r2, #48]
 293:main.c        ****                             
 294:main.c        ****                             // Rotate -90 deg to deliver packages
 295:main.c        ****                             ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1277              		.loc 1 295 0
 1278 036c 6C4B     		ldr	r3, .L58+8
 1279 036e D3E90201 		ldrd	r0, [r3, #8]
 1280 0372 69A3     		adr	r3, .L58
 1281 0374 D3E90023 		ldrd	r2, [r3]
 1282 0378 FFF7FEFF 		bl	__aeabi_dsub
 1283 037c 0346     		mov	r3, r0
 1284 037e 0C46     		mov	r4, r1
 1285 0380 1846     		mov	r0, r3
 1286 0382 2146     		mov	r1, r4
 1287 0384 FFF7FEFF 		bl	calculate_angle_modulo
 1288 0388 0346     		mov	r3, r0
 1289 038a 0C46     		mov	r4, r1
 1290 038c 1846     		mov	r0, r3
 1291 038e 2146     		mov	r1, r4
 1292 0390 FFF7FEFF 		bl	__aeabi_d2f
 1293 0394 0346     		mov	r3, r0
 1294 0396 C7F89C30 		str	r3, [r7, #156]	@ float
 296:main.c        ****                             Turn_Delay(ref_direction);
 1295              		.loc 1 296 0
 1296 039a D7F89C00 		ldr	r0, [r7, #156]	@ float
 1297 039e FFF7FEFF 		bl	__aeabi_f2d
 1298 03a2 0346     		mov	r3, r0
 1299 03a4 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 29


 1300 03a6 1846     		mov	r0, r3
 1301 03a8 2146     		mov	r1, r4
 1302 03aa FFF7FEFF 		bl	Turn_Delay
 297:main.c        **** 
 298:main.c        ****                             // TODO: Unload Package Code
 299:main.c        ****                             move_servo(1, 1);                                      
 1303              		.loc 1 299 0
 1304 03ae 0121     		movs	r1, #1
 1305 03b0 0120     		movs	r0, #1
 1306 03b2 FFF7FEFF 		bl	move_servo
 300:main.c        ****                             
 301:main.c        ****                             //
 302:main.c        ****                             
 303:main.c        ****                             // Rotate back to go to C
 304:main.c        ****                             ref_direction = calculate_angle_modulo(robot.theta + M_PI/2);
 1307              		.loc 1 304 0
 1308 03b6 5A4B     		ldr	r3, .L58+8
 1309 03b8 D3E90201 		ldrd	r0, [r3, #8]
 1310 03bc 56A3     		adr	r3, .L58
 1311 03be D3E90023 		ldrd	r2, [r3]
 1312 03c2 FFF7FEFF 		bl	__aeabi_dadd
 1313 03c6 0346     		mov	r3, r0
 1314 03c8 0C46     		mov	r4, r1
 1315 03ca 1846     		mov	r0, r3
 1316 03cc 2146     		mov	r1, r4
 1317 03ce FFF7FEFF 		bl	calculate_angle_modulo
 1318 03d2 0346     		mov	r3, r0
 1319 03d4 0C46     		mov	r4, r1
 1320 03d6 1846     		mov	r0, r3
 1321 03d8 2146     		mov	r1, r4
 1322 03da FFF7FEFF 		bl	__aeabi_d2f
 1323 03de 0346     		mov	r3, r0
 1324 03e0 C7F89C30 		str	r3, [r7, #156]	@ float
 305:main.c        ****                             Turn_Delay(ref_direction);
 1325              		.loc 1 305 0
 1326 03e4 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1327 03e8 FFF7FEFF 		bl	__aeabi_f2d
 1328 03ec 0346     		mov	r3, r0
 1329 03ee 0C46     		mov	r4, r1
 1330 03f0 1846     		mov	r0, r3
 1331 03f2 2146     		mov	r1, r4
 1332 03f4 FFF7FEFF 		bl	Turn_Delay
 306:main.c        ****                             front_dist_th = 50;
 1333              		.loc 1 306 0
 1334 03f8 4D4B     		ldr	r3, .L58+24
 1335 03fa C7F89430 		str	r3, [r7, #148]	@ float
 307:main.c        ****                             B_flag = 1;
 1336              		.loc 1 307 0
 1337 03fe 0123     		movs	r3, #1
 1338 0400 C7F88C30 		str	r3, [r7, #140]
 1339 0404 65E0     		b	.L38
 1340              	.L37:
 308:main.c        ****                             
 309:main.c        ****                         } else {
 310:main.c        ****                             // Stop moving
 311:main.c        ****                             robot.desired_v = 0;
 1341              		.loc 1 311 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 30


 1342 0406 464A     		ldr	r2, .L58+8
 1343 0408 4FF00003 		mov	r3, #0
 1344 040c 4FF00004 		mov	r4, #0
 1345 0410 C2E90C34 		strd	r3, [r2, #48]
 312:main.c        ****                             
 313:main.c        ****                             // Rotate -90 deg to deliver packages
 314:main.c        ****                             ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1346              		.loc 1 314 0
 1347 0414 424B     		ldr	r3, .L58+8
 1348 0416 D3E90201 		ldrd	r0, [r3, #8]
 1349 041a 3FA3     		adr	r3, .L58
 1350 041c D3E90023 		ldrd	r2, [r3]
 1351 0420 FFF7FEFF 		bl	__aeabi_dsub
 1352 0424 0346     		mov	r3, r0
 1353 0426 0C46     		mov	r4, r1
 1354 0428 1846     		mov	r0, r3
 1355 042a 2146     		mov	r1, r4
 1356 042c FFF7FEFF 		bl	calculate_angle_modulo
 1357 0430 0346     		mov	r3, r0
 1358 0432 0C46     		mov	r4, r1
 1359 0434 1846     		mov	r0, r3
 1360 0436 2146     		mov	r1, r4
 1361 0438 FFF7FEFF 		bl	__aeabi_d2f
 1362 043c 0346     		mov	r3, r0
 1363 043e C7F89C30 		str	r3, [r7, #156]	@ float
 315:main.c        ****                             Turn_Delay(ref_direction);
 1364              		.loc 1 315 0
 1365 0442 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1366 0446 FFF7FEFF 		bl	__aeabi_f2d
 1367 044a 0346     		mov	r3, r0
 1368 044c 0C46     		mov	r4, r1
 1369 044e 1846     		mov	r0, r3
 1370 0450 2146     		mov	r1, r4
 1371 0452 FFF7FEFF 		bl	Turn_Delay
 316:main.c        **** 
 317:main.c        ****                             // TODO: Unload Package Code
 318:main.c        ****                             move_servo(2, 0);
 1372              		.loc 1 318 0
 1373 0456 0021     		movs	r1, #0
 1374 0458 0220     		movs	r0, #2
 1375 045a FFF7FEFF 		bl	move_servo
 319:main.c        ****                             //
 320:main.c        ****                             
 321:main.c        ****                             // Go back to A
 322:main.c        ****                             ref_direction = calculate_angle_modulo(robot.theta - M_PI/2);
 1376              		.loc 1 322 0
 1377 045e 304B     		ldr	r3, .L58+8
 1378 0460 D3E90201 		ldrd	r0, [r3, #8]
 1379 0464 2CA3     		adr	r3, .L58
 1380 0466 D3E90023 		ldrd	r2, [r3]
 1381 046a FFF7FEFF 		bl	__aeabi_dsub
 1382 046e 0346     		mov	r3, r0
 1383 0470 0C46     		mov	r4, r1
 1384 0472 1846     		mov	r0, r3
 1385 0474 2146     		mov	r1, r4
 1386 0476 FFF7FEFF 		bl	calculate_angle_modulo
 1387 047a 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 31


 1388 047c 0C46     		mov	r4, r1
 1389 047e 1846     		mov	r0, r3
 1390 0480 2146     		mov	r1, r4
 1391 0482 FFF7FEFF 		bl	__aeabi_d2f
 1392 0486 0346     		mov	r3, r0
 1393 0488 C7F89C30 		str	r3, [r7, #156]	@ float
 323:main.c        ****                             Turn_Delay(ref_direction);
 1394              		.loc 1 323 0
 1395 048c D7F89C00 		ldr	r0, [r7, #156]	@ float
 1396 0490 FFF7FEFF 		bl	__aeabi_f2d
 1397 0494 0346     		mov	r3, r0
 1398 0496 0C46     		mov	r4, r1
 1399 0498 1846     		mov	r0, r3
 1400 049a 2146     		mov	r1, r4
 1401 049c FFF7FEFF 		bl	Turn_Delay
 324:main.c        ****                             ref_direction_deg = angle_clamp(ref_direction_deg - 180);
 1402              		.loc 1 324 0
 1403 04a0 D7F89830 		ldr	r3, [r7, #152]
 1404 04a4 B43B     		subs	r3, r3, #180
 1405 04a6 1846     		mov	r0, r3
 1406 04a8 FFF7FEFF 		bl	angle_clamp
 1407 04ac C7F89800 		str	r0, [r7, #152]
 325:main.c        ****                             robot.desired_v = velocity;
 1408              		.loc 1 325 0
 1409 04b0 F869     		ldr	r0, [r7, #28]
 1410 04b2 FFF7FEFF 		bl	__aeabi_i2d
 1411 04b6 0346     		mov	r3, r0
 1412 04b8 0C46     		mov	r4, r1
 1413 04ba 194A     		ldr	r2, .L58+8
 1414 04bc C2E90C34 		strd	r3, [r2, #48]
 326:main.c        ****                             
 327:main.c        ****                             // Update Flags
 328:main.c        ****                             wall_following_flag = 0;
 1415              		.loc 1 328 0
 1416 04c0 184B     		ldr	r3, .L58+12
 1417 04c2 0022     		movs	r2, #0
 1418 04c4 1A60     		str	r2, [r3]
 329:main.c        ****                             return_flag = 1;
 1419              		.loc 1 329 0
 1420 04c6 0123     		movs	r3, #1
 1421 04c8 C7F89030 		str	r3, [r7, #144]
 330:main.c        ****                             B_flag = 0;
 1422              		.loc 1 330 0
 1423 04cc 0023     		movs	r3, #0
 1424 04ce C7F88C30 		str	r3, [r7, #140]
 1425              	.L38:
 331:main.c        ****                             
 332:main.c        ****                         }
 333:main.c        ****                         
 334:main.c        ****                         // Spoof
 335:main.c        ****                         sensors.distance[1] = dist_ref;
 1426              		.loc 1 335 0
 1427 04d2 786A     		ldr	r0, [r7, #36]	@ float
 1428 04d4 FFF7FEFF 		bl	__aeabi_f2iz
 1429 04d8 0246     		mov	r2, r0
 1430 04da 144B     		ldr	r3, .L58+20
 1431 04dc DA61     		str	r2, [r3, #28]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 32


 336:main.c        ****                         sensors.distance[2] = dist_ref;
 1432              		.loc 1 336 0
 1433 04de 786A     		ldr	r0, [r7, #36]	@ float
 1434 04e0 FFF7FEFF 		bl	__aeabi_f2iz
 1435 04e4 0246     		mov	r2, r0
 1436 04e6 114B     		ldr	r3, .L58+20
 1437 04e8 1A62     		str	r2, [r3, #32]
 337:main.c        ****                         sensors.distance[3] = dist_ref;
 1438              		.loc 1 337 0
 1439 04ea 786A     		ldr	r0, [r7, #36]	@ float
 1440 04ec FFF7FEFF 		bl	__aeabi_f2iz
 1441 04f0 0246     		mov	r2, r0
 1442 04f2 0E4B     		ldr	r3, .L58+20
 1443 04f4 5A62     		str	r2, [r3, #36]
 338:main.c        ****                         sensors.distance[4] = dist_ref;
 1444              		.loc 1 338 0
 1445 04f6 786A     		ldr	r0, [r7, #36]	@ float
 1446 04f8 FFF7FEFF 		bl	__aeabi_f2iz
 1447 04fc 0246     		mov	r2, r0
 1448 04fe 0B4B     		ldr	r3, .L58+20
 1449 0500 9A62     		str	r2, [r3, #40]
 339:main.c        ****                         sensors.distance[0] = 10000;
 1450              		.loc 1 339 0
 1451 0502 0A4B     		ldr	r3, .L58+20
 1452 0504 42F21072 		movw	r2, #10000
 1453 0508 9A61     		str	r2, [r3, #24]
 340:main.c        ****                         sensors.distance[5] = 10000;
 1454              		.loc 1 340 0
 1455 050a 084B     		ldr	r3, .L58+20
 1456 050c 42F21072 		movw	r2, #10000
 1457 0510 DA62     		str	r2, [r3, #44]
 341:main.c        ****                         break;
 1458              		.loc 1 341 0
 1459 0512 19E1     		b	.L28
 1460              	.L59:
 1461 0514 AFF30080 		.align	3
 1462              	.L58:
 1463 0518 182D4454 		.word	1413754136
 1464 051c FB21F93F 		.word	1073291771
 1465 0520 00000000 		.word	robot
 1466 0524 00000000 		.word	wall_following_flag
 1467 0528 0000E143 		.word	1138819072
 1468 052c 00000000 		.word	sensors
 1469 0530 00004842 		.word	1112014848
 1470              	.L35:
 342:main.c        ****                     
 343:main.c        ****                     // Travelling Back to A *Can include a flag for safety measures
 344:main.c        ****                     case (180):
 345:main.c        **** 
 346:main.c        ****                         // Stop moving and turn towards loading bay
 347:main.c        ****                         robot.desired_v = 0;
 1471              		.loc 1 347 0
 1472 0534 A44A     		ldr	r2, .L60+16
 1473 0536 4FF00003 		mov	r3, #0
 1474 053a 4FF00004 		mov	r4, #0
 1475 053e C2E90C34 		strd	r3, [r2, #48]
 348:main.c        **** 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 33


 349:main.c        ****                         // Go towards beginning
 350:main.c        ****                         ref_direction = calculate_angle_modulo(robot.theta + M_PI/2);
 1476              		.loc 1 350 0
 1477 0542 A14B     		ldr	r3, .L60+16
 1478 0544 D3E90201 		ldrd	r0, [r3, #8]
 1479 0548 9BA3     		adr	r3, .L60
 1480 054a D3E90023 		ldrd	r2, [r3]
 1481 054e FFF7FEFF 		bl	__aeabi_dadd
 1482 0552 0346     		mov	r3, r0
 1483 0554 0C46     		mov	r4, r1
 1484 0556 1846     		mov	r0, r3
 1485 0558 2146     		mov	r1, r4
 1486 055a FFF7FEFF 		bl	calculate_angle_modulo
 1487 055e 0346     		mov	r3, r0
 1488 0560 0C46     		mov	r4, r1
 1489 0562 1846     		mov	r0, r3
 1490 0564 2146     		mov	r1, r4
 1491 0566 FFF7FEFF 		bl	__aeabi_d2f
 1492 056a 0346     		mov	r3, r0
 1493 056c C7F89C30 		str	r3, [r7, #156]	@ float
 351:main.c        ****                         Turn_Delay(ref_direction);
 1494              		.loc 1 351 0
 1495 0570 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1496 0574 FFF7FEFF 		bl	__aeabi_f2d
 1497 0578 0346     		mov	r3, r0
 1498 057a 0C46     		mov	r4, r1
 1499 057c 1846     		mov	r0, r3
 1500 057e 2146     		mov	r1, r4
 1501 0580 FFF7FEFF 		bl	Turn_Delay
 352:main.c        ****                         ref_direction_deg = angle_clamp(ref_direction_deg + 90);
 1502              		.loc 1 352 0
 1503 0584 D7F89830 		ldr	r3, [r7, #152]
 1504 0588 5A33     		adds	r3, r3, #90
 1505 058a 1846     		mov	r0, r3
 1506 058c FFF7FEFF 		bl	angle_clamp
 1507 0590 C7F89800 		str	r0, [r7, #152]
 353:main.c        ****                         robot.desired_v = velocity;
 1508              		.loc 1 353 0
 1509 0594 F869     		ldr	r0, [r7, #28]
 1510 0596 FFF7FEFF 		bl	__aeabi_i2d
 1511 059a 0346     		mov	r3, r0
 1512 059c 0C46     		mov	r4, r1
 1513 059e 8A4A     		ldr	r2, .L60+16
 1514 05a0 C2E90C34 		strd	r3, [r2, #48]
 354:main.c        ****                         wall_following_flag = 0;
 1515              		.loc 1 354 0
 1516 05a4 894B     		ldr	r3, .L60+20
 1517 05a6 0022     		movs	r2, #0
 1518 05a8 1A60     		str	r2, [r3]
 355:main.c        ****                     
 356:main.c        ****                         // Spoof
 357:main.c        ****                         sensors.distance[1] = dist_ref;
 1519              		.loc 1 357 0
 1520 05aa 786A     		ldr	r0, [r7, #36]	@ float
 1521 05ac FFF7FEFF 		bl	__aeabi_f2iz
 1522 05b0 0246     		mov	r2, r0
 1523 05b2 874B     		ldr	r3, .L60+24
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 34


 1524 05b4 DA61     		str	r2, [r3, #28]
 358:main.c        ****                         sensors.distance[2] = dist_ref;
 1525              		.loc 1 358 0
 1526 05b6 786A     		ldr	r0, [r7, #36]	@ float
 1527 05b8 FFF7FEFF 		bl	__aeabi_f2iz
 1528 05bc 0246     		mov	r2, r0
 1529 05be 844B     		ldr	r3, .L60+24
 1530 05c0 1A62     		str	r2, [r3, #32]
 359:main.c        ****                         sensors.distance[3] = dist_ref;
 1531              		.loc 1 359 0
 1532 05c2 786A     		ldr	r0, [r7, #36]	@ float
 1533 05c4 FFF7FEFF 		bl	__aeabi_f2iz
 1534 05c8 0246     		mov	r2, r0
 1535 05ca 814B     		ldr	r3, .L60+24
 1536 05cc 5A62     		str	r2, [r3, #36]
 360:main.c        ****                         sensors.distance[4] = dist_ref;
 1537              		.loc 1 360 0
 1538 05ce 786A     		ldr	r0, [r7, #36]	@ float
 1539 05d0 FFF7FEFF 		bl	__aeabi_f2iz
 1540 05d4 0246     		mov	r2, r0
 1541 05d6 7E4B     		ldr	r3, .L60+24
 1542 05d8 9A62     		str	r2, [r3, #40]
 361:main.c        ****                         sensors.distance[0] = 10000;
 1543              		.loc 1 361 0
 1544 05da 7D4B     		ldr	r3, .L60+24
 1545 05dc 42F21072 		movw	r2, #10000
 1546 05e0 9A61     		str	r2, [r3, #24]
 362:main.c        ****                         sensors.distance[5] = 10000;
 1547              		.loc 1 362 0
 1548 05e2 7B4B     		ldr	r3, .L60+24
 1549 05e4 42F21072 		movw	r2, #10000
 1550 05e8 DA62     		str	r2, [r3, #44]
 363:main.c        ****                         break;
 1551              		.loc 1 363 0
 1552 05ea ADE0     		b	.L28
 1553              	.L36:
 364:main.c        **** 
 365:main.c        ****                     // Travelling Back to Start
 366:main.c        ****                     case (270):
 367:main.c        ****                          
 368:main.c        ****                         // Stop moving and point back to A
 369:main.c        ****                         robot.desired_v = 0;
 1554              		.loc 1 369 0
 1555 05ec 764A     		ldr	r2, .L60+16
 1556 05ee 4FF00003 		mov	r3, #0
 1557 05f2 4FF00004 		mov	r4, #0
 1558 05f6 C2E90C34 		strd	r3, [r2, #48]
 370:main.c        **** 
 371:main.c        ****                         // Update Position
 372:main.c        ****                         ref_direction = calculate_angle_modulo(robot.theta - M_PI);
 1559              		.loc 1 372 0
 1560 05fa 734B     		ldr	r3, .L60+16
 1561 05fc D3E90201 		ldrd	r0, [r3, #8]
 1562 0600 6FA3     		adr	r3, .L60+8
 1563 0602 D3E90023 		ldrd	r2, [r3]
 1564 0606 FFF7FEFF 		bl	__aeabi_dsub
 1565 060a 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 35


 1566 060c 0C46     		mov	r4, r1
 1567 060e 1846     		mov	r0, r3
 1568 0610 2146     		mov	r1, r4
 1569 0612 FFF7FEFF 		bl	calculate_angle_modulo
 1570 0616 0346     		mov	r3, r0
 1571 0618 0C46     		mov	r4, r1
 1572 061a 1846     		mov	r0, r3
 1573 061c 2146     		mov	r1, r4
 1574 061e FFF7FEFF 		bl	__aeabi_d2f
 1575 0622 0346     		mov	r3, r0
 1576 0624 C7F89C30 		str	r3, [r7, #156]	@ float
 373:main.c        ****                         Turn_Delay(ref_direction);
 1577              		.loc 1 373 0
 1578 0628 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1579 062c FFF7FEFF 		bl	__aeabi_f2d
 1580 0630 0346     		mov	r3, r0
 1581 0632 0C46     		mov	r4, r1
 1582 0634 1846     		mov	r0, r3
 1583 0636 2146     		mov	r1, r4
 1584 0638 FFF7FEFF 		bl	Turn_Delay
 374:main.c        ****                         ref_direction_deg = angle_clamp(ref_direction_deg - 180);
 1585              		.loc 1 374 0
 1586 063c D7F89830 		ldr	r3, [r7, #152]
 1587 0640 B43B     		subs	r3, r3, #180
 1588 0642 1846     		mov	r0, r3
 1589 0644 FFF7FEFF 		bl	angle_clamp
 1590 0648 C7F89800 		str	r0, [r7, #152]
 375:main.c        ****                         robot.desired_v = velocity;
 1591              		.loc 1 375 0
 1592 064c F869     		ldr	r0, [r7, #28]
 1593 064e FFF7FEFF 		bl	__aeabi_i2d
 1594 0652 0346     		mov	r3, r0
 1595 0654 0C46     		mov	r4, r1
 1596 0656 5C4A     		ldr	r2, .L60+16
 1597 0658 C2E90C34 		strd	r3, [r2, #48]
 376:main.c        ****                         
 377:main.c        ****                         // Update Flags
 378:main.c        ****                         wall_following_flag = 0;
 1598              		.loc 1 378 0
 1599 065c 5B4B     		ldr	r3, .L60+20
 1600 065e 0022     		movs	r2, #0
 1601 0660 1A60     		str	r2, [r3]
 379:main.c        ****                         return_flag = 0;
 1602              		.loc 1 379 0
 1603 0662 0023     		movs	r3, #0
 1604 0664 C7F89030 		str	r3, [r7, #144]
 380:main.c        ****                             
 381:main.c        ****                         // Spoof
 382:main.c        ****                         sensors.distance[1] = dist_ref;
 1605              		.loc 1 382 0
 1606 0668 786A     		ldr	r0, [r7, #36]	@ float
 1607 066a FFF7FEFF 		bl	__aeabi_f2iz
 1608 066e 0246     		mov	r2, r0
 1609 0670 574B     		ldr	r3, .L60+24
 1610 0672 DA61     		str	r2, [r3, #28]
 383:main.c        ****                         sensors.distance[2] = dist_ref;
 1611              		.loc 1 383 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 36


 1612 0674 786A     		ldr	r0, [r7, #36]	@ float
 1613 0676 FFF7FEFF 		bl	__aeabi_f2iz
 1614 067a 0246     		mov	r2, r0
 1615 067c 544B     		ldr	r3, .L60+24
 1616 067e 1A62     		str	r2, [r3, #32]
 384:main.c        ****                         sensors.distance[3] = dist_ref;
 1617              		.loc 1 384 0
 1618 0680 786A     		ldr	r0, [r7, #36]	@ float
 1619 0682 FFF7FEFF 		bl	__aeabi_f2iz
 1620 0686 0246     		mov	r2, r0
 1621 0688 514B     		ldr	r3, .L60+24
 1622 068a 5A62     		str	r2, [r3, #36]
 385:main.c        ****                         sensors.distance[4] = dist_ref;
 1623              		.loc 1 385 0
 1624 068c 786A     		ldr	r0, [r7, #36]	@ float
 1625 068e FFF7FEFF 		bl	__aeabi_f2iz
 1626 0692 0246     		mov	r2, r0
 1627 0694 4E4B     		ldr	r3, .L60+24
 1628 0696 9A62     		str	r2, [r3, #40]
 386:main.c        ****                         sensors.distance[0] = 10000;
 1629              		.loc 1 386 0
 1630 0698 4D4B     		ldr	r3, .L60+24
 1631 069a 42F21072 		movw	r2, #10000
 1632 069e 9A61     		str	r2, [r3, #24]
 387:main.c        ****                         sensors.distance[5] = 10000;
 1633              		.loc 1 387 0
 1634 06a0 4B4B     		ldr	r3, .L60+24
 1635 06a2 42F21072 		movw	r2, #10000
 1636 06a6 DA62     		str	r2, [r3, #44]
 388:main.c        ****                         
 389:main.c        ****                         break;
 1637              		.loc 1 389 0
 1638 06a8 4EE0     		b	.L28
 1639              	.L31:
 390:main.c        **** 
 391:main.c        ****                     default:
 392:main.c        ****                         
 393:main.c        ****                         // Wall follow if broken
 394:main.c        ****                         robot.desired_v = 0;
 1640              		.loc 1 394 0
 1641 06aa 474A     		ldr	r2, .L60+16
 1642 06ac 4FF00003 		mov	r3, #0
 1643 06b0 4FF00004 		mov	r4, #0
 1644 06b4 C2E90C34 		strd	r3, [r2, #48]
 395:main.c        ****                         Turn_Delay(M_PI/2);
 1645              		.loc 1 395 0
 1646 06b8 3FA1     		adr	r1, .L60
 1647 06ba D1E90001 		ldrd	r0, [r1]
 1648 06be FFF7FEFF 		bl	Turn_Delay
 396:main.c        ****                         ref_direction = calculate_angle_modulo(ref_direction - M_PI/2);
 1649              		.loc 1 396 0
 1650 06c2 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1651 06c6 FFF7FEFF 		bl	__aeabi_f2d
 1652 06ca 3BA3     		adr	r3, .L60
 1653 06cc D3E90023 		ldrd	r2, [r3]
 1654 06d0 FFF7FEFF 		bl	__aeabi_dsub
 1655 06d4 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 37


 1656 06d6 0C46     		mov	r4, r1
 1657 06d8 1846     		mov	r0, r3
 1658 06da 2146     		mov	r1, r4
 1659 06dc FFF7FEFF 		bl	calculate_angle_modulo
 1660 06e0 0346     		mov	r3, r0
 1661 06e2 0C46     		mov	r4, r1
 1662 06e4 1846     		mov	r0, r3
 1663 06e6 2146     		mov	r1, r4
 1664 06e8 FFF7FEFF 		bl	__aeabi_d2f
 1665 06ec 0346     		mov	r3, r0
 1666 06ee C7F89C30 		str	r3, [r7, #156]	@ float
 397:main.c        ****                         
 398:main.c        ****                         robot.desired_v = velocity;
 1667              		.loc 1 398 0
 1668 06f2 F869     		ldr	r0, [r7, #28]
 1669 06f4 FFF7FEFF 		bl	__aeabi_i2d
 1670 06f8 0346     		mov	r3, r0
 1671 06fa 0C46     		mov	r4, r1
 1672 06fc 324A     		ldr	r2, .L60+16
 1673 06fe C2E90C34 		strd	r3, [r2, #48]
 399:main.c        ****                         wall_following_flag = 0;
 1674              		.loc 1 399 0
 1675 0702 324B     		ldr	r3, .L60+20
 1676 0704 0022     		movs	r2, #0
 1677 0706 1A60     		str	r2, [r3]
 400:main.c        **** 
 401:main.c        ****                         // Spoof sensor to avoid sensor updates during turn
 402:main.c        ****                         sensors.distance[1] = dist_ref;
 1678              		.loc 1 402 0
 1679 0708 786A     		ldr	r0, [r7, #36]	@ float
 1680 070a FFF7FEFF 		bl	__aeabi_f2iz
 1681 070e 0246     		mov	r2, r0
 1682 0710 2F4B     		ldr	r3, .L60+24
 1683 0712 DA61     		str	r2, [r3, #28]
 403:main.c        ****                         sensors.distance[2] = dist_ref;
 1684              		.loc 1 403 0
 1685 0714 786A     		ldr	r0, [r7, #36]	@ float
 1686 0716 FFF7FEFF 		bl	__aeabi_f2iz
 1687 071a 0246     		mov	r2, r0
 1688 071c 2C4B     		ldr	r3, .L60+24
 1689 071e 1A62     		str	r2, [r3, #32]
 404:main.c        ****                         sensors.distance[3] = dist_ref;
 1690              		.loc 1 404 0
 1691 0720 786A     		ldr	r0, [r7, #36]	@ float
 1692 0722 FFF7FEFF 		bl	__aeabi_f2iz
 1693 0726 0246     		mov	r2, r0
 1694 0728 294B     		ldr	r3, .L60+24
 1695 072a 5A62     		str	r2, [r3, #36]
 405:main.c        ****                         sensors.distance[4] = dist_ref;
 1696              		.loc 1 405 0
 1697 072c 786A     		ldr	r0, [r7, #36]	@ float
 1698 072e FFF7FEFF 		bl	__aeabi_f2iz
 1699 0732 0246     		mov	r2, r0
 1700 0734 264B     		ldr	r3, .L60+24
 1701 0736 9A62     		str	r2, [r3, #40]
 406:main.c        ****                         sensors.distance[0] = 10000;
 1702              		.loc 1 406 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 38


 1703 0738 254B     		ldr	r3, .L60+24
 1704 073a 42F21072 		movw	r2, #10000
 1705 073e 9A61     		str	r2, [r3, #24]
 407:main.c        ****                         sensors.distance[5] = 10000;
 1706              		.loc 1 407 0
 1707 0740 234B     		ldr	r3, .L60+24
 1708 0742 42F21072 		movw	r2, #10000
 1709 0746 DA62     		str	r2, [r3, #44]
 1710              	.L28:
 408:main.c        ****                 }
 409:main.c        ****             }
 410:main.c        **** 
 411:main.c        ****             // Wall Following
 412:main.c        ****             float error = 0;
 1711              		.loc 1 412 0
 1712 0748 4FF00003 		mov	r3, #0
 1713 074c BB61     		str	r3, [r7, #24]	@ float
 413:main.c        ****             int terminal_phase = sensors.distance[0] < 100 && sensors.distance[5] < 150;
 1714              		.loc 1 413 0
 1715 074e 204B     		ldr	r3, .L60+24
 1716 0750 9B69     		ldr	r3, [r3, #24]
 1717 0752 632B     		cmp	r3, #99
 1718 0754 05DC     		bgt	.L39
 1719              		.loc 1 413 0 is_stmt 0 discriminator 1
 1720 0756 1E4B     		ldr	r3, .L60+24
 1721 0758 DB6A     		ldr	r3, [r3, #44]
 1722 075a 952B     		cmp	r3, #149
 1723 075c 01DC     		bgt	.L39
 1724              		.loc 1 413 0 discriminator 3
 1725 075e 0123     		movs	r3, #1
 1726 0760 00E0     		b	.L40
 1727              	.L39:
 1728              		.loc 1 413 0 discriminator 4
 1729 0762 0023     		movs	r3, #0
 1730              	.L40:
 1731              		.loc 1 413 0 discriminator 6
 1732 0764 7B61     		str	r3, [r7, #20]
 414:main.c        ****             switch ( return_flag ){
 1733              		.loc 1 414 0 is_stmt 1 discriminator 6
 1734 0766 D7F89030 		ldr	r3, [r7, #144]
 1735 076a 002B     		cmp	r3, #0
 1736 076c 02D0     		beq	.L42
 1737 076e 012B     		cmp	r3, #1
 1738 0770 59D0     		beq	.L43
 1739              		.loc 1 414 0 is_stmt 0
 1740 0772 A0E0     		b	.L55
 1741              	.L42:
 415:main.c        ****                 case (0):
 416:main.c        ****                     // Follow Left Wall
 417:main.c        ****                     robot.desired_v = terminal_phase ? 5: velocity;
 1742              		.loc 1 417 0 is_stmt 1
 1743 0774 7B69     		ldr	r3, [r7, #20]
 1744 0776 002B     		cmp	r3, #0
 1745 0778 05D1     		bne	.L44
 1746              		.loc 1 417 0 is_stmt 0 discriminator 1
 1747 077a F869     		ldr	r0, [r7, #28]
 1748 077c FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 39


 1749 0780 0346     		mov	r3, r0
 1750 0782 0C46     		mov	r4, r1
 1751 0784 02E0     		b	.L45
 1752              	.L44:
 1753              		.loc 1 417 0 discriminator 2
 1754 0786 4FF00003 		mov	r3, #0
 1755 078a 124C     		ldr	r4, .L60+28
 1756              	.L45:
 1757              		.loc 1 417 0 discriminator 4
 1758 078c 0E4A     		ldr	r2, .L60+16
 1759 078e C2E90C34 		strd	r3, [r2, #48]
 418:main.c        ****                     error = (sensors.distance[1] < sensors.distance[2]) ? dist_ref - sensors.distan
 1760              		.loc 1 418 0 is_stmt 1 discriminator 4
 1761 0792 0F4B     		ldr	r3, .L60+24
 1762 0794 DA69     		ldr	r2, [r3, #28]
 1763 0796 0E4B     		ldr	r3, .L60+24
 1764 0798 1B6A     		ldr	r3, [r3, #32]
 1765 079a 9A42     		cmp	r2, r3
 1766 079c 1CDA     		bge	.L46
 1767              		.loc 1 418 0 is_stmt 0 discriminator 1
 1768 079e 0C4B     		ldr	r3, .L60+24
 1769 07a0 DB69     		ldr	r3, [r3, #28]
 1770 07a2 1846     		mov	r0, r3
 1771 07a4 FFF7FEFF 		bl	__aeabi_i2f
 1772 07a8 0346     		mov	r3, r0
 1773 07aa 1946     		mov	r1, r3
 1774 07ac 786A     		ldr	r0, [r7, #36]	@ float
 1775 07ae FFF7FEFF 		bl	__aeabi_fsub
 1776 07b2 0346     		mov	r3, r0
 1777 07b4 1BE0     		b	.L47
 1778              	.L61:
 1779 07b6 00BF     		.align	3
 1780              	.L60:
 1781 07b8 182D4454 		.word	1413754136
 1782 07bc FB21F93F 		.word	1073291771
 1783 07c0 182D4454 		.word	1413754136
 1784 07c4 FB210940 		.word	1074340347
 1785 07c8 00000000 		.word	robot
 1786 07cc 00000000 		.word	wall_following_flag
 1787 07d0 00000000 		.word	sensors
 1788 07d4 00001440 		.word	1075052544
 1789              	.L46:
 1790              		.loc 1 418 0 discriminator 2
 1791 07d8 414B     		ldr	r3, .L62+8
 1792 07da 1B6A     		ldr	r3, [r3, #32]
 1793 07dc 1846     		mov	r0, r3
 1794 07de FFF7FEFF 		bl	__aeabi_i2f
 1795 07e2 0346     		mov	r3, r0
 1796 07e4 1946     		mov	r1, r3
 1797 07e6 786A     		ldr	r0, [r7, #36]	@ float
 1798 07e8 FFF7FEFF 		bl	__aeabi_fsub
 1799 07ec 0346     		mov	r3, r0
 1800              	.L47:
 1801              		.loc 1 418 0 discriminator 4
 1802 07ee BB61     		str	r3, [r7, #24]	@ float
 419:main.c        ****                     //error = dist_ref - (sensors.distance[1] + sensors.distance[2] / 2);
 420:main.c        ****                     theta_correction = wall_Kp * -(error);
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 40


 1803              		.loc 1 420 0 is_stmt 1 discriminator 4
 1804 07f0 BB69     		ldr	r3, [r7, #24]
 1805 07f2 83F00043 		eor	r3, r3, #-2147483648
 1806 07f6 B96A     		ldr	r1, [r7, #40]	@ float
 1807 07f8 1846     		mov	r0, r3
 1808 07fa FFF7FEFF 		bl	__aeabi_fmul
 1809 07fe 0346     		mov	r3, r0
 1810 0800 FB62     		str	r3, [r7, #44]	@ float
 421:main.c        ****                     robot.desired_theta = ref_direction + theta_correction;
 1811              		.loc 1 421 0 discriminator 4
 1812 0802 F96A     		ldr	r1, [r7, #44]	@ float
 1813 0804 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1814 0808 FFF7FEFF 		bl	__aeabi_fadd
 1815 080c 0346     		mov	r3, r0
 1816 080e 1846     		mov	r0, r3
 1817 0810 FFF7FEFF 		bl	__aeabi_f2d
 1818 0814 0346     		mov	r3, r0
 1819 0816 0C46     		mov	r4, r1
 1820 0818 324A     		ldr	r2, .L62+12
 1821 081a C2E90E34 		strd	r3, [r2, #56]
 422:main.c        ****                     wall_following_flag = 0;
 1822              		.loc 1 422 0 discriminator 4
 1823 081e 324B     		ldr	r3, .L62+16
 1824 0820 0022     		movs	r2, #0
 1825 0822 1A60     		str	r2, [r3]
 423:main.c        ****                     
 424:main.c        ****                     break;    
 1826              		.loc 1 424 0 discriminator 4
 1827 0824 54E0     		b	.L27
 1828              	.L43:
 425:main.c        ****                 
 426:main.c        ****                 case (1):
 427:main.c        ****                     // Follow right wall
 428:main.c        ****                     robot.desired_v = terminal_phase ? 5: velocity;
 1829              		.loc 1 428 0
 1830 0826 7B69     		ldr	r3, [r7, #20]
 1831 0828 002B     		cmp	r3, #0
 1832 082a 05D1     		bne	.L48
 1833              		.loc 1 428 0 is_stmt 0 discriminator 1
 1834 082c F869     		ldr	r0, [r7, #28]
 1835 082e FFF7FEFF 		bl	__aeabi_i2d
 1836 0832 0346     		mov	r3, r0
 1837 0834 0C46     		mov	r4, r1
 1838 0836 02E0     		b	.L49
 1839              	.L48:
 1840              		.loc 1 428 0 discriminator 2
 1841 0838 4FF00003 		mov	r3, #0
 1842 083c 2B4C     		ldr	r4, .L62+20
 1843              	.L49:
 1844              		.loc 1 428 0 discriminator 4
 1845 083e 294A     		ldr	r2, .L62+12
 1846 0840 C2E90C34 		strd	r3, [r2, #48]
 429:main.c        ****                     
 430:main.c        ****                     error = (sensors.distance[3] < sensors.distance[4]) ? dist_ref - sensors.distan
 1847              		.loc 1 430 0 is_stmt 1 discriminator 4
 1848 0844 264B     		ldr	r3, .L62+8
 1849 0846 5A6A     		ldr	r2, [r3, #36]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 41


 1850 0848 254B     		ldr	r3, .L62+8
 1851 084a 9B6A     		ldr	r3, [r3, #40]
 1852 084c 9A42     		cmp	r2, r3
 1853 084e 0BDA     		bge	.L50
 1854              		.loc 1 430 0 is_stmt 0 discriminator 1
 1855 0850 234B     		ldr	r3, .L62+8
 1856 0852 5B6A     		ldr	r3, [r3, #36]
 1857 0854 1846     		mov	r0, r3
 1858 0856 FFF7FEFF 		bl	__aeabi_i2f
 1859 085a 0346     		mov	r3, r0
 1860 085c 1946     		mov	r1, r3
 1861 085e 786A     		ldr	r0, [r7, #36]	@ float
 1862 0860 FFF7FEFF 		bl	__aeabi_fsub
 1863 0864 0346     		mov	r3, r0
 1864 0866 0AE0     		b	.L51
 1865              	.L50:
 1866              		.loc 1 430 0 discriminator 2
 1867 0868 1D4B     		ldr	r3, .L62+8
 1868 086a 9B6A     		ldr	r3, [r3, #40]
 1869 086c 1846     		mov	r0, r3
 1870 086e FFF7FEFF 		bl	__aeabi_i2f
 1871 0872 0346     		mov	r3, r0
 1872 0874 1946     		mov	r1, r3
 1873 0876 786A     		ldr	r0, [r7, #36]	@ float
 1874 0878 FFF7FEFF 		bl	__aeabi_fsub
 1875 087c 0346     		mov	r3, r0
 1876              	.L51:
 1877              		.loc 1 430 0 discriminator 4
 1878 087e BB61     		str	r3, [r7, #24]	@ float
 431:main.c        ****                     
 432:main.c        ****                     theta_correction = wall_Kp * -(error);
 1879              		.loc 1 432 0 is_stmt 1 discriminator 4
 1880 0880 BB69     		ldr	r3, [r7, #24]
 1881 0882 83F00043 		eor	r3, r3, #-2147483648
 1882 0886 B96A     		ldr	r1, [r7, #40]	@ float
 1883 0888 1846     		mov	r0, r3
 1884 088a FFF7FEFF 		bl	__aeabi_fmul
 1885 088e 0346     		mov	r3, r0
 1886 0890 FB62     		str	r3, [r7, #44]	@ float
 433:main.c        ****                     robot.desired_theta = ref_direction - theta_correction;
 1887              		.loc 1 433 0 discriminator 4
 1888 0892 F96A     		ldr	r1, [r7, #44]	@ float
 1889 0894 D7F89C00 		ldr	r0, [r7, #156]	@ float
 1890 0898 FFF7FEFF 		bl	__aeabi_fsub
 1891 089c 0346     		mov	r3, r0
 1892 089e 1846     		mov	r0, r3
 1893 08a0 FFF7FEFF 		bl	__aeabi_f2d
 1894 08a4 0346     		mov	r3, r0
 1895 08a6 0C46     		mov	r4, r1
 1896 08a8 0E4A     		ldr	r2, .L62+12
 1897 08aa C2E90E34 		strd	r3, [r2, #56]
 434:main.c        ****                     wall_following_flag = 0;
 1898              		.loc 1 434 0 discriminator 4
 1899 08ae 0E4B     		ldr	r3, .L62+16
 1900 08b0 0022     		movs	r2, #0
 1901 08b2 1A60     		str	r2, [r3]
 435:main.c        ****                     
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 42


 436:main.c        ****                     break;  
 1902              		.loc 1 436 0 discriminator 4
 1903 08b4 0CE0     		b	.L27
 1904              	.L55:
 437:main.c        ****                     
 438:main.c        ****                 default:
 439:main.c        ****                     robot.desired_v = 0;
 1905              		.loc 1 439 0
 1906 08b6 0B4A     		ldr	r2, .L62+12
 1907 08b8 4FF00003 		mov	r3, #0
 1908 08bc 4FF00004 		mov	r4, #0
 1909 08c0 C2E90C34 		strd	r3, [r2, #48]
 440:main.c        ****                     robot.desired_theta = 190000;
 1910              		.loc 1 440 0
 1911 08c4 074A     		ldr	r2, .L62+12
 1912 08c6 04A4     		adr	r4, .L62
 1913 08c8 D4E90034 		ldrd	r3, [r4]
 1914 08cc C2E90E34 		strd	r3, [r2, #56]
 1915              	.L27:
 1916              	.LBE2:
 441:main.c        ****                  
 442:main.c        ****             }
 443:main.c        ****             
 444:main.c        ****             
 445:main.c        ****         }
 446:main.c        **** 
 447:main.c        ****     } 
 1917              		.loc 1 447 0
 1918 08d0 72E4     		b	.L52
 1919              	.L63:
 1920 08d2 00BFAFF3 		.align	3
 1920      0080
 1921              	.L62:
 1922 08d8 00000000 		.word	0
 1923 08dc 80310741 		.word	1090990464
 1924 08e0 00000000 		.word	sensors
 1925 08e4 00000000 		.word	robot
 1926 08e8 00000000 		.word	wall_following_flag
 1927 08ec 00001440 		.word	1075052544
 1928              		.cfi_endproc
 1929              	.LFE68:
 1930              		.size	main, .-main
 1931              		.global	__aeabi_d2uiz
 1932              		.section	.text.Drive_Left_Motor,"ax",%progbits
 1933              		.align	2
 1934              		.global	Drive_Left_Motor
 1935              		.thumb
 1936              		.thumb_func
 1937              		.type	Drive_Left_Motor, %function
 1938              	Drive_Left_Motor:
 1939              	.LFB69:
 448:main.c        ****             
 449:main.c        **** }
 450:main.c        **** 
 451:main.c        **** // Drive functions
 452:main.c        **** void Drive_Left_Motor(long double duty_cycle) {
 1940              		.loc 1 452 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 43


 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 8
 1943              		@ frame_needed = 1, uses_anonymous_args = 0
 1944 0000 90B5     		push	{r4, r7, lr}
 1945              		.cfi_def_cfa_offset 12
 1946              		.cfi_offset 4, -12
 1947              		.cfi_offset 7, -8
 1948              		.cfi_offset 14, -4
 1949 0002 83B0     		sub	sp, sp, #12
 1950              		.cfi_def_cfa_offset 24
 1951 0004 00AF     		add	r7, sp, #0
 1952              		.cfi_def_cfa_register 7
 1953 0006 C7E90001 		strd	r0, [r7]
 453:main.c        ****     if (duty_cycle < -1) {
 1954              		.loc 1 453 0
 1955 000a 4FF00002 		mov	r2, #0
 1956 000e 304B     		ldr	r3, .L78+8
 1957 0010 D7E90001 		ldrd	r0, [r7]
 1958 0014 FFF7FEFF 		bl	__aeabi_dcmplt
 1959 0018 0346     		mov	r3, r0
 1960 001a 002B     		cmp	r3, #0
 1961 001c 05D0     		beq	.L75
 454:main.c        ****         duty_cycle = -1;
 1962              		.loc 1 454 0
 1963 001e 4FF00003 		mov	r3, #0
 1964 0022 2B4C     		ldr	r4, .L78+8
 1965 0024 C7E90034 		strd	r3, [r7]
 1966 0028 0EE0     		b	.L67
 1967              	.L75:
 455:main.c        ****     } else if (duty_cycle > 1) {
 1968              		.loc 1 455 0
 1969 002a 4FF00002 		mov	r2, #0
 1970 002e 294B     		ldr	r3, .L78+12
 1971 0030 D7E90001 		ldrd	r0, [r7]
 1972 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 1973 0038 0346     		mov	r3, r0
 1974 003a 002B     		cmp	r3, #0
 1975 003c 04D0     		beq	.L67
 456:main.c        ****         duty_cycle = 1;
 1976              		.loc 1 456 0
 1977 003e 4FF00003 		mov	r3, #0
 1978 0042 244C     		ldr	r4, .L78+12
 1979 0044 C7E90034 		strd	r3, [r7]
 1980              	.L67:
 457:main.c        ****     }
 458:main.c        ****     
 459:main.c        ****     if (duty_cycle < 0) {
 1981              		.loc 1 459 0
 1982 0048 4FF00002 		mov	r2, #0
 1983 004c 4FF00003 		mov	r3, #0
 1984 0050 D7E90001 		ldrd	r0, [r7]
 1985 0054 FFF7FEFF 		bl	__aeabi_dcmplt
 1986 0058 0346     		mov	r3, r0
 1987 005a 002B     		cmp	r3, #0
 1988 005c 1BD0     		beq	.L76
 460:main.c        ****         duty_cycle = -duty_cycle;
 1989              		.loc 1 460 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 44


 1990 005e 3B68     		ldr	r3, [r7]
 1991 0060 3B60     		str	r3, [r7]
 1992 0062 7B68     		ldr	r3, [r7, #4]
 1993 0064 83F00043 		eor	r3, r3, #-2147483648
 1994 0068 7B60     		str	r3, [r7, #4]
 461:main.c        ****         PWM_Motor_L_WriteCompare1(0);
 1995              		.loc 1 461 0
 1996 006a 0020     		movs	r0, #0
 1997 006c FFF7FEFF 		bl	PWM_Motor_L_WriteCompare1
 462:main.c        ****         PWM_Motor_L_WriteCompare2(duty_cycle*10000);
 1998              		.loc 1 462 0
 1999 0070 15A3     		adr	r3, .L78
 2000 0072 D3E90023 		ldrd	r2, [r3]
 2001 0076 D7E90001 		ldrd	r0, [r7]
 2002 007a FFF7FEFF 		bl	__aeabi_dmul
 2003 007e 0346     		mov	r3, r0
 2004 0080 0C46     		mov	r4, r1
 2005 0082 1846     		mov	r0, r3
 2006 0084 2146     		mov	r1, r4
 2007 0086 FFF7FEFF 		bl	__aeabi_d2uiz
 2008 008a 0346     		mov	r3, r0
 2009 008c 9BB2     		uxth	r3, r3
 2010 008e 1846     		mov	r0, r3
 2011 0090 FFF7FEFF 		bl	PWM_Motor_L_WriteCompare2
 463:main.c        ****     } else {
 464:main.c        ****         PWM_Motor_L_WriteCompare1(duty_cycle*10000);
 465:main.c        ****         PWM_Motor_L_WriteCompare2(0);
 466:main.c        ****     }
 467:main.c        **** }
 2012              		.loc 1 467 0
 2013 0094 14E0     		b	.L77
 2014              	.L76:
 464:main.c        ****         PWM_Motor_L_WriteCompare2(0);
 2015              		.loc 1 464 0
 2016 0096 0CA3     		adr	r3, .L78
 2017 0098 D3E90023 		ldrd	r2, [r3]
 2018 009c D7E90001 		ldrd	r0, [r7]
 2019 00a0 FFF7FEFF 		bl	__aeabi_dmul
 2020 00a4 0346     		mov	r3, r0
 2021 00a6 0C46     		mov	r4, r1
 2022 00a8 1846     		mov	r0, r3
 2023 00aa 2146     		mov	r1, r4
 2024 00ac FFF7FEFF 		bl	__aeabi_d2uiz
 2025 00b0 0346     		mov	r3, r0
 2026 00b2 9BB2     		uxth	r3, r3
 2027 00b4 1846     		mov	r0, r3
 2028 00b6 FFF7FEFF 		bl	PWM_Motor_L_WriteCompare1
 465:main.c        ****     }
 2029              		.loc 1 465 0
 2030 00ba 0020     		movs	r0, #0
 2031 00bc FFF7FEFF 		bl	PWM_Motor_L_WriteCompare2
 2032              	.L77:
 2033              		.loc 1 467 0
 2034 00c0 00BF     		nop
 2035 00c2 0C37     		adds	r7, r7, #12
 2036              		.cfi_def_cfa_offset 12
 2037 00c4 BD46     		mov	sp, r7
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 45


 2038              		.cfi_def_cfa_register 13
 2039              		@ sp needed
 2040 00c6 90BD     		pop	{r4, r7, pc}
 2041              	.L79:
 2042              		.align	3
 2043              	.L78:
 2044 00c8 00000000 		.word	0
 2045 00cc 0088C340 		.word	1086556160
 2046 00d0 0000F0BF 		.word	-1074790400
 2047 00d4 0000F03F 		.word	1072693248
 2048              		.cfi_endproc
 2049              	.LFE69:
 2050              		.size	Drive_Left_Motor, .-Drive_Left_Motor
 2051              		.section	.text.Drive_Right_Motor,"ax",%progbits
 2052              		.align	2
 2053              		.global	Drive_Right_Motor
 2054              		.thumb
 2055              		.thumb_func
 2056              		.type	Drive_Right_Motor, %function
 2057              	Drive_Right_Motor:
 2058              	.LFB70:
 468:main.c        **** 
 469:main.c        **** void Drive_Right_Motor(long double duty_cycle) {
 2059              		.loc 1 469 0
 2060              		.cfi_startproc
 2061              		@ args = 0, pretend = 0, frame = 8
 2062              		@ frame_needed = 1, uses_anonymous_args = 0
 2063 0000 90B5     		push	{r4, r7, lr}
 2064              		.cfi_def_cfa_offset 12
 2065              		.cfi_offset 4, -12
 2066              		.cfi_offset 7, -8
 2067              		.cfi_offset 14, -4
 2068 0002 83B0     		sub	sp, sp, #12
 2069              		.cfi_def_cfa_offset 24
 2070 0004 00AF     		add	r7, sp, #0
 2071              		.cfi_def_cfa_register 7
 2072 0006 C7E90001 		strd	r0, [r7]
 470:main.c        ****     if (duty_cycle < -1) {
 2073              		.loc 1 470 0
 2074 000a 4FF00002 		mov	r2, #0
 2075 000e 304B     		ldr	r3, .L94+8
 2076 0010 D7E90001 		ldrd	r0, [r7]
 2077 0014 FFF7FEFF 		bl	__aeabi_dcmplt
 2078 0018 0346     		mov	r3, r0
 2079 001a 002B     		cmp	r3, #0
 2080 001c 05D0     		beq	.L91
 471:main.c        ****         duty_cycle = -1;
 2081              		.loc 1 471 0
 2082 001e 4FF00003 		mov	r3, #0
 2083 0022 2B4C     		ldr	r4, .L94+8
 2084 0024 C7E90034 		strd	r3, [r7]
 2085 0028 0EE0     		b	.L83
 2086              	.L91:
 472:main.c        ****     } else if (duty_cycle > 1) {
 2087              		.loc 1 472 0
 2088 002a 4FF00002 		mov	r2, #0
 2089 002e 294B     		ldr	r3, .L94+12
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 46


 2090 0030 D7E90001 		ldrd	r0, [r7]
 2091 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 2092 0038 0346     		mov	r3, r0
 2093 003a 002B     		cmp	r3, #0
 2094 003c 04D0     		beq	.L83
 473:main.c        ****         duty_cycle = 1;
 2095              		.loc 1 473 0
 2096 003e 4FF00003 		mov	r3, #0
 2097 0042 244C     		ldr	r4, .L94+12
 2098 0044 C7E90034 		strd	r3, [r7]
 2099              	.L83:
 474:main.c        ****     }
 475:main.c        ****     
 476:main.c        ****     if (duty_cycle < 0) {
 2100              		.loc 1 476 0
 2101 0048 4FF00002 		mov	r2, #0
 2102 004c 4FF00003 		mov	r3, #0
 2103 0050 D7E90001 		ldrd	r0, [r7]
 2104 0054 FFF7FEFF 		bl	__aeabi_dcmplt
 2105 0058 0346     		mov	r3, r0
 2106 005a 002B     		cmp	r3, #0
 2107 005c 1BD0     		beq	.L92
 477:main.c        ****         duty_cycle = -duty_cycle;
 2108              		.loc 1 477 0
 2109 005e 3B68     		ldr	r3, [r7]
 2110 0060 3B60     		str	r3, [r7]
 2111 0062 7B68     		ldr	r3, [r7, #4]
 2112 0064 83F00043 		eor	r3, r3, #-2147483648
 2113 0068 7B60     		str	r3, [r7, #4]
 478:main.c        ****         PWM_Motor_R_WriteCompare1(0);
 2114              		.loc 1 478 0
 2115 006a 0020     		movs	r0, #0
 2116 006c FFF7FEFF 		bl	PWM_Motor_R_WriteCompare1
 479:main.c        ****         PWM_Motor_R_WriteCompare2(duty_cycle*5000);
 2117              		.loc 1 479 0
 2118 0070 15A3     		adr	r3, .L94
 2119 0072 D3E90023 		ldrd	r2, [r3]
 2120 0076 D7E90001 		ldrd	r0, [r7]
 2121 007a FFF7FEFF 		bl	__aeabi_dmul
 2122 007e 0346     		mov	r3, r0
 2123 0080 0C46     		mov	r4, r1
 2124 0082 1846     		mov	r0, r3
 2125 0084 2146     		mov	r1, r4
 2126 0086 FFF7FEFF 		bl	__aeabi_d2uiz
 2127 008a 0346     		mov	r3, r0
 2128 008c 9BB2     		uxth	r3, r3
 2129 008e 1846     		mov	r0, r3
 2130 0090 FFF7FEFF 		bl	PWM_Motor_R_WriteCompare2
 480:main.c        ****     } else {
 481:main.c        ****         PWM_Motor_R_WriteCompare1(duty_cycle*5000);
 482:main.c        ****         PWM_Motor_R_WriteCompare2(0);
 483:main.c        ****     }
 484:main.c        **** }
 2131              		.loc 1 484 0
 2132 0094 14E0     		b	.L93
 2133              	.L92:
 481:main.c        ****         PWM_Motor_R_WriteCompare2(0);
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 47


 2134              		.loc 1 481 0
 2135 0096 0CA3     		adr	r3, .L94
 2136 0098 D3E90023 		ldrd	r2, [r3]
 2137 009c D7E90001 		ldrd	r0, [r7]
 2138 00a0 FFF7FEFF 		bl	__aeabi_dmul
 2139 00a4 0346     		mov	r3, r0
 2140 00a6 0C46     		mov	r4, r1
 2141 00a8 1846     		mov	r0, r3
 2142 00aa 2146     		mov	r1, r4
 2143 00ac FFF7FEFF 		bl	__aeabi_d2uiz
 2144 00b0 0346     		mov	r3, r0
 2145 00b2 9BB2     		uxth	r3, r3
 2146 00b4 1846     		mov	r0, r3
 2147 00b6 FFF7FEFF 		bl	PWM_Motor_R_WriteCompare1
 482:main.c        ****     }
 2148              		.loc 1 482 0
 2149 00ba 0020     		movs	r0, #0
 2150 00bc FFF7FEFF 		bl	PWM_Motor_R_WriteCompare2
 2151              	.L93:
 2152              		.loc 1 484 0
 2153 00c0 00BF     		nop
 2154 00c2 0C37     		adds	r7, r7, #12
 2155              		.cfi_def_cfa_offset 12
 2156 00c4 BD46     		mov	sp, r7
 2157              		.cfi_def_cfa_register 13
 2158              		@ sp needed
 2159 00c6 90BD     		pop	{r4, r7, pc}
 2160              	.L95:
 2161              		.align	3
 2162              	.L94:
 2163 00c8 00000000 		.word	0
 2164 00cc 0088B340 		.word	1085507584
 2165 00d0 0000F0BF 		.word	-1074790400
 2166 00d4 0000F03F 		.word	1072693248
 2167              		.cfi_endproc
 2168              	.LFE70:
 2169              		.size	Drive_Right_Motor, .-Drive_Right_Motor
 2170              		.section	.text.Turn_Delay,"ax",%progbits
 2171              		.align	2
 2172              		.global	Turn_Delay
 2173              		.thumb
 2174              		.thumb_func
 2175              		.type	Turn_Delay, %function
 2176              	Turn_Delay:
 2177              	.LFB71:
 485:main.c        **** 
 486:main.c        **** void Turn_Delay(long double angle) {
 2178              		.loc 1 486 0
 2179              		.cfi_startproc
 2180              		@ args = 0, pretend = 0, frame = 8
 2181              		@ frame_needed = 1, uses_anonymous_args = 0
 2182 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2183              		.cfi_def_cfa_offset 20
 2184              		.cfi_offset 4, -20
 2185              		.cfi_offset 5, -16
 2186              		.cfi_offset 6, -12
 2187              		.cfi_offset 7, -8
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 48


 2188              		.cfi_offset 14, -4
 2189 0002 83B0     		sub	sp, sp, #12
 2190              		.cfi_def_cfa_offset 32
 2191 0004 00AF     		add	r7, sp, #0
 2192              		.cfi_def_cfa_register 7
 2193 0006 C7E90001 		strd	r0, [r7]
 487:main.c        ****     // Set desired turn in radians
 488:main.c        ****     robot.desired_theta = angle;
 2194              		.loc 1 488 0
 2195 000a 194A     		ldr	r2, .L99+8
 2196 000c D7E90034 		ldrd	r3, [r7]
 2197 0010 C2E90E34 		strd	r3, [r2, #56]
 489:main.c        ****     
 490:main.c        ****     // Idle loop to wait until turn is complete
 491:main.c        ****     while( !( fabs(robot.theta-robot.desired_theta) < 0.4 ) ) {}; 
 2198              		.loc 1 491 0
 2199 0014 00BF     		nop
 2200              	.L98:
 2201              		.loc 1 491 0 is_stmt 0 discriminator 1
 2202 0016 164B     		ldr	r3, .L99+8
 2203 0018 D3E90201 		ldrd	r0, [r3, #8]
 2204 001c 144B     		ldr	r3, .L99+8
 2205 001e 03F13804 		add	r4, r3, #56
 2206 0022 D4E90034 		ldrd	r3, [r4]
 2207 0026 1A46     		mov	r2, r3
 2208 0028 2346     		mov	r3, r4
 2209 002a FFF7FEFF 		bl	__aeabi_dsub
 2210 002e 0346     		mov	r3, r0
 2211 0030 0C46     		mov	r4, r1
 2212 0032 1D46     		mov	r5, r3
 2213 0034 24F00046 		bic	r6, r4, #-2147483648
 2214 0038 0123     		movs	r3, #1
 2215 003a 1C46     		mov	r4, r3
 2216 003c 0AA3     		adr	r3, .L99
 2217 003e D3E90023 		ldrd	r2, [r3]
 2218 0042 2846     		mov	r0, r5
 2219 0044 3146     		mov	r1, r6
 2220 0046 FFF7FEFF 		bl	__aeabi_dcmplt
 2221 004a 0346     		mov	r3, r0
 2222 004c 002B     		cmp	r3, #0
 2223 004e 01D1     		bne	.L97
 2224 0050 0023     		movs	r3, #0
 2225 0052 1C46     		mov	r4, r3
 2226              	.L97:
 2227 0054 E3B2     		uxtb	r3, r4
 2228 0056 83F00103 		eor	r3, r3, #1
 2229 005a DBB2     		uxtb	r3, r3
 2230 005c 002B     		cmp	r3, #0
 2231 005e DAD1     		bne	.L98
 492:main.c        **** }
 2232              		.loc 1 492 0 is_stmt 1
 2233 0060 00BF     		nop
 2234 0062 0C37     		adds	r7, r7, #12
 2235              		.cfi_def_cfa_offset 20
 2236 0064 BD46     		mov	sp, r7
 2237              		.cfi_def_cfa_register 13
 2238              		@ sp needed
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 49


 2239 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 2240              	.L100:
 2241              		.align	3
 2242              	.L99:
 2243 0068 9A999999 		.word	-1717986918
 2244 006c 9999D93F 		.word	1071225241
 2245 0070 00000000 		.word	robot
 2246              		.cfi_endproc
 2247              	.LFE71:
 2248              		.size	Turn_Delay, .-Turn_Delay
 2249              		.global	__aeabi_d2iz
 2250              		.section	.text.velocity_control,"ax",%progbits
 2251              		.align	2
 2252              		.global	velocity_control
 2253              		.thumb
 2254              		.thumb_func
 2255              		.type	velocity_control, %function
 2256              	velocity_control:
 2257              	.LFB72:
 493:main.c        **** 
 494:main.c        **** int velocity_control(int max_velocity) {
 2258              		.loc 1 494 0
 2259              		.cfi_startproc
 2260              		@ args = 0, pretend = 0, frame = 24
 2261              		@ frame_needed = 1, uses_anonymous_args = 0
 2262 0000 90B5     		push	{r4, r7, lr}
 2263              		.cfi_def_cfa_offset 12
 2264              		.cfi_offset 4, -12
 2265              		.cfi_offset 7, -8
 2266              		.cfi_offset 14, -4
 2267 0002 87B0     		sub	sp, sp, #28
 2268              		.cfi_def_cfa_offset 40
 2269 0004 00AF     		add	r7, sp, #0
 2270              		.cfi_def_cfa_register 7
 2271 0006 7860     		str	r0, [r7, #4]
 495:main.c        ****     // Adjust the velocity the closer we approach the walls
 496:main.c        ****     int avg_dist = (sensors.distance[0] + sensors.distance[1]) / 2;
 2272              		.loc 1 496 0
 2273 0008 164B     		ldr	r3, .L102
 2274 000a 9A69     		ldr	r2, [r3, #24]
 2275 000c 154B     		ldr	r3, .L102
 2276 000e DB69     		ldr	r3, [r3, #28]
 2277 0010 1344     		add	r3, r3, r2
 2278 0012 DA0F     		lsrs	r2, r3, #31
 2279 0014 1344     		add	r3, r3, r2
 2280 0016 5B10     		asrs	r3, r3, #1
 2281 0018 7B61     		str	r3, [r7, #20]
 497:main.c        ****     int thresh = 1;
 2282              		.loc 1 497 0
 2283 001a 0123     		movs	r3, #1
 2284 001c 3B61     		str	r3, [r7, #16]
 498:main.c        ****     int velocity = floor(max_velocity * (1200 - avg_dist) / 400);
 2285              		.loc 1 498 0
 2286 001e 7B69     		ldr	r3, [r7, #20]
 2287 0020 C3F59663 		rsb	r3, r3, #1200
 2288 0024 7A68     		ldr	r2, [r7, #4]
 2289 0026 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 50


 2290 002a 0F4A     		ldr	r2, .L102+4
 2291 002c 82FB0312 		smull	r1, r2, r2, r3
 2292 0030 D211     		asrs	r2, r2, #7
 2293 0032 DB17     		asrs	r3, r3, #31
 2294 0034 D31A     		subs	r3, r2, r3
 2295 0036 1846     		mov	r0, r3
 2296 0038 FFF7FEFF 		bl	__aeabi_i2d
 2297 003c 0346     		mov	r3, r0
 2298 003e 0C46     		mov	r4, r1
 2299 0040 1846     		mov	r0, r3
 2300 0042 2146     		mov	r1, r4
 2301 0044 FFF7FEFF 		bl	floor
 2302 0048 0346     		mov	r3, r0
 2303 004a 0C46     		mov	r4, r1
 2304 004c 1846     		mov	r0, r3
 2305 004e 2146     		mov	r1, r4
 2306 0050 FFF7FEFF 		bl	__aeabi_d2iz
 2307 0054 0346     		mov	r3, r0
 2308 0056 FB60     		str	r3, [r7, #12]
 499:main.c        **** }
 2309              		.loc 1 499 0
 2310 0058 00BF     		nop
 2311 005a 1846     		mov	r0, r3
 2312 005c 1C37     		adds	r7, r7, #28
 2313              		.cfi_def_cfa_offset 12
 2314 005e BD46     		mov	sp, r7
 2315              		.cfi_def_cfa_register 13
 2316              		@ sp needed
 2317 0060 90BD     		pop	{r4, r7, pc}
 2318              	.L103:
 2319 0062 00BF     		.align	2
 2320              	.L102:
 2321 0064 00000000 		.word	sensors
 2322 0068 1F85EB51 		.word	1374389535
 2323              		.cfi_endproc
 2324              	.LFE72:
 2325              		.size	velocity_control, .-velocity_control
 2326              		.section	.text.move_servo,"ax",%progbits
 2327              		.align	2
 2328              		.global	move_servo
 2329              		.thumb
 2330              		.thumb_func
 2331              		.type	move_servo, %function
 2332              	move_servo:
 2333              	.LFB73:
 500:main.c        **** 
 501:main.c        **** void move_servo(int servo_num, int dir) {
 2334              		.loc 1 501 0
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 16
 2337              		@ frame_needed = 1, uses_anonymous_args = 0
 2338 0000 80B5     		push	{r7, lr}
 2339              		.cfi_def_cfa_offset 8
 2340              		.cfi_offset 7, -8
 2341              		.cfi_offset 14, -4
 2342 0002 84B0     		sub	sp, sp, #16
 2343              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 51


 2344 0004 00AF     		add	r7, sp, #0
 2345              		.cfi_def_cfa_register 7
 2346 0006 7860     		str	r0, [r7, #4]
 2347 0008 3960     		str	r1, [r7]
 502:main.c        ****     int comp_1, comp_2;
 503:main.c        ****     
 504:main.c        ****     if( dir ) {
 2348              		.loc 1 504 0
 2349 000a 3B68     		ldr	r3, [r7]
 2350 000c 002B     		cmp	r3, #0
 2351 000e 06D0     		beq	.L105
 505:main.c        ****         comp_1 = 4000;
 2352              		.loc 1 505 0
 2353 0010 4FF47A63 		mov	r3, #4000
 2354 0014 FB60     		str	r3, [r7, #12]
 506:main.c        ****         comp_2 = 2000;
 2355              		.loc 1 506 0
 2356 0016 4FF4FA63 		mov	r3, #2000
 2357 001a BB60     		str	r3, [r7, #8]
 2358 001c 05E0     		b	.L106
 2359              	.L105:
 507:main.c        ****     } else {
 508:main.c        ****         comp_1 = 2000;
 2360              		.loc 1 508 0
 2361 001e 4FF4FA63 		mov	r3, #2000
 2362 0022 FB60     		str	r3, [r7, #12]
 509:main.c        ****         comp_2 = 4000;
 2363              		.loc 1 509 0
 2364 0024 4FF47A63 		mov	r3, #4000
 2365 0028 BB60     		str	r3, [r7, #8]
 2366              	.L106:
 510:main.c        ****     }
 511:main.c        ****     
 512:main.c        ****     CyDelay(100);
 2367              		.loc 1 512 0
 2368 002a 6420     		movs	r0, #100
 2369 002c FFF7FEFF 		bl	CyDelay
 513:main.c        ****     PWM_ServoDir_WriteCompare(comp_1);
 2370              		.loc 1 513 0
 2371 0030 FB68     		ldr	r3, [r7, #12]
 2372 0032 9BB2     		uxth	r3, r3
 2373 0034 1846     		mov	r0, r3
 2374 0036 FFF7FEFF 		bl	PWM_ServoDir_WriteCompare
 514:main.c        ****     Control_Reg_ServoSelect_Write(servo_num);
 2375              		.loc 1 514 0
 2376 003a 7B68     		ldr	r3, [r7, #4]
 2377 003c DBB2     		uxtb	r3, r3
 2378 003e 1846     		mov	r0, r3
 2379 0040 FFF7FEFF 		bl	Control_Reg_ServoSelect_Write
 515:main.c        ****     Control_Reg_ServoTrigger_Write(1);
 2380              		.loc 1 515 0
 2381 0044 0120     		movs	r0, #1
 2382 0046 FFF7FEFF 		bl	Control_Reg_ServoTrigger_Write
 516:main.c        ****     CyDelay(100);
 2383              		.loc 1 516 0
 2384 004a 6420     		movs	r0, #100
 2385 004c FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 52


 517:main.c        ****     Control_Reg_ServoTrigger_Write(0);
 2386              		.loc 1 517 0
 2387 0050 0020     		movs	r0, #0
 2388 0052 FFF7FEFF 		bl	Control_Reg_ServoTrigger_Write
 518:main.c        ****     
 519:main.c        ****     CyDelay(2550);
 2389              		.loc 1 519 0
 2390 0056 40F6F610 		movw	r0, #2550
 2391 005a FFF7FEFF 		bl	CyDelay
 520:main.c        ****     
 521:main.c        ****     PWM_ServoDir_WriteCompare(comp_2);
 2392              		.loc 1 521 0
 2393 005e BB68     		ldr	r3, [r7, #8]
 2394 0060 9BB2     		uxth	r3, r3
 2395 0062 1846     		mov	r0, r3
 2396 0064 FFF7FEFF 		bl	PWM_ServoDir_WriteCompare
 522:main.c        ****     Control_Reg_ServoTrigger_Write(1);
 2397              		.loc 1 522 0
 2398 0068 0120     		movs	r0, #1
 2399 006a FFF7FEFF 		bl	Control_Reg_ServoTrigger_Write
 523:main.c        ****     CyDelay(100);
 2400              		.loc 1 523 0
 2401 006e 6420     		movs	r0, #100
 2402 0070 FFF7FEFF 		bl	CyDelay
 524:main.c        ****     Control_Reg_ServoTrigger_Write(0);
 2403              		.loc 1 524 0
 2404 0074 0020     		movs	r0, #0
 2405 0076 FFF7FEFF 		bl	Control_Reg_ServoTrigger_Write
 525:main.c        ****     
 526:main.c        ****     CyDelay(2550);
 2406              		.loc 1 526 0
 2407 007a 40F6F610 		movw	r0, #2550
 2408 007e FFF7FEFF 		bl	CyDelay
 527:main.c        **** }
 2409              		.loc 1 527 0
 2410 0082 00BF     		nop
 2411 0084 1037     		adds	r7, r7, #16
 2412              		.cfi_def_cfa_offset 8
 2413 0086 BD46     		mov	sp, r7
 2414              		.cfi_def_cfa_register 13
 2415              		@ sp needed
 2416 0088 80BD     		pop	{r7, pc}
 2417              		.cfi_endproc
 2418              	.LFE73:
 2419              		.size	move_servo, .-move_servo
 2420 008a 00BF     		.text
 2421              	.Letext0:
 2422              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2423              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2424              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2425              		.file 5 "..\\Helper\\helper.h"
 2426              		.file 6 "..\\Robot\\robot.h"
 2427              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2428              		.section	.debug_info,"",%progbits
 2429              	.Ldebug_info0:
 2430 0000 CE060000 		.4byte	0x6ce
 2431 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 53


 2432 0006 00000000 		.4byte	.Ldebug_abbrev0
 2433 000a 04       		.byte	0x4
 2434 000b 01       		.uleb128 0x1
 2435 000c 82000000 		.4byte	.LASF98
 2436 0010 0C       		.byte	0xc
 2437 0011 12040000 		.4byte	.LASF99
 2438 0015 33020000 		.4byte	.LASF100
 2439 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2440 001d 00000000 		.4byte	0
 2441 0021 00000000 		.4byte	.Ldebug_line0
 2442 0025 02       		.uleb128 0x2
 2443 0026 01       		.byte	0x1
 2444 0027 06       		.byte	0x6
 2445 0028 25030000 		.4byte	.LASF0
 2446 002c 03       		.uleb128 0x3
 2447 002d AF020000 		.4byte	.LASF3
 2448 0031 02       		.byte	0x2
 2449 0032 1D       		.byte	0x1d
 2450 0033 37000000 		.4byte	0x37
 2451 0037 02       		.uleb128 0x2
 2452 0038 01       		.byte	0x1
 2453 0039 08       		.byte	0x8
 2454 003a F9020000 		.4byte	.LASF1
 2455 003e 02       		.uleb128 0x2
 2456 003f 02       		.byte	0x2
 2457 0040 05       		.byte	0x5
 2458 0041 3D000000 		.4byte	.LASF2
 2459 0045 03       		.uleb128 0x3
 2460 0046 1A010000 		.4byte	.LASF4
 2461 004a 02       		.byte	0x2
 2462 004b 2B       		.byte	0x2b
 2463 004c 50000000 		.4byte	0x50
 2464 0050 02       		.uleb128 0x2
 2465 0051 02       		.byte	0x2
 2466 0052 07       		.byte	0x7
 2467 0053 A5030000 		.4byte	.LASF5
 2468 0057 03       		.uleb128 0x3
 2469 0058 6F040000 		.4byte	.LASF6
 2470 005c 02       		.byte	0x2
 2471 005d 3F       		.byte	0x3f
 2472 005e 62000000 		.4byte	0x62
 2473 0062 02       		.uleb128 0x2
 2474 0063 04       		.byte	0x4
 2475 0064 05       		.byte	0x5
 2476 0065 78020000 		.4byte	.LASF7
 2477 0069 02       		.uleb128 0x2
 2478 006a 04       		.byte	0x4
 2479 006b 07       		.byte	0x7
 2480 006c 81020000 		.4byte	.LASF8
 2481 0070 02       		.uleb128 0x2
 2482 0071 08       		.byte	0x8
 2483 0072 05       		.byte	0x5
 2484 0073 E4010000 		.4byte	.LASF9
 2485 0077 02       		.uleb128 0x2
 2486 0078 08       		.byte	0x8
 2487 0079 07       		.byte	0x7
 2488 007a 39030000 		.4byte	.LASF10
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 54


 2489 007e 04       		.uleb128 0x4
 2490 007f 04       		.byte	0x4
 2491 0080 05       		.byte	0x5
 2492 0081 696E7400 		.ascii	"int\000"
 2493 0085 02       		.uleb128 0x2
 2494 0086 04       		.byte	0x4
 2495 0087 07       		.byte	0x7
 2496 0088 59030000 		.4byte	.LASF11
 2497 008c 03       		.uleb128 0x3
 2498 008d 8D010000 		.4byte	.LASF12
 2499 0091 03       		.byte	0x3
 2500 0092 18       		.byte	0x18
 2501 0093 2C000000 		.4byte	0x2c
 2502 0097 03       		.uleb128 0x3
 2503 0098 66030000 		.4byte	.LASF13
 2504 009c 03       		.byte	0x3
 2505 009d 24       		.byte	0x24
 2506 009e 45000000 		.4byte	0x45
 2507 00a2 03       		.uleb128 0x3
 2508 00a3 31030000 		.4byte	.LASF14
 2509 00a7 03       		.byte	0x3
 2510 00a8 2C       		.byte	0x2c
 2511 00a9 57000000 		.4byte	0x57
 2512 00ad 05       		.uleb128 0x5
 2513 00ae 3C040000 		.4byte	.LASF15
 2514 00b2 04       		.byte	0x4
 2515 00b3 ED01     		.2byte	0x1ed
 2516 00b5 62000000 		.4byte	0x62
 2517 00b9 02       		.uleb128 0x2
 2518 00ba 04       		.byte	0x4
 2519 00bb 04       		.byte	0x4
 2520 00bc D3010000 		.4byte	.LASF16
 2521 00c0 02       		.uleb128 0x2
 2522 00c1 08       		.byte	0x8
 2523 00c2 04       		.byte	0x4
 2524 00c3 42040000 		.4byte	.LASF17
 2525 00c7 02       		.uleb128 0x2
 2526 00c8 01       		.byte	0x1
 2527 00c9 08       		.byte	0x8
 2528 00ca C1030000 		.4byte	.LASF18
 2529 00ce 02       		.uleb128 0x2
 2530 00cf 08       		.byte	0x8
 2531 00d0 04       		.byte	0x4
 2532 00d1 DE020000 		.4byte	.LASF19
 2533 00d5 02       		.uleb128 0x2
 2534 00d6 04       		.byte	0x4
 2535 00d7 07       		.byte	0x7
 2536 00d8 A8040000 		.4byte	.LASF20
 2537 00dc 06       		.uleb128 0x6
 2538 00dd 30       		.byte	0x30
 2539 00de 05       		.byte	0x5
 2540 00df 21       		.byte	0x21
 2541 00e0 FD000000 		.4byte	0xfd
 2542 00e4 07       		.uleb128 0x7
 2543 00e5 10010000 		.4byte	.LASF21
 2544 00e9 05       		.byte	0x5
 2545 00ea 22       		.byte	0x22
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 55


 2546 00eb FD000000 		.4byte	0xfd
 2547 00ef 00       		.byte	0
 2548 00f0 07       		.uleb128 0x7
 2549 00f1 B8030000 		.4byte	.LASF22
 2550 00f5 05       		.byte	0x5
 2551 00f6 23       		.byte	0x23
 2552 00f7 FD000000 		.4byte	0xfd
 2553 00fb 18       		.byte	0x18
 2554 00fc 00       		.byte	0
 2555 00fd 08       		.uleb128 0x8
 2556 00fe 7E000000 		.4byte	0x7e
 2557 0102 0D010000 		.4byte	0x10d
 2558 0106 09       		.uleb128 0x9
 2559 0107 D5000000 		.4byte	0xd5
 2560 010b 05       		.byte	0x5
 2561 010c 00       		.byte	0
 2562 010d 03       		.uleb128 0x3
 2563 010e D0020000 		.4byte	.LASF23
 2564 0112 05       		.byte	0x5
 2565 0113 24       		.byte	0x24
 2566 0114 DC000000 		.4byte	0xdc
 2567 0118 06       		.uleb128 0x6
 2568 0119 48       		.byte	0x48
 2569 011a 06       		.byte	0x6
 2570 011b 0A       		.byte	0xa
 2571 011c 89010000 		.4byte	0x189
 2572 0120 07       		.uleb128 0x7
 2573 0121 64040000 		.4byte	.LASF24
 2574 0125 06       		.byte	0x6
 2575 0126 0B       		.byte	0xb
 2576 0127 CE000000 		.4byte	0xce
 2577 012b 00       		.byte	0
 2578 012c 07       		.uleb128 0x7
 2579 012d 79040000 		.4byte	.LASF25
 2580 0131 06       		.byte	0x6
 2581 0132 0C       		.byte	0xc
 2582 0133 CE000000 		.4byte	0xce
 2583 0137 08       		.byte	0x8
 2584 0138 0A       		.uleb128 0xa
 2585 0139 7700     		.ascii	"w\000"
 2586 013b 06       		.byte	0x6
 2587 013c 0D       		.byte	0xd
 2588 013d CE000000 		.4byte	0xce
 2589 0141 10       		.byte	0x10
 2590 0142 07       		.uleb128 0x7
 2591 0143 DE040000 		.4byte	.LASF26
 2592 0147 06       		.byte	0x6
 2593 0148 0E       		.byte	0xe
 2594 0149 CE000000 		.4byte	0xce
 2595 014d 18       		.byte	0x18
 2596 014e 07       		.uleb128 0x7
 2597 014f 1B030000 		.4byte	.LASF27
 2598 0153 06       		.byte	0x6
 2599 0154 0F       		.byte	0xf
 2600 0155 CE000000 		.4byte	0xce
 2601 0159 20       		.byte	0x20
 2602 015a 0A       		.uleb128 0xa
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 56


 2603 015b 4B6900   		.ascii	"Ki\000"
 2604 015e 06       		.byte	0x6
 2605 015f 10       		.byte	0x10
 2606 0160 CE000000 		.4byte	0xce
 2607 0164 28       		.byte	0x28
 2608 0165 0A       		.uleb128 0xa
 2609 0166 4B7000   		.ascii	"Kp\000"
 2610 0169 06       		.byte	0x6
 2611 016a 11       		.byte	0x11
 2612 016b CE000000 		.4byte	0xce
 2613 016f 30       		.byte	0x30
 2614 0170 07       		.uleb128 0x7
 2615 0171 26020000 		.4byte	.LASF28
 2616 0175 06       		.byte	0x6
 2617 0176 12       		.byte	0x12
 2618 0177 C0000000 		.4byte	0xc0
 2619 017b 38       		.byte	0x38
 2620 017c 07       		.uleb128 0x7
 2621 017d B7040000 		.4byte	.LASF29
 2622 0181 06       		.byte	0x6
 2623 0182 13       		.byte	0x13
 2624 0183 7E000000 		.4byte	0x7e
 2625 0187 40       		.byte	0x40
 2626 0188 00       		.byte	0
 2627 0189 03       		.uleb128 0x3
 2628 018a EA020000 		.4byte	.LASF30
 2629 018e 06       		.byte	0x6
 2630 018f 15       		.byte	0x15
 2631 0190 18010000 		.4byte	0x118
 2632 0194 06       		.uleb128 0x6
 2633 0195 70       		.byte	0x70
 2634 0196 06       		.byte	0x6
 2635 0197 1A       		.byte	0x1a
 2636 0198 3B020000 		.4byte	0x23b
 2637 019c 07       		.uleb128 0x7
 2638 019d 09000000 		.4byte	.LASF31
 2639 01a1 06       		.byte	0x6
 2640 01a2 1C       		.byte	0x1c
 2641 01a3 CE000000 		.4byte	0xce
 2642 01a7 00       		.byte	0
 2643 01a8 07       		.uleb128 0x7
 2644 01a9 83040000 		.4byte	.LASF32
 2645 01ad 06       		.byte	0x6
 2646 01ae 1F       		.byte	0x1f
 2647 01af CE000000 		.4byte	0xce
 2648 01b3 08       		.byte	0x8
 2649 01b4 0A       		.uleb128 0xa
 2650 01b5 7800     		.ascii	"x\000"
 2651 01b7 06       		.byte	0x6
 2652 01b8 20       		.byte	0x20
 2653 01b9 CE000000 		.4byte	0xce
 2654 01bd 10       		.byte	0x10
 2655 01be 0A       		.uleb128 0xa
 2656 01bf 7900     		.ascii	"y\000"
 2657 01c1 06       		.byte	0x6
 2658 01c2 21       		.byte	0x21
 2659 01c3 CE000000 		.4byte	0xce
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 57


 2660 01c7 18       		.byte	0x18
 2661 01c8 0A       		.uleb128 0xa
 2662 01c9 7600     		.ascii	"v\000"
 2663 01cb 06       		.byte	0x6
 2664 01cc 24       		.byte	0x24
 2665 01cd CE000000 		.4byte	0xce
 2666 01d1 20       		.byte	0x20
 2667 01d2 0A       		.uleb128 0xa
 2668 01d3 7700     		.ascii	"w\000"
 2669 01d5 06       		.byte	0x6
 2670 01d6 25       		.byte	0x25
 2671 01d7 CE000000 		.4byte	0xce
 2672 01db 28       		.byte	0x28
 2673 01dc 07       		.uleb128 0x7
 2674 01dd 11030000 		.4byte	.LASF33
 2675 01e1 06       		.byte	0x6
 2676 01e2 28       		.byte	0x28
 2677 01e3 CE000000 		.4byte	0xce
 2678 01e7 30       		.byte	0x30
 2679 01e8 07       		.uleb128 0x7
 2680 01e9 1A000000 		.4byte	.LASF34
 2681 01ed 06       		.byte	0x6
 2682 01ee 29       		.byte	0x29
 2683 01ef CE000000 		.4byte	0xce
 2684 01f3 38       		.byte	0x38
 2685 01f4 0A       		.uleb128 0xa
 2686 01f5 4B6900   		.ascii	"Ki\000"
 2687 01f8 06       		.byte	0x6
 2688 01f9 2C       		.byte	0x2c
 2689 01fa CE000000 		.4byte	0xce
 2690 01fe 40       		.byte	0x40
 2691 01ff 0A       		.uleb128 0xa
 2692 0200 4B7000   		.ascii	"Kp\000"
 2693 0203 06       		.byte	0x6
 2694 0204 2D       		.byte	0x2d
 2695 0205 CE000000 		.4byte	0xce
 2696 0209 48       		.byte	0x48
 2697 020a 07       		.uleb128 0x7
 2698 020b 79040000 		.4byte	.LASF25
 2699 020f 06       		.byte	0x6
 2700 0210 2E       		.byte	0x2e
 2701 0211 CE000000 		.4byte	0xce
 2702 0215 50       		.byte	0x50
 2703 0216 07       		.uleb128 0x7
 2704 0217 A2010000 		.4byte	.LASF35
 2705 021b 06       		.byte	0x6
 2706 021c 31       		.byte	0x31
 2707 021d CE000000 		.4byte	0xce
 2708 0221 58       		.byte	0x58
 2709 0222 07       		.uleb128 0x7
 2710 0223 B8010000 		.4byte	.LASF36
 2711 0227 06       		.byte	0x6
 2712 0228 32       		.byte	0x32
 2713 0229 CE000000 		.4byte	0xce
 2714 022d 60       		.byte	0x60
 2715 022e 07       		.uleb128 0x7
 2716 022f 11050000 		.4byte	.LASF37
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 58


 2717 0233 06       		.byte	0x6
 2718 0234 33       		.byte	0x33
 2719 0235 CE000000 		.4byte	0xce
 2720 0239 68       		.byte	0x68
 2721 023a 00       		.byte	0
 2722 023b 03       		.uleb128 0x3
 2723 023c 7C000000 		.4byte	.LASF38
 2724 0240 06       		.byte	0x6
 2725 0241 35       		.byte	0x35
 2726 0242 94010000 		.4byte	0x194
 2727 0246 0B       		.uleb128 0xb
 2728 0247 49040000 		.4byte	.LASF101
 2729 024b 01       		.byte	0x1
 2730 024c 3E       		.byte	0x3e
 2731 024d 00000000 		.4byte	.LFB64
 2732 0251 74000000 		.4byte	.LFE64-.LFB64
 2733 0255 01       		.uleb128 0x1
 2734 0256 9C       		.byte	0x9c
 2735 0257 0C       		.uleb128 0xc
 2736 0258 00020000 		.4byte	.LASF43
 2737 025c 01       		.byte	0x1
 2738 025d 4F       		.byte	0x4f
 2739 025e 00000000 		.4byte	.LFB65
 2740 0262 5C040000 		.4byte	.LFE65-.LFB65
 2741 0266 01       		.uleb128 0x1
 2742 0267 9C       		.byte	0x9c
 2743 0268 B4020000 		.4byte	0x2b4
 2744 026c 0D       		.uleb128 0xd
 2745 026d 6E657700 		.ascii	"new\000"
 2746 0271 01       		.byte	0x1
 2747 0272 51       		.byte	0x51
 2748 0273 AD000000 		.4byte	0xad
 2749 0277 02       		.uleb128 0x2
 2750 0278 91       		.byte	0x91
 2751 0279 4C       		.sleb128 -52
 2752 027a 0E       		.uleb128 0xe
 2753 027b 28000000 		.4byte	.LASF39
 2754 027f 01       		.byte	0x1
 2755 0280 51       		.byte	0x51
 2756 0281 AD000000 		.4byte	0xad
 2757 0285 02       		.uleb128 0x2
 2758 0286 91       		.byte	0x91
 2759 0287 48       		.sleb128 -56
 2760 0288 0E       		.uleb128 0xe
 2761 0289 CA040000 		.4byte	.LASF40
 2762 028d 01       		.byte	0x1
 2763 028e 6B       		.byte	0x6b
 2764 028f CE000000 		.4byte	0xce
 2765 0293 02       		.uleb128 0x2
 2766 0294 91       		.byte	0x91
 2767 0295 50       		.sleb128 -48
 2768 0296 0E       		.uleb128 0xe
 2769 0297 5B040000 		.4byte	.LASF41
 2770 029b 01       		.byte	0x1
 2771 029c 74       		.byte	0x74
 2772 029d C0000000 		.4byte	0xc0
 2773 02a1 02       		.uleb128 0x2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 59


 2774 02a2 91       		.byte	0x91
 2775 02a3 40       		.sleb128 -64
 2776 02a4 0E       		.uleb128 0xe
 2777 02a5 90040000 		.4byte	.LASF42
 2778 02a9 01       		.byte	0x1
 2779 02aa 78       		.byte	0x78
 2780 02ab CE000000 		.4byte	0xce
 2781 02af 03       		.uleb128 0x3
 2782 02b0 91       		.byte	0x91
 2783 02b1 B87F     		.sleb128 -72
 2784 02b3 00       		.byte	0
 2785 02b4 0C       		.uleb128 0xc
 2786 02b5 47010000 		.4byte	.LASF44
 2787 02b9 01       		.byte	0x1
 2788 02ba 7F       		.byte	0x7f
 2789 02bb 00000000 		.4byte	.LFB66
 2790 02bf 54010000 		.4byte	.LFE66-.LFB66
 2791 02c3 01       		.uleb128 0x1
 2792 02c4 9C       		.byte	0x9c
 2793 02c5 D8020000 		.4byte	0x2d8
 2794 02c9 0E       		.uleb128 0xe
 2795 02ca CA040000 		.4byte	.LASF40
 2796 02ce 01       		.byte	0x1
 2797 02cf 80       		.byte	0x80
 2798 02d0 CE000000 		.4byte	0xce
 2799 02d4 02       		.uleb128 0x2
 2800 02d5 91       		.byte	0x91
 2801 02d6 60       		.sleb128 -32
 2802 02d7 00       		.byte	0
 2803 02d8 0C       		.uleb128 0xc
 2804 02d9 D9030000 		.4byte	.LASF45
 2805 02dd 01       		.byte	0x1
 2806 02de 8D       		.byte	0x8d
 2807 02df 00000000 		.4byte	.LFB67
 2808 02e3 74000000 		.4byte	.LFE67-.LFB67
 2809 02e7 01       		.uleb128 0x1
 2810 02e8 9C       		.byte	0x9c
 2811 02e9 FC020000 		.4byte	0x2fc
 2812 02ed 0E       		.uleb128 0xe
 2813 02ee B1040000 		.4byte	.LASF46
 2814 02f2 01       		.byte	0x1
 2815 02f3 8E       		.byte	0x8e
 2816 02f4 CE000000 		.4byte	0xce
 2817 02f8 02       		.uleb128 0x2
 2818 02f9 91       		.byte	0x91
 2819 02fa 68       		.sleb128 -24
 2820 02fb 00       		.byte	0
 2821 02fc 0F       		.uleb128 0xf
 2822 02fd D4030000 		.4byte	.LASF74
 2823 0301 01       		.byte	0x1
 2824 0302 97       		.byte	0x97
 2825 0303 7E000000 		.4byte	0x7e
 2826 0307 00000000 		.4byte	.LFB68
 2827 030b F0080000 		.4byte	.LFE68-.LFB68
 2828 030f 01       		.uleb128 0x1
 2829 0310 9C       		.byte	0x9c
 2830 0311 91040000 		.4byte	0x491
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 60


 2831 0315 0E       		.uleb128 0xe
 2832 0316 1F050000 		.4byte	.LASF47
 2833 031a 01       		.byte	0x1
 2834 031b B0       		.byte	0xb0
 2835 031c CE000000 		.4byte	0xce
 2836 0320 02       		.uleb128 0x2
 2837 0321 91       		.byte	0x91
 2838 0322 50       		.sleb128 -48
 2839 0323 0E       		.uleb128 0xe
 2840 0324 F0020000 		.4byte	.LASF48
 2841 0328 01       		.byte	0x1
 2842 0329 B1       		.byte	0xb1
 2843 032a CE000000 		.4byte	0xce
 2844 032e 02       		.uleb128 0x2
 2845 032f 91       		.byte	0x91
 2846 0330 48       		.sleb128 -56
 2847 0331 0E       		.uleb128 0xe
 2848 0332 50030000 		.4byte	.LASF49
 2849 0336 01       		.byte	0x1
 2850 0337 B2       		.byte	0xb2
 2851 0338 CE000000 		.4byte	0xce
 2852 033c 02       		.uleb128 0x2
 2853 033d 91       		.byte	0x91
 2854 033e 40       		.sleb128 -64
 2855 033f 0E       		.uleb128 0xe
 2856 0340 78030000 		.4byte	.LASF50
 2857 0344 01       		.byte	0x1
 2858 0345 B8       		.byte	0xb8
 2859 0346 CE000000 		.4byte	0xce
 2860 034a 03       		.uleb128 0x3
 2861 034b 91       		.byte	0x91
 2862 034c B87F     		.sleb128 -72
 2863 034e 0E       		.uleb128 0xe
 2864 034f 6B000000 		.4byte	.LASF51
 2865 0353 01       		.byte	0x1
 2866 0354 B9       		.byte	0xb9
 2867 0355 CE000000 		.4byte	0xce
 2868 0359 03       		.uleb128 0x3
 2869 035a 91       		.byte	0x91
 2870 035b B07F     		.sleb128 -80
 2871 035d 0E       		.uleb128 0xe
 2872 035e 00000000 		.4byte	.LASF52
 2873 0362 01       		.byte	0x1
 2874 0363 BA       		.byte	0xba
 2875 0364 CE000000 		.4byte	0xce
 2876 0368 03       		.uleb128 0x3
 2877 0369 91       		.byte	0x91
 2878 036a A87F     		.sleb128 -88
 2879 036c 0E       		.uleb128 0xe
 2880 036d F5040000 		.4byte	.LASF53
 2881 0371 01       		.byte	0x1
 2882 0372 BB       		.byte	0xbb
 2883 0373 CE000000 		.4byte	0xce
 2884 0377 03       		.uleb128 0x3
 2885 0378 91       		.byte	0x91
 2886 0379 A07F     		.sleb128 -96
 2887 037b 0E       		.uleb128 0xe
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 61


 2888 037c 2D000000 		.4byte	.LASF54
 2889 0380 01       		.byte	0x1
 2890 0381 BF       		.byte	0xbf
 2891 0382 CE000000 		.4byte	0xce
 2892 0386 03       		.uleb128 0x3
 2893 0387 91       		.byte	0x91
 2894 0388 987F     		.sleb128 -104
 2895 038a 0E       		.uleb128 0xe
 2896 038b 35000000 		.4byte	.LASF55
 2897 038f 01       		.byte	0x1
 2898 0390 C0       		.byte	0xc0
 2899 0391 CE000000 		.4byte	0xce
 2900 0395 03       		.uleb128 0x3
 2901 0396 91       		.byte	0x91
 2902 0397 907F     		.sleb128 -112
 2903 0399 0E       		.uleb128 0xe
 2904 039a C1040000 		.4byte	.LASF56
 2905 039e 01       		.byte	0x1
 2906 039f C1       		.byte	0xc1
 2907 03a0 CE000000 		.4byte	0xce
 2908 03a4 03       		.uleb128 0x3
 2909 03a5 91       		.byte	0x91
 2910 03a6 887F     		.sleb128 -120
 2911 03a8 0E       		.uleb128 0xe
 2912 03a9 37050000 		.4byte	.LASF57
 2913 03ad 01       		.byte	0x1
 2914 03ae D0       		.byte	0xd0
 2915 03af 7E000000 		.4byte	0x7e
 2916 03b3 03       		.uleb128 0x3
 2917 03b4 91       		.byte	0x91
 2918 03b5 847F     		.sleb128 -124
 2919 03b7 0E       		.uleb128 0xe
 2920 03b8 5A000000 		.4byte	.LASF58
 2921 03bc 01       		.byte	0x1
 2922 03bd D1       		.byte	0xd1
 2923 03be 91040000 		.4byte	0x491
 2924 03c2 03       		.uleb128 0x3
 2925 03c3 91       		.byte	0x91
 2926 03c4 D47E     		.sleb128 -172
 2927 03c6 0E       		.uleb128 0xe
 2928 03c7 A1020000 		.4byte	.LASF59
 2929 03cb 01       		.byte	0x1
 2930 03cc D4       		.byte	0xd4
 2931 03cd 7E000000 		.4byte	0x7e
 2932 03d1 03       		.uleb128 0x3
 2933 03d2 91       		.byte	0x91
 2934 03d3 807F     		.sleb128 -128
 2935 03d5 0E       		.uleb128 0xe
 2936 03d6 18020000 		.4byte	.LASF60
 2937 03da 01       		.byte	0x1
 2938 03db DB       		.byte	0xdb
 2939 03dc B9000000 		.4byte	0xb9
 2940 03e0 02       		.uleb128 0x2
 2941 03e1 91       		.byte	0x91
 2942 03e2 6C       		.sleb128 -20
 2943 03e3 0E       		.uleb128 0xe
 2944 03e4 96040000 		.4byte	.LASF61
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 62


 2945 03e8 01       		.byte	0x1
 2946 03e9 DC       		.byte	0xdc
 2947 03ea 7E000000 		.4byte	0x7e
 2948 03ee 02       		.uleb128 0x2
 2949 03ef 91       		.byte	0x91
 2950 03f0 68       		.sleb128 -24
 2951 03f1 0E       		.uleb128 0xe
 2952 03f2 01040000 		.4byte	.LASF62
 2953 03f6 01       		.byte	0x1
 2954 03f7 E0       		.byte	0xe0
 2955 03f8 B9000000 		.4byte	0xb9
 2956 03fc 03       		.uleb128 0x3
 2957 03fd 91       		.byte	0x91
 2958 03fe FC7E     		.sleb128 -132
 2959 0400 0E       		.uleb128 0xe
 2960 0401 36010000 		.4byte	.LASF63
 2961 0405 01       		.byte	0x1
 2962 0406 E1       		.byte	0xe1
 2963 0407 B9000000 		.4byte	0xb9
 2964 040b 03       		.uleb128 0x3
 2965 040c 91       		.byte	0x91
 2966 040d F87E     		.sleb128 -136
 2967 040f 0E       		.uleb128 0xe
 2968 0410 F2010000 		.4byte	.LASF64
 2969 0414 01       		.byte	0x1
 2970 0415 E4       		.byte	0xe4
 2971 0416 B9000000 		.4byte	0xb9
 2972 041a 02       		.uleb128 0x2
 2973 041b 91       		.byte	0x91
 2974 041c 64       		.sleb128 -28
 2975 041d 0E       		.uleb128 0xe
 2976 041e 79010000 		.4byte	.LASF65
 2977 0422 01       		.byte	0x1
 2978 0423 E5       		.byte	0xe5
 2979 0424 B9000000 		.4byte	0xb9
 2980 0428 03       		.uleb128 0x3
 2981 0429 91       		.byte	0x91
 2982 042a F47E     		.sleb128 -140
 2983 042c 0E       		.uleb128 0xe
 2984 042d C4020000 		.4byte	.LASF66
 2985 0431 01       		.byte	0x1
 2986 0432 E6       		.byte	0xe6
 2987 0433 7E000000 		.4byte	0x7e
 2988 0437 03       		.uleb128 0x3
 2989 0438 91       		.byte	0x91
 2990 0439 F07E     		.sleb128 -144
 2991 043b 0E       		.uleb128 0xe
 2992 043c F5030000 		.4byte	.LASF67
 2993 0440 01       		.byte	0x1
 2994 0441 E9       		.byte	0xe9
 2995 0442 7E000000 		.4byte	0x7e
 2996 0446 02       		.uleb128 0x2
 2997 0447 91       		.byte	0x91
 2998 0448 60       		.sleb128 -32
 2999 0449 0E       		.uleb128 0xe
 3000 044a 89040000 		.4byte	.LASF68
 3001 044e 01       		.byte	0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 63


 3002 044f EA       		.byte	0xea
 3003 0450 7E000000 		.4byte	0x7e
 3004 0454 02       		.uleb128 0x2
 3005 0455 91       		.byte	0x91
 3006 0456 5C       		.sleb128 -36
 3007 0457 0E       		.uleb128 0xe
 3008 0458 3E010000 		.4byte	.LASF69
 3009 045c 01       		.byte	0x1
 3010 045d ED       		.byte	0xed
 3011 045e 7E000000 		.4byte	0x7e
 3012 0462 03       		.uleb128 0x3
 3013 0463 91       		.byte	0x91
 3014 0464 EC7E     		.sleb128 -148
 3015 0466 10       		.uleb128 0x10
 3016 0467 C0010000 		.4byte	.LBB2
 3017 046b 10070000 		.4byte	.LBE2-.LBB2
 3018 046f 11       		.uleb128 0x11
 3019 0470 CA040000 		.4byte	.LASF40
 3020 0474 01       		.byte	0x1
 3021 0475 9C01     		.2byte	0x19c
 3022 0477 B9000000 		.4byte	0xb9
 3023 047b 03       		.uleb128 0x3
 3024 047c 91       		.byte	0x91
 3025 047d E87E     		.sleb128 -152
 3026 047f 11       		.uleb128 0x11
 3027 0480 A9010000 		.4byte	.LASF70
 3028 0484 01       		.byte	0x1
 3029 0485 9D01     		.2byte	0x19d
 3030 0487 7E000000 		.4byte	0x7e
 3031 048b 03       		.uleb128 0x3
 3032 048c 91       		.byte	0x91
 3033 048d E47E     		.sleb128 -156
 3034 048f 00       		.byte	0
 3035 0490 00       		.byte	0
 3036 0491 08       		.uleb128 0x8
 3037 0492 7E000000 		.4byte	0x7e
 3038 0496 A1040000 		.4byte	0x4a1
 3039 049a 09       		.uleb128 0x9
 3040 049b D5000000 		.4byte	0xd5
 3041 049f 03       		.byte	0x3
 3042 04a0 00       		.byte	0
 3043 04a1 12       		.uleb128 0x12
 3044 04a2 5C010000 		.4byte	.LASF71
 3045 04a6 01       		.byte	0x1
 3046 04a7 C401     		.2byte	0x1c4
 3047 04a9 00000000 		.4byte	.LFB69
 3048 04ad D8000000 		.4byte	.LFE69-.LFB69
 3049 04b1 01       		.uleb128 0x1
 3050 04b2 9C       		.byte	0x9c
 3051 04b3 C7040000 		.4byte	0x4c7
 3052 04b7 13       		.uleb128 0x13
 3053 04b8 64040000 		.4byte	.LASF24
 3054 04bc 01       		.byte	0x1
 3055 04bd C401     		.2byte	0x1c4
 3056 04bf CE000000 		.4byte	0xce
 3057 04c3 02       		.uleb128 0x2
 3058 04c4 91       		.byte	0x91
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 64


 3059 04c5 68       		.sleb128 -24
 3060 04c6 00       		.byte	0
 3061 04c7 12       		.uleb128 0x12
 3062 04c8 93030000 		.4byte	.LASF72
 3063 04cc 01       		.byte	0x1
 3064 04cd D501     		.2byte	0x1d5
 3065 04cf 00000000 		.4byte	.LFB70
 3066 04d3 D8000000 		.4byte	.LFE70-.LFB70
 3067 04d7 01       		.uleb128 0x1
 3068 04d8 9C       		.byte	0x9c
 3069 04d9 ED040000 		.4byte	0x4ed
 3070 04dd 13       		.uleb128 0x13
 3071 04de 64040000 		.4byte	.LASF24
 3072 04e2 01       		.byte	0x1
 3073 04e3 D501     		.2byte	0x1d5
 3074 04e5 CE000000 		.4byte	0xce
 3075 04e9 02       		.uleb128 0x2
 3076 04ea 91       		.byte	0x91
 3077 04eb 68       		.sleb128 -24
 3078 04ec 00       		.byte	0
 3079 04ed 12       		.uleb128 0x12
 3080 04ee B9020000 		.4byte	.LASF73
 3081 04f2 01       		.byte	0x1
 3082 04f3 E601     		.2byte	0x1e6
 3083 04f5 00000000 		.4byte	.LFB71
 3084 04f9 74000000 		.4byte	.LFE71-.LFB71
 3085 04fd 01       		.uleb128 0x1
 3086 04fe 9C       		.byte	0x9c
 3087 04ff 13050000 		.4byte	0x513
 3088 0503 13       		.uleb128 0x13
 3089 0504 B1040000 		.4byte	.LASF46
 3090 0508 01       		.byte	0x1
 3091 0509 E601     		.2byte	0x1e6
 3092 050b CE000000 		.4byte	0xce
 3093 050f 02       		.uleb128 0x2
 3094 0510 91       		.byte	0x91
 3095 0511 60       		.sleb128 -32
 3096 0512 00       		.byte	0
 3097 0513 14       		.uleb128 0x14
 3098 0514 25010000 		.4byte	.LASF75
 3099 0518 01       		.byte	0x1
 3100 0519 EE01     		.2byte	0x1ee
 3101 051b 7E000000 		.4byte	0x7e
 3102 051f 00000000 		.4byte	.LFB72
 3103 0523 6C000000 		.4byte	.LFE72-.LFB72
 3104 0527 01       		.uleb128 0x1
 3105 0528 9C       		.byte	0x9c
 3106 0529 6A050000 		.4byte	0x56a
 3107 052d 13       		.uleb128 0x13
 3108 052e 95010000 		.4byte	.LASF76
 3109 0532 01       		.byte	0x1
 3110 0533 EE01     		.2byte	0x1ee
 3111 0535 7E000000 		.4byte	0x7e
 3112 0539 02       		.uleb128 0x2
 3113 053a 91       		.byte	0x91
 3114 053b 5C       		.sleb128 -36
 3115 053c 11       		.uleb128 0x11
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 65


 3116 053d 6F030000 		.4byte	.LASF77
 3117 0541 01       		.byte	0x1
 3118 0542 F001     		.2byte	0x1f0
 3119 0544 7E000000 		.4byte	0x7e
 3120 0548 02       		.uleb128 0x2
 3121 0549 91       		.byte	0x91
 3122 054a 6C       		.sleb128 -20
 3123 054b 11       		.uleb128 0x11
 3124 054c D7020000 		.4byte	.LASF78
 3125 0550 01       		.byte	0x1
 3126 0551 F101     		.2byte	0x1f1
 3127 0553 7E000000 		.4byte	0x7e
 3128 0557 02       		.uleb128 0x2
 3129 0558 91       		.byte	0x91
 3130 0559 68       		.sleb128 -24
 3131 055a 11       		.uleb128 0x11
 3132 055b 3E010000 		.4byte	.LASF69
 3133 055f 01       		.byte	0x1
 3134 0560 F201     		.2byte	0x1f2
 3135 0562 7E000000 		.4byte	0x7e
 3136 0566 02       		.uleb128 0x2
 3137 0567 91       		.byte	0x91
 3138 0568 64       		.sleb128 -28
 3139 0569 00       		.byte	0
 3140 056a 12       		.uleb128 0x12
 3141 056b 60000000 		.4byte	.LASF79
 3142 056f 01       		.byte	0x1
 3143 0570 F501     		.2byte	0x1f5
 3144 0572 00000000 		.4byte	.LFB73
 3145 0576 8A000000 		.4byte	.LFE73-.LFB73
 3146 057a 01       		.uleb128 0x1
 3147 057b 9C       		.byte	0x9c
 3148 057c BD050000 		.4byte	0x5bd
 3149 0580 13       		.uleb128 0x13
 3150 0581 2D050000 		.4byte	.LASF80
 3151 0585 01       		.byte	0x1
 3152 0586 F501     		.2byte	0x1f5
 3153 0588 7E000000 		.4byte	0x7e
 3154 058c 02       		.uleb128 0x2
 3155 058d 91       		.byte	0x91
 3156 058e 6C       		.sleb128 -20
 3157 058f 15       		.uleb128 0x15
 3158 0590 64697200 		.ascii	"dir\000"
 3159 0594 01       		.byte	0x1
 3160 0595 F501     		.2byte	0x1f5
 3161 0597 7E000000 		.4byte	0x7e
 3162 059b 02       		.uleb128 0x2
 3163 059c 91       		.byte	0x91
 3164 059d 68       		.sleb128 -24
 3165 059e 11       		.uleb128 0x11
 3166 059f D0040000 		.4byte	.LASF81
 3167 05a3 01       		.byte	0x1
 3168 05a4 F601     		.2byte	0x1f6
 3169 05a6 7E000000 		.4byte	0x7e
 3170 05aa 02       		.uleb128 0x2
 3171 05ab 91       		.byte	0x91
 3172 05ac 74       		.sleb128 -12
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 66


 3173 05ad 11       		.uleb128 0x11
 3174 05ae D7040000 		.4byte	.LASF82
 3175 05b2 01       		.byte	0x1
 3176 05b3 F601     		.2byte	0x1f6
 3177 05b5 7E000000 		.4byte	0x7e
 3178 05b9 02       		.uleb128 0x2
 3179 05ba 91       		.byte	0x91
 3180 05bb 70       		.sleb128 -16
 3181 05bc 00       		.byte	0
 3182 05bd 16       		.uleb128 0x16
 3183 05be E8040000 		.4byte	.LASF83
 3184 05c2 07       		.byte	0x7
 3185 05c3 1207     		.2byte	0x712
 3186 05c5 C9050000 		.4byte	0x5c9
 3187 05c9 17       		.uleb128 0x17
 3188 05ca A2000000 		.4byte	0xa2
 3189 05ce 18       		.uleb128 0x18
 3190 05cf 02050000 		.4byte	.LASF84
 3191 05d3 01       		.byte	0x1
 3192 05d4 25       		.byte	0x25
 3193 05d5 DF050000 		.4byte	0x5df
 3194 05d9 05       		.uleb128 0x5
 3195 05da 03       		.byte	0x3
 3196 05db 00000000 		.4byte	PULSES_PER_REV
 3197 05df 19       		.uleb128 0x19
 3198 05e0 C0000000 		.4byte	0xc0
 3199 05e4 18       		.uleb128 0x18
 3200 05e5 47000000 		.4byte	.LASF85
 3201 05e9 01       		.byte	0x1
 3202 05ea 26       		.byte	0x26
 3203 05eb DF050000 		.4byte	0x5df
 3204 05ef 05       		.uleb128 0x5
 3205 05f0 03       		.byte	0x3
 3206 05f1 00000000 		.4byte	POSE_UPDATE_PERIOD
 3207 05f5 18       		.uleb128 0x18
 3208 05f6 07030000 		.4byte	.LASF86
 3209 05fa 01       		.byte	0x1
 3210 05fb 28       		.byte	0x28
 3211 05fc 8C000000 		.4byte	0x8c
 3212 0600 05       		.uleb128 0x5
 3213 0601 03       		.byte	0x3
 3214 0602 00000000 		.4byte	echo_flag
 3215 0606 18       		.uleb128 0x18
 3216 0607 89030000 		.4byte	.LASF87
 3217 060b 01       		.byte	0x1
 3218 060c 29       		.byte	0x29
 3219 060d 97000000 		.4byte	0x97
 3220 0611 05       		.uleb128 0x5
 3221 0612 03       		.byte	0x3
 3222 0613 00000000 		.4byte	max_count
 3223 0617 18       		.uleb128 0x18
 3224 0618 93020000 		.4byte	.LASF88
 3225 061c 01       		.byte	0x1
 3226 061d 2A       		.byte	0x2a
 3227 061e 97000000 		.4byte	0x97
 3228 0622 05       		.uleb128 0x5
 3229 0623 03       		.byte	0x3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 67


 3230 0624 00000000 		.4byte	echo_distance
 3231 0628 18       		.uleb128 0x18
 3232 0629 D9010000 		.4byte	.LASF89
 3233 062d 01       		.byte	0x1
 3234 062e 2B       		.byte	0x2b
 3235 062f 8C000000 		.4byte	0x8c
 3236 0633 05       		.uleb128 0x5
 3237 0634 03       		.byte	0x3
 3238 0635 00000000 		.4byte	mux_select
 3239 0639 18       		.uleb128 0x18
 3240 063a 2B040000 		.4byte	.LASF90
 3241 063e 01       		.byte	0x1
 3242 063f 2D       		.byte	0x2d
 3243 0640 AD000000 		.4byte	0xad
 3244 0644 05       		.uleb128 0x5
 3245 0645 03       		.byte	0x3
 3246 0646 00000000 		.4byte	left_wheel_count
 3247 064a 18       		.uleb128 0x18
 3248 064b 19040000 		.4byte	.LASF91
 3249 064f 01       		.byte	0x1
 3250 0650 2E       		.byte	0x2e
 3251 0651 AD000000 		.4byte	0xad
 3252 0655 05       		.uleb128 0x5
 3253 0656 03       		.byte	0x3
 3254 0657 00000000 		.4byte	right_wheel_count
 3255 065b 08       		.uleb128 0x8
 3256 065c C7000000 		.4byte	0xc7
 3257 0660 6B060000 		.4byte	0x66b
 3258 0664 09       		.uleb128 0x9
 3259 0665 D5000000 		.4byte	0xd5
 3260 0669 95       		.byte	0x95
 3261 066a 00       		.byte	0
 3262 066b 18       		.uleb128 0x18
 3263 066c C6030000 		.4byte	.LASF92
 3264 0670 01       		.byte	0x1
 3265 0671 2F       		.byte	0x2f
 3266 0672 5B060000 		.4byte	0x65b
 3267 0676 05       		.uleb128 0x5
 3268 0677 03       		.byte	0x3
 3269 0678 00000000 		.4byte	serial_output
 3270 067c 18       		.uleb128 0x18
 3271 067d BF010000 		.4byte	.LASF93
 3272 0681 01       		.byte	0x1
 3273 0682 30       		.byte	0x30
 3274 0683 7E000000 		.4byte	0x7e
 3275 0687 05       		.uleb128 0x5
 3276 0688 03       		.byte	0x3
 3277 0689 00000000 		.4byte	wall_following_flag
 3278 068d 18       		.uleb128 0x18
 3279 068e 82010000 		.4byte	.LASF94
 3280 0692 01       		.byte	0x1
 3281 0693 33       		.byte	0x33
 3282 0694 89010000 		.4byte	0x189
 3283 0698 05       		.uleb128 0x5
 3284 0699 03       		.byte	0x3
 3285 069a 00000000 		.4byte	left_motor
 3286 069e 18       		.uleb128 0x18
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 68


 3287 069f 6D010000 		.4byte	.LASF95
 3288 06a3 01       		.byte	0x1
 3289 06a4 34       		.byte	0x34
 3290 06a5 89010000 		.4byte	0x189
 3291 06a9 05       		.uleb128 0x5
 3292 06aa 03       		.byte	0x3
 3293 06ab 00000000 		.4byte	right_motor
 3294 06af 18       		.uleb128 0x18
 3295 06b0 14000000 		.4byte	.LASF96
 3296 06b4 01       		.byte	0x1
 3297 06b5 35       		.byte	0x35
 3298 06b6 3B020000 		.4byte	0x23b
 3299 06ba 05       		.uleb128 0x5
 3300 06bb 03       		.byte	0x3
 3301 06bc 00000000 		.4byte	robot
 3302 06c0 18       		.uleb128 0x18
 3303 06c1 74000000 		.4byte	.LASF97
 3304 06c5 01       		.byte	0x1
 3305 06c6 36       		.byte	0x36
 3306 06c7 0D010000 		.4byte	0x10d
 3307 06cb 05       		.uleb128 0x5
 3308 06cc 03       		.byte	0x3
 3309 06cd 00000000 		.4byte	sensors
 3310 06d1 00       		.byte	0
 3311              		.section	.debug_abbrev,"",%progbits
 3312              	.Ldebug_abbrev0:
 3313 0000 01       		.uleb128 0x1
 3314 0001 11       		.uleb128 0x11
 3315 0002 01       		.byte	0x1
 3316 0003 25       		.uleb128 0x25
 3317 0004 0E       		.uleb128 0xe
 3318 0005 13       		.uleb128 0x13
 3319 0006 0B       		.uleb128 0xb
 3320 0007 03       		.uleb128 0x3
 3321 0008 0E       		.uleb128 0xe
 3322 0009 1B       		.uleb128 0x1b
 3323 000a 0E       		.uleb128 0xe
 3324 000b 55       		.uleb128 0x55
 3325 000c 17       		.uleb128 0x17
 3326 000d 11       		.uleb128 0x11
 3327 000e 01       		.uleb128 0x1
 3328 000f 10       		.uleb128 0x10
 3329 0010 17       		.uleb128 0x17
 3330 0011 00       		.byte	0
 3331 0012 00       		.byte	0
 3332 0013 02       		.uleb128 0x2
 3333 0014 24       		.uleb128 0x24
 3334 0015 00       		.byte	0
 3335 0016 0B       		.uleb128 0xb
 3336 0017 0B       		.uleb128 0xb
 3337 0018 3E       		.uleb128 0x3e
 3338 0019 0B       		.uleb128 0xb
 3339 001a 03       		.uleb128 0x3
 3340 001b 0E       		.uleb128 0xe
 3341 001c 00       		.byte	0
 3342 001d 00       		.byte	0
 3343 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 69


 3344 001f 16       		.uleb128 0x16
 3345 0020 00       		.byte	0
 3346 0021 03       		.uleb128 0x3
 3347 0022 0E       		.uleb128 0xe
 3348 0023 3A       		.uleb128 0x3a
 3349 0024 0B       		.uleb128 0xb
 3350 0025 3B       		.uleb128 0x3b
 3351 0026 0B       		.uleb128 0xb
 3352 0027 49       		.uleb128 0x49
 3353 0028 13       		.uleb128 0x13
 3354 0029 00       		.byte	0
 3355 002a 00       		.byte	0
 3356 002b 04       		.uleb128 0x4
 3357 002c 24       		.uleb128 0x24
 3358 002d 00       		.byte	0
 3359 002e 0B       		.uleb128 0xb
 3360 002f 0B       		.uleb128 0xb
 3361 0030 3E       		.uleb128 0x3e
 3362 0031 0B       		.uleb128 0xb
 3363 0032 03       		.uleb128 0x3
 3364 0033 08       		.uleb128 0x8
 3365 0034 00       		.byte	0
 3366 0035 00       		.byte	0
 3367 0036 05       		.uleb128 0x5
 3368 0037 16       		.uleb128 0x16
 3369 0038 00       		.byte	0
 3370 0039 03       		.uleb128 0x3
 3371 003a 0E       		.uleb128 0xe
 3372 003b 3A       		.uleb128 0x3a
 3373 003c 0B       		.uleb128 0xb
 3374 003d 3B       		.uleb128 0x3b
 3375 003e 05       		.uleb128 0x5
 3376 003f 49       		.uleb128 0x49
 3377 0040 13       		.uleb128 0x13
 3378 0041 00       		.byte	0
 3379 0042 00       		.byte	0
 3380 0043 06       		.uleb128 0x6
 3381 0044 13       		.uleb128 0x13
 3382 0045 01       		.byte	0x1
 3383 0046 0B       		.uleb128 0xb
 3384 0047 0B       		.uleb128 0xb
 3385 0048 3A       		.uleb128 0x3a
 3386 0049 0B       		.uleb128 0xb
 3387 004a 3B       		.uleb128 0x3b
 3388 004b 0B       		.uleb128 0xb
 3389 004c 01       		.uleb128 0x1
 3390 004d 13       		.uleb128 0x13
 3391 004e 00       		.byte	0
 3392 004f 00       		.byte	0
 3393 0050 07       		.uleb128 0x7
 3394 0051 0D       		.uleb128 0xd
 3395 0052 00       		.byte	0
 3396 0053 03       		.uleb128 0x3
 3397 0054 0E       		.uleb128 0xe
 3398 0055 3A       		.uleb128 0x3a
 3399 0056 0B       		.uleb128 0xb
 3400 0057 3B       		.uleb128 0x3b
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 70


 3401 0058 0B       		.uleb128 0xb
 3402 0059 49       		.uleb128 0x49
 3403 005a 13       		.uleb128 0x13
 3404 005b 38       		.uleb128 0x38
 3405 005c 0B       		.uleb128 0xb
 3406 005d 00       		.byte	0
 3407 005e 00       		.byte	0
 3408 005f 08       		.uleb128 0x8
 3409 0060 01       		.uleb128 0x1
 3410 0061 01       		.byte	0x1
 3411 0062 49       		.uleb128 0x49
 3412 0063 13       		.uleb128 0x13
 3413 0064 01       		.uleb128 0x1
 3414 0065 13       		.uleb128 0x13
 3415 0066 00       		.byte	0
 3416 0067 00       		.byte	0
 3417 0068 09       		.uleb128 0x9
 3418 0069 21       		.uleb128 0x21
 3419 006a 00       		.byte	0
 3420 006b 49       		.uleb128 0x49
 3421 006c 13       		.uleb128 0x13
 3422 006d 2F       		.uleb128 0x2f
 3423 006e 0B       		.uleb128 0xb
 3424 006f 00       		.byte	0
 3425 0070 00       		.byte	0
 3426 0071 0A       		.uleb128 0xa
 3427 0072 0D       		.uleb128 0xd
 3428 0073 00       		.byte	0
 3429 0074 03       		.uleb128 0x3
 3430 0075 08       		.uleb128 0x8
 3431 0076 3A       		.uleb128 0x3a
 3432 0077 0B       		.uleb128 0xb
 3433 0078 3B       		.uleb128 0x3b
 3434 0079 0B       		.uleb128 0xb
 3435 007a 49       		.uleb128 0x49
 3436 007b 13       		.uleb128 0x13
 3437 007c 38       		.uleb128 0x38
 3438 007d 0B       		.uleb128 0xb
 3439 007e 00       		.byte	0
 3440 007f 00       		.byte	0
 3441 0080 0B       		.uleb128 0xb
 3442 0081 2E       		.uleb128 0x2e
 3443 0082 00       		.byte	0
 3444 0083 3F       		.uleb128 0x3f
 3445 0084 19       		.uleb128 0x19
 3446 0085 03       		.uleb128 0x3
 3447 0086 0E       		.uleb128 0xe
 3448 0087 3A       		.uleb128 0x3a
 3449 0088 0B       		.uleb128 0xb
 3450 0089 3B       		.uleb128 0x3b
 3451 008a 0B       		.uleb128 0xb
 3452 008b 27       		.uleb128 0x27
 3453 008c 19       		.uleb128 0x19
 3454 008d 11       		.uleb128 0x11
 3455 008e 01       		.uleb128 0x1
 3456 008f 12       		.uleb128 0x12
 3457 0090 06       		.uleb128 0x6
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 71


 3458 0091 40       		.uleb128 0x40
 3459 0092 18       		.uleb128 0x18
 3460 0093 9642     		.uleb128 0x2116
 3461 0095 19       		.uleb128 0x19
 3462 0096 00       		.byte	0
 3463 0097 00       		.byte	0
 3464 0098 0C       		.uleb128 0xc
 3465 0099 2E       		.uleb128 0x2e
 3466 009a 01       		.byte	0x1
 3467 009b 3F       		.uleb128 0x3f
 3468 009c 19       		.uleb128 0x19
 3469 009d 03       		.uleb128 0x3
 3470 009e 0E       		.uleb128 0xe
 3471 009f 3A       		.uleb128 0x3a
 3472 00a0 0B       		.uleb128 0xb
 3473 00a1 3B       		.uleb128 0x3b
 3474 00a2 0B       		.uleb128 0xb
 3475 00a3 27       		.uleb128 0x27
 3476 00a4 19       		.uleb128 0x19
 3477 00a5 11       		.uleb128 0x11
 3478 00a6 01       		.uleb128 0x1
 3479 00a7 12       		.uleb128 0x12
 3480 00a8 06       		.uleb128 0x6
 3481 00a9 40       		.uleb128 0x40
 3482 00aa 18       		.uleb128 0x18
 3483 00ab 9642     		.uleb128 0x2116
 3484 00ad 19       		.uleb128 0x19
 3485 00ae 01       		.uleb128 0x1
 3486 00af 13       		.uleb128 0x13
 3487 00b0 00       		.byte	0
 3488 00b1 00       		.byte	0
 3489 00b2 0D       		.uleb128 0xd
 3490 00b3 34       		.uleb128 0x34
 3491 00b4 00       		.byte	0
 3492 00b5 03       		.uleb128 0x3
 3493 00b6 08       		.uleb128 0x8
 3494 00b7 3A       		.uleb128 0x3a
 3495 00b8 0B       		.uleb128 0xb
 3496 00b9 3B       		.uleb128 0x3b
 3497 00ba 0B       		.uleb128 0xb
 3498 00bb 49       		.uleb128 0x49
 3499 00bc 13       		.uleb128 0x13
 3500 00bd 02       		.uleb128 0x2
 3501 00be 18       		.uleb128 0x18
 3502 00bf 00       		.byte	0
 3503 00c0 00       		.byte	0
 3504 00c1 0E       		.uleb128 0xe
 3505 00c2 34       		.uleb128 0x34
 3506 00c3 00       		.byte	0
 3507 00c4 03       		.uleb128 0x3
 3508 00c5 0E       		.uleb128 0xe
 3509 00c6 3A       		.uleb128 0x3a
 3510 00c7 0B       		.uleb128 0xb
 3511 00c8 3B       		.uleb128 0x3b
 3512 00c9 0B       		.uleb128 0xb
 3513 00ca 49       		.uleb128 0x49
 3514 00cb 13       		.uleb128 0x13
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 72


 3515 00cc 02       		.uleb128 0x2
 3516 00cd 18       		.uleb128 0x18
 3517 00ce 00       		.byte	0
 3518 00cf 00       		.byte	0
 3519 00d0 0F       		.uleb128 0xf
 3520 00d1 2E       		.uleb128 0x2e
 3521 00d2 01       		.byte	0x1
 3522 00d3 3F       		.uleb128 0x3f
 3523 00d4 19       		.uleb128 0x19
 3524 00d5 03       		.uleb128 0x3
 3525 00d6 0E       		.uleb128 0xe
 3526 00d7 3A       		.uleb128 0x3a
 3527 00d8 0B       		.uleb128 0xb
 3528 00d9 3B       		.uleb128 0x3b
 3529 00da 0B       		.uleb128 0xb
 3530 00db 27       		.uleb128 0x27
 3531 00dc 19       		.uleb128 0x19
 3532 00dd 49       		.uleb128 0x49
 3533 00de 13       		.uleb128 0x13
 3534 00df 11       		.uleb128 0x11
 3535 00e0 01       		.uleb128 0x1
 3536 00e1 12       		.uleb128 0x12
 3537 00e2 06       		.uleb128 0x6
 3538 00e3 40       		.uleb128 0x40
 3539 00e4 18       		.uleb128 0x18
 3540 00e5 9642     		.uleb128 0x2116
 3541 00e7 19       		.uleb128 0x19
 3542 00e8 01       		.uleb128 0x1
 3543 00e9 13       		.uleb128 0x13
 3544 00ea 00       		.byte	0
 3545 00eb 00       		.byte	0
 3546 00ec 10       		.uleb128 0x10
 3547 00ed 0B       		.uleb128 0xb
 3548 00ee 01       		.byte	0x1
 3549 00ef 11       		.uleb128 0x11
 3550 00f0 01       		.uleb128 0x1
 3551 00f1 12       		.uleb128 0x12
 3552 00f2 06       		.uleb128 0x6
 3553 00f3 00       		.byte	0
 3554 00f4 00       		.byte	0
 3555 00f5 11       		.uleb128 0x11
 3556 00f6 34       		.uleb128 0x34
 3557 00f7 00       		.byte	0
 3558 00f8 03       		.uleb128 0x3
 3559 00f9 0E       		.uleb128 0xe
 3560 00fa 3A       		.uleb128 0x3a
 3561 00fb 0B       		.uleb128 0xb
 3562 00fc 3B       		.uleb128 0x3b
 3563 00fd 05       		.uleb128 0x5
 3564 00fe 49       		.uleb128 0x49
 3565 00ff 13       		.uleb128 0x13
 3566 0100 02       		.uleb128 0x2
 3567 0101 18       		.uleb128 0x18
 3568 0102 00       		.byte	0
 3569 0103 00       		.byte	0
 3570 0104 12       		.uleb128 0x12
 3571 0105 2E       		.uleb128 0x2e
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 73


 3572 0106 01       		.byte	0x1
 3573 0107 3F       		.uleb128 0x3f
 3574 0108 19       		.uleb128 0x19
 3575 0109 03       		.uleb128 0x3
 3576 010a 0E       		.uleb128 0xe
 3577 010b 3A       		.uleb128 0x3a
 3578 010c 0B       		.uleb128 0xb
 3579 010d 3B       		.uleb128 0x3b
 3580 010e 05       		.uleb128 0x5
 3581 010f 27       		.uleb128 0x27
 3582 0110 19       		.uleb128 0x19
 3583 0111 11       		.uleb128 0x11
 3584 0112 01       		.uleb128 0x1
 3585 0113 12       		.uleb128 0x12
 3586 0114 06       		.uleb128 0x6
 3587 0115 40       		.uleb128 0x40
 3588 0116 18       		.uleb128 0x18
 3589 0117 9642     		.uleb128 0x2116
 3590 0119 19       		.uleb128 0x19
 3591 011a 01       		.uleb128 0x1
 3592 011b 13       		.uleb128 0x13
 3593 011c 00       		.byte	0
 3594 011d 00       		.byte	0
 3595 011e 13       		.uleb128 0x13
 3596 011f 05       		.uleb128 0x5
 3597 0120 00       		.byte	0
 3598 0121 03       		.uleb128 0x3
 3599 0122 0E       		.uleb128 0xe
 3600 0123 3A       		.uleb128 0x3a
 3601 0124 0B       		.uleb128 0xb
 3602 0125 3B       		.uleb128 0x3b
 3603 0126 05       		.uleb128 0x5
 3604 0127 49       		.uleb128 0x49
 3605 0128 13       		.uleb128 0x13
 3606 0129 02       		.uleb128 0x2
 3607 012a 18       		.uleb128 0x18
 3608 012b 00       		.byte	0
 3609 012c 00       		.byte	0
 3610 012d 14       		.uleb128 0x14
 3611 012e 2E       		.uleb128 0x2e
 3612 012f 01       		.byte	0x1
 3613 0130 3F       		.uleb128 0x3f
 3614 0131 19       		.uleb128 0x19
 3615 0132 03       		.uleb128 0x3
 3616 0133 0E       		.uleb128 0xe
 3617 0134 3A       		.uleb128 0x3a
 3618 0135 0B       		.uleb128 0xb
 3619 0136 3B       		.uleb128 0x3b
 3620 0137 05       		.uleb128 0x5
 3621 0138 27       		.uleb128 0x27
 3622 0139 19       		.uleb128 0x19
 3623 013a 49       		.uleb128 0x49
 3624 013b 13       		.uleb128 0x13
 3625 013c 11       		.uleb128 0x11
 3626 013d 01       		.uleb128 0x1
 3627 013e 12       		.uleb128 0x12
 3628 013f 06       		.uleb128 0x6
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 74


 3629 0140 40       		.uleb128 0x40
 3630 0141 18       		.uleb128 0x18
 3631 0142 9642     		.uleb128 0x2116
 3632 0144 19       		.uleb128 0x19
 3633 0145 01       		.uleb128 0x1
 3634 0146 13       		.uleb128 0x13
 3635 0147 00       		.byte	0
 3636 0148 00       		.byte	0
 3637 0149 15       		.uleb128 0x15
 3638 014a 05       		.uleb128 0x5
 3639 014b 00       		.byte	0
 3640 014c 03       		.uleb128 0x3
 3641 014d 08       		.uleb128 0x8
 3642 014e 3A       		.uleb128 0x3a
 3643 014f 0B       		.uleb128 0xb
 3644 0150 3B       		.uleb128 0x3b
 3645 0151 05       		.uleb128 0x5
 3646 0152 49       		.uleb128 0x49
 3647 0153 13       		.uleb128 0x13
 3648 0154 02       		.uleb128 0x2
 3649 0155 18       		.uleb128 0x18
 3650 0156 00       		.byte	0
 3651 0157 00       		.byte	0
 3652 0158 16       		.uleb128 0x16
 3653 0159 34       		.uleb128 0x34
 3654 015a 00       		.byte	0
 3655 015b 03       		.uleb128 0x3
 3656 015c 0E       		.uleb128 0xe
 3657 015d 3A       		.uleb128 0x3a
 3658 015e 0B       		.uleb128 0xb
 3659 015f 3B       		.uleb128 0x3b
 3660 0160 05       		.uleb128 0x5
 3661 0161 49       		.uleb128 0x49
 3662 0162 13       		.uleb128 0x13
 3663 0163 3F       		.uleb128 0x3f
 3664 0164 19       		.uleb128 0x19
 3665 0165 3C       		.uleb128 0x3c
 3666 0166 19       		.uleb128 0x19
 3667 0167 00       		.byte	0
 3668 0168 00       		.byte	0
 3669 0169 17       		.uleb128 0x17
 3670 016a 35       		.uleb128 0x35
 3671 016b 00       		.byte	0
 3672 016c 49       		.uleb128 0x49
 3673 016d 13       		.uleb128 0x13
 3674 016e 00       		.byte	0
 3675 016f 00       		.byte	0
 3676 0170 18       		.uleb128 0x18
 3677 0171 34       		.uleb128 0x34
 3678 0172 00       		.byte	0
 3679 0173 03       		.uleb128 0x3
 3680 0174 0E       		.uleb128 0xe
 3681 0175 3A       		.uleb128 0x3a
 3682 0176 0B       		.uleb128 0xb
 3683 0177 3B       		.uleb128 0x3b
 3684 0178 0B       		.uleb128 0xb
 3685 0179 49       		.uleb128 0x49
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 75


 3686 017a 13       		.uleb128 0x13
 3687 017b 3F       		.uleb128 0x3f
 3688 017c 19       		.uleb128 0x19
 3689 017d 02       		.uleb128 0x2
 3690 017e 18       		.uleb128 0x18
 3691 017f 00       		.byte	0
 3692 0180 00       		.byte	0
 3693 0181 19       		.uleb128 0x19
 3694 0182 26       		.uleb128 0x26
 3695 0183 00       		.byte	0
 3696 0184 49       		.uleb128 0x49
 3697 0185 13       		.uleb128 0x13
 3698 0186 00       		.byte	0
 3699 0187 00       		.byte	0
 3700 0188 00       		.byte	0
 3701              		.section	.debug_aranges,"",%progbits
 3702 0000 64000000 		.4byte	0x64
 3703 0004 0200     		.2byte	0x2
 3704 0006 00000000 		.4byte	.Ldebug_info0
 3705 000a 04       		.byte	0x4
 3706 000b 00       		.byte	0
 3707 000c 0000     		.2byte	0
 3708 000e 0000     		.2byte	0
 3709 0010 00000000 		.4byte	.LFB64
 3710 0014 74000000 		.4byte	.LFE64-.LFB64
 3711 0018 00000000 		.4byte	.LFB65
 3712 001c 5C040000 		.4byte	.LFE65-.LFB65
 3713 0020 00000000 		.4byte	.LFB66
 3714 0024 54010000 		.4byte	.LFE66-.LFB66
 3715 0028 00000000 		.4byte	.LFB67
 3716 002c 74000000 		.4byte	.LFE67-.LFB67
 3717 0030 00000000 		.4byte	.LFB68
 3718 0034 F0080000 		.4byte	.LFE68-.LFB68
 3719 0038 00000000 		.4byte	.LFB69
 3720 003c D8000000 		.4byte	.LFE69-.LFB69
 3721 0040 00000000 		.4byte	.LFB70
 3722 0044 D8000000 		.4byte	.LFE70-.LFB70
 3723 0048 00000000 		.4byte	.LFB71
 3724 004c 74000000 		.4byte	.LFE71-.LFB71
 3725 0050 00000000 		.4byte	.LFB72
 3726 0054 6C000000 		.4byte	.LFE72-.LFB72
 3727 0058 00000000 		.4byte	.LFB73
 3728 005c 8A000000 		.4byte	.LFE73-.LFB73
 3729 0060 00000000 		.4byte	0
 3730 0064 00000000 		.4byte	0
 3731              		.section	.debug_ranges,"",%progbits
 3732              	.Ldebug_ranges0:
 3733 0000 00000000 		.4byte	.LFB64
 3734 0004 74000000 		.4byte	.LFE64
 3735 0008 00000000 		.4byte	.LFB65
 3736 000c 5C040000 		.4byte	.LFE65
 3737 0010 00000000 		.4byte	.LFB66
 3738 0014 54010000 		.4byte	.LFE66
 3739 0018 00000000 		.4byte	.LFB67
 3740 001c 74000000 		.4byte	.LFE67
 3741 0020 00000000 		.4byte	.LFB68
 3742 0024 F0080000 		.4byte	.LFE68
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 76


 3743 0028 00000000 		.4byte	.LFB69
 3744 002c D8000000 		.4byte	.LFE69
 3745 0030 00000000 		.4byte	.LFB70
 3746 0034 D8000000 		.4byte	.LFE70
 3747 0038 00000000 		.4byte	.LFB71
 3748 003c 74000000 		.4byte	.LFE71
 3749 0040 00000000 		.4byte	.LFB72
 3750 0044 6C000000 		.4byte	.LFE72
 3751 0048 00000000 		.4byte	.LFB73
 3752 004c 8A000000 		.4byte	.LFE73
 3753 0050 00000000 		.4byte	0
 3754 0054 00000000 		.4byte	0
 3755              		.section	.debug_line,"",%progbits
 3756              	.Ldebug_line0:
 3757 0000 D5030000 		.section	.debug_str,"MS",%progbits,1
 3757      02007601 
 3757      00000201 
 3757      FB0E0D00 
 3757      01010101 
 3758              	.LASF52:
 3759 0000 726F626F 		.ascii	"robot_Kp\000"
 3759      745F4B70 
 3759      00
 3760              	.LASF31:
 3761 0009 61786C65 		.ascii	"axle_width\000"
 3761      5F776964 
 3761      746800
 3762              	.LASF96:
 3763 0014 726F626F 		.ascii	"robot\000"
 3763      7400
 3764              	.LASF34:
 3765 001a 64657369 		.ascii	"desired_theta\000"
 3765      7265645F 
 3765      74686574 
 3765      6100
 3766              	.LASF39:
 3767 0028 64696666 		.ascii	"diff\000"
 3767      00
 3768              	.LASF54:
 3769 002d 73746172 		.ascii	"start_x\000"
 3769      745F7800 
 3770              	.LASF55:
 3771 0035 73746172 		.ascii	"start_y\000"
 3771      745F7900 
 3772              	.LASF2:
 3773 003d 73686F72 		.ascii	"short int\000"
 3773      7420696E 
 3773      7400
 3774              	.LASF85:
 3775 0047 504F5345 		.ascii	"POSE_UPDATE_PERIOD\000"
 3775      5F555044 
 3775      4154455F 
 3775      50455249 
 3775      4F4400
 3776              	.LASF58:
 3777 005a 676F616C 		.ascii	"goals\000"
 3777      7300
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 77


 3778              	.LASF79:
 3779 0060 6D6F7665 		.ascii	"move_servo\000"
 3779      5F736572 
 3779      766F00
 3780              	.LASF51:
 3781 006b 726F626F 		.ascii	"robot_Ki\000"
 3781      745F4B69 
 3781      00
 3782              	.LASF97:
 3783 0074 73656E73 		.ascii	"sensors\000"
 3783      6F727300 
 3784              	.LASF38:
 3785 007c 526F626F 		.ascii	"Robot\000"
 3785      7400
 3786              	.LASF98:
 3787 0082 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3787      43313120 
 3787      352E342E 
 3787      31203230 
 3787      31363036 
 3788 00b5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3788      20726576 
 3788      6973696F 
 3788      6E203233 
 3788      37373135 
 3789 00e8 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3789      66756E63 
 3789      74696F6E 
 3789      2D736563 
 3789      74696F6E 
 3790              	.LASF21:
 3791 0110 64697265 		.ascii	"direction\000"
 3791      6374696F 
 3791      6E00
 3792              	.LASF4:
 3793 011a 5F5F7569 		.ascii	"__uint16_t\000"
 3793      6E743136 
 3793      5F7400
 3794              	.LASF75:
 3795 0125 76656C6F 		.ascii	"velocity_control\000"
 3795      63697479 
 3795      5F636F6E 
 3795      74726F6C 
 3795      00
 3796              	.LASF63:
 3797 0136 77616C6C 		.ascii	"wall_Kp\000"
 3797      5F4B7000 
 3798              	.LASF69:
 3799 013e 76656C6F 		.ascii	"velocity\000"
 3799      63697479 
 3799      00
 3800              	.LASF44:
 3801 0147 4D6F746F 		.ascii	"Motor_PI_Int_Handler\000"
 3801      725F5049 
 3801      5F496E74 
 3801      5F48616E 
 3801      646C6572 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 78


 3802              	.LASF71:
 3803 015c 44726976 		.ascii	"Drive_Left_Motor\000"
 3803      655F4C65 
 3803      66745F4D 
 3803      6F746F72 
 3803      00
 3804              	.LASF95:
 3805 016d 72696768 		.ascii	"right_motor\000"
 3805      745F6D6F 
 3805      746F7200 
 3806              	.LASF65:
 3807 0179 64697374 		.ascii	"dist_ref\000"
 3807      5F726566 
 3807      00
 3808              	.LASF94:
 3809 0182 6C656674 		.ascii	"left_motor\000"
 3809      5F6D6F74 
 3809      6F7200
 3810              	.LASF12:
 3811 018d 75696E74 		.ascii	"uint8_t\000"
 3811      385F7400 
 3812              	.LASF76:
 3813 0195 6D61785F 		.ascii	"max_velocity\000"
 3813      76656C6F 
 3813      63697479 
 3813      00
 3814              	.LASF35:
 3815 01a2 676F616C 		.ascii	"goal_x\000"
 3815      5F7800
 3816              	.LASF70:
 3817 01a9 7465726D 		.ascii	"terminal_phase\000"
 3817      696E616C 
 3817      5F706861 
 3817      736500
 3818              	.LASF36:
 3819 01b8 676F616C 		.ascii	"goal_y\000"
 3819      5F7900
 3820              	.LASF93:
 3821 01bf 77616C6C 		.ascii	"wall_following_flag\000"
 3821      5F666F6C 
 3821      6C6F7769 
 3821      6E675F66 
 3821      6C616700 
 3822              	.LASF16:
 3823 01d3 666C6F61 		.ascii	"float\000"
 3823      7400
 3824              	.LASF89:
 3825 01d9 6D75785F 		.ascii	"mux_select\000"
 3825      73656C65 
 3825      637400
 3826              	.LASF9:
 3827 01e4 6C6F6E67 		.ascii	"long long int\000"
 3827      206C6F6E 
 3827      6720696E 
 3827      7400
 3828              	.LASF64:
 3829 01f2 66726F6E 		.ascii	"front_dist_th\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 79


 3829      745F6469 
 3829      73745F74 
 3829      6800
 3830              	.LASF43:
 3831 0200 506F7365 		.ascii	"Pose_Update_Int_Handler\000"
 3831      5F557064 
 3831      6174655F 
 3831      496E745F 
 3831      48616E64 
 3832              	.LASF60:
 3833 0218 7265665F 		.ascii	"ref_direction\000"
 3833      64697265 
 3833      6374696F 
 3833      6E00
 3834              	.LASF28:
 3835 0226 77686565 		.ascii	"wheel_radius\000"
 3835      6C5F7261 
 3835      64697573 
 3835      00
 3836              	.LASF100:
 3837 0233 433A5C55 		.ascii	"C:\\Users\\jmspi\\OneDrive\\Documents\\GitHub\\ECE4"
 3837      73657273 
 3837      5C6A6D73 
 3837      70695C4F 
 3837      6E654472 
 3838 0260 3139315C 		.ascii	"191\\DeliveryRobot.cydsn\000"
 3838      44656C69 
 3838      76657279 
 3838      526F626F 
 3838      742E6379 
 3839              	.LASF7:
 3840 0278 6C6F6E67 		.ascii	"long int\000"
 3840      20696E74 
 3840      00
 3841              	.LASF8:
 3842 0281 6C6F6E67 		.ascii	"long unsigned int\000"
 3842      20756E73 
 3842      69676E65 
 3842      6420696E 
 3842      7400
 3843              	.LASF88:
 3844 0293 6563686F 		.ascii	"echo_distance\000"
 3844      5F646973 
 3844      74616E63 
 3844      6500
 3845              	.LASF59:
 3846 02a1 676F616C 		.ascii	"goals_reached\000"
 3846      735F7265 
 3846      61636865 
 3846      6400
 3847              	.LASF3:
 3848 02af 5F5F7569 		.ascii	"__uint8_t\000"
 3848      6E74385F 
 3848      7400
 3849              	.LASF73:
 3850 02b9 5475726E 		.ascii	"Turn_Delay\000"
 3850      5F44656C 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 80


 3850      617900
 3851              	.LASF66:
 3852 02c4 66726F6E 		.ascii	"front_count\000"
 3852      745F636F 
 3852      756E7400 
 3853              	.LASF23:
 3854 02d0 53656E73 		.ascii	"Sensor\000"
 3854      6F7200
 3855              	.LASF78:
 3856 02d7 74687265 		.ascii	"thresh\000"
 3856      736800
 3857              	.LASF19:
 3858 02de 6C6F6E67 		.ascii	"long double\000"
 3858      20646F75 
 3858      626C6500 
 3859              	.LASF30:
 3860 02ea 4D6F746F 		.ascii	"Motor\000"
 3860      7200
 3861              	.LASF48:
 3862 02f0 6D6F746F 		.ascii	"motor_Ki\000"
 3862      725F4B69 
 3862      00
 3863              	.LASF1:
 3864 02f9 756E7369 		.ascii	"unsigned char\000"
 3864      676E6564 
 3864      20636861 
 3864      7200
 3865              	.LASF86:
 3866 0307 6563686F 		.ascii	"echo_flag\000"
 3866      5F666C61 
 3866      6700
 3867              	.LASF33:
 3868 0311 64657369 		.ascii	"desired_v\000"
 3868      7265645F 
 3868      7600
 3869              	.LASF27:
 3870 031b 64657369 		.ascii	"desired_w\000"
 3870      7265645F 
 3870      7700
 3871              	.LASF0:
 3872 0325 7369676E 		.ascii	"signed char\000"
 3872      65642063 
 3872      68617200 
 3873              	.LASF14:
 3874 0331 696E7433 		.ascii	"int32_t\000"
 3874      325F7400 
 3875              	.LASF10:
 3876 0339 6C6F6E67 		.ascii	"long long unsigned int\000"
 3876      206C6F6E 
 3876      6720756E 
 3876      7369676E 
 3876      65642069 
 3877              	.LASF49:
 3878 0350 6D6F746F 		.ascii	"motor_Kp\000"
 3878      725F4B70 
 3878      00
 3879              	.LASF11:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 81


 3880 0359 756E7369 		.ascii	"unsigned int\000"
 3880      676E6564 
 3880      20696E74 
 3880      00
 3881              	.LASF13:
 3882 0366 75696E74 		.ascii	"uint16_t\000"
 3882      31365F74 
 3882      00
 3883              	.LASF77:
 3884 036f 6176675F 		.ascii	"avg_dist\000"
 3884      64697374 
 3884      00
 3885              	.LASF50:
 3886 0378 726F626F 		.ascii	"robot_axle_width\000"
 3886      745F6178 
 3886      6C655F77 
 3886      69647468 
 3886      00
 3887              	.LASF87:
 3888 0389 6D61785F 		.ascii	"max_count\000"
 3888      636F756E 
 3888      7400
 3889              	.LASF72:
 3890 0393 44726976 		.ascii	"Drive_Right_Motor\000"
 3890      655F5269 
 3890      6768745F 
 3890      4D6F746F 
 3890      7200
 3891              	.LASF5:
 3892 03a5 73686F72 		.ascii	"short unsigned int\000"
 3892      7420756E 
 3892      7369676E 
 3892      65642069 
 3892      6E7400
 3893              	.LASF22:
 3894 03b8 64697374 		.ascii	"distance\000"
 3894      616E6365 
 3894      00
 3895              	.LASF18:
 3896 03c1 63686172 		.ascii	"char\000"
 3896      00
 3897              	.LASF92:
 3898 03c6 73657269 		.ascii	"serial_output\000"
 3898      616C5F6F 
 3898      75747075 
 3898      7400
 3899              	.LASF74:
 3900 03d4 6D61696E 		.ascii	"main\000"
 3900      00
 3901              	.LASF45:
 3902 03d9 4E617669 		.ascii	"Navigation_Test_Int_Handler\000"
 3902      67617469 
 3902      6F6E5F54 
 3902      6573745F 
 3902      496E745F 
 3903              	.LASF67:
 3904 03f5 72657475 		.ascii	"return_flag\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 82


 3904      726E5F66 
 3904      6C616700 
 3905              	.LASF62:
 3906 0401 74686574 		.ascii	"theta_correction\000"
 3906      615F636F 
 3906      72726563 
 3906      74696F6E 
 3906      00
 3907              	.LASF99:
 3908 0412 6D61696E 		.ascii	"main.c\000"
 3908      2E6300
 3909              	.LASF91:
 3910 0419 72696768 		.ascii	"right_wheel_count\000"
 3910      745F7768 
 3910      65656C5F 
 3910      636F756E 
 3910      7400
 3911              	.LASF90:
 3912 042b 6C656674 		.ascii	"left_wheel_count\000"
 3912      5F776865 
 3912      656C5F63 
 3912      6F756E74 
 3912      00
 3913              	.LASF15:
 3914 043c 696E7433 		.ascii	"int32\000"
 3914      3200
 3915              	.LASF17:
 3916 0442 646F7562 		.ascii	"double\000"
 3916      6C6500
 3917              	.LASF101:
 3918 0449 54696D65 		.ascii	"Timer_Int_Handler\000"
 3918      725F496E 
 3918      745F4861 
 3918      6E646C65 
 3918      7200
 3919              	.LASF41:
 3920 045b 7363616C 		.ascii	"scaled_V\000"
 3920      65645F56 
 3920      00
 3921              	.LASF24:
 3922 0464 64757479 		.ascii	"duty_cycle\000"
 3922      5F637963 
 3922      6C6500
 3923              	.LASF6:
 3924 046f 5F5F696E 		.ascii	"__int32_t\000"
 3924      7433325F 
 3924      7400
 3925              	.LASF25:
 3926 0479 696E745F 		.ascii	"int_error\000"
 3926      6572726F 
 3926      7200
 3927              	.LASF32:
 3928 0483 74686574 		.ascii	"theta\000"
 3928      6100
 3929              	.LASF68:
 3930 0489 425F666C 		.ascii	"B_flag\000"
 3930      616700
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 83


 3931              	.LASF42:
 3932 0490 6E65775F 		.ascii	"new_w\000"
 3932      7700
 3933              	.LASF61:
 3934 0496 7265665F 		.ascii	"ref_direction_deg\000"
 3934      64697265 
 3934      6374696F 
 3934      6E5F6465 
 3934      6700
 3935              	.LASF20:
 3936 04a8 73697A65 		.ascii	"sizetype\000"
 3936      74797065 
 3936      00
 3937              	.LASF46:
 3938 04b1 616E676C 		.ascii	"angle\000"
 3938      6500
 3939              	.LASF29:
 3940 04b7 656E635F 		.ascii	"enc_count\000"
 3940      636F756E 
 3940      7400
 3941              	.LASF56:
 3942 04c1 73746172 		.ascii	"start_th\000"
 3942      745F7468 
 3942      00
 3943              	.LASF40:
 3944 04ca 6572726F 		.ascii	"error\000"
 3944      7200
 3945              	.LASF81:
 3946 04d0 636F6D70 		.ascii	"comp_1\000"
 3946      5F3100
 3947              	.LASF82:
 3948 04d7 636F6D70 		.ascii	"comp_2\000"
 3948      5F3200
 3949              	.LASF26:
 3950 04de 74616E67 		.ascii	"tangent_v\000"
 3950      656E745F 
 3950      7600
 3951              	.LASF83:
 3952 04e8 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3952      52784275 
 3952      66666572 
 3952      00
 3953              	.LASF53:
 3954 04f5 6D696E5F 		.ascii	"min_distance\000"
 3954      64697374 
 3954      616E6365 
 3954      00
 3955              	.LASF84:
 3956 0502 50554C53 		.ascii	"PULSES_PER_REV\000"
 3956      45535F50 
 3956      45525F52 
 3956      455600
 3957              	.LASF37:
 3958 0511 676F616C 		.ascii	"goal_min_dist\000"
 3958      5F6D696E 
 3958      5F646973 
 3958      7400
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cckVrRjc.s 			page 84


 3959              	.LASF47:
 3960 051f 77686565 		.ascii	"wheel_r_scale\000"
 3960      6C5F725F 
 3960      7363616C 
 3960      6500
 3961              	.LASF80:
 3962 052d 73657276 		.ascii	"servo_num\000"
 3962      6F5F6E75 
 3962      6D00
 3963              	.LASF57:
 3964 0537 6E5F676F 		.ascii	"n_goals\000"
 3964      616C7300 
 3965              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
