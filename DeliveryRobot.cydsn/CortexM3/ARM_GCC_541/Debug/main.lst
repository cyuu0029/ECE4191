ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	PULSES_PER_REV
  20              		.section	.rodata
  21              		.align	3
  22              		.type	PULSES_PER_REV, %object
  23              		.size	PULSES_PER_REV, 8
  24              	PULSES_PER_REV:
  25 0000 A4703D0A 		.word	171798692
  26 0004 D70FAC40 		.word	1085018071
  27              		.global	POSE_UPDATE_PERIOD
  28              		.align	3
  29              		.type	POSE_UPDATE_PERIOD, %object
  30              		.size	POSE_UPDATE_PERIOD, 8
  31              	POSE_UPDATE_PERIOD:
  32 0008 7B14AE47 		.word	1202590843
  33 000c E17A943F 		.word	1066695393
  34              		.global	echo_flag
  35              		.bss
  36              		.type	echo_flag, %object
  37              		.size	echo_flag, 1
  38              	echo_flag:
  39 0000 00       		.space	1
  40              		.global	max_count
  41              		.data
  42              		.align	1
  43              		.type	max_count, %object
  44              		.size	max_count, 2
  45              	max_count:
  46 0000 3421     		.short	8500
  47              		.comm	echo_distance,2,2
  48              		.global	mux_select
  49              		.bss
  50              		.type	mux_select, %object
  51              		.size	mux_select, 1
  52              	mux_select:
  53 0001 00       		.space	1
  54              		.global	left_wheel_count
  55 0002 0000     		.align	2
  56              		.type	left_wheel_count, %object
  57              		.size	left_wheel_count, 4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 2


  58              	left_wheel_count:
  59 0004 00000000 		.space	4
  60              		.global	right_wheel_count
  61              		.align	2
  62              		.type	right_wheel_count, %object
  63              		.size	right_wheel_count, 4
  64              	right_wheel_count:
  65 0008 00000000 		.space	4
  66              		.comm	serial_output,150,4
  67              		.comm	left_motor,72,8
  68              		.comm	right_motor,72,8
  69              		.comm	robot,112,8
  70              		.comm	sensors,40,4
  71              		.comm	map,16,4
  72              		.comm	active,16,4
  73              		.comm	smoothed_POD,8,4
  74              		.section	.text.Timer_Int_Handler,"ax",%progbits
  75              		.align	2
  76              		.global	Timer_Int_Handler
  77              		.thumb
  78              		.thumb_func
  79              		.type	Timer_Int_Handler, %function
  80              	Timer_Int_Handler:
  81              	.LFB64:
  82              		.file 1 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  *
   3:main.c        ****  * Copyright YOUR COMPANY, THE YEAR
   4:main.c        ****  * All Rights Reserved
   5:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:main.c        ****  *
   7:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:main.c        ****  * WHICH IS THE PROPERTY OF your company.
   9:main.c        ****  *
  10:main.c        ****  * ========================================
  11:main.c        **** */
  12:main.c        **** 
  13:main.c        **** /* Import all libraries and header files. */
  14:main.c        **** #include "project.h"
  15:main.c        **** #include <stdio.h>
  16:main.c        **** #include <stdlib.h>
  17:main.c        **** #include <math.h>
  18:main.c        **** #include <stdbool.h>
  19:main.c        **** 
  20:main.c        **** /* Include all our own written headers */
  21:main.c        **** //#include "..\Tentacles\tentacles.h"
  22:main.c        **** #include "vfh.h"
  23:main.c        **** 
  24:main.c        **** /* Define all global variables. */ 
  25:main.c        **** const double PULSES_PER_REV = 3591.92;
  26:main.c        **** const double POSE_UPDATE_PERIOD = 1.0/50.0; // seconds
  27:main.c        **** 
  28:main.c        **** uint8_t echo_flag = 0;          // Ultrasonic flag
  29:main.c        **** uint16_t max_count = 8500;     // Ultrasonic time count
  30:main.c        **** uint16_t echo_distance;         // Ultrasonic distance
  31:main.c        **** uint8_t mux_select = 0;         // For selecting specific ultrasonic sensor
  32:main.c        **** 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 3


  33:main.c        **** int32 left_wheel_count = 0;
  34:main.c        **** int32 right_wheel_count = 0;
  35:main.c        **** char serial_output[150];        // For UART print output
  36:main.c        **** 
  37:main.c        **** /* Defining/Creating all data structures */
  38:main.c        **** Motor left_motor;     // Left Motor, duh!
  39:main.c        **** Motor right_motor;    // Right Motor, duh!
  40:main.c        **** Robot robot;          // Robot values, duh!
  41:main.c        **** Sensor sensors;       // Ultrasonics
  42:main.c        **** grid map;             // Grid of area
  43:main.c        **** //histogram polar;      // Polar Histogram
  44:main.c        **** grid active;          // Active window of robot
  45:main.c        **** POD smoothed_POD;
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** void Drive_Left_Motor(long double duty_cycle);
  49:main.c        **** void Drive_Right_Motor(long double duty_cycle);
  50:main.c        **** 
  51:main.c        **** /* Interrupt to obtain Ultrasonic measurement value. */  
  52:main.c        **** CY_ISR( Timer_Int_Handler ) {
  83              		.loc 1 52 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 1, uses_anonymous_args = 0
  87 0000 98B5     		push	{r3, r4, r7, lr}
  88              		.cfi_def_cfa_offset 16
  89              		.cfi_offset 3, -16
  90              		.cfi_offset 4, -12
  91              		.cfi_offset 7, -8
  92              		.cfi_offset 14, -4
  93 0002 00AF     		add	r7, sp, #0
  94              		.cfi_def_cfa_register 7
  53:main.c        ****     // Collect measurement 
  54:main.c        ****     echo_distance = max_count - Timer_Echo_ReadCapture();   // in cm
  95              		.loc 1 54 0
  96 0004 194B     		ldr	r3, .L3
  97 0006 1C88     		ldrh	r4, [r3]
  98 0008 FFF7FEFF 		bl	Timer_Echo_ReadCapture
  99 000c 0346     		mov	r3, r0
 100 000e E31A     		subs	r3, r4, r3
 101 0010 9AB2     		uxth	r2, r3
 102 0012 174B     		ldr	r3, .L3+4
 103 0014 1A80     		strh	r2, [r3]	@ movhi
  55:main.c        **** 
  56:main.c        ****     sensors.distance[mux_select] = echo_distance;      // Store measured value
 104              		.loc 1 56 0
 105 0016 174B     		ldr	r3, .L3+8
 106 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 107 001a 1846     		mov	r0, r3
 108 001c 144B     		ldr	r3, .L3+4
 109 001e 1B88     		ldrh	r3, [r3]
 110 0020 1946     		mov	r1, r3
 111 0022 154A     		ldr	r2, .L3+12
 112 0024 031D     		adds	r3, r0, #4
 113 0026 9B00     		lsls	r3, r3, #2
 114 0028 1344     		add	r3, r3, r2
 115 002a 5960     		str	r1, [r3, #4]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 4


  57:main.c        ****     //sprintf(serial_output, "Ultrasonic sensor %d: %d\n",   mux_select, sensors.distance[mux_selec
  58:main.c        ****     //UART_PutString(serial_output);
  59:main.c        ****         
  60:main.c        ****     mux_select++;   // Iterate the global ultrasonic tracker
 116              		.loc 1 60 0
 117 002c 114B     		ldr	r3, .L3+8
 118 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 119 0030 0133     		adds	r3, r3, #1
 120 0032 DAB2     		uxtb	r2, r3
 121 0034 0F4B     		ldr	r3, .L3+8
 122 0036 1A70     		strb	r2, [r3]
  61:main.c        ****     
  62:main.c        ****     // Reset the global ultrasonic tracker when all measurements have been updated
  63:main.c        ****     if( mux_select == N_SENSORS ) { 
 123              		.loc 1 63 0
 124 0038 0E4B     		ldr	r3, .L3+8
 125 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 126 003c 052B     		cmp	r3, #5
 127 003e 07D1     		bne	.L2
  64:main.c        ****         // Update grid with new distance readings
  65:main.c        ****         grid_update(&map, &sensors, &robot);
 128              		.loc 1 65 0
 129 0040 0E4A     		ldr	r2, .L3+16
 130 0042 0D49     		ldr	r1, .L3+12
 131 0044 0E48     		ldr	r0, .L3+20
 132 0046 FFF7FEFF 		bl	grid_update
  66:main.c        ****         mux_select = 0; 
 133              		.loc 1 66 0
 134 004a 0A4B     		ldr	r3, .L3+8
 135 004c 0022     		movs	r2, #0
 136 004e 1A70     		strb	r2, [r3]
 137              	.L2:
  67:main.c        ****     }
  68:main.c        ****     
  69:main.c        ****     Control_Reg_US_Write(mux_select);
 138              		.loc 1 69 0
 139 0050 084B     		ldr	r3, .L3+8
 140 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 141 0054 1846     		mov	r0, r3
 142 0056 FFF7FEFF 		bl	Control_Reg_US_Write
  70:main.c        ****     Timer_Echo_ReadControlRegister();
 143              		.loc 1 70 0
 144 005a FFF7FEFF 		bl	Timer_Echo_ReadControlRegister
  71:main.c        ****     PWM_Trigger_WriteCounter(2950);
 145              		.loc 1 71 0
 146 005e 40F68630 		movw	r0, #2950
 147 0062 FFF7FEFF 		bl	PWM_Trigger_WriteCounter
  72:main.c        **** }
 148              		.loc 1 72 0
 149 0066 00BF     		nop
 150 0068 98BD     		pop	{r3, r4, r7, pc}
 151              	.L4:
 152 006a 00BF     		.align	2
 153              	.L3:
 154 006c 00000000 		.word	max_count
 155 0070 00000000 		.word	echo_distance
 156 0074 00000000 		.word	mux_select
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 5


 157 0078 00000000 		.word	sensors
 158 007c 00000000 		.word	robot
 159 0080 00000000 		.word	map
 160              		.cfi_endproc
 161              	.LFE64:
 162              		.size	Timer_Int_Handler, .-Timer_Int_Handler
 163              		.global	__aeabi_i2d
 164              		.global	__aeabi_dmul
 165              		.global	__aeabi_ddiv
 166              		.global	__aeabi_dsub
 167              		.global	__aeabi_dadd
 168              		.global	__aeabi_dcmpgt
 169              		.global	__aeabi_dcmplt
 170              		.section	.text.Pose_Update_Int_Handler,"ax",%progbits
 171              		.align	2
 172              		.global	Pose_Update_Int_Handler
 173              		.thumb
 174              		.thumb_func
 175              		.type	Pose_Update_Int_Handler, %function
 176              	Pose_Update_Int_Handler:
 177              	.LFB65:
  73:main.c        **** 
  74:main.c        **** /* Interrupt for Robot pose and desired drive update. */
  75:main.c        **** CY_ISR( Pose_Update_Int_Handler ) {
 178              		.loc 1 75 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 32
 181              		@ frame_needed = 1, uses_anonymous_args = 0
 182 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 183              		.cfi_def_cfa_offset 36
 184              		.cfi_offset 4, -36
 185              		.cfi_offset 5, -32
 186              		.cfi_offset 6, -28
 187              		.cfi_offset 7, -24
 188              		.cfi_offset 8, -20
 189              		.cfi_offset 9, -16
 190              		.cfi_offset 10, -12
 191              		.cfi_offset 11, -8
 192              		.cfi_offset 14, -4
 193 0004 89B0     		sub	sp, sp, #36
 194              		.cfi_def_cfa_offset 72
 195 0006 00AF     		add	r7, sp, #0
 196              		.cfi_def_cfa_register 7
  76:main.c        ****     // Update encoder values for both left and right motors
  77:main.c        ****     int32 new, diff;
  78:main.c        ****     new = QuadDec_R_GetCounter();
 197              		.loc 1 78 0
 198 0008 FFF7FEFF 		bl	QuadDec_R_GetCounter
 199 000c 7861     		str	r0, [r7, #20]
  79:main.c        ****     diff = new - right_motor.enc_count;
 200              		.loc 1 79 0
 201 000e B84B     		ldr	r3, .L12+48
 202 0010 1B6C     		ldr	r3, [r3, #64]
 203 0012 7A69     		ldr	r2, [r7, #20]
 204 0014 D31A     		subs	r3, r2, r3
 205 0016 3B61     		str	r3, [r7, #16]
  80:main.c        ****     right_motor.enc_count = new;
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 6


 206              		.loc 1 80 0
 207 0018 B54A     		ldr	r2, .L12+48
 208 001a 7B69     		ldr	r3, [r7, #20]
 209 001c 1364     		str	r3, [r2, #64]
  81:main.c        ****     right_motor.w = M_TWOPI * diff / POSE_UPDATE_PERIOD / PULSES_PER_REV;
 210              		.loc 1 81 0
 211 001e 3869     		ldr	r0, [r7, #16]
 212 0020 FFF7FEFF 		bl	__aeabi_i2d
 213 0024 A6A3     		adr	r3, .L12
 214 0026 D3E90023 		ldrd	r2, [r3]
 215 002a FFF7FEFF 		bl	__aeabi_dmul
 216 002e 0246     		mov	r2, r0
 217 0030 0B46     		mov	r3, r1
 218 0032 1046     		mov	r0, r2
 219 0034 1946     		mov	r1, r3
 220 0036 A4A3     		adr	r3, .L12+8
 221 0038 D3E90023 		ldrd	r2, [r3]
 222 003c FFF7FEFF 		bl	__aeabi_ddiv
 223 0040 0246     		mov	r2, r0
 224 0042 0B46     		mov	r3, r1
 225 0044 1046     		mov	r0, r2
 226 0046 1946     		mov	r1, r3
 227 0048 A1A3     		adr	r3, .L12+16
 228 004a D3E90023 		ldrd	r2, [r3]
 229 004e FFF7FEFF 		bl	__aeabi_ddiv
 230 0052 0246     		mov	r2, r0
 231 0054 0B46     		mov	r3, r1
 232 0056 A649     		ldr	r1, .L12+48
 233 0058 C1E90423 		strd	r2, [r1, #16]
  82:main.c        ****     
  83:main.c        ****     new = QuadDec_L_GetCounter();
 234              		.loc 1 83 0
 235 005c FFF7FEFF 		bl	QuadDec_L_GetCounter
 236 0060 7861     		str	r0, [r7, #20]
  84:main.c        ****     diff = new - left_motor.enc_count;
 237              		.loc 1 84 0
 238 0062 A44B     		ldr	r3, .L12+52
 239 0064 1B6C     		ldr	r3, [r3, #64]
 240 0066 7A69     		ldr	r2, [r7, #20]
 241 0068 D31A     		subs	r3, r2, r3
 242 006a 3B61     		str	r3, [r7, #16]
  85:main.c        ****     left_motor.enc_count = new;
 243              		.loc 1 85 0
 244 006c A14A     		ldr	r2, .L12+52
 245 006e 7B69     		ldr	r3, [r7, #20]
 246 0070 1364     		str	r3, [r2, #64]
  86:main.c        ****     left_motor.w = M_TWOPI * diff / POSE_UPDATE_PERIOD / PULSES_PER_REV;
 247              		.loc 1 86 0
 248 0072 3869     		ldr	r0, [r7, #16]
 249 0074 FFF7FEFF 		bl	__aeabi_i2d
 250 0078 91A3     		adr	r3, .L12
 251 007a D3E90023 		ldrd	r2, [r3]
 252 007e FFF7FEFF 		bl	__aeabi_dmul
 253 0082 0246     		mov	r2, r0
 254 0084 0B46     		mov	r3, r1
 255 0086 1046     		mov	r0, r2
 256 0088 1946     		mov	r1, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 7


 257 008a 8FA3     		adr	r3, .L12+8
 258 008c D3E90023 		ldrd	r2, [r3]
 259 0090 FFF7FEFF 		bl	__aeabi_ddiv
 260 0094 0246     		mov	r2, r0
 261 0096 0B46     		mov	r3, r1
 262 0098 1046     		mov	r0, r2
 263 009a 1946     		mov	r1, r3
 264 009c 8CA3     		adr	r3, .L12+16
 265 009e D3E90023 		ldrd	r2, [r3]
 266 00a2 FFF7FEFF 		bl	__aeabi_ddiv
 267 00a6 0246     		mov	r2, r0
 268 00a8 0B46     		mov	r3, r1
 269 00aa 9249     		ldr	r1, .L12+52
 270 00ac C1E90423 		strd	r2, [r1, #16]
  87:main.c        ****     
  88:main.c        ****     // Calculate and update tangential velocity of wheels
  89:main.c        ****     left_motor.tangent_v = left_motor.w * left_motor.wheel_radius;
 271              		.loc 1 89 0
 272 00b0 904B     		ldr	r3, .L12+52
 273 00b2 D3E90401 		ldrd	r0, [r3, #16]
 274 00b6 8F4B     		ldr	r3, .L12+52
 275 00b8 D3E90E23 		ldrd	r2, [r3, #56]
 276 00bc FFF7FEFF 		bl	__aeabi_dmul
 277 00c0 0246     		mov	r2, r0
 278 00c2 0B46     		mov	r3, r1
 279 00c4 8B49     		ldr	r1, .L12+52
 280 00c6 C1E90623 		strd	r2, [r1, #24]
  90:main.c        ****     right_motor.tangent_v = right_motor.w * right_motor.wheel_radius;
 281              		.loc 1 90 0
 282 00ca 894B     		ldr	r3, .L12+48
 283 00cc D3E90401 		ldrd	r0, [r3, #16]
 284 00d0 874B     		ldr	r3, .L12+48
 285 00d2 D3E90E23 		ldrd	r2, [r3, #56]
 286 00d6 FFF7FEFF 		bl	__aeabi_dmul
 287 00da 0246     		mov	r2, r0
 288 00dc 0B46     		mov	r3, r1
 289 00de 8449     		ldr	r1, .L12+48
 290 00e0 C1E90623 		strd	r2, [r1, #24]
  91:main.c        **** 
  92:main.c        ****     // Calculate and update Robot velocity and angular velocity
  93:main.c        ****     robot.w = (right_motor.tangent_v - left_motor.tangent_v) / robot.axle_width; //instantaneous tu
 291              		.loc 1 93 0
 292 00e4 824B     		ldr	r3, .L12+48
 293 00e6 D3E90601 		ldrd	r0, [r3, #24]
 294 00ea 824B     		ldr	r3, .L12+52
 295 00ec D3E90623 		ldrd	r2, [r3, #24]
 296 00f0 FFF7FEFF 		bl	__aeabi_dsub
 297 00f4 0246     		mov	r2, r0
 298 00f6 0B46     		mov	r3, r1
 299 00f8 1046     		mov	r0, r2
 300 00fa 1946     		mov	r1, r3
 301 00fc 7E4B     		ldr	r3, .L12+56
 302 00fe D3E90023 		ldrd	r2, [r3]
 303 0102 FFF7FEFF 		bl	__aeabi_ddiv
 304 0106 0246     		mov	r2, r0
 305 0108 0B46     		mov	r3, r1
 306 010a 7B49     		ldr	r1, .L12+56
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 8


 307 010c C1E90A23 		strd	r2, [r1, #40]
  94:main.c        ****     robot.v =  (right_motor.tangent_v + left_motor.tangent_v) / 2; //instantaneous tangential veloc
 308              		.loc 1 94 0
 309 0110 774B     		ldr	r3, .L12+48
 310 0112 D3E90601 		ldrd	r0, [r3, #24]
 311 0116 774B     		ldr	r3, .L12+52
 312 0118 D3E90623 		ldrd	r2, [r3, #24]
 313 011c FFF7FEFF 		bl	__aeabi_dadd
 314 0120 0246     		mov	r2, r0
 315 0122 0B46     		mov	r3, r1
 316 0124 1046     		mov	r0, r2
 317 0126 1946     		mov	r1, r3
 318 0128 4FF00002 		mov	r2, #0
 319 012c 4FF08043 		mov	r3, #1073741824
 320 0130 FFF7FEFF 		bl	__aeabi_ddiv
 321 0134 0246     		mov	r2, r0
 322 0136 0B46     		mov	r3, r1
 323 0138 6F49     		ldr	r1, .L12+56
 324 013a C1E90823 		strd	r2, [r1, #32]
  95:main.c        **** 
  96:main.c        ****     // Update Robot pose
  97:main.c        ****     robot.theta = calculate_angle_modulo( robot.theta + robot.w * POSE_UPDATE_PERIOD );
 325              		.loc 1 97 0
 326 013e 6E4B     		ldr	r3, .L12+56
 327 0140 D3E90289 		ldrd	r8, [r3, #8]
 328 0144 6C4B     		ldr	r3, .L12+56
 329 0146 D3E90A01 		ldrd	r0, [r3, #40]
 330 014a 5FA3     		adr	r3, .L12+8
 331 014c D3E90023 		ldrd	r2, [r3]
 332 0150 FFF7FEFF 		bl	__aeabi_dmul
 333 0154 0246     		mov	r2, r0
 334 0156 0B46     		mov	r3, r1
 335 0158 4046     		mov	r0, r8
 336 015a 4946     		mov	r1, r9
 337 015c FFF7FEFF 		bl	__aeabi_dadd
 338 0160 0246     		mov	r2, r0
 339 0162 0B46     		mov	r3, r1
 340 0164 1046     		mov	r0, r2
 341 0166 1946     		mov	r1, r3
 342 0168 FFF7FEFF 		bl	calculate_angle_modulo
 343 016c 0246     		mov	r2, r0
 344 016e 0B46     		mov	r3, r1
 345 0170 6149     		ldr	r1, .L12+56
 346 0172 C1E90223 		strd	r2, [r1, #8]
  98:main.c        ****     robot.x = robot.x + POSE_UPDATE_PERIOD * robot.v * cos(robot.theta);
 347              		.loc 1 98 0
 348 0176 604B     		ldr	r3, .L12+56
 349 0178 D3E90489 		ldrd	r8, [r3, #16]
 350 017c 5E4B     		ldr	r3, .L12+56
 351 017e D3E90801 		ldrd	r0, [r3, #32]
 352 0182 51A3     		adr	r3, .L12+8
 353 0184 D3E90023 		ldrd	r2, [r3]
 354 0188 FFF7FEFF 		bl	__aeabi_dmul
 355 018c 0246     		mov	r2, r0
 356 018e 0B46     		mov	r3, r1
 357 0190 9246     		mov	r10, r2
 358 0192 9B46     		mov	fp, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 9


 359 0194 584B     		ldr	r3, .L12+56
 360 0196 D3E90223 		ldrd	r2, [r3, #8]
 361 019a 1046     		mov	r0, r2
 362 019c 1946     		mov	r1, r3
 363 019e FFF7FEFF 		bl	cos
 364 01a2 0246     		mov	r2, r0
 365 01a4 0B46     		mov	r3, r1
 366 01a6 5046     		mov	r0, r10
 367 01a8 5946     		mov	r1, fp
 368 01aa FFF7FEFF 		bl	__aeabi_dmul
 369 01ae 0246     		mov	r2, r0
 370 01b0 0B46     		mov	r3, r1
 371 01b2 4046     		mov	r0, r8
 372 01b4 4946     		mov	r1, r9
 373 01b6 FFF7FEFF 		bl	__aeabi_dadd
 374 01ba 0246     		mov	r2, r0
 375 01bc 0B46     		mov	r3, r1
 376 01be 4E49     		ldr	r1, .L12+56
 377 01c0 C1E90423 		strd	r2, [r1, #16]
  99:main.c        ****     robot.y = robot.y + POSE_UPDATE_PERIOD * robot.v * sin(robot.theta);
 378              		.loc 1 99 0
 379 01c4 4C4B     		ldr	r3, .L12+56
 380 01c6 D3E90689 		ldrd	r8, [r3, #24]
 381 01ca 4B4B     		ldr	r3, .L12+56
 382 01cc D3E90801 		ldrd	r0, [r3, #32]
 383 01d0 3DA3     		adr	r3, .L12+8
 384 01d2 D3E90023 		ldrd	r2, [r3]
 385 01d6 FFF7FEFF 		bl	__aeabi_dmul
 386 01da 0246     		mov	r2, r0
 387 01dc 0B46     		mov	r3, r1
 388 01de 9246     		mov	r10, r2
 389 01e0 9B46     		mov	fp, r3
 390 01e2 454B     		ldr	r3, .L12+56
 391 01e4 D3E90223 		ldrd	r2, [r3, #8]
 392 01e8 1046     		mov	r0, r2
 393 01ea 1946     		mov	r1, r3
 394 01ec FFF7FEFF 		bl	sin
 395 01f0 0246     		mov	r2, r0
 396 01f2 0B46     		mov	r3, r1
 397 01f4 5046     		mov	r0, r10
 398 01f6 5946     		mov	r1, fp
 399 01f8 FFF7FEFF 		bl	__aeabi_dmul
 400 01fc 0246     		mov	r2, r0
 401 01fe 0B46     		mov	r3, r1
 402 0200 4046     		mov	r0, r8
 403 0202 4946     		mov	r1, r9
 404 0204 FFF7FEFF 		bl	__aeabi_dadd
 405 0208 0246     		mov	r2, r0
 406 020a 0B46     		mov	r3, r1
 407 020c 3A49     		ldr	r1, .L12+56
 408 020e C1E90623 		strd	r2, [r1, #24]
 100:main.c        ****     
 101:main.c        ****     
 102:main.c        ****     // Perform robot PI control
 103:main.c        ****     long double error = robot.desired_theta - robot.theta;  
 409              		.loc 1 103 0
 410 0212 394B     		ldr	r3, .L12+56
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 10


 411 0214 D3E90E01 		ldrd	r0, [r3, #56]
 412 0218 374B     		ldr	r3, .L12+56
 413 021a D3E90223 		ldrd	r2, [r3, #8]
 414 021e FFF7FEFF 		bl	__aeabi_dsub
 415 0222 0246     		mov	r2, r0
 416 0224 0B46     		mov	r3, r1
 417 0226 C7E90623 		strd	r2, [r7, #24]
 104:main.c        ****     if( error > M_PI ) {     // TODO: give this more thought. Want the robot to choose direction of
 418              		.loc 1 104 0
 419 022a 2BA3     		adr	r3, .L12+24
 420 022c D3E90023 		ldrd	r2, [r3]
 421 0230 D7E90601 		ldrd	r0, [r7, #24]
 422 0234 FFF7FEFF 		bl	__aeabi_dcmpgt
 423 0238 0346     		mov	r3, r0
 424 023a 002B     		cmp	r3, #0
 425 023c 0AD0     		beq	.L6
 105:main.c        ****         error = error - M_TWOPI;
 426              		.loc 1 105 0
 427 023e 20A3     		adr	r3, .L12
 428 0240 D3E90023 		ldrd	r2, [r3]
 429 0244 D7E90601 		ldrd	r0, [r7, #24]
 430 0248 FFF7FEFF 		bl	__aeabi_dsub
 431 024c 0246     		mov	r2, r0
 432 024e 0B46     		mov	r3, r1
 433 0250 C7E90623 		strd	r2, [r7, #24]
 434              	.L6:
 106:main.c        ****     }
 107:main.c        ****     if( error < -M_PI) {
 435              		.loc 1 107 0
 436 0254 22A3     		adr	r3, .L12+32
 437 0256 D3E90023 		ldrd	r2, [r3]
 438 025a D7E90601 		ldrd	r0, [r7, #24]
 439 025e FFF7FEFF 		bl	__aeabi_dcmplt
 440 0262 0346     		mov	r3, r0
 441 0264 002B     		cmp	r3, #0
 442 0266 0AD0     		beq	.L8
 108:main.c        ****         error = error + M_TWOPI;
 443              		.loc 1 108 0
 444 0268 15A3     		adr	r3, .L12
 445 026a D3E90023 		ldrd	r2, [r3]
 446 026e D7E90601 		ldrd	r0, [r7, #24]
 447 0272 FFF7FEFF 		bl	__aeabi_dadd
 448 0276 0246     		mov	r2, r0
 449 0278 0B46     		mov	r3, r1
 450 027a C7E90623 		strd	r2, [r7, #24]
 451              	.L8:
 109:main.c        ****     }
 110:main.c        ****     
 111:main.c        ****     // Calculate scaled velocity depending on how much we have to rotate (makes robot turn on spot 
 112:main.c        ****     double scaled_V = robot.desired_v *( 1 - logl( (M_E - 1) * fabsl(error) / M_PI + 1 ));
 452              		.loc 1 112 0
 453 027e 1E4B     		ldr	r3, .L12+56
 454 0280 D3E90C89 		ldrd	r8, [r3, #48]
 455 0284 BC69     		ldr	r4, [r7, #24]
 456 0286 FB69     		ldr	r3, [r7, #28]
 457 0288 23F00045 		bic	r5, r3, #-2147483648
 458 028c 16A3     		adr	r3, .L12+40
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 11


 459 028e D3E90023 		ldrd	r2, [r3]
 460 0292 2046     		mov	r0, r4
 461 0294 2946     		mov	r1, r5
 462 0296 FFF7FEFF 		bl	__aeabi_dmul
 463 029a 0346     		mov	r3, r0
 464 029c 0C46     		mov	r4, r1
 465 029e 1846     		mov	r0, r3
 466 02a0 2146     		mov	r1, r4
 467 02a2 0DA3     		adr	r3, .L12+24
 468 02a4 D3E90023 		ldrd	r2, [r3]
 469 02a8 FFF7FEFF 		bl	__aeabi_ddiv
 470 02ac 0346     		mov	r3, r0
 471 02ae 0C46     		mov	r4, r1
 472 02b0 1846     		mov	r0, r3
 473 02b2 2146     		mov	r1, r4
 474 02b4 4FF00002 		mov	r2, #0
 475 02b8 104B     		ldr	r3, .L12+60
 476 02ba FFF7FEFF 		bl	__aeabi_dadd
 477 02be 1FE0     		b	.L13
 478              	.L14:
 479              		.align	3
 480              	.L12:
 481 02c0 182D4454 		.word	1413754136
 482 02c4 FB211940 		.word	1075388923
 483 02c8 7B14AE47 		.word	1202590843
 484 02cc E17A943F 		.word	1066695393
 485 02d0 A4703D0A 		.word	171798692
 486 02d4 D70FAC40 		.word	1085018071
 487 02d8 182D4454 		.word	1413754136
 488 02dc FB210940 		.word	1074340347
 489 02e0 182D4454 		.word	1413754136
 490 02e4 FB2109C0 		.word	-1073143301
 491 02e8 D2AE2816 		.word	371764946
 492 02ec 157EFB3F 		.word	1073446421
 493 02f0 00000000 		.word	right_motor
 494 02f4 00000000 		.word	left_motor
 495 02f8 00000000 		.word	robot
 496 02fc 0000F03F 		.word	1072693248
 497              	.L13:
 498 0300 0346     		mov	r3, r0
 499 0302 0C46     		mov	r4, r1
 500 0304 1846     		mov	r0, r3
 501 0306 2146     		mov	r1, r4
 502 0308 FFF7FEFF 		bl	logl
 503 030c 0346     		mov	r3, r0
 504 030e 0C46     		mov	r4, r1
 505 0310 1A46     		mov	r2, r3
 506 0312 2346     		mov	r3, r4
 507 0314 4FF00000 		mov	r0, #0
 508 0318 4C49     		ldr	r1, .L15
 509 031a FFF7FEFF 		bl	__aeabi_dsub
 510 031e 0346     		mov	r3, r0
 511 0320 0C46     		mov	r4, r1
 512 0322 1A46     		mov	r2, r3
 513 0324 2346     		mov	r3, r4
 514 0326 4046     		mov	r0, r8
 515 0328 4946     		mov	r1, r9
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 12


 516 032a FFF7FEFF 		bl	__aeabi_dmul
 517 032e 0346     		mov	r3, r0
 518 0330 0C46     		mov	r4, r1
 519 0332 C7E90234 		strd	r3, [r7, #8]
 113:main.c        ****     
 114:main.c        ****     // Update motor tangential velocity based on error
 115:main.c        ****     robot.int_error = robot.int_error + error;
 520              		.loc 1 115 0
 521 0336 464B     		ldr	r3, .L15+4
 522 0338 D3E91401 		ldrd	r0, [r3, #80]
 523 033c D7E90623 		ldrd	r2, [r7, #24]
 524 0340 FFF7FEFF 		bl	__aeabi_dadd
 525 0344 0346     		mov	r3, r0
 526 0346 0C46     		mov	r4, r1
 527 0348 414A     		ldr	r2, .L15+4
 528 034a C2E91434 		strd	r3, [r2, #80]
 116:main.c        ****     long double new_w = robot.Kp * error + robot.Ki * robot.int_error;
 529              		.loc 1 116 0
 530 034e 404B     		ldr	r3, .L15+4
 531 0350 D3E91201 		ldrd	r0, [r3, #72]
 532 0354 D7E90623 		ldrd	r2, [r7, #24]
 533 0358 FFF7FEFF 		bl	__aeabi_dmul
 534 035c 0346     		mov	r3, r0
 535 035e 0C46     		mov	r4, r1
 536 0360 1D46     		mov	r5, r3
 537 0362 2646     		mov	r6, r4
 538 0364 3A4B     		ldr	r3, .L15+4
 539 0366 D3E91001 		ldrd	r0, [r3, #64]
 540 036a 394B     		ldr	r3, .L15+4
 541 036c 03F15004 		add	r4, r3, #80
 542 0370 D4E90034 		ldrd	r3, [r4]
 543 0374 1A46     		mov	r2, r3
 544 0376 2346     		mov	r3, r4
 545 0378 FFF7FEFF 		bl	__aeabi_dmul
 546 037c 0346     		mov	r3, r0
 547 037e 0C46     		mov	r4, r1
 548 0380 1A46     		mov	r2, r3
 549 0382 2346     		mov	r3, r4
 550 0384 2846     		mov	r0, r5
 551 0386 3146     		mov	r1, r6
 552 0388 FFF7FEFF 		bl	__aeabi_dadd
 553 038c 0346     		mov	r3, r0
 554 038e 0C46     		mov	r4, r1
 555 0390 C7E90034 		strd	r3, [r7]
 117:main.c        ****     right_motor.desired_w = (scaled_V + new_w * robot.axle_width / 2) / right_motor.wheel_radius;
 556              		.loc 1 117 0
 557 0394 2E4B     		ldr	r3, .L15+4
 558 0396 D3E90001 		ldrd	r0, [r3]
 559 039a D7E90023 		ldrd	r2, [r7]
 560 039e FFF7FEFF 		bl	__aeabi_dmul
 561 03a2 0346     		mov	r3, r0
 562 03a4 0C46     		mov	r4, r1
 563 03a6 1846     		mov	r0, r3
 564 03a8 2146     		mov	r1, r4
 565 03aa 4FF00002 		mov	r2, #0
 566 03ae 4FF08043 		mov	r3, #1073741824
 567 03b2 FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 13


 568 03b6 0346     		mov	r3, r0
 569 03b8 0C46     		mov	r4, r1
 570 03ba 1846     		mov	r0, r3
 571 03bc 2146     		mov	r1, r4
 572 03be D7E90223 		ldrd	r2, [r7, #8]
 573 03c2 FFF7FEFF 		bl	__aeabi_dadd
 574 03c6 0346     		mov	r3, r0
 575 03c8 0C46     		mov	r4, r1
 576 03ca 1846     		mov	r0, r3
 577 03cc 2146     		mov	r1, r4
 578 03ce 214B     		ldr	r3, .L15+8
 579 03d0 03F13804 		add	r4, r3, #56
 580 03d4 D4E90034 		ldrd	r3, [r4]
 581 03d8 1A46     		mov	r2, r3
 582 03da 2346     		mov	r3, r4
 583 03dc FFF7FEFF 		bl	__aeabi_ddiv
 584 03e0 0346     		mov	r3, r0
 585 03e2 0C46     		mov	r4, r1
 586 03e4 1B4A     		ldr	r2, .L15+8
 587 03e6 C2E90834 		strd	r3, [r2, #32]
 118:main.c        ****     left_motor.desired_w = (scaled_V - new_w * robot.axle_width / 2) / left_motor.wheel_radius;   
 588              		.loc 1 118 0
 589 03ea 194B     		ldr	r3, .L15+4
 590 03ec D3E90001 		ldrd	r0, [r3]
 591 03f0 D7E90023 		ldrd	r2, [r7]
 592 03f4 FFF7FEFF 		bl	__aeabi_dmul
 593 03f8 0346     		mov	r3, r0
 594 03fa 0C46     		mov	r4, r1
 595 03fc 1846     		mov	r0, r3
 596 03fe 2146     		mov	r1, r4
 597 0400 4FF00002 		mov	r2, #0
 598 0404 4FF08043 		mov	r3, #1073741824
 599 0408 FFF7FEFF 		bl	__aeabi_ddiv
 600 040c 0346     		mov	r3, r0
 601 040e 0C46     		mov	r4, r1
 602 0410 1A46     		mov	r2, r3
 603 0412 2346     		mov	r3, r4
 604 0414 D7E90201 		ldrd	r0, [r7, #8]
 605 0418 FFF7FEFF 		bl	__aeabi_dsub
 606 041c 0346     		mov	r3, r0
 607 041e 0C46     		mov	r4, r1
 608 0420 1846     		mov	r0, r3
 609 0422 2146     		mov	r1, r4
 610 0424 0C4B     		ldr	r3, .L15+12
 611 0426 03F13804 		add	r4, r3, #56
 612 042a D4E90034 		ldrd	r3, [r4]
 613 042e 1A46     		mov	r2, r3
 614 0430 2346     		mov	r3, r4
 615 0432 FFF7FEFF 		bl	__aeabi_ddiv
 616 0436 0346     		mov	r3, r0
 617 0438 0C46     		mov	r4, r1
 618 043a 074A     		ldr	r2, .L15+12
 619 043c C2E90834 		strd	r3, [r2, #32]
 119:main.c        ****     
 120:main.c        **** }
 620              		.loc 1 120 0
 621 0440 00BF     		nop
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 14


 622 0442 2437     		adds	r7, r7, #36
 623              		.cfi_def_cfa_offset 36
 624 0444 BD46     		mov	sp, r7
 625              		.cfi_def_cfa_register 13
 626              		@ sp needed
 627 0446 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 628              	.L16:
 629 044a 00BF     		.align	2
 630              	.L15:
 631 044c 0000F03F 		.word	1072693248
 632 0450 00000000 		.word	robot
 633 0454 00000000 		.word	right_motor
 634 0458 00000000 		.word	left_motor
 635              		.cfi_endproc
 636              	.LFE65:
 637              		.size	Pose_Update_Int_Handler, .-Pose_Update_Int_Handler
 638              		.section	.text.Motor_PI_Int_Handler,"ax",%progbits
 639              		.align	2
 640              		.global	Motor_PI_Int_Handler
 641              		.thumb
 642              		.thumb_func
 643              		.type	Motor_PI_Int_Handler, %function
 644              	Motor_PI_Int_Handler:
 645              	.LFB66:
 121:main.c        **** 
 122:main.c        **** /* Interrupt for motor PI error handler and drive. */
 123:main.c        **** CY_ISR( Motor_PI_Int_Handler ) {
 646              		.loc 1 123 0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 8
 649              		@ frame_needed = 1, uses_anonymous_args = 0
 650 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 651              		.cfi_def_cfa_offset 20
 652              		.cfi_offset 4, -20
 653              		.cfi_offset 5, -16
 654              		.cfi_offset 6, -12
 655              		.cfi_offset 7, -8
 656              		.cfi_offset 14, -4
 657 0002 83B0     		sub	sp, sp, #12
 658              		.cfi_def_cfa_offset 32
 659 0004 00AF     		add	r7, sp, #0
 660              		.cfi_def_cfa_register 7
 124:main.c        ****     long double error = left_motor.desired_w - left_motor.w;
 661              		.loc 1 124 0
 662 0006 514B     		ldr	r3, .L18
 663 0008 D3E90801 		ldrd	r0, [r3, #32]
 664 000c 4F4B     		ldr	r3, .L18
 665 000e 03F11004 		add	r4, r3, #16
 666 0012 D4E90034 		ldrd	r3, [r4]
 667 0016 1A46     		mov	r2, r3
 668 0018 2346     		mov	r3, r4
 669 001a FFF7FEFF 		bl	__aeabi_dsub
 670 001e 0346     		mov	r3, r0
 671 0020 0C46     		mov	r4, r1
 672 0022 C7E90034 		strd	r3, [r7]
 125:main.c        ****     left_motor.int_error  = left_motor.int_error + error;
 673              		.loc 1 125 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 15


 674 0026 494B     		ldr	r3, .L18
 675 0028 D3E90201 		ldrd	r0, [r3, #8]
 676 002c D7E90023 		ldrd	r2, [r7]
 677 0030 FFF7FEFF 		bl	__aeabi_dadd
 678 0034 0346     		mov	r3, r0
 679 0036 0C46     		mov	r4, r1
 680 0038 444A     		ldr	r2, .L18
 681 003a C2E90234 		strd	r3, [r2, #8]
 126:main.c        ****     left_motor.duty_cycle = left_motor.duty_cycle + left_motor.Kp * error + left_motor.Ki * left_mo
 682              		.loc 1 126 0
 683 003e 434B     		ldr	r3, .L18
 684 0040 D3E90045 		ldrd	r4, [r3]
 685 0044 414B     		ldr	r3, .L18
 686 0046 D3E90C01 		ldrd	r0, [r3, #48]
 687 004a D7E90023 		ldrd	r2, [r7]
 688 004e FFF7FEFF 		bl	__aeabi_dmul
 689 0052 0246     		mov	r2, r0
 690 0054 0B46     		mov	r3, r1
 691 0056 2046     		mov	r0, r4
 692 0058 2946     		mov	r1, r5
 693 005a FFF7FEFF 		bl	__aeabi_dadd
 694 005e 0346     		mov	r3, r0
 695 0060 0C46     		mov	r4, r1
 696 0062 1D46     		mov	r5, r3
 697 0064 2646     		mov	r6, r4
 698 0066 394B     		ldr	r3, .L18
 699 0068 D3E90A01 		ldrd	r0, [r3, #40]
 700 006c 374B     		ldr	r3, .L18
 701 006e 03F10804 		add	r4, r3, #8
 702 0072 D4E90034 		ldrd	r3, [r4]
 703 0076 1A46     		mov	r2, r3
 704 0078 2346     		mov	r3, r4
 705 007a FFF7FEFF 		bl	__aeabi_dmul
 706 007e 0346     		mov	r3, r0
 707 0080 0C46     		mov	r4, r1
 708 0082 1A46     		mov	r2, r3
 709 0084 2346     		mov	r3, r4
 710 0086 2846     		mov	r0, r5
 711 0088 3146     		mov	r1, r6
 712 008a FFF7FEFF 		bl	__aeabi_dadd
 713 008e 0346     		mov	r3, r0
 714 0090 0C46     		mov	r4, r1
 715 0092 2E4A     		ldr	r2, .L18
 716 0094 C2E90034 		strd	r3, [r2]
 127:main.c        ****     Drive_Left_Motor(left_motor.duty_cycle);
 717              		.loc 1 127 0
 718 0098 2C4B     		ldr	r3, .L18
 719 009a 18CB     		ldmia	r3, {r3-r4}
 720 009c 1846     		mov	r0, r3
 721 009e 2146     		mov	r1, r4
 722 00a0 FFF7FEFF 		bl	Drive_Left_Motor
 128:main.c        ****     
 129:main.c        ****     error = right_motor.desired_w - right_motor.w;
 723              		.loc 1 129 0
 724 00a4 2A4B     		ldr	r3, .L18+4
 725 00a6 D3E90801 		ldrd	r0, [r3, #32]
 726 00aa 294B     		ldr	r3, .L18+4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 16


 727 00ac 03F11004 		add	r4, r3, #16
 728 00b0 D4E90034 		ldrd	r3, [r4]
 729 00b4 1A46     		mov	r2, r3
 730 00b6 2346     		mov	r3, r4
 731 00b8 FFF7FEFF 		bl	__aeabi_dsub
 732 00bc 0346     		mov	r3, r0
 733 00be 0C46     		mov	r4, r1
 734 00c0 C7E90034 		strd	r3, [r7]
 130:main.c        ****     right_motor.int_error  = right_motor.int_error + error;
 735              		.loc 1 130 0
 736 00c4 224B     		ldr	r3, .L18+4
 737 00c6 D3E90201 		ldrd	r0, [r3, #8]
 738 00ca D7E90023 		ldrd	r2, [r7]
 739 00ce FFF7FEFF 		bl	__aeabi_dadd
 740 00d2 0346     		mov	r3, r0
 741 00d4 0C46     		mov	r4, r1
 742 00d6 1E4A     		ldr	r2, .L18+4
 743 00d8 C2E90234 		strd	r3, [r2, #8]
 131:main.c        ****     right_motor.duty_cycle = right_motor.duty_cycle + right_motor.Kp*error + right_motor.Ki * right
 744              		.loc 1 131 0
 745 00dc 1C4B     		ldr	r3, .L18+4
 746 00de D3E90045 		ldrd	r4, [r3]
 747 00e2 1B4B     		ldr	r3, .L18+4
 748 00e4 D3E90C01 		ldrd	r0, [r3, #48]
 749 00e8 D7E90023 		ldrd	r2, [r7]
 750 00ec FFF7FEFF 		bl	__aeabi_dmul
 751 00f0 0246     		mov	r2, r0
 752 00f2 0B46     		mov	r3, r1
 753 00f4 2046     		mov	r0, r4
 754 00f6 2946     		mov	r1, r5
 755 00f8 FFF7FEFF 		bl	__aeabi_dadd
 756 00fc 0346     		mov	r3, r0
 757 00fe 0C46     		mov	r4, r1
 758 0100 1D46     		mov	r5, r3
 759 0102 2646     		mov	r6, r4
 760 0104 124B     		ldr	r3, .L18+4
 761 0106 D3E90A01 		ldrd	r0, [r3, #40]
 762 010a 114B     		ldr	r3, .L18+4
 763 010c 03F10804 		add	r4, r3, #8
 764 0110 D4E90034 		ldrd	r3, [r4]
 765 0114 1A46     		mov	r2, r3
 766 0116 2346     		mov	r3, r4
 767 0118 FFF7FEFF 		bl	__aeabi_dmul
 768 011c 0346     		mov	r3, r0
 769 011e 0C46     		mov	r4, r1
 770 0120 1A46     		mov	r2, r3
 771 0122 2346     		mov	r3, r4
 772 0124 2846     		mov	r0, r5
 773 0126 3146     		mov	r1, r6
 774 0128 FFF7FEFF 		bl	__aeabi_dadd
 775 012c 0346     		mov	r3, r0
 776 012e 0C46     		mov	r4, r1
 777 0130 074A     		ldr	r2, .L18+4
 778 0132 C2E90034 		strd	r3, [r2]
 132:main.c        ****     Drive_Right_Motor(right_motor.duty_cycle);
 779              		.loc 1 132 0
 780 0136 064B     		ldr	r3, .L18+4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 17


 781 0138 18CB     		ldmia	r3, {r3-r4}
 782 013a 1846     		mov	r0, r3
 783 013c 2146     		mov	r1, r4
 784 013e FFF7FEFF 		bl	Drive_Right_Motor
 133:main.c        **** 
 134:main.c        **** }
 785              		.loc 1 134 0
 786 0142 00BF     		nop
 787 0144 0C37     		adds	r7, r7, #12
 788              		.cfi_def_cfa_offset 20
 789 0146 BD46     		mov	sp, r7
 790              		.cfi_def_cfa_register 13
 791              		@ sp needed
 792 0148 F0BD     		pop	{r4, r5, r6, r7, pc}
 793              	.L19:
 794 014a 00BF     		.align	2
 795              	.L18:
 796 014c 00000000 		.word	left_motor
 797 0150 00000000 		.word	right_motor
 798              		.cfi_endproc
 799              	.LFE66:
 800              		.size	Motor_PI_Int_Handler, .-Motor_PI_Int_Handler
 801              		.global	__aeabi_dcmpge
 802              		.section	.text.Navigation_Test_Int_Handler,"ax",%progbits
 803              		.align	2
 804              		.global	Navigation_Test_Int_Handler
 805              		.thumb
 806              		.thumb_func
 807              		.type	Navigation_Test_Int_Handler, %function
 808              	Navigation_Test_Int_Handler:
 809              	.LFB67:
 135:main.c        **** 
 136:main.c        **** /* Interrupt for test handler? */
 137:main.c        **** CY_ISR( Navigation_Test_Int_Handler ) {
 810              		.loc 1 137 0
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 8
 813              		@ frame_needed = 1, uses_anonymous_args = 0
 814 0000 90B5     		push	{r4, r7, lr}
 815              		.cfi_def_cfa_offset 12
 816              		.cfi_offset 4, -12
 817              		.cfi_offset 7, -8
 818              		.cfi_offset 14, -4
 819 0002 83B0     		sub	sp, sp, #12
 820              		.cfi_def_cfa_offset 24
 821 0004 00AF     		add	r7, sp, #0
 822              		.cfi_def_cfa_register 7
 138:main.c        ****     long double angle;
 139:main.c        ****     angle = robot.desired_theta + M_PI/8;
 823              		.loc 1 139 0
 824 0006 1A4B     		ldr	r3, .L24+16
 825 0008 D3E90E01 		ldrd	r0, [r3, #56]
 826 000c 14A3     		adr	r3, .L24
 827 000e D3E90023 		ldrd	r2, [r3]
 828 0012 FFF7FEFF 		bl	__aeabi_dadd
 829 0016 0346     		mov	r3, r0
 830 0018 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 18


 831 001a C7E90034 		strd	r3, [r7]
 140:main.c        ****     if( angle >= M_TWOPI ) {
 832              		.loc 1 140 0
 833 001e 12A3     		adr	r3, .L24+8
 834 0020 D3E90023 		ldrd	r2, [r3]
 835 0024 D7E90001 		ldrd	r0, [r7]
 836 0028 FFF7FEFF 		bl	__aeabi_dcmpge
 837 002c 0346     		mov	r3, r0
 838 002e 002B     		cmp	r3, #0
 839 0030 0AD0     		beq	.L21
 141:main.c        ****         angle = angle - M_TWOPI;
 840              		.loc 1 141 0
 841 0032 0DA3     		adr	r3, .L24+8
 842 0034 D3E90023 		ldrd	r2, [r3]
 843 0038 D7E90001 		ldrd	r0, [r7]
 844 003c FFF7FEFF 		bl	__aeabi_dsub
 845 0040 0346     		mov	r3, r0
 846 0042 0C46     		mov	r4, r1
 847 0044 C7E90034 		strd	r3, [r7]
 848              	.L21:
 142:main.c        ****     }
 143:main.c        ****     robot.desired_theta = angle;
 849              		.loc 1 143 0
 850 0048 094A     		ldr	r2, .L24+16
 851 004a D7E90034 		ldrd	r3, [r7]
 852 004e C2E90E34 		strd	r3, [r2, #56]
 144:main.c        **** }
 853              		.loc 1 144 0
 854 0052 00BF     		nop
 855 0054 0C37     		adds	r7, r7, #12
 856              		.cfi_def_cfa_offset 12
 857 0056 BD46     		mov	sp, r7
 858              		.cfi_def_cfa_register 13
 859              		@ sp needed
 860 0058 90BD     		pop	{r4, r7, pc}
 861              	.L25:
 862 005a 00BFAFF3 		.align	3
 862      0080
 863              	.L24:
 864 0060 182D4454 		.word	1413754136
 865 0064 FB21D93F 		.word	1071194619
 866 0068 182D4454 		.word	1413754136
 867 006c FB211940 		.word	1075388923
 868 0070 00000000 		.word	robot
 869              		.cfi_endproc
 870              	.LFE67:
 871              		.size	Navigation_Test_Int_Handler, .-Navigation_Test_Int_Handler
 872              		.global	__aeabi_d2iz
 873              		.section	.rodata
 874              		.align	2
 875              	.LC1:
 876 0010 46494E49 		.ascii	"FINISHED! Did I succeed?\000"
 876      53484544 
 876      21204469 
 876      64204920 
 876      73756363 
 877 0029 000000   		.align	2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 19


 878              	.LC2:
 879 002c 25642000 		.ascii	"%d \000"
 880              		.align	2
 881              	.LC3:
 882 0030 0A00     		.ascii	"\012\000"
 883 0032 0000     		.align	2
 884              	.LC4:
 885 0034 0A0A00   		.ascii	"\012\012\000"
 886 0037 00       		.align	3
 887              	.LC0:
 888 0038 00000000 		.word	0
 889 003c 00C05740 		.word	1079492608
 890 0040 00000000 		.word	0
 891 0044 00C05740 		.word	1079492608
 892 0048 00000000 		.word	0
 893 004c 00C05740 		.word	1079492608
 894 0050 00000000 		.word	0
 895 0054 00C05740 		.word	1079492608
 896 0058 00000000 		.word	0
 897 005c 00804140 		.word	1078034432
 898 0060 00000000 		.word	0
 899 0064 00C05740 		.word	1079492608
 900 0068 00000000 		.word	0
 901 006c 00804140 		.word	1078034432
 902 0070 00000000 		.word	0
 903 0074 00804140 		.word	1078034432
 904              		.section	.text.main,"ax",%progbits
 905              		.align	2
 906              		.global	main
 907              		.thumb
 908              		.thumb_func
 909              		.type	main, %function
 910              	main:
 911              	.LFB68:
 145:main.c        **** 
 146:main.c        **** 
 147:main.c        **** int main(void)
 148:main.c        **** {
 912              		.loc 1 148 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 616
 915              		@ frame_needed = 1, uses_anonymous_args = 0
 916 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 917              		.cfi_def_cfa_offset 28
 918              		.cfi_offset 4, -28
 919              		.cfi_offset 5, -24
 920              		.cfi_offset 6, -20
 921              		.cfi_offset 7, -16
 922              		.cfi_offset 8, -12
 923              		.cfi_offset 9, -8
 924              		.cfi_offset 14, -4
 925 0004 ADF5257D 		sub	sp, sp, #660
 926              		.cfi_def_cfa_offset 688
 927 0008 0AAF     		add	r7, sp, #40
 928              		.cfi_def_cfa 7, 648
 149:main.c        ****     // Enable all interrupts
 150:main.c        ****     CyGlobalIntEnable;
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 20


 929              		.loc 1 150 0
 930              		.syntax unified
 931              	@ 150 "main.c" 1
 932 000a 62B6     		CPSIE   i
 933              	@ 0 "" 2
 151:main.c        ****     
 152:main.c        ****     // Registration of Timer ISR
 153:main.c        ****     Timer_Echo_Int_StartEx( Timer_Int_Handler );
 934              		.loc 1 153 0
 935              		.thumb
 936              		.syntax unified
 937 000c B448     		ldr	r0, .L81+48
 938 000e FFF7FEFF 		bl	Timer_Echo_Int_StartEx
 154:main.c        ****     Pose_Update_Int_StartEx( Pose_Update_Int_Handler );
 939              		.loc 1 154 0
 940 0012 B448     		ldr	r0, .L81+52
 941 0014 FFF7FEFF 		bl	Pose_Update_Int_StartEx
 155:main.c        ****     Motor_PI_Int_StartEx( Motor_PI_Int_Handler );
 942              		.loc 1 155 0
 943 0018 B348     		ldr	r0, .L81+56
 944 001a FFF7FEFF 		bl	Motor_PI_Int_StartEx
 156:main.c        ****     //Testing_Int_StartEx( Navigation_Test_Int_Handler );
 157:main.c        ****     
 158:main.c        ****     // Start up code - enable UART, PWM and Timer used for ultrasonic module
 159:main.c        ****     UART_Start();
 945              		.loc 1 159 0
 946 001e FFF7FEFF 		bl	UART_Start
 160:main.c        ****     Timer_Echo_Start();
 947              		.loc 1 160 0
 948 0022 FFF7FEFF 		bl	Timer_Echo_Start
 161:main.c        ****     PWM_Trigger_Start();
 949              		.loc 1 161 0
 950 0026 FFF7FEFF 		bl	PWM_Trigger_Start
 162:main.c        ****     QuadDec_L_Start();
 951              		.loc 1 162 0
 952 002a FFF7FEFF 		bl	QuadDec_L_Start
 163:main.c        ****     PWM_Motor_L_Start();
 953              		.loc 1 163 0
 954 002e FFF7FEFF 		bl	PWM_Motor_L_Start
 164:main.c        ****     QuadDec_R_Start();
 955              		.loc 1 164 0
 956 0032 FFF7FEFF 		bl	QuadDec_R_Start
 165:main.c        ****     PWM_Motor_R_Start();
 957              		.loc 1 165 0
 958 0036 FFF7FEFF 		bl	PWM_Motor_R_Start
 166:main.c        ****     Timer_Avoidance_Start();
 959              		.loc 1 166 0
 960 003a FFF7FEFF 		bl	Timer_Avoidance_Start
 167:main.c        ****     Timer_Avoidance_WriteCounter(60000); // Cause robot to start moving immediately
 961              		.loc 1 167 0
 962 003e 4EF66020 		movw	r0, #60000
 963 0042 FFF7FEFF 		bl	Timer_Avoidance_WriteCounter
 168:main.c        ****     
 169:main.c        ****     // Define and initialise motors
 170:main.c        ****     long double wheel_r_scale = 0.9378;
 964              		.loc 1 170 0
 965 0046 9AA4     		adr	r4, .L81
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 21


 966 0048 D4E90034 		ldrd	r3, [r4]
 967 004c 07F50672 		add	r2, r7, #536
 968 0050 C2E90034 		strd	r3, [r2]
 171:main.c        ****     long double motor_Ki = 3e-6;     // TODO: Determine good value
 969              		.loc 1 171 0
 970 0054 98A4     		adr	r4, .L81+8
 971 0056 D4E90034 		ldrd	r3, [r4]
 972 005a 07F50472 		add	r2, r7, #528
 973 005e C2E90034 		strd	r3, [r2]
 172:main.c        ****     long double motor_Kp = 0.0025;   // TODO: Determine good value
 974              		.loc 1 172 0
 975 0062 97A4     		adr	r4, .L81+16
 976 0064 D4E90034 		ldrd	r3, [r4]
 977 0068 07F50272 		add	r2, r7, #520
 978 006c C2E90034 		strd	r3, [r2]
 173:main.c        ****     
 174:main.c        ****     motor_create(&left_motor, wheel_r_scale, motor_Ki, motor_Kp);
 979              		.loc 1 174 0
 980 0070 07F50273 		add	r3, r7, #520
 981 0074 18CB     		ldmia	r3, {r3-r4}
 982 0076 CDE90234 		strd	r3, [sp, #8]
 983 007a 07F50473 		add	r3, r7, #528
 984 007e 18CB     		ldmia	r3, {r3-r4}
 985 0080 CDE90034 		strd	r3, [sp]
 986 0084 07F50673 		add	r3, r7, #536
 987 0088 D3E90023 		ldrd	r2, [r3]
 988 008c 9748     		ldr	r0, .L81+60
 989 008e FFF7FEFF 		bl	motor_create
 175:main.c        ****     motor_create(&right_motor, wheel_r_scale, motor_Ki, motor_Kp);
 990              		.loc 1 175 0
 991 0092 07F50273 		add	r3, r7, #520
 992 0096 18CB     		ldmia	r3, {r3-r4}
 993 0098 CDE90234 		strd	r3, [sp, #8]
 994 009c 07F50473 		add	r3, r7, #528
 995 00a0 18CB     		ldmia	r3, {r3-r4}
 996 00a2 CDE90034 		strd	r3, [sp]
 997 00a6 07F50673 		add	r3, r7, #536
 998 00aa D3E90023 		ldrd	r2, [r3]
 999 00ae 9048     		ldr	r0, .L81+64
 1000 00b0 FFF7FEFF 		bl	motor_create
 176:main.c        ****     
 177:main.c        ****     // Define and initialise robot 
 178:main.c        ****     long double robot_axle_width = 0.936*22.5;  // TODO: get accurate measurement
 1001              		.loc 1 178 0
 1002 00b4 84A4     		adr	r4, .L81+24
 1003 00b6 D4E90034 		ldrd	r3, [r4]
 1004 00ba 07F50072 		add	r2, r7, #512
 1005 00be C2E90034 		strd	r3, [r2]
 179:main.c        ****     long double robot_Ki = 3e-5;    // TODO: Determine good value
 1006              		.loc 1 179 0
 1007 00c2 83A4     		adr	r4, .L81+32
 1008 00c4 D4E90034 		ldrd	r3, [r4]
 1009 00c8 07F5FC72 		add	r2, r7, #504
 1010 00cc C2E90034 		strd	r3, [r2]
 180:main.c        ****     long double robot_Kp = 0.5;     // was previously 0.75 before changing for MS1
 1011              		.loc 1 180 0
 1012 00d0 4FF00003 		mov	r3, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 22


 1013 00d4 874C     		ldr	r4, .L81+68
 1014 00d6 07F5F872 		add	r2, r7, #496
 1015 00da C2E90034 		strd	r3, [r2]
 181:main.c        ****     long double min_distance = 10;   // Minimum distance between robot position and goal
 1016              		.loc 1 181 0
 1017 00de 4FF00003 		mov	r3, #0
 1018 00e2 854C     		ldr	r4, .L81+72
 1019 00e4 07F5F472 		add	r2, r7, #488
 1020 00e8 C2E90034 		strd	r3, [r2]
 182:main.c        **** 
 183:main.c        **** 
 184:main.c        ****     /*======================= ROBOT STARTING POSITION =======================*/
 185:main.c        ****     long double start_x = 35;    // Starting x, duh!
 1021              		.loc 1 185 0
 1022 00ec 4FF00003 		mov	r3, #0
 1023 00f0 824C     		ldr	r4, .L81+76
 1024 00f2 07F5F072 		add	r2, r7, #480
 1025 00f6 C2E90034 		strd	r3, [r2]
 186:main.c        ****     long double start_y = 35;    // Starting y, duh!
 1026              		.loc 1 186 0
 1027 00fa 4FF00003 		mov	r3, #0
 1028 00fe 7F4C     		ldr	r4, .L81+76
 1029 0100 07F5EC72 		add	r2, r7, #472
 1030 0104 C2E90034 		strd	r3, [r2]
 187:main.c        **** 
 188:main.c        ****     robot_create(&robot, robot_axle_width, robot_Ki, robot_Kp, min_distance, start_x, start_y);
 1031              		.loc 1 188 0
 1032 0108 07F5EC73 		add	r3, r7, #472
 1033 010c 18CB     		ldmia	r3, {r3-r4}
 1034 010e CDE90834 		strd	r3, [sp, #32]
 1035 0112 07F5F073 		add	r3, r7, #480
 1036 0116 18CB     		ldmia	r3, {r3-r4}
 1037 0118 CDE90634 		strd	r3, [sp, #24]
 1038 011c 07F5F473 		add	r3, r7, #488
 1039 0120 18CB     		ldmia	r3, {r3-r4}
 1040 0122 CDE90434 		strd	r3, [sp, #16]
 1041 0126 07F5F873 		add	r3, r7, #496
 1042 012a 18CB     		ldmia	r3, {r3-r4}
 1043 012c CDE90234 		strd	r3, [sp, #8]
 1044 0130 07F5FC73 		add	r3, r7, #504
 1045 0134 18CB     		ldmia	r3, {r3-r4}
 1046 0136 CDE90034 		strd	r3, [sp]
 1047 013a 07F50073 		add	r3, r7, #512
 1048 013e D3E90023 		ldrd	r2, [r3]
 1049 0142 6F48     		ldr	r0, .L81+80
 1050 0144 FFF7FEFF 		bl	robot_create
 189:main.c        ****     
 190:main.c        ****     /*=======================================================================*/
 191:main.c        **** 
 192:main.c        ****     // Define sensor directions (start from front sensor, then move clockwise)
 193:main.c        ****     sensors.direction[0] = 0;
 1051              		.loc 1 193 0
 1052 0148 6E4B     		ldr	r3, .L81+84
 1053 014a 0022     		movs	r2, #0
 1054 014c 1A60     		str	r2, [r3]
 194:main.c        ****     sensors.direction[1] = 30;
 1055              		.loc 1 194 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 23


 1056 014e 6D4B     		ldr	r3, .L81+84
 1057 0150 1E22     		movs	r2, #30
 1058 0152 5A60     		str	r2, [r3, #4]
 195:main.c        ****     sensors.direction[2] = 90;
 1059              		.loc 1 195 0
 1060 0154 6B4B     		ldr	r3, .L81+84
 1061 0156 5A22     		movs	r2, #90
 1062 0158 9A60     		str	r2, [r3, #8]
 196:main.c        ****     sensors.direction[3] = 270;
 1063              		.loc 1 196 0
 1064 015a 6A4B     		ldr	r3, .L81+84
 1065 015c 4FF48772 		mov	r2, #270
 1066 0160 DA60     		str	r2, [r3, #12]
 197:main.c        ****     sensors.direction[4] = 330;
 1067              		.loc 1 197 0
 1068 0162 684B     		ldr	r3, .L81+84
 1069 0164 4FF4A572 		mov	r2, #330
 1070 0168 1A61     		str	r2, [r3, #16]
 198:main.c        **** 
 199:main.c        ****     /*========================= M1: Goal Definition =========================*/
 200:main.c        ****     double n_goals = 6;    // Number of goals, duh!
 1071              		.loc 1 200 0
 1072 016a 4FF00003 		mov	r3, #0
 1073 016e 664C     		ldr	r4, .L81+88
 1074 0170 07F5E872 		add	r2, r7, #464
 1075 0174 C2E90034 		strd	r3, [r2]
 201:main.c        ****     double goals[8] = {95, 95, 95, 95, 35, 95, 35, 35};    // Coordinates of goals [x1, y1, x2, y2,
 1076              		.loc 1 201 0
 1077 0178 07F59073 		add	r3, r7, #288
 1078 017c 634A     		ldr	r2, .L81+92
 1079 017e 1C46     		mov	r4, r3
 1080 0180 1546     		mov	r5, r2
 1081 0182 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1082 0184 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1083 0186 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1084 0188 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1085 018a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1086 018c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1087 018e 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1088 0192 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 202:main.c        ****     robot.goal_x = goals[0];   // Update robot x goal
 1089              		.loc 1 202 0
 1090 0196 07F59073 		add	r3, r7, #288
 1091 019a 18CB     		ldmia	r3, {r3-r4}
 1092 019c 584A     		ldr	r2, .L81+80
 1093 019e C2E91634 		strd	r3, [r2, #88]
 203:main.c        ****     robot.goal_y = goals[1];   // Update robot y goal
 1094              		.loc 1 203 0
 1095 01a2 07F59073 		add	r3, r7, #288
 1096 01a6 03F10804 		add	r4, r3, #8
 1097 01aa D4E90034 		ldrd	r3, [r4]
 1098 01ae 544A     		ldr	r2, .L81+80
 1099 01b0 C2E91834 		strd	r3, [r2, #96]
 204:main.c        ****     int goals_reached = 0;  // Counter for number of goas reached, duh!
 1100              		.loc 1 204 0
 1101 01b4 0023     		movs	r3, #0
 1102 01b6 C7F86432 		str	r3, [r7, #612]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 24


 205:main.c        **** 
 206:main.c        ****     /*=======================================================================*/    
 207:main.c        ****     
 208:main.c        **** 
 209:main.c        ****     /*======================== M1: VFH initialisation =======================*/
 210:main.c        ****     // Defining algorithm parameters taken from https://github.com/rzninvo/robotics_final_project/b
 211:main.c        ****     map = *(grid_create(65, 65, 2));
 1103              		.loc 1 211 0
 1104 01ba 0222     		movs	r2, #2
 1105 01bc 4121     		movs	r1, #65
 1106 01be 4120     		movs	r0, #65
 1107 01c0 FFF7FEFF 		bl	grid_create
 1108 01c4 0246     		mov	r2, r0
 1109 01c6 524B     		ldr	r3, .L81+96
 1110 01c8 1C46     		mov	r4, r3
 1111 01ca 1346     		mov	r3, r2
 1112 01cc 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 1113 01ce 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 212:main.c        ****     if( map.cells == NULL ) {
 1114              		.loc 1 212 0
 1115 01d2 4F4B     		ldr	r3, .L81+96
 1116 01d4 DB68     		ldr	r3, [r3, #12]
 1117 01d6 002B     		cmp	r3, #0
 1118 01d8 05D1     		bne	.L27
 213:main.c        ****         UART_PutChar('N');
 1119              		.loc 1 213 0
 1120 01da 4E20     		movs	r0, #78
 1121 01dc FFF7FEFF 		bl	UART_PutChar
 214:main.c        ****         CyDelay(10000000);
 1122              		.loc 1 214 0
 1123 01e0 4C48     		ldr	r0, .L81+100
 1124 01e2 FFF7FEFF 		bl	CyDelay
 1125              	.L27:
 215:main.c        ****     }
 216:main.c        ****     // Active Window
 217:main.c        ****     double alpha = 5;       // Degrees
 1126              		.loc 1 217 0
 1127 01e6 4FF00003 		mov	r3, #0
 1128 01ea 4B4C     		ldr	r4, .L81+104
 1129 01ec 07F5E472 		add	r2, r7, #456
 1130 01f0 C2E90034 		strd	r3, [r2]
 218:main.c        ****     double coeff_l = 3;     // Smoothing factor
 1131              		.loc 1 218 0
 1132 01f4 4FF00003 		mov	r3, #0
 1133 01f8 484C     		ldr	r4, .L81+108
 1134 01fa 07F5E072 		add	r2, r7, #448
 1135 01fe C2E90034 		strd	r3, [r2]
 219:main.c        ****     int window_size = 25;
 1136              		.loc 1 219 0
 1137 0202 1923     		movs	r3, #25
 1138 0204 C7F8BC31 		str	r3, [r7, #444]
 220:main.c        ****     double coeff_a = 5;     // a - bd_max = 0 
 1139              		.loc 1 220 0
 1140 0208 4FF00003 		mov	r3, #0
 1141 020c 424C     		ldr	r4, .L81+104
 1142 020e 07F5D872 		add	r2, r7, #432
 1143 0212 C2E90034 		strd	r3, [r2]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 25


 221:main.c        ****     double coeff_b = coeff_a / (sqrt(2) * ((window_size - 1) / 2));  // d_max = sqrt(2) * (ws - 1) 
 1144              		.loc 1 221 0
 1145 0216 D7F8BC31 		ldr	r3, [r7, #444]
 1146 021a 013B     		subs	r3, r3, #1
 1147 021c DA0F     		lsrs	r2, r3, #31
 1148 021e 1344     		add	r3, r3, r2
 1149 0220 5B10     		asrs	r3, r3, #1
 1150 0222 1846     		mov	r0, r3
 1151 0224 FFF7FEFF 		bl	__aeabi_i2d
 1152 0228 2BA3     		adr	r3, .L81+40
 1153 022a D3E90023 		ldrd	r2, [r3]
 1154 022e FFF7FEFF 		bl	__aeabi_dmul
 1155 0232 0346     		mov	r3, r0
 1156 0234 0C46     		mov	r4, r1
 1157 0236 1A46     		mov	r2, r3
 1158 0238 2346     		mov	r3, r4
 1159 023a 07F5D871 		add	r1, r7, #432
 1160 023e D1E90001 		ldrd	r0, [r1]
 1161 0242 FFF7FEFF 		bl	__aeabi_ddiv
 1162 0246 0346     		mov	r3, r0
 1163 0248 0C46     		mov	r4, r1
 1164 024a 07F5D472 		add	r2, r7, #424
 1165 024e C2E90034 		strd	r3, [r2]
 222:main.c        ****     
 223:main.c        ****     
 224:main.c        ****     active = *grid_create(window_size, window_size, 2);
 1166              		.loc 1 224 0
 1167 0252 0222     		movs	r2, #2
 1168 0254 D7F8BC11 		ldr	r1, [r7, #444]
 1169 0258 D7F8BC01 		ldr	r0, [r7, #444]
 1170 025c FFF7FEFF 		bl	grid_create
 1171 0260 0246     		mov	r2, r0
 1172 0262 2F4B     		ldr	r3, .L81+112
 1173 0264 1C46     		mov	r4, r3
 1174 0266 1346     		mov	r3, r2
 1175 0268 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 1176 026a 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 225:main.c        ****     
 226:main.c        ****     // Polar Histogram and Candidate Valley
 227:main.c        ****     smoothed_POD = *pod_create(alpha);
 1177              		.loc 1 227 0
 1178 026e 07F5E473 		add	r3, r7, #456
 1179 0272 D3E90001 		ldrd	r0, [r3]
 1180 0276 FFF7FEFF 		bl	pod_create
 1181 027a 0246     		mov	r2, r0
 1182 027c 294B     		ldr	r3, .L81+116
 1183 027e 92E80300 		ldmia	r2, {r0, r1}
 1184 0282 83E80300 		stmia	r3, {r0, r1}
 228:main.c        **** 
 229:main.c        ****     double valley_threshold_lower = 10;
 1185              		.loc 1 229 0
 1186 0286 4FF00003 		mov	r3, #0
 1187 028a 1B4C     		ldr	r4, .L81+72
 1188 028c 07F5D072 		add	r2, r7, #416
 1189 0290 C2E90034 		strd	r3, [r2]
 230:main.c        ****     double valley_threshold_upper = 25;
 1190              		.loc 1 230 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 26


 1191 0294 4FF00003 		mov	r3, #0
 1192 0298 234C     		ldr	r4, .L81+120
 1193 029a 07F5CC72 		add	r2, r7, #408
 1194 029e C2E90034 		strd	r3, [r2]
 231:main.c        ****     double s_max = 40;
 1195              		.loc 1 231 0
 1196 02a2 4FF00003 		mov	r3, #0
 1197 02a6 214C     		ldr	r4, .L81+124
 1198 02a8 07F5C872 		add	r2, r7, #400
 1199 02ac 40E0     		b	.L82
 1200              	.L83:
 1201 02ae 00BF     		.align	3
 1202              	.L81:
 1203 02b0 A60A4625 		.word	625347238
 1204 02b4 7502EE3F 		.word	1072562805
 1205 02b8 54E41071 		.word	1896932436
 1206 02bc 732AC93E 		.word	1053370995
 1207 02c0 7B14AE47 		.word	1202590843
 1208 02c4 E17A643F 		.word	1063549665
 1209 02c8 90C2F528 		.word	687194768
 1210 02cc 5C0F3540 		.word	1077219164
 1211 02d0 691D554D 		.word	1297423721
 1212 02d4 1075FF3E 		.word	1056929040
 1213 02d8 CD3B7F66 		.word	1719614413
 1214 02dc 9EA0F63F 		.word	1073127582
 1215 02e0 00000000 		.word	Timer_Int_Handler
 1216 02e4 00000000 		.word	Pose_Update_Int_Handler
 1217 02e8 00000000 		.word	Motor_PI_Int_Handler
 1218 02ec 00000000 		.word	left_motor
 1219 02f0 00000000 		.word	right_motor
 1220 02f4 0000E03F 		.word	1071644672
 1221 02f8 00002440 		.word	1076101120
 1222 02fc 00804140 		.word	1078034432
 1223 0300 00000000 		.word	robot
 1224 0304 00000000 		.word	sensors
 1225 0308 00001840 		.word	1075314688
 1226 030c 38000000 		.word	.LC0
 1227 0310 00000000 		.word	map
 1228 0314 80969800 		.word	10000000
 1229 0318 00001440 		.word	1075052544
 1230 031c 00000840 		.word	1074266112
 1231 0320 00000000 		.word	active
 1232 0324 00000000 		.word	smoothed_POD
 1233 0328 00003940 		.word	1077477376
 1234 032c 00004440 		.word	1078198272
 1235              	.L82:
 1236 0330 C2E90034 		strd	r3, [r2]
 232:main.c        ****     double h_m = 10;
 1237              		.loc 1 232 0
 1238 0334 4FF00003 		mov	r3, #0
 1239 0338 D14C     		ldr	r4, .L84+8
 1240 033a 07F5C472 		add	r2, r7, #392
 1241 033e C2E90034 		strd	r3, [r2]
 1242              	.LBB2:
 233:main.c        **** 
 234:main.c        ****     double ideal_angle, ideal_velocity;
 235:main.c        ****     
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 27


 236:main.c        ****     // Collect candidate valleys
 237:main.c        ****     int candidate_idx[72];
 238:main.c        ****             
 239:main.c        ****     
 240:main.c        ****     /*========================================================================*/           
 241:main.c        ****     
 242:main.c        ****     // Spoof ultrasonics
 243:main.c        ****     
 244:main.c        ****     for( int i = 0; i<100; i++ ) {
 1243              		.loc 1 244 0
 1244 0342 0023     		movs	r3, #0
 1245 0344 C7F86032 		str	r3, [r7, #608]
 1246 0348 3EE0     		b	.L28
 1247              	.L31:
 1248              	.LBB3:
 245:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1249              		.loc 1 245 0
 1250 034a 0023     		movs	r3, #0
 1251 034c C7F85C32 		str	r3, [r7, #604]
 1252 0350 2CE0     		b	.L29
 1253              	.L30:
 246:main.c        ****             sensors.direction[j] = 60.0*rand()/RAND_MAX;
 1254              		.loc 1 246 0 discriminator 3
 1255 0352 FFF7FEFF 		bl	rand
 1256 0356 0346     		mov	r3, r0
 1257 0358 1846     		mov	r0, r3
 1258 035a FFF7FEFF 		bl	__aeabi_i2d
 1259 035e 4FF00002 		mov	r2, #0
 1260 0362 C84B     		ldr	r3, .L84+12
 1261 0364 FFF7FEFF 		bl	__aeabi_dmul
 1262 0368 0346     		mov	r3, r0
 1263 036a 0C46     		mov	r4, r1
 1264 036c 1846     		mov	r0, r3
 1265 036e 2146     		mov	r1, r4
 1266 0370 C1A3     		adr	r3, .L84
 1267 0372 D3E90023 		ldrd	r2, [r3]
 1268 0376 FFF7FEFF 		bl	__aeabi_ddiv
 1269 037a 0346     		mov	r3, r0
 1270 037c 0C46     		mov	r4, r1
 1271 037e 1846     		mov	r0, r3
 1272 0380 2146     		mov	r1, r4
 1273 0382 FFF7FEFF 		bl	__aeabi_d2iz
 1274 0386 0146     		mov	r1, r0
 1275 0388 BF4A     		ldr	r2, .L84+16
 1276 038a D7F85C32 		ldr	r3, [r7, #604]
 1277 038e 42F82310 		str	r1, [r2, r3, lsl #2]
 247:main.c        ****             sensors.distance[j] = 20;
 1278              		.loc 1 247 0 discriminator 3
 1279 0392 BD4A     		ldr	r2, .L84+16
 1280 0394 D7F85C32 		ldr	r3, [r7, #604]
 1281 0398 0433     		adds	r3, r3, #4
 1282 039a 9B00     		lsls	r3, r3, #2
 1283 039c 1344     		add	r3, r3, r2
 1284 039e 1422     		movs	r2, #20
 1285 03a0 5A60     		str	r2, [r3, #4]
 245:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1286              		.loc 1 245 0 discriminator 3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 28


 1287 03a2 D7F85C32 		ldr	r3, [r7, #604]
 1288 03a6 0133     		adds	r3, r3, #1
 1289 03a8 C7F85C32 		str	r3, [r7, #604]
 1290              	.L29:
 245:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1291              		.loc 1 245 0 is_stmt 0 discriminator 1
 1292 03ac D7F85C32 		ldr	r3, [r7, #604]
 1293 03b0 042B     		cmp	r3, #4
 1294 03b2 CEDD     		ble	.L30
 1295              	.LBE3:
 248:main.c        ****         }
 249:main.c        ****         grid_update(&map, &sensors, &robot);
 1296              		.loc 1 249 0 is_stmt 1 discriminator 2
 1297 03b4 B54A     		ldr	r2, .L84+20
 1298 03b6 B449     		ldr	r1, .L84+16
 1299 03b8 B548     		ldr	r0, .L84+24
 1300 03ba FFF7FEFF 		bl	grid_update
 244:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1301              		.loc 1 244 0 discriminator 2
 1302 03be D7F86032 		ldr	r3, [r7, #608]
 1303 03c2 0133     		adds	r3, r3, #1
 1304 03c4 C7F86032 		str	r3, [r7, #608]
 1305              	.L28:
 244:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1306              		.loc 1 244 0 is_stmt 0 discriminator 1
 1307 03c8 D7F86032 		ldr	r3, [r7, #608]
 1308 03cc 632B     		cmp	r3, #99
 1309 03ce BCDD     		ble	.L31
 1310              	.LBE2:
 1311              	.LBB4:
 250:main.c        ****     }
 251:main.c        ****     
 252:main.c        ****     for( int i = 0; i<100; i++ ) {
 1312              		.loc 1 252 0 is_stmt 1
 1313 03d0 0023     		movs	r3, #0
 1314 03d2 C7F85832 		str	r3, [r7, #600]
 1315 03d6 47E0     		b	.L32
 1316              	.L35:
 1317              	.LBB5:
 253:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1318              		.loc 1 253 0
 1319 03d8 0023     		movs	r3, #0
 1320 03da C7F85432 		str	r3, [r7, #596]
 1321 03de 35E0     		b	.L33
 1322              	.L34:
 254:main.c        ****             sensors.direction[j] = 120.0+ 60.0*rand()/RAND_MAX;
 1323              		.loc 1 254 0 discriminator 3
 1324 03e0 FFF7FEFF 		bl	rand
 1325 03e4 0346     		mov	r3, r0
 1326 03e6 1846     		mov	r0, r3
 1327 03e8 FFF7FEFF 		bl	__aeabi_i2d
 1328 03ec 4FF00002 		mov	r2, #0
 1329 03f0 A44B     		ldr	r3, .L84+12
 1330 03f2 FFF7FEFF 		bl	__aeabi_dmul
 1331 03f6 0346     		mov	r3, r0
 1332 03f8 0C46     		mov	r4, r1
 1333 03fa 1846     		mov	r0, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 29


 1334 03fc 2146     		mov	r1, r4
 1335 03fe 9EA3     		adr	r3, .L84
 1336 0400 D3E90023 		ldrd	r2, [r3]
 1337 0404 FFF7FEFF 		bl	__aeabi_ddiv
 1338 0408 0346     		mov	r3, r0
 1339 040a 0C46     		mov	r4, r1
 1340 040c 1846     		mov	r0, r3
 1341 040e 2146     		mov	r1, r4
 1342 0410 4FF00002 		mov	r2, #0
 1343 0414 9F4B     		ldr	r3, .L84+28
 1344 0416 FFF7FEFF 		bl	__aeabi_dadd
 1345 041a 0346     		mov	r3, r0
 1346 041c 0C46     		mov	r4, r1
 1347 041e 1846     		mov	r0, r3
 1348 0420 2146     		mov	r1, r4
 1349 0422 FFF7FEFF 		bl	__aeabi_d2iz
 1350 0426 0146     		mov	r1, r0
 1351 0428 974A     		ldr	r2, .L84+16
 1352 042a D7F85432 		ldr	r3, [r7, #596]
 1353 042e 42F82310 		str	r1, [r2, r3, lsl #2]
 255:main.c        ****             sensors.distance[j] = 20;
 1354              		.loc 1 255 0 discriminator 3
 1355 0432 954A     		ldr	r2, .L84+16
 1356 0434 D7F85432 		ldr	r3, [r7, #596]
 1357 0438 0433     		adds	r3, r3, #4
 1358 043a 9B00     		lsls	r3, r3, #2
 1359 043c 1344     		add	r3, r3, r2
 1360 043e 1422     		movs	r2, #20
 1361 0440 5A60     		str	r2, [r3, #4]
 253:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1362              		.loc 1 253 0 discriminator 3
 1363 0442 D7F85432 		ldr	r3, [r7, #596]
 1364 0446 0133     		adds	r3, r3, #1
 1365 0448 C7F85432 		str	r3, [r7, #596]
 1366              	.L33:
 253:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1367              		.loc 1 253 0 is_stmt 0 discriminator 1
 1368 044c D7F85432 		ldr	r3, [r7, #596]
 1369 0450 042B     		cmp	r3, #4
 1370 0452 C5DD     		ble	.L34
 1371              	.LBE5:
 256:main.c        ****         }
 257:main.c        ****         grid_update(&map, &sensors, &robot);
 1372              		.loc 1 257 0 is_stmt 1 discriminator 2
 1373 0454 8D4A     		ldr	r2, .L84+20
 1374 0456 8C49     		ldr	r1, .L84+16
 1375 0458 8D48     		ldr	r0, .L84+24
 1376 045a FFF7FEFF 		bl	grid_update
 252:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1377              		.loc 1 252 0 discriminator 2
 1378 045e D7F85832 		ldr	r3, [r7, #600]
 1379 0462 0133     		adds	r3, r3, #1
 1380 0464 C7F85832 		str	r3, [r7, #600]
 1381              	.L32:
 252:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1382              		.loc 1 252 0 is_stmt 0 discriminator 1
 1383 0468 D7F85832 		ldr	r3, [r7, #600]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 30


 1384 046c 632B     		cmp	r3, #99
 1385 046e B3DD     		ble	.L35
 1386              	.LBE4:
 1387              	.LBB6:
 258:main.c        ****     }
 259:main.c        ****     
 260:main.c        ****     for( int i = 0; i<100; i++ ) {
 1388              		.loc 1 260 0 is_stmt 1
 1389 0470 0023     		movs	r3, #0
 1390 0472 C7F85032 		str	r3, [r7, #592]
 1391 0476 47E0     		b	.L36
 1392              	.L39:
 1393              	.LBB7:
 261:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1394              		.loc 1 261 0
 1395 0478 0023     		movs	r3, #0
 1396 047a C7F84C32 		str	r3, [r7, #588]
 1397 047e 35E0     		b	.L37
 1398              	.L38:
 262:main.c        ****             sensors.direction[j] = 65.0+ 60.0*rand()/RAND_MAX;
 1399              		.loc 1 262 0 discriminator 3
 1400 0480 FFF7FEFF 		bl	rand
 1401 0484 0346     		mov	r3, r0
 1402 0486 1846     		mov	r0, r3
 1403 0488 FFF7FEFF 		bl	__aeabi_i2d
 1404 048c 4FF00002 		mov	r2, #0
 1405 0490 7C4B     		ldr	r3, .L84+12
 1406 0492 FFF7FEFF 		bl	__aeabi_dmul
 1407 0496 0346     		mov	r3, r0
 1408 0498 0C46     		mov	r4, r1
 1409 049a 1846     		mov	r0, r3
 1410 049c 2146     		mov	r1, r4
 1411 049e 76A3     		adr	r3, .L84
 1412 04a0 D3E90023 		ldrd	r2, [r3]
 1413 04a4 FFF7FEFF 		bl	__aeabi_ddiv
 1414 04a8 0346     		mov	r3, r0
 1415 04aa 0C46     		mov	r4, r1
 1416 04ac 1846     		mov	r0, r3
 1417 04ae 2146     		mov	r1, r4
 1418 04b0 4FF00002 		mov	r2, #0
 1419 04b4 784B     		ldr	r3, .L84+32
 1420 04b6 FFF7FEFF 		bl	__aeabi_dadd
 1421 04ba 0346     		mov	r3, r0
 1422 04bc 0C46     		mov	r4, r1
 1423 04be 1846     		mov	r0, r3
 1424 04c0 2146     		mov	r1, r4
 1425 04c2 FFF7FEFF 		bl	__aeabi_d2iz
 1426 04c6 0146     		mov	r1, r0
 1427 04c8 6F4A     		ldr	r2, .L84+16
 1428 04ca D7F84C32 		ldr	r3, [r7, #588]
 1429 04ce 42F82310 		str	r1, [r2, r3, lsl #2]
 263:main.c        ****             sensors.distance[j] = 45.0;
 1430              		.loc 1 263 0 discriminator 3
 1431 04d2 6D4A     		ldr	r2, .L84+16
 1432 04d4 D7F84C32 		ldr	r3, [r7, #588]
 1433 04d8 0433     		adds	r3, r3, #4
 1434 04da 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 31


 1435 04dc 1344     		add	r3, r3, r2
 1436 04de 2D22     		movs	r2, #45
 1437 04e0 5A60     		str	r2, [r3, #4]
 261:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1438              		.loc 1 261 0 discriminator 3
 1439 04e2 D7F84C32 		ldr	r3, [r7, #588]
 1440 04e6 0133     		adds	r3, r3, #1
 1441 04e8 C7F84C32 		str	r3, [r7, #588]
 1442              	.L37:
 261:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1443              		.loc 1 261 0 is_stmt 0 discriminator 1
 1444 04ec D7F84C32 		ldr	r3, [r7, #588]
 1445 04f0 042B     		cmp	r3, #4
 1446 04f2 C5DD     		ble	.L38
 1447              	.LBE7:
 264:main.c        ****         }
 265:main.c        ****         grid_update(&map, &sensors, &robot);
 1448              		.loc 1 265 0 is_stmt 1 discriminator 2
 1449 04f4 654A     		ldr	r2, .L84+20
 1450 04f6 6449     		ldr	r1, .L84+16
 1451 04f8 6548     		ldr	r0, .L84+24
 1452 04fa FFF7FEFF 		bl	grid_update
 260:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1453              		.loc 1 260 0 discriminator 2
 1454 04fe D7F85032 		ldr	r3, [r7, #592]
 1455 0502 0133     		adds	r3, r3, #1
 1456 0504 C7F85032 		str	r3, [r7, #592]
 1457              	.L36:
 260:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1458              		.loc 1 260 0 is_stmt 0 discriminator 1
 1459 0508 D7F85032 		ldr	r3, [r7, #592]
 1460 050c 632B     		cmp	r3, #99
 1461 050e B3DD     		ble	.L39
 1462              	.LBE6:
 1463              	.LBB8:
 266:main.c        ****     }
 267:main.c        ****     
 268:main.c        ****     for( int i = 0; i<100; i++ ) {
 1464              		.loc 1 268 0 is_stmt 1
 1465 0510 0023     		movs	r3, #0
 1466 0512 C7F84832 		str	r3, [r7, #584]
 1467 0516 47E0     		b	.L40
 1468              	.L43:
 1469              	.LBB9:
 269:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1470              		.loc 1 269 0
 1471 0518 0023     		movs	r3, #0
 1472 051a C7F84432 		str	r3, [r7, #580]
 1473 051e 35E0     		b	.L41
 1474              	.L42:
 270:main.c        ****             sensors.direction[j] = 45.0+ 30.0*rand()/RAND_MAX;
 1475              		.loc 1 270 0 discriminator 3
 1476 0520 FFF7FEFF 		bl	rand
 1477 0524 0346     		mov	r3, r0
 1478 0526 1846     		mov	r0, r3
 1479 0528 FFF7FEFF 		bl	__aeabi_i2d
 1480 052c 4FF00002 		mov	r2, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 32


 1481 0530 5A4B     		ldr	r3, .L84+36
 1482 0532 FFF7FEFF 		bl	__aeabi_dmul
 1483 0536 0346     		mov	r3, r0
 1484 0538 0C46     		mov	r4, r1
 1485 053a 1846     		mov	r0, r3
 1486 053c 2146     		mov	r1, r4
 1487 053e 4EA3     		adr	r3, .L84
 1488 0540 D3E90023 		ldrd	r2, [r3]
 1489 0544 FFF7FEFF 		bl	__aeabi_ddiv
 1490 0548 0346     		mov	r3, r0
 1491 054a 0C46     		mov	r4, r1
 1492 054c 1846     		mov	r0, r3
 1493 054e 2146     		mov	r1, r4
 1494 0550 4FF00002 		mov	r2, #0
 1495 0554 524B     		ldr	r3, .L84+40
 1496 0556 FFF7FEFF 		bl	__aeabi_dadd
 1497 055a 0346     		mov	r3, r0
 1498 055c 0C46     		mov	r4, r1
 1499 055e 1846     		mov	r0, r3
 1500 0560 2146     		mov	r1, r4
 1501 0562 FFF7FEFF 		bl	__aeabi_d2iz
 1502 0566 0146     		mov	r1, r0
 1503 0568 474A     		ldr	r2, .L84+16
 1504 056a D7F84432 		ldr	r3, [r7, #580]
 1505 056e 42F82310 		str	r1, [r2, r3, lsl #2]
 271:main.c        ****             sensors.distance[j] = 70.0;
 1506              		.loc 1 271 0 discriminator 3
 1507 0572 454A     		ldr	r2, .L84+16
 1508 0574 D7F84432 		ldr	r3, [r7, #580]
 1509 0578 0433     		adds	r3, r3, #4
 1510 057a 9B00     		lsls	r3, r3, #2
 1511 057c 1344     		add	r3, r3, r2
 1512 057e 4622     		movs	r2, #70
 1513 0580 5A60     		str	r2, [r3, #4]
 269:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1514              		.loc 1 269 0 discriminator 3
 1515 0582 D7F84432 		ldr	r3, [r7, #580]
 1516 0586 0133     		adds	r3, r3, #1
 1517 0588 C7F84432 		str	r3, [r7, #580]
 1518              	.L41:
 269:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1519              		.loc 1 269 0 is_stmt 0 discriminator 1
 1520 058c D7F84432 		ldr	r3, [r7, #580]
 1521 0590 042B     		cmp	r3, #4
 1522 0592 C5DD     		ble	.L42
 1523              	.LBE9:
 272:main.c        ****         }
 273:main.c        ****         grid_update(&map, &sensors, &robot);
 1524              		.loc 1 273 0 is_stmt 1 discriminator 2
 1525 0594 3D4A     		ldr	r2, .L84+20
 1526 0596 3C49     		ldr	r1, .L84+16
 1527 0598 3D48     		ldr	r0, .L84+24
 1528 059a FFF7FEFF 		bl	grid_update
 268:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1529              		.loc 1 268 0 discriminator 2
 1530 059e D7F84832 		ldr	r3, [r7, #584]
 1531 05a2 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 33


 1532 05a4 C7F84832 		str	r3, [r7, #584]
 1533              	.L40:
 268:main.c        ****         for( int j = 0; j<N_SENSORS; j++ ) {
 1534              		.loc 1 268 0 is_stmt 0 discriminator 1
 1535 05a8 D7F84832 		ldr	r3, [r7, #584]
 1536 05ac 632B     		cmp	r3, #99
 1537 05ae B3DD     		ble	.L43
 1538              	.LBE8:
 274:main.c        ****     }
 275:main.c        ****     
 276:main.c        ****     int j = 3;
 1539              		.loc 1 276 0 is_stmt 1
 1540 05b0 0323     		movs	r3, #3
 1541 05b2 C7F88431 		str	r3, [r7, #388]
 1542              	.LBB10:
 277:main.c        ****     for( int i = 0; i<map.width; i++) { map.cells[i*map.width+j] += 100; }
 1543              		.loc 1 277 0
 1544 05b6 0023     		movs	r3, #0
 1545 05b8 C7F84032 		str	r3, [r7, #576]
 1546 05bc 21E0     		b	.L44
 1547              	.L45:
 1548              		.loc 1 277 0 is_stmt 0 discriminator 3
 1549 05be 344B     		ldr	r3, .L84+24
 1550 05c0 DA68     		ldr	r2, [r3, #12]
 1551 05c2 334B     		ldr	r3, .L84+24
 1552 05c4 1B68     		ldr	r3, [r3]
 1553 05c6 D7F84012 		ldr	r1, [r7, #576]
 1554 05ca 01FB03F1 		mul	r1, r1, r3
 1555 05ce D7F88431 		ldr	r3, [r7, #388]
 1556 05d2 0B44     		add	r3, r3, r1
 1557 05d4 9B00     		lsls	r3, r3, #2
 1558 05d6 1344     		add	r3, r3, r2
 1559 05d8 2D4A     		ldr	r2, .L84+24
 1560 05da D168     		ldr	r1, [r2, #12]
 1561 05dc 2C4A     		ldr	r2, .L84+24
 1562 05de 1268     		ldr	r2, [r2]
 1563 05e0 D7F84002 		ldr	r0, [r7, #576]
 1564 05e4 00FB02F0 		mul	r0, r0, r2
 1565 05e8 D7F88421 		ldr	r2, [r7, #388]
 1566 05ec 0244     		add	r2, r2, r0
 1567 05ee 9200     		lsls	r2, r2, #2
 1568 05f0 0A44     		add	r2, r2, r1
 1569 05f2 1268     		ldr	r2, [r2]
 1570 05f4 6432     		adds	r2, r2, #100
 1571 05f6 1A60     		str	r2, [r3]
 1572 05f8 D7F84032 		ldr	r3, [r7, #576]
 1573 05fc 0133     		adds	r3, r3, #1
 1574 05fe C7F84032 		str	r3, [r7, #576]
 1575              	.L44:
 1576              		.loc 1 277 0 discriminator 1
 1577 0602 234B     		ldr	r3, .L84+24
 1578 0604 1A68     		ldr	r2, [r3]
 1579 0606 D7F84032 		ldr	r3, [r7, #576]
 1580 060a 9A42     		cmp	r2, r3
 1581 060c D7DC     		bgt	.L45
 1582              	.LBE10:
 1583              	.LBB11:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 34


 278:main.c        ****     for( int i = 0; i<map.width; i++) { map.cells[j*map.width+i] += 100; }
 1584              		.loc 1 278 0 is_stmt 1
 1585 060e 0023     		movs	r3, #0
 1586 0610 C7F83C32 		str	r3, [r7, #572]
 1587 0614 21E0     		b	.L46
 1588              	.L47:
 1589              		.loc 1 278 0 is_stmt 0 discriminator 3
 1590 0616 1E4B     		ldr	r3, .L84+24
 1591 0618 DA68     		ldr	r2, [r3, #12]
 1592 061a 1D4B     		ldr	r3, .L84+24
 1593 061c 1B68     		ldr	r3, [r3]
 1594 061e D7F88411 		ldr	r1, [r7, #388]
 1595 0622 01FB03F1 		mul	r1, r1, r3
 1596 0626 D7F83C32 		ldr	r3, [r7, #572]
 1597 062a 0B44     		add	r3, r3, r1
 1598 062c 9B00     		lsls	r3, r3, #2
 1599 062e 1344     		add	r3, r3, r2
 1600 0630 174A     		ldr	r2, .L84+24
 1601 0632 D168     		ldr	r1, [r2, #12]
 1602 0634 164A     		ldr	r2, .L84+24
 1603 0636 1268     		ldr	r2, [r2]
 1604 0638 D7F88401 		ldr	r0, [r7, #388]
 1605 063c 00FB02F0 		mul	r0, r0, r2
 1606 0640 D7F83C22 		ldr	r2, [r7, #572]
 1607 0644 0244     		add	r2, r2, r0
 1608 0646 9200     		lsls	r2, r2, #2
 1609 0648 0A44     		add	r2, r2, r1
 1610 064a 1268     		ldr	r2, [r2]
 1611 064c 6432     		adds	r2, r2, #100
 1612 064e 1A60     		str	r2, [r3]
 1613 0650 D7F83C32 		ldr	r3, [r7, #572]
 1614 0654 0133     		adds	r3, r3, #1
 1615 0656 C7F83C32 		str	r3, [r7, #572]
 1616              	.L46:
 1617              		.loc 1 278 0 discriminator 1
 1618 065a 0D4B     		ldr	r3, .L84+24
 1619 065c 1A68     		ldr	r2, [r3]
 1620 065e D7F83C32 		ldr	r3, [r7, #572]
 1621 0662 9A42     		cmp	r2, r3
 1622 0664 D7DC     		bgt	.L47
 1623              	.LBE11:
 279:main.c        ****     
 280:main.c        ****     j = map.height-3;
 1624              		.loc 1 280 0 is_stmt 1
 1625 0666 0A4B     		ldr	r3, .L84+24
 1626 0668 5B68     		ldr	r3, [r3, #4]
 1627 066a 033B     		subs	r3, r3, #3
 1628 066c C7F88431 		str	r3, [r7, #388]
 1629              	.LBB12:
 281:main.c        ****     for( int i = 0; i<map.width; i++) { map.cells[i*map.width+j] += 100; }
 1630              		.loc 1 281 0
 1631 0670 0023     		movs	r3, #0
 1632 0672 C7F83832 		str	r3, [r7, #568]
 1633 0676 37E0     		b	.L48
 1634              	.L85:
 1635              		.align	3
 1636              	.L84:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 35


 1637 0678 0000C0FF 		.word	-4194304
 1638 067c FFFFDF41 		.word	1105199103
 1639 0680 00002440 		.word	1076101120
 1640 0684 00004E40 		.word	1078853632
 1641 0688 00000000 		.word	sensors
 1642 068c 00000000 		.word	robot
 1643 0690 00000000 		.word	map
 1644 0694 00005E40 		.word	1079902208
 1645 0698 00405040 		.word	1079001088
 1646 069c 00003E40 		.word	1077805056
 1647 06a0 00804640 		.word	1078362112
 1648              	.L49:
 1649              		.loc 1 281 0 is_stmt 0 discriminator 3
 1650 06a4 C24B     		ldr	r3, .L86
 1651 06a6 DA68     		ldr	r2, [r3, #12]
 1652 06a8 C14B     		ldr	r3, .L86
 1653 06aa 1B68     		ldr	r3, [r3]
 1654 06ac D7F83812 		ldr	r1, [r7, #568]
 1655 06b0 01FB03F1 		mul	r1, r1, r3
 1656 06b4 D7F88431 		ldr	r3, [r7, #388]
 1657 06b8 0B44     		add	r3, r3, r1
 1658 06ba 9B00     		lsls	r3, r3, #2
 1659 06bc 1344     		add	r3, r3, r2
 1660 06be BC4A     		ldr	r2, .L86
 1661 06c0 D168     		ldr	r1, [r2, #12]
 1662 06c2 BB4A     		ldr	r2, .L86
 1663 06c4 1268     		ldr	r2, [r2]
 1664 06c6 D7F83802 		ldr	r0, [r7, #568]
 1665 06ca 00FB02F0 		mul	r0, r0, r2
 1666 06ce D7F88421 		ldr	r2, [r7, #388]
 1667 06d2 0244     		add	r2, r2, r0
 1668 06d4 9200     		lsls	r2, r2, #2
 1669 06d6 0A44     		add	r2, r2, r1
 1670 06d8 1268     		ldr	r2, [r2]
 1671 06da 6432     		adds	r2, r2, #100
 1672 06dc 1A60     		str	r2, [r3]
 1673 06de D7F83832 		ldr	r3, [r7, #568]
 1674 06e2 0133     		adds	r3, r3, #1
 1675 06e4 C7F83832 		str	r3, [r7, #568]
 1676              	.L48:
 1677              		.loc 1 281 0 discriminator 1
 1678 06e8 B14B     		ldr	r3, .L86
 1679 06ea 1A68     		ldr	r2, [r3]
 1680 06ec D7F83832 		ldr	r3, [r7, #568]
 1681 06f0 9A42     		cmp	r2, r3
 1682 06f2 D7DC     		bgt	.L49
 1683              	.LBE12:
 1684              	.LBB13:
 282:main.c        ****     for( int i = 0; i<map.width; i++) { map.cells[j*map.width+i] += 100; }
 1685              		.loc 1 282 0 is_stmt 1
 1686 06f4 0023     		movs	r3, #0
 1687 06f6 C7F83432 		str	r3, [r7, #564]
 1688 06fa 21E0     		b	.L50
 1689              	.L51:
 1690              		.loc 1 282 0 is_stmt 0 discriminator 3
 1691 06fc AC4B     		ldr	r3, .L86
 1692 06fe DA68     		ldr	r2, [r3, #12]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 36


 1693 0700 AB4B     		ldr	r3, .L86
 1694 0702 1B68     		ldr	r3, [r3]
 1695 0704 D7F88411 		ldr	r1, [r7, #388]
 1696 0708 01FB03F1 		mul	r1, r1, r3
 1697 070c D7F83432 		ldr	r3, [r7, #564]
 1698 0710 0B44     		add	r3, r3, r1
 1699 0712 9B00     		lsls	r3, r3, #2
 1700 0714 1344     		add	r3, r3, r2
 1701 0716 A64A     		ldr	r2, .L86
 1702 0718 D168     		ldr	r1, [r2, #12]
 1703 071a A54A     		ldr	r2, .L86
 1704 071c 1268     		ldr	r2, [r2]
 1705 071e D7F88401 		ldr	r0, [r7, #388]
 1706 0722 00FB02F0 		mul	r0, r0, r2
 1707 0726 D7F83422 		ldr	r2, [r7, #564]
 1708 072a 0244     		add	r2, r2, r0
 1709 072c 9200     		lsls	r2, r2, #2
 1710 072e 0A44     		add	r2, r2, r1
 1711 0730 1268     		ldr	r2, [r2]
 1712 0732 6432     		adds	r2, r2, #100
 1713 0734 1A60     		str	r2, [r3]
 1714 0736 D7F83432 		ldr	r3, [r7, #564]
 1715 073a 0133     		adds	r3, r3, #1
 1716 073c C7F83432 		str	r3, [r7, #564]
 1717              	.L50:
 1718              		.loc 1 282 0 discriminator 1
 1719 0740 9B4B     		ldr	r3, .L86
 1720 0742 1A68     		ldr	r2, [r3]
 1721 0744 D7F83432 		ldr	r3, [r7, #564]
 1722 0748 9A42     		cmp	r2, r3
 1723 074a D7DC     		bgt	.L51
 1724              	.LBE13:
 283:main.c        ****     
 284:main.c        ****     /*
 285:main.c        ****     
 286:main.c        ****     // Print the grid
 287:main.c        ****     for (int i=0; i<map.width; i++) {
 288:main.c        ****         for (int j=0; j<map.height; j++) {
 289:main.c        ****             if (map.cells[i * map.width + j] > 0) {
 290:main.c        ****                 sprintf(serial_output, "X");
 291:main.c        ****                 UART_PutString(serial_output);
 292:main.c        ****             } else {
 293:main.c        ****                 sprintf(serial_output, "-");
 294:main.c        ****                 UART_PutString(serial_output);
 295:main.c        ****             }
 296:main.c        ****         }
 297:main.c        ****         sprintf(serial_output, "\n");
 298:main.c        ****         UART_PutString(serial_output);
 299:main.c        ****     }
 300:main.c        ****     */ 
 301:main.c        ****     int print_delay = 3;
 1725              		.loc 1 301 0 is_stmt 1
 1726 074c 0323     		movs	r3, #3
 1727 074e C7F88031 		str	r3, [r7, #384]
 302:main.c        ****     int print_cnt = 1;
 1728              		.loc 1 302 0
 1729 0752 0123     		movs	r3, #1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 37


 1730 0754 C7F83032 		str	r3, [r7, #560]
 1731              	.L73:
 1732              	.LBB14:
 303:main.c        ****     for(;;) {  
 304:main.c        ****             
 305:main.c        ****         // Calculate distance to the goal
 306:main.c        ****         double dist_to_goal = calculate_distance_from_goal(robot.x, robot.y, robot.goal_x, robot.go
 1733              		.loc 1 306 0
 1734 0758 964B     		ldr	r3, .L86+4
 1735 075a D3E90456 		ldrd	r5, [r3, #16]
 1736 075e 954B     		ldr	r3, .L86+4
 1737 0760 D3E90689 		ldrd	r8, [r3, #24]
 1738 0764 934B     		ldr	r3, .L86+4
 1739 0766 03F15804 		add	r4, r3, #88
 1740 076a D4E90034 		ldrd	r3, [r4]
 1741 076e 914A     		ldr	r2, .L86+4
 1742 0770 D2E91812 		ldrd	r1, [r2, #96]
 1743 0774 CDE90212 		strd	r1, [sp, #8]
 1744 0778 CDE90034 		strd	r3, [sp]
 1745 077c 4246     		mov	r2, r8
 1746 077e 4B46     		mov	r3, r9
 1747 0780 2846     		mov	r0, r5
 1748 0782 3146     		mov	r1, r6
 1749 0784 FFF7FEFF 		bl	calculate_distance_from_goal
 1750 0788 07F5BC73 		add	r3, r7, #376
 1751 078c C3E90001 		strd	r0, [r3]
 307:main.c        ****         robot.desired_v = 5;
 1752              		.loc 1 307 0
 1753 0790 884A     		ldr	r2, .L86+4
 1754 0792 4FF00003 		mov	r3, #0
 1755 0796 884C     		ldr	r4, .L86+8
 1756 0798 C2E90C34 		strd	r3, [r2, #48]
 308:main.c        ****         // Check if goal is reached, update, otherwise, drive
 309:main.c        ****         if( dist_to_goal <= robot.goal_min_dist ) { 
 1757              		.loc 1 309 0
 1758 079c 854B     		ldr	r3, .L86+4
 1759 079e D3E91A01 		ldrd	r0, [r3, #104]
 1760 07a2 07F5BC73 		add	r3, r7, #376
 1761 07a6 D3E90023 		ldrd	r2, [r3]
 1762 07aa FFF7FEFF 		bl	__aeabi_dcmpge
 1763 07ae 0346     		mov	r3, r0
 1764 07b0 002B     		cmp	r3, #0
 1765 07b2 3DD0     		beq	.L78
 310:main.c        ****             //robot.desired_v = 0;       // Stop the robot
 311:main.c        ****             //robot.desired_theta = 0;
 312:main.c        ****             
 313:main.c        ****             // Iterate to next goal, otherwise, quit
 314:main.c        ****             if (goals_reached < n_goals) {
 1766              		.loc 1 314 0
 1767 07b4 D7F86402 		ldr	r0, [r7, #612]
 1768 07b8 FFF7FEFF 		bl	__aeabi_i2d
 1769 07bc 07F5E873 		add	r3, r7, #464
 1770 07c0 D3E90023 		ldrd	r2, [r3]
 1771 07c4 FFF7FEFF 		bl	__aeabi_dcmplt
 1772 07c8 0346     		mov	r3, r0
 1773 07ca 002B     		cmp	r3, #0
 1774 07cc 1BD0     		beq	.L79
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 38


 315:main.c        ****                 robot.goal_x = goals[goals_reached + 2];
 1775              		.loc 1 315 0
 1776 07ce D7F86432 		ldr	r3, [r7, #612]
 1777 07d2 0233     		adds	r3, r3, #2
 1778 07d4 07F59072 		add	r2, r7, #288
 1779 07d8 DB00     		lsls	r3, r3, #3
 1780 07da 1344     		add	r3, r3, r2
 1781 07dc 18CB     		ldmia	r3, {r3-r4}
 1782 07de 754A     		ldr	r2, .L86+4
 1783 07e0 C2E91634 		strd	r3, [r2, #88]
 316:main.c        ****                 robot.goal_y = goals[goals_reached + 3];
 1784              		.loc 1 316 0
 1785 07e4 D7F86432 		ldr	r3, [r7, #612]
 1786 07e8 0333     		adds	r3, r3, #3
 1787 07ea 07F59072 		add	r2, r7, #288
 1788 07ee DB00     		lsls	r3, r3, #3
 1789 07f0 1344     		add	r3, r3, r2
 1790 07f2 18CB     		ldmia	r3, {r3-r4}
 1791 07f4 6F4A     		ldr	r2, .L86+4
 1792 07f6 C2E91834 		strd	r3, [r2, #96]
 317:main.c        ****                 goals_reached += 2;
 1793              		.loc 1 317 0
 1794 07fa D7F86432 		ldr	r3, [r7, #612]
 1795 07fe 0233     		adds	r3, r3, #2
 1796 0800 C7F86432 		str	r3, [r7, #612]
 1797 0804 A8E7     		b	.L73
 1798              	.L79:
 318:main.c        ****                 //sprintf(serial_output, "Goal:%Lf, %Lf", robot.goal_x, robot.goal_y);
 319:main.c        ****                 //UART_PutString(serial_output);
 320:main.c        ****                 //sprintf(serial_output, "Position:%Lf, %Lf, %Lf", robot.goal_x, robot.goal_y, robo
 321:main.c        ****                 //UART_PutString(serial_output);
 322:main.c        ****      
 323:main.c        ****                 
 324:main.c        ****                 // Get robot to point to next destination to begin
 325:main.c        ****                 //double angle_to_goal = calculate_goal_angle(robot.x, robot.y, robot.theta, robot.
 326:main.c        ****                 //robot.desired_theta = angle_to_goal;
 327:main.c        ****             } else {
 328:main.c        ****                 sprintf(serial_output, "FINISHED! Did I succeed?");
 1799              		.loc 1 328 0
 1800 0806 6D4A     		ldr	r2, .L86+12
 1801 0808 6D4B     		ldr	r3, .L86+16
 1802 080a 1546     		mov	r5, r2
 1803 080c 1C46     		mov	r4, r3
 1804 080e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1805 0810 2860     		str	r0, [r5]	@ unaligned
 1806 0812 6960     		str	r1, [r5, #4]	@ unaligned
 1807 0814 AA60     		str	r2, [r5, #8]	@ unaligned
 1808 0816 EB60     		str	r3, [r5, #12]	@ unaligned
 1809 0818 03CC     		ldmia	r4!, {r0, r1}
 1810 081a 2861     		str	r0, [r5, #16]	@ unaligned
 1811 081c 6961     		str	r1, [r5, #20]	@ unaligned
 1812 081e 2378     		ldrb	r3, [r4]
 1813 0820 2B76     		strb	r3, [r5, #24]
 329:main.c        ****                 UART_PutString(serial_output);
 1814              		.loc 1 329 0
 1815 0822 6648     		ldr	r0, .L86+12
 1816 0824 FFF7FEFF 		bl	UART_PutString
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 39


 330:main.c        ****                 CyDelay(200000);
 1817              		.loc 1 330 0
 1818 0828 6648     		ldr	r0, .L86+20
 1819 082a FFF7FEFF 		bl	CyDelay
 1820 082e 93E7     		b	.L73
 1821              	.L78:
 331:main.c        ****             }
 332:main.c        **** 
 333:main.c        ****         } else {
 334:main.c        ****             
 335:main.c        ****             
 336:main.c        ****             
 337:main.c        ****             if (print_cnt >= print_delay) {
 1822              		.loc 1 337 0
 1823 0830 D7F83022 		ldr	r2, [r7, #560]
 1824 0834 D7F88031 		ldr	r3, [r7, #384]
 1825 0838 9A42     		cmp	r2, r3
 1826 083a C0F2A981 		blt	.L58
 1827              	.LBB15:
 338:main.c        ****                 
 339:main.c        ****                 for (int j= map.height - 1; j >= 0; j--) {
 1828              		.loc 1 339 0
 1829 083e 5C4B     		ldr	r3, .L86
 1830 0840 5B68     		ldr	r3, [r3, #4]
 1831 0842 013B     		subs	r3, r3, #1
 1832 0844 C7F82C32 		str	r3, [r7, #556]
 1833 0848 9AE1     		b	.L59
 1834              	.L65:
 1835              	.LBB16:
 340:main.c        ****                     for (int i=0; i<map.width; i++) {
 1836              		.loc 1 340 0
 1837 084a 0023     		movs	r3, #0
 1838 084c C7F82832 		str	r3, [r7, #552]
 1839 0850 83E1     		b	.L60
 1840              	.L64:
 341:main.c        ****                         if ( abs(floor(robot.x/map.resolution)-i)<=1 && abs(floor(robot.y/map.resol
 1841              		.loc 1 341 0
 1842 0852 584B     		ldr	r3, .L86+4
 1843 0854 D3E90445 		ldrd	r4, [r3, #16]
 1844 0858 554B     		ldr	r3, .L86
 1845 085a 9B68     		ldr	r3, [r3, #8]
 1846 085c 1846     		mov	r0, r3
 1847 085e FFF7FEFF 		bl	__aeabi_i2d
 1848 0862 0246     		mov	r2, r0
 1849 0864 0B46     		mov	r3, r1
 1850 0866 2046     		mov	r0, r4
 1851 0868 2946     		mov	r1, r5
 1852 086a FFF7FEFF 		bl	__aeabi_ddiv
 1853 086e 0346     		mov	r3, r0
 1854 0870 0C46     		mov	r4, r1
 1855 0872 1846     		mov	r0, r3
 1856 0874 2146     		mov	r1, r4
 1857 0876 FFF7FEFF 		bl	floor
 1858 087a 0446     		mov	r4, r0
 1859 087c 0D46     		mov	r5, r1
 1860 087e D7F82802 		ldr	r0, [r7, #552]
 1861 0882 FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 40


 1862 0886 0246     		mov	r2, r0
 1863 0888 0B46     		mov	r3, r1
 1864 088a 2046     		mov	r0, r4
 1865 088c 2946     		mov	r1, r5
 1866 088e FFF7FEFF 		bl	__aeabi_dsub
 1867 0892 0346     		mov	r3, r0
 1868 0894 0C46     		mov	r4, r1
 1869 0896 1846     		mov	r0, r3
 1870 0898 2146     		mov	r1, r4
 1871 089a FFF7FEFF 		bl	__aeabi_d2iz
 1872 089e 0346     		mov	r3, r0
 1873 08a0 B3F1FF3F 		cmp	r3, #-1
 1874 08a4 C0F29080 		blt	.L61
 1875              		.loc 1 341 0 is_stmt 0 discriminator 1
 1876 08a8 424B     		ldr	r3, .L86+4
 1877 08aa D3E90445 		ldrd	r4, [r3, #16]
 1878 08ae 404B     		ldr	r3, .L86
 1879 08b0 9B68     		ldr	r3, [r3, #8]
 1880 08b2 1846     		mov	r0, r3
 1881 08b4 FFF7FEFF 		bl	__aeabi_i2d
 1882 08b8 0246     		mov	r2, r0
 1883 08ba 0B46     		mov	r3, r1
 1884 08bc 2046     		mov	r0, r4
 1885 08be 2946     		mov	r1, r5
 1886 08c0 FFF7FEFF 		bl	__aeabi_ddiv
 1887 08c4 0346     		mov	r3, r0
 1888 08c6 0C46     		mov	r4, r1
 1889 08c8 1846     		mov	r0, r3
 1890 08ca 2146     		mov	r1, r4
 1891 08cc FFF7FEFF 		bl	floor
 1892 08d0 0446     		mov	r4, r0
 1893 08d2 0D46     		mov	r5, r1
 1894 08d4 D7F82802 		ldr	r0, [r7, #552]
 1895 08d8 FFF7FEFF 		bl	__aeabi_i2d
 1896 08dc 0246     		mov	r2, r0
 1897 08de 0B46     		mov	r3, r1
 1898 08e0 2046     		mov	r0, r4
 1899 08e2 2946     		mov	r1, r5
 1900 08e4 FFF7FEFF 		bl	__aeabi_dsub
 1901 08e8 0346     		mov	r3, r0
 1902 08ea 0C46     		mov	r4, r1
 1903 08ec 1846     		mov	r0, r3
 1904 08ee 2146     		mov	r1, r4
 1905 08f0 FFF7FEFF 		bl	__aeabi_d2iz
 1906 08f4 0346     		mov	r3, r0
 1907 08f6 012B     		cmp	r3, #1
 1908 08f8 66DC     		bgt	.L61
 1909              		.loc 1 341 0 discriminator 2
 1910 08fa 2E4B     		ldr	r3, .L86+4
 1911 08fc D3E90645 		ldrd	r4, [r3, #24]
 1912 0900 2B4B     		ldr	r3, .L86
 1913 0902 9B68     		ldr	r3, [r3, #8]
 1914 0904 1846     		mov	r0, r3
 1915 0906 FFF7FEFF 		bl	__aeabi_i2d
 1916 090a 0246     		mov	r2, r0
 1917 090c 0B46     		mov	r3, r1
 1918 090e 2046     		mov	r0, r4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 41


 1919 0910 2946     		mov	r1, r5
 1920 0912 FFF7FEFF 		bl	__aeabi_ddiv
 1921 0916 0346     		mov	r3, r0
 1922 0918 0C46     		mov	r4, r1
 1923 091a 1846     		mov	r0, r3
 1924 091c 2146     		mov	r1, r4
 1925 091e FFF7FEFF 		bl	floor
 1926 0922 0446     		mov	r4, r0
 1927 0924 0D46     		mov	r5, r1
 1928 0926 D7F82C02 		ldr	r0, [r7, #556]
 1929 092a FFF7FEFF 		bl	__aeabi_i2d
 1930 092e 0246     		mov	r2, r0
 1931 0930 0B46     		mov	r3, r1
 1932 0932 2046     		mov	r0, r4
 1933 0934 2946     		mov	r1, r5
 1934 0936 FFF7FEFF 		bl	__aeabi_dsub
 1935 093a 0346     		mov	r3, r0
 1936 093c 0C46     		mov	r4, r1
 1937 093e 1846     		mov	r0, r3
 1938 0940 2146     		mov	r1, r4
 1939 0942 FFF7FEFF 		bl	__aeabi_d2iz
 1940 0946 0346     		mov	r3, r0
 1941 0948 B3F1FF3F 		cmp	r3, #-1
 1942 094c 3CDB     		blt	.L61
 1943              		.loc 1 341 0 discriminator 3
 1944 094e 194B     		ldr	r3, .L86+4
 1945 0950 D3E90645 		ldrd	r4, [r3, #24]
 1946 0954 164B     		ldr	r3, .L86
 1947 0956 9B68     		ldr	r3, [r3, #8]
 1948 0958 1846     		mov	r0, r3
 1949 095a FFF7FEFF 		bl	__aeabi_i2d
 1950 095e 0246     		mov	r2, r0
 1951 0960 0B46     		mov	r3, r1
 1952 0962 2046     		mov	r0, r4
 1953 0964 2946     		mov	r1, r5
 1954 0966 FFF7FEFF 		bl	__aeabi_ddiv
 1955 096a 0346     		mov	r3, r0
 1956 096c 0C46     		mov	r4, r1
 1957 096e 1846     		mov	r0, r3
 1958 0970 2146     		mov	r1, r4
 1959 0972 FFF7FEFF 		bl	floor
 1960 0976 0446     		mov	r4, r0
 1961 0978 0D46     		mov	r5, r1
 1962 097a D7F82C02 		ldr	r0, [r7, #556]
 1963 097e FFF7FEFF 		bl	__aeabi_i2d
 1964 0982 0246     		mov	r2, r0
 1965 0984 0B46     		mov	r3, r1
 1966 0986 2046     		mov	r0, r4
 1967 0988 2946     		mov	r1, r5
 1968 098a FFF7FEFF 		bl	__aeabi_dsub
 1969 098e 0346     		mov	r3, r0
 1970 0990 0C46     		mov	r4, r1
 1971 0992 1846     		mov	r0, r3
 1972 0994 2146     		mov	r1, r4
 1973 0996 FFF7FEFF 		bl	__aeabi_d2iz
 1974 099a 0346     		mov	r3, r0
 1975 099c 012B     		cmp	r3, #1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 42


 1976 099e 13DC     		bgt	.L61
 342:main.c        ****                             serial_output[0] = 'X';
 1977              		.loc 1 342 0 is_stmt 1
 1978 09a0 064B     		ldr	r3, .L86+12
 1979 09a2 5822     		movs	r2, #88
 1980 09a4 1A70     		strb	r2, [r3]
 343:main.c        ****                             serial_output[1] = ' ';
 1981              		.loc 1 343 0
 1982 09a6 054B     		ldr	r3, .L86+12
 1983 09a8 2022     		movs	r2, #32
 1984 09aa 5A70     		strb	r2, [r3, #1]
 1985 09ac CDE0     		b	.L62
 1986              	.L87:
 1987 09ae 00BF     		.align	2
 1988              	.L86:
 1989 09b0 00000000 		.word	map
 1990 09b4 00000000 		.word	robot
 1991 09b8 00001440 		.word	1075052544
 1992 09bc 00000000 		.word	serial_output
 1993 09c0 10000000 		.word	.LC1
 1994 09c4 400D0300 		.word	200000
 1995              	.L61:
 344:main.c        ****                         } else if (abs(floor(robot.goal_x/map.resolution)-i)<=1 && abs(floor(robot.
 1996              		.loc 1 344 0
 1997 09c8 914B     		ldr	r3, .L88
 1998 09ca D3E91645 		ldrd	r4, [r3, #88]
 1999 09ce 914B     		ldr	r3, .L88+4
 2000 09d0 9B68     		ldr	r3, [r3, #8]
 2001 09d2 1846     		mov	r0, r3
 2002 09d4 FFF7FEFF 		bl	__aeabi_i2d
 2003 09d8 0246     		mov	r2, r0
 2004 09da 0B46     		mov	r3, r1
 2005 09dc 2046     		mov	r0, r4
 2006 09de 2946     		mov	r1, r5
 2007 09e0 FFF7FEFF 		bl	__aeabi_ddiv
 2008 09e4 0346     		mov	r3, r0
 2009 09e6 0C46     		mov	r4, r1
 2010 09e8 1846     		mov	r0, r3
 2011 09ea 2146     		mov	r1, r4
 2012 09ec FFF7FEFF 		bl	floor
 2013 09f0 0446     		mov	r4, r0
 2014 09f2 0D46     		mov	r5, r1
 2015 09f4 D7F82802 		ldr	r0, [r7, #552]
 2016 09f8 FFF7FEFF 		bl	__aeabi_i2d
 2017 09fc 0246     		mov	r2, r0
 2018 09fe 0B46     		mov	r3, r1
 2019 0a00 2046     		mov	r0, r4
 2020 0a02 2946     		mov	r1, r5
 2021 0a04 FFF7FEFF 		bl	__aeabi_dsub
 2022 0a08 0346     		mov	r3, r0
 2023 0a0a 0C46     		mov	r4, r1
 2024 0a0c 1846     		mov	r0, r3
 2025 0a0e 2146     		mov	r1, r4
 2026 0a10 FFF7FEFF 		bl	__aeabi_d2iz
 2027 0a14 0346     		mov	r3, r0
 2028 0a16 B3F1FF3F 		cmp	r3, #-1
 2029 0a1a C0F28380 		blt	.L63
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 43


 2030              		.loc 1 344 0 is_stmt 0 discriminator 1
 2031 0a1e 7C4B     		ldr	r3, .L88
 2032 0a20 D3E91645 		ldrd	r4, [r3, #88]
 2033 0a24 7B4B     		ldr	r3, .L88+4
 2034 0a26 9B68     		ldr	r3, [r3, #8]
 2035 0a28 1846     		mov	r0, r3
 2036 0a2a FFF7FEFF 		bl	__aeabi_i2d
 2037 0a2e 0246     		mov	r2, r0
 2038 0a30 0B46     		mov	r3, r1
 2039 0a32 2046     		mov	r0, r4
 2040 0a34 2946     		mov	r1, r5
 2041 0a36 FFF7FEFF 		bl	__aeabi_ddiv
 2042 0a3a 0346     		mov	r3, r0
 2043 0a3c 0C46     		mov	r4, r1
 2044 0a3e 1846     		mov	r0, r3
 2045 0a40 2146     		mov	r1, r4
 2046 0a42 FFF7FEFF 		bl	floor
 2047 0a46 0446     		mov	r4, r0
 2048 0a48 0D46     		mov	r5, r1
 2049 0a4a D7F82802 		ldr	r0, [r7, #552]
 2050 0a4e FFF7FEFF 		bl	__aeabi_i2d
 2051 0a52 0246     		mov	r2, r0
 2052 0a54 0B46     		mov	r3, r1
 2053 0a56 2046     		mov	r0, r4
 2054 0a58 2946     		mov	r1, r5
 2055 0a5a FFF7FEFF 		bl	__aeabi_dsub
 2056 0a5e 0346     		mov	r3, r0
 2057 0a60 0C46     		mov	r4, r1
 2058 0a62 1846     		mov	r0, r3
 2059 0a64 2146     		mov	r1, r4
 2060 0a66 FFF7FEFF 		bl	__aeabi_d2iz
 2061 0a6a 0346     		mov	r3, r0
 2062 0a6c 012B     		cmp	r3, #1
 2063 0a6e 59DC     		bgt	.L63
 2064              		.loc 1 344 0 discriminator 2
 2065 0a70 674B     		ldr	r3, .L88
 2066 0a72 D3E91845 		ldrd	r4, [r3, #96]
 2067 0a76 674B     		ldr	r3, .L88+4
 2068 0a78 9B68     		ldr	r3, [r3, #8]
 2069 0a7a 1846     		mov	r0, r3
 2070 0a7c FFF7FEFF 		bl	__aeabi_i2d
 2071 0a80 0246     		mov	r2, r0
 2072 0a82 0B46     		mov	r3, r1
 2073 0a84 2046     		mov	r0, r4
 2074 0a86 2946     		mov	r1, r5
 2075 0a88 FFF7FEFF 		bl	__aeabi_ddiv
 2076 0a8c 0346     		mov	r3, r0
 2077 0a8e 0C46     		mov	r4, r1
 2078 0a90 1846     		mov	r0, r3
 2079 0a92 2146     		mov	r1, r4
 2080 0a94 FFF7FEFF 		bl	floor
 2081 0a98 0446     		mov	r4, r0
 2082 0a9a 0D46     		mov	r5, r1
 2083 0a9c D7F82C02 		ldr	r0, [r7, #556]
 2084 0aa0 FFF7FEFF 		bl	__aeabi_i2d
 2085 0aa4 0246     		mov	r2, r0
 2086 0aa6 0B46     		mov	r3, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 44


 2087 0aa8 2046     		mov	r0, r4
 2088 0aaa 2946     		mov	r1, r5
 2089 0aac FFF7FEFF 		bl	__aeabi_dsub
 2090 0ab0 0346     		mov	r3, r0
 2091 0ab2 0C46     		mov	r4, r1
 2092 0ab4 1846     		mov	r0, r3
 2093 0ab6 2146     		mov	r1, r4
 2094 0ab8 FFF7FEFF 		bl	__aeabi_d2iz
 2095 0abc 0346     		mov	r3, r0
 2096 0abe B3F1FF3F 		cmp	r3, #-1
 2097 0ac2 2FDB     		blt	.L63
 2098              		.loc 1 344 0 discriminator 3
 2099 0ac4 524B     		ldr	r3, .L88
 2100 0ac6 D3E91845 		ldrd	r4, [r3, #96]
 2101 0aca 524B     		ldr	r3, .L88+4
 2102 0acc 9B68     		ldr	r3, [r3, #8]
 2103 0ace 1846     		mov	r0, r3
 2104 0ad0 FFF7FEFF 		bl	__aeabi_i2d
 2105 0ad4 0246     		mov	r2, r0
 2106 0ad6 0B46     		mov	r3, r1
 2107 0ad8 2046     		mov	r0, r4
 2108 0ada 2946     		mov	r1, r5
 2109 0adc FFF7FEFF 		bl	__aeabi_ddiv
 2110 0ae0 0346     		mov	r3, r0
 2111 0ae2 0C46     		mov	r4, r1
 2112 0ae4 1846     		mov	r0, r3
 2113 0ae6 2146     		mov	r1, r4
 2114 0ae8 FFF7FEFF 		bl	floor
 2115 0aec 0446     		mov	r4, r0
 2116 0aee 0D46     		mov	r5, r1
 2117 0af0 D7F82C02 		ldr	r0, [r7, #556]
 2118 0af4 FFF7FEFF 		bl	__aeabi_i2d
 2119 0af8 0246     		mov	r2, r0
 2120 0afa 0B46     		mov	r3, r1
 2121 0afc 2046     		mov	r0, r4
 2122 0afe 2946     		mov	r1, r5
 2123 0b00 FFF7FEFF 		bl	__aeabi_dsub
 2124 0b04 0346     		mov	r3, r0
 2125 0b06 0C46     		mov	r4, r1
 2126 0b08 1846     		mov	r0, r3
 2127 0b0a 2146     		mov	r1, r4
 2128 0b0c FFF7FEFF 		bl	__aeabi_d2iz
 2129 0b10 0346     		mov	r3, r0
 2130 0b12 012B     		cmp	r3, #1
 2131 0b14 06DC     		bgt	.L63
 345:main.c        ****                             serial_output[0] = 'G';
 2132              		.loc 1 345 0 is_stmt 1
 2133 0b16 404B     		ldr	r3, .L88+8
 2134 0b18 4722     		movs	r2, #71
 2135 0b1a 1A70     		strb	r2, [r3]
 346:main.c        ****                             serial_output[1] = ' ';
 2136              		.loc 1 346 0
 2137 0b1c 3E4B     		ldr	r3, .L88+8
 2138 0b1e 2022     		movs	r2, #32
 2139 0b20 5A70     		strb	r2, [r3, #1]
 2140 0b22 12E0     		b	.L62
 2141              	.L63:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 45


 347:main.c        ****                         } else {
 348:main.c        ****                             sprintf(serial_output, "%d ", map.cells[i * map.width + j]);
 2142              		.loc 1 348 0
 2143 0b24 3B4B     		ldr	r3, .L88+4
 2144 0b26 DA68     		ldr	r2, [r3, #12]
 2145 0b28 3A4B     		ldr	r3, .L88+4
 2146 0b2a 1B68     		ldr	r3, [r3]
 2147 0b2c D7F82812 		ldr	r1, [r7, #552]
 2148 0b30 01FB03F1 		mul	r1, r1, r3
 2149 0b34 D7F82C32 		ldr	r3, [r7, #556]
 2150 0b38 0B44     		add	r3, r3, r1
 2151 0b3a 9B00     		lsls	r3, r3, #2
 2152 0b3c 1344     		add	r3, r3, r2
 2153 0b3e 1B68     		ldr	r3, [r3]
 2154 0b40 1A46     		mov	r2, r3
 2155 0b42 3649     		ldr	r1, .L88+12
 2156 0b44 3448     		ldr	r0, .L88+8
 2157 0b46 FFF7FEFF 		bl	sprintf
 2158              	.L62:
 349:main.c        ****                         }
 350:main.c        ****                         UART_PutString(serial_output);
 2159              		.loc 1 350 0 discriminator 2
 2160 0b4a 3348     		ldr	r0, .L88+8
 2161 0b4c FFF7FEFF 		bl	UART_PutString
 340:main.c        ****                         if ( abs(floor(robot.x/map.resolution)-i)<=1 && abs(floor(robot.y/map.resol
 2162              		.loc 1 340 0 discriminator 2
 2163 0b50 D7F82832 		ldr	r3, [r7, #552]
 2164 0b54 0133     		adds	r3, r3, #1
 2165 0b56 C7F82832 		str	r3, [r7, #552]
 2166              	.L60:
 340:main.c        ****                         if ( abs(floor(robot.x/map.resolution)-i)<=1 && abs(floor(robot.y/map.resol
 2167              		.loc 1 340 0 is_stmt 0 discriminator 1
 2168 0b5a 2E4B     		ldr	r3, .L88+4
 2169 0b5c 1A68     		ldr	r2, [r3]
 2170 0b5e D7F82832 		ldr	r3, [r7, #552]
 2171 0b62 9A42     		cmp	r2, r3
 2172 0b64 3FF775AE 		bgt	.L64
 2173              	.LBE16:
 351:main.c        ****                     }
 352:main.c        ****                     sprintf(serial_output, "\n");
 2174              		.loc 1 352 0 is_stmt 1 discriminator 2
 2175 0b68 2B4A     		ldr	r2, .L88+8
 2176 0b6a 2D4B     		ldr	r3, .L88+16
 2177 0b6c 1B88     		ldrh	r3, [r3]	@ unaligned
 2178 0b6e 1380     		strh	r3, [r2]	@ unaligned
 353:main.c        ****                     UART_PutString(serial_output);
 2179              		.loc 1 353 0 discriminator 2
 2180 0b70 2948     		ldr	r0, .L88+8
 2181 0b72 FFF7FEFF 		bl	UART_PutString
 339:main.c        ****                     for (int i=0; i<map.width; i++) {
 2182              		.loc 1 339 0 discriminator 2
 2183 0b76 D7F82C32 		ldr	r3, [r7, #556]
 2184 0b7a 013B     		subs	r3, r3, #1
 2185 0b7c C7F82C32 		str	r3, [r7, #556]
 2186              	.L59:
 339:main.c        ****                     for (int i=0; i<map.width; i++) {
 2187              		.loc 1 339 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 46


 2188 0b80 D7F82C32 		ldr	r3, [r7, #556]
 2189 0b84 002B     		cmp	r3, #0
 2190 0b86 BFF660AE 		bge	.L65
 2191              	.LBE15:
 354:main.c        ****                 }
 355:main.c        ****                 UART_PutString("\n\n");    
 2192              		.loc 1 355 0 is_stmt 1
 2193 0b8a 2648     		ldr	r0, .L88+20
 2194 0b8c FFF7FEFF 		bl	UART_PutString
 2195              	.L58:
 356:main.c        ****             }
 357:main.c        ****             
 358:main.c        ****           
 359:main.c        ****             
 360:main.c        ****             
 361:main.c        ****             // Update active window
 362:main.c        ****             active_window(&map, &active, &robot);
 2196              		.loc 1 362 0
 2197 0b90 1F4A     		ldr	r2, .L88
 2198 0b92 2549     		ldr	r1, .L88+24
 2199 0b94 1F48     		ldr	r0, .L88+4
 2200 0b96 FFF7FEFF 		bl	active_window
 363:main.c        ****             smoothed_POD_histogram(&smoothed_POD, &active, alpha, coeff_l, coeff_a, coeff_b);
 2201              		.loc 1 363 0
 2202 0b9a 07F5D473 		add	r3, r7, #424
 2203 0b9e 18CB     		ldmia	r3, {r3-r4}
 2204 0ba0 CDE90434 		strd	r3, [sp, #16]
 2205 0ba4 07F5D873 		add	r3, r7, #432
 2206 0ba8 18CB     		ldmia	r3, {r3-r4}
 2207 0baa CDE90234 		strd	r3, [sp, #8]
 2208 0bae 07F5E073 		add	r3, r7, #448
 2209 0bb2 18CB     		ldmia	r3, {r3-r4}
 2210 0bb4 CDE90034 		strd	r3, [sp]
 2211 0bb8 07F5E473 		add	r3, r7, #456
 2212 0bbc D3E90023 		ldrd	r2, [r3]
 2213 0bc0 1949     		ldr	r1, .L88+24
 2214 0bc2 1A48     		ldr	r0, .L88+28
 2215 0bc4 FFF7FEFF 		bl	smoothed_POD_histogram
 2216              	.LBB17:
 364:main.c        **** 
 365:main.c        ****             // Loop through densities and select candidate positions
 366:main.c        ****             for (int i = 0; i < smoothed_POD.nsectors; i++) {
 2217              		.loc 1 366 0
 2218 0bc8 0023     		movs	r3, #0
 2219 0bca C7F82432 		str	r3, [r7, #548]
 2220 0bce 47E0     		b	.L66
 2221              	.L71:
 2222              	.LBB18:
 367:main.c        ****                 double val = smoothed_POD.density[i];
 2223              		.loc 1 367 0
 2224 0bd0 164B     		ldr	r3, .L88+28
 2225 0bd2 5A68     		ldr	r2, [r3, #4]
 2226 0bd4 D7F82432 		ldr	r3, [r7, #548]
 2227 0bd8 DB00     		lsls	r3, r3, #3
 2228 0bda 1344     		add	r3, r3, r2
 2229 0bdc 18CB     		ldmia	r3, {r3-r4}
 2230 0bde 07F5B872 		add	r2, r7, #368
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 47


 2231 0be2 C2E90034 		strd	r3, [r2]
 368:main.c        ****                 if (val < valley_threshold_lower) {
 2232              		.loc 1 368 0
 2233 0be6 07F5D073 		add	r3, r7, #416
 2234 0bea D3E90023 		ldrd	r2, [r3]
 2235 0bee 07F5B871 		add	r1, r7, #368
 2236 0bf2 D1E90001 		ldrd	r0, [r1]
 2237 0bf6 FFF7FEFF 		bl	__aeabi_dcmplt
 2238 0bfa 0346     		mov	r3, r0
 2239 0bfc 002B     		cmp	r3, #0
 2240 0bfe 17D0     		beq	.L80
 369:main.c        ****                   candidate_idx[i] = 0;
 2241              		.loc 1 369 0
 2242 0c00 3B46     		mov	r3, r7
 2243 0c02 D7F82422 		ldr	r2, [r7, #548]
 2244 0c06 0021     		movs	r1, #0
 2245 0c08 43F82210 		str	r1, [r3, r2, lsl #2]
 2246 0c0c 23E0     		b	.L69
 2247              	.L89:
 2248 0c0e 00BF     		.align	2
 2249              	.L88:
 2250 0c10 00000000 		.word	robot
 2251 0c14 00000000 		.word	map
 2252 0c18 00000000 		.word	serial_output
 2253 0c1c 2C000000 		.word	.LC2
 2254 0c20 30000000 		.word	.LC3
 2255 0c24 34000000 		.word	.LC4
 2256 0c28 00000000 		.word	active
 2257 0c2c 00000000 		.word	smoothed_POD
 2258              	.L80:
 370:main.c        ****                 } else if (val > valley_threshold_upper) {
 2259              		.loc 1 370 0
 2260 0c30 07F5CC73 		add	r3, r7, #408
 2261 0c34 D3E90023 		ldrd	r2, [r3]
 2262 0c38 07F5B871 		add	r1, r7, #368
 2263 0c3c D1E90001 		ldrd	r0, [r1]
 2264 0c40 FFF7FEFF 		bl	__aeabi_dcmpgt
 2265 0c44 0346     		mov	r3, r0
 2266 0c46 002B     		cmp	r3, #0
 2267 0c48 05D0     		beq	.L69
 371:main.c        ****                   candidate_idx[i] = 1;
 2268              		.loc 1 371 0
 2269 0c4a 3B46     		mov	r3, r7
 2270 0c4c D7F82422 		ldr	r2, [r7, #548]
 2271 0c50 0121     		movs	r1, #1
 2272 0c52 43F82210 		str	r1, [r3, r2, lsl #2]
 2273              	.L69:
 2274              	.LBE18:
 366:main.c        ****                 double val = smoothed_POD.density[i];
 2275              		.loc 1 366 0 discriminator 2
 2276 0c56 D7F82432 		ldr	r3, [r7, #548]
 2277 0c5a 0133     		adds	r3, r3, #1
 2278 0c5c C7F82432 		str	r3, [r7, #548]
 2279              	.L66:
 366:main.c        ****                 double val = smoothed_POD.density[i];
 2280              		.loc 1 366 0 is_stmt 0 discriminator 1
 2281 0c60 494B     		ldr	r3, .L90+8
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 48


 2282 0c62 1A68     		ldr	r2, [r3]
 2283 0c64 D7F82432 		ldr	r3, [r7, #548]
 2284 0c68 9A42     		cmp	r2, r3
 2285 0c6a B1DC     		bgt	.L71
 2286              	.LBE17:
 372:main.c        ****                 }
 373:main.c        ****                 //sprintf(serial_output, "%.2f ", val);
 374:main.c        ****                 //UART_PutString(serial_output);
 375:main.c        ****             }
 376:main.c        ****             //UART_PutString("\n\n\n\n");
 377:main.c        ****             
 378:main.c        ****             // Calculate angle of drive - Output is in degrees, not rad
 379:main.c        ****             ideal_angle = calculate_avoidance_angle2(&smoothed_POD, &robot, candidate_idx, alpha, s
 2287              		.loc 1 379 0 is_stmt 1
 2288 0c6c 07F5C873 		add	r3, r7, #400
 2289 0c70 D3E90001 		ldrd	r0, [r3]
 2290 0c74 FFF7FEFF 		bl	__aeabi_d2iz
 2291 0c78 0346     		mov	r3, r0
 2292 0c7a 07F5B475 		add	r5, r7, #360
 2293 0c7e 3A46     		mov	r2, r7
 2294 0c80 0293     		str	r3, [sp, #8]
 2295 0c82 07F5E473 		add	r3, r7, #456
 2296 0c86 18CB     		ldmia	r3, {r3-r4}
 2297 0c88 CDE90034 		strd	r3, [sp]
 2298 0c8c 3F49     		ldr	r1, .L90+12
 2299 0c8e 3E48     		ldr	r0, .L90+8
 2300 0c90 FFF7FEFF 		bl	calculate_avoidance_angle2
 2301 0c94 C5E90001 		strd	r0, [r5]
 380:main.c        ****             //sprintf(serial_output, "Trasjectory of travel %f \n", ideal_angle);
 381:main.c        ****             //UART_PutString(serial_output);
 382:main.c        **** 
 383:main.c        ****             // Update Robot commands and free memory
 384:main.c        ****             ideal_angle = ideal_angle * DEG2RAD;
 2302              		.loc 1 384 0
 2303 0c98 07F5B471 		add	r1, r7, #360
 2304 0c9c 38A3     		adr	r3, .L90
 2305 0c9e D3E90023 		ldrd	r2, [r3]
 2306 0ca2 D1E90001 		ldrd	r0, [r1]
 2307 0ca6 FFF7FEFF 		bl	__aeabi_dmul
 2308 0caa 0346     		mov	r3, r0
 2309 0cac 0C46     		mov	r4, r1
 2310 0cae 1846     		mov	r0, r3
 2311 0cb0 2146     		mov	r1, r4
 2312 0cb2 07F5B475 		add	r5, r7, #360
 2313 0cb6 4FF00002 		mov	r2, #0
 2314 0cba 354B     		ldr	r3, .L90+16
 2315 0cbc FFF7FEFF 		bl	__aeabi_ddiv
 2316 0cc0 0346     		mov	r3, r0
 2317 0cc2 0C46     		mov	r4, r1
 2318 0cc4 C5E90034 		strd	r3, [r5]
 385:main.c        ****             ideal_velocity = velocity_control(&smoothed_POD, ideal_angle, alpha, h_m);
 2319              		.loc 1 385 0
 2320 0cc8 07F5B075 		add	r5, r7, #352
 2321 0ccc 07F5B472 		add	r2, r7, #360
 2322 0cd0 07F5C473 		add	r3, r7, #392
 2323 0cd4 18CB     		ldmia	r3, {r3-r4}
 2324 0cd6 CDE90234 		strd	r3, [sp, #8]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 49


 2325 0cda 07F5E473 		add	r3, r7, #456
 2326 0cde 18CB     		ldmia	r3, {r3-r4}
 2327 0ce0 CDE90034 		strd	r3, [sp]
 2328 0ce4 0CCA     		ldmia	r2, {r2-r3}
 2329 0ce6 2848     		ldr	r0, .L90+8
 2330 0ce8 FFF7FEFF 		bl	velocity_control
 2331 0cec C5E90001 		strd	r0, [r5]
 386:main.c        ****             robot.x += 0.25*10*cos(ideal_angle);
 2332              		.loc 1 386 0
 2333 0cf0 264B     		ldr	r3, .L90+12
 2334 0cf2 D3E90445 		ldrd	r4, [r3, #16]
 2335 0cf6 07F5B473 		add	r3, r7, #360
 2336 0cfa D3E90001 		ldrd	r0, [r3]
 2337 0cfe FFF7FEFF 		bl	cos
 2338 0d02 4FF00002 		mov	r2, #0
 2339 0d06 234B     		ldr	r3, .L90+20
 2340 0d08 FFF7FEFF 		bl	__aeabi_dmul
 2341 0d0c 0246     		mov	r2, r0
 2342 0d0e 0B46     		mov	r3, r1
 2343 0d10 2046     		mov	r0, r4
 2344 0d12 2946     		mov	r1, r5
 2345 0d14 FFF7FEFF 		bl	__aeabi_dadd
 2346 0d18 0346     		mov	r3, r0
 2347 0d1a 0C46     		mov	r4, r1
 2348 0d1c 1B4A     		ldr	r2, .L90+12
 2349 0d1e C2E90434 		strd	r3, [r2, #16]
 387:main.c        ****             robot.y += 0.25*10*sin(ideal_angle);
 2350              		.loc 1 387 0
 2351 0d22 1A4B     		ldr	r3, .L90+12
 2352 0d24 D3E90645 		ldrd	r4, [r3, #24]
 2353 0d28 07F5B473 		add	r3, r7, #360
 2354 0d2c D3E90001 		ldrd	r0, [r3]
 2355 0d30 FFF7FEFF 		bl	sin
 2356 0d34 4FF00002 		mov	r2, #0
 2357 0d38 164B     		ldr	r3, .L90+20
 2358 0d3a FFF7FEFF 		bl	__aeabi_dmul
 2359 0d3e 0246     		mov	r2, r0
 2360 0d40 0B46     		mov	r3, r1
 2361 0d42 2046     		mov	r0, r4
 2362 0d44 2946     		mov	r1, r5
 2363 0d46 FFF7FEFF 		bl	__aeabi_dadd
 2364 0d4a 0346     		mov	r3, r0
 2365 0d4c 0C46     		mov	r4, r1
 2366 0d4e 0F4A     		ldr	r2, .L90+12
 2367 0d50 C2E90634 		strd	r3, [r2, #24]
 388:main.c        ****             
 389:main.c        ****             if (print_cnt >= print_delay) {
 2368              		.loc 1 389 0
 2369 0d54 D7F83022 		ldr	r2, [r7, #560]
 2370 0d58 D7F88031 		ldr	r3, [r7, #384]
 2371 0d5c 9A42     		cmp	r2, r3
 2372 0d5e 02DB     		blt	.L72
 390:main.c        ****                 //sprintf(serial_output, "Angle: %f, Speed: %f\n", ideal_angle*180/M_PI, ideal_velo
 391:main.c        ****                 //UART_PutString(serial_output);
 392:main.c        ****                 print_cnt=0;
 2373              		.loc 1 392 0
 2374 0d60 0023     		movs	r3, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 50


 2375 0d62 C7F83032 		str	r3, [r7, #560]
 2376              	.L72:
 393:main.c        ****             }
 394:main.c        ****             print_cnt++;
 2377              		.loc 1 394 0
 2378 0d66 D7F83032 		ldr	r3, [r7, #560]
 2379 0d6a 0133     		adds	r3, r3, #1
 2380 0d6c C7F83032 		str	r3, [r7, #560]
 395:main.c        ****          
 396:main.c        ****             robot.desired_theta = ideal_angle;
 2381              		.loc 1 396 0
 2382 0d70 064A     		ldr	r2, .L90+12
 2383 0d72 07F5B473 		add	r3, r7, #360
 2384 0d76 18CB     		ldmia	r3, {r3-r4}
 2385 0d78 C2E90E34 		strd	r3, [r2, #56]
 2386              	.LBE14:
 397:main.c        ****             //robot.desired_v = ideal_velocity; 
 398:main.c        ****             
 399:main.c        ****             /*
 400:main.c        ****             if (goals_reached == 0 ) {
 401:main.c        ****                 robot.x = 60;
 402:main.c        ****                 robot.y = 60;
 403:main.c        ****             } else if (goals_reached == 2 ) {
 404:main.c        ****                 robot.x = 0;
 405:main.c        ****                 robot.y = 60;
 406:main.c        ****             }
 407:main.c        ****             */
 408:main.c        ****         }
 409:main.c        **** 
 410:main.c        ****     } 
 2387              		.loc 1 410 0
 2388 0d7c ECE4     		b	.L73
 2389              	.L91:
 2390 0d7e 00BF     		.align	3
 2391              	.L90:
 2392 0d80 182D4454 		.word	1413754136
 2393 0d84 FB210940 		.word	1074340347
 2394 0d88 00000000 		.word	smoothed_POD
 2395 0d8c 00000000 		.word	robot
 2396 0d90 00806640 		.word	1080459264
 2397 0d94 00000440 		.word	1074003968
 2398              		.cfi_endproc
 2399              	.LFE68:
 2400              		.size	main, .-main
 2401              		.global	__aeabi_d2uiz
 2402              		.section	.text.Drive_Left_Motor,"ax",%progbits
 2403              		.align	2
 2404              		.global	Drive_Left_Motor
 2405              		.thumb
 2406              		.thumb_func
 2407              		.type	Drive_Left_Motor, %function
 2408              	Drive_Left_Motor:
 2409              	.LFB69:
 411:main.c        ****             
 412:main.c        **** }
 413:main.c        **** 
 414:main.c        **** // Drive functions
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 51


 415:main.c        **** void Drive_Left_Motor(long double duty_cycle) {
 2410              		.loc 1 415 0
 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 8
 2413              		@ frame_needed = 1, uses_anonymous_args = 0
 2414 0000 90B5     		push	{r4, r7, lr}
 2415              		.cfi_def_cfa_offset 12
 2416              		.cfi_offset 4, -12
 2417              		.cfi_offset 7, -8
 2418              		.cfi_offset 14, -4
 2419 0002 83B0     		sub	sp, sp, #12
 2420              		.cfi_def_cfa_offset 24
 2421 0004 00AF     		add	r7, sp, #0
 2422              		.cfi_def_cfa_register 7
 2423 0006 C7E90001 		strd	r0, [r7]
 416:main.c        ****     if (duty_cycle < -1) {
 2424              		.loc 1 416 0
 2425 000a 4FF00002 		mov	r2, #0
 2426 000e 304B     		ldr	r3, .L106+8
 2427 0010 D7E90001 		ldrd	r0, [r7]
 2428 0014 FFF7FEFF 		bl	__aeabi_dcmplt
 2429 0018 0346     		mov	r3, r0
 2430 001a 002B     		cmp	r3, #0
 2431 001c 05D0     		beq	.L103
 417:main.c        ****         duty_cycle = -1;
 2432              		.loc 1 417 0
 2433 001e 4FF00003 		mov	r3, #0
 2434 0022 2B4C     		ldr	r4, .L106+8
 2435 0024 C7E90034 		strd	r3, [r7]
 2436 0028 0EE0     		b	.L95
 2437              	.L103:
 418:main.c        ****     } else if (duty_cycle > 1) {
 2438              		.loc 1 418 0
 2439 002a 4FF00002 		mov	r2, #0
 2440 002e 294B     		ldr	r3, .L106+12
 2441 0030 D7E90001 		ldrd	r0, [r7]
 2442 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 2443 0038 0346     		mov	r3, r0
 2444 003a 002B     		cmp	r3, #0
 2445 003c 04D0     		beq	.L95
 419:main.c        ****         duty_cycle = 1;
 2446              		.loc 1 419 0
 2447 003e 4FF00003 		mov	r3, #0
 2448 0042 244C     		ldr	r4, .L106+12
 2449 0044 C7E90034 		strd	r3, [r7]
 2450              	.L95:
 420:main.c        ****     }
 421:main.c        ****     
 422:main.c        ****     if (duty_cycle < 0) {
 2451              		.loc 1 422 0
 2452 0048 4FF00002 		mov	r2, #0
 2453 004c 4FF00003 		mov	r3, #0
 2454 0050 D7E90001 		ldrd	r0, [r7]
 2455 0054 FFF7FEFF 		bl	__aeabi_dcmplt
 2456 0058 0346     		mov	r3, r0
 2457 005a 002B     		cmp	r3, #0
 2458 005c 1BD0     		beq	.L104
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 52


 423:main.c        ****         duty_cycle = -duty_cycle;
 2459              		.loc 1 423 0
 2460 005e 3B68     		ldr	r3, [r7]
 2461 0060 3B60     		str	r3, [r7]
 2462 0062 7B68     		ldr	r3, [r7, #4]
 2463 0064 83F00043 		eor	r3, r3, #-2147483648
 2464 0068 7B60     		str	r3, [r7, #4]
 424:main.c        ****         PWM_Motor_L_WriteCompare1(0);
 2465              		.loc 1 424 0
 2466 006a 0020     		movs	r0, #0
 2467 006c FFF7FEFF 		bl	PWM_Motor_L_WriteCompare1
 425:main.c        ****         PWM_Motor_L_WriteCompare2(duty_cycle*10000);
 2468              		.loc 1 425 0
 2469 0070 15A3     		adr	r3, .L106
 2470 0072 D3E90023 		ldrd	r2, [r3]
 2471 0076 D7E90001 		ldrd	r0, [r7]
 2472 007a FFF7FEFF 		bl	__aeabi_dmul
 2473 007e 0346     		mov	r3, r0
 2474 0080 0C46     		mov	r4, r1
 2475 0082 1846     		mov	r0, r3
 2476 0084 2146     		mov	r1, r4
 2477 0086 FFF7FEFF 		bl	__aeabi_d2uiz
 2478 008a 0346     		mov	r3, r0
 2479 008c 9BB2     		uxth	r3, r3
 2480 008e 1846     		mov	r0, r3
 2481 0090 FFF7FEFF 		bl	PWM_Motor_L_WriteCompare2
 426:main.c        ****     } else {
 427:main.c        ****         PWM_Motor_L_WriteCompare1(duty_cycle*10000);
 428:main.c        ****         PWM_Motor_L_WriteCompare2(0);
 429:main.c        ****     }
 430:main.c        **** }
 2482              		.loc 1 430 0
 2483 0094 14E0     		b	.L105
 2484              	.L104:
 427:main.c        ****         PWM_Motor_L_WriteCompare2(0);
 2485              		.loc 1 427 0
 2486 0096 0CA3     		adr	r3, .L106
 2487 0098 D3E90023 		ldrd	r2, [r3]
 2488 009c D7E90001 		ldrd	r0, [r7]
 2489 00a0 FFF7FEFF 		bl	__aeabi_dmul
 2490 00a4 0346     		mov	r3, r0
 2491 00a6 0C46     		mov	r4, r1
 2492 00a8 1846     		mov	r0, r3
 2493 00aa 2146     		mov	r1, r4
 2494 00ac FFF7FEFF 		bl	__aeabi_d2uiz
 2495 00b0 0346     		mov	r3, r0
 2496 00b2 9BB2     		uxth	r3, r3
 2497 00b4 1846     		mov	r0, r3
 2498 00b6 FFF7FEFF 		bl	PWM_Motor_L_WriteCompare1
 428:main.c        ****     }
 2499              		.loc 1 428 0
 2500 00ba 0020     		movs	r0, #0
 2501 00bc FFF7FEFF 		bl	PWM_Motor_L_WriteCompare2
 2502              	.L105:
 2503              		.loc 1 430 0
 2504 00c0 00BF     		nop
 2505 00c2 0C37     		adds	r7, r7, #12
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 53


 2506              		.cfi_def_cfa_offset 12
 2507 00c4 BD46     		mov	sp, r7
 2508              		.cfi_def_cfa_register 13
 2509              		@ sp needed
 2510 00c6 90BD     		pop	{r4, r7, pc}
 2511              	.L107:
 2512              		.align	3
 2513              	.L106:
 2514 00c8 00000000 		.word	0
 2515 00cc 0088C340 		.word	1086556160
 2516 00d0 0000F0BF 		.word	-1074790400
 2517 00d4 0000F03F 		.word	1072693248
 2518              		.cfi_endproc
 2519              	.LFE69:
 2520              		.size	Drive_Left_Motor, .-Drive_Left_Motor
 2521              		.section	.text.Drive_Right_Motor,"ax",%progbits
 2522              		.align	2
 2523              		.global	Drive_Right_Motor
 2524              		.thumb
 2525              		.thumb_func
 2526              		.type	Drive_Right_Motor, %function
 2527              	Drive_Right_Motor:
 2528              	.LFB70:
 431:main.c        **** 
 432:main.c        **** void Drive_Right_Motor(long double duty_cycle) {
 2529              		.loc 1 432 0
 2530              		.cfi_startproc
 2531              		@ args = 0, pretend = 0, frame = 8
 2532              		@ frame_needed = 1, uses_anonymous_args = 0
 2533 0000 90B5     		push	{r4, r7, lr}
 2534              		.cfi_def_cfa_offset 12
 2535              		.cfi_offset 4, -12
 2536              		.cfi_offset 7, -8
 2537              		.cfi_offset 14, -4
 2538 0002 83B0     		sub	sp, sp, #12
 2539              		.cfi_def_cfa_offset 24
 2540 0004 00AF     		add	r7, sp, #0
 2541              		.cfi_def_cfa_register 7
 2542 0006 C7E90001 		strd	r0, [r7]
 433:main.c        ****     if (duty_cycle < -1) {
 2543              		.loc 1 433 0
 2544 000a 4FF00002 		mov	r2, #0
 2545 000e 304B     		ldr	r3, .L122+8
 2546 0010 D7E90001 		ldrd	r0, [r7]
 2547 0014 FFF7FEFF 		bl	__aeabi_dcmplt
 2548 0018 0346     		mov	r3, r0
 2549 001a 002B     		cmp	r3, #0
 2550 001c 05D0     		beq	.L119
 434:main.c        ****         duty_cycle = -1;
 2551              		.loc 1 434 0
 2552 001e 4FF00003 		mov	r3, #0
 2553 0022 2B4C     		ldr	r4, .L122+8
 2554 0024 C7E90034 		strd	r3, [r7]
 2555 0028 0EE0     		b	.L111
 2556              	.L119:
 435:main.c        ****     } else if (duty_cycle > 1) {
 2557              		.loc 1 435 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 54


 2558 002a 4FF00002 		mov	r2, #0
 2559 002e 294B     		ldr	r3, .L122+12
 2560 0030 D7E90001 		ldrd	r0, [r7]
 2561 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 2562 0038 0346     		mov	r3, r0
 2563 003a 002B     		cmp	r3, #0
 2564 003c 04D0     		beq	.L111
 436:main.c        ****         duty_cycle = 1;
 2565              		.loc 1 436 0
 2566 003e 4FF00003 		mov	r3, #0
 2567 0042 244C     		ldr	r4, .L122+12
 2568 0044 C7E90034 		strd	r3, [r7]
 2569              	.L111:
 437:main.c        ****     }
 438:main.c        ****     
 439:main.c        ****     if (duty_cycle < 0) {
 2570              		.loc 1 439 0
 2571 0048 4FF00002 		mov	r2, #0
 2572 004c 4FF00003 		mov	r3, #0
 2573 0050 D7E90001 		ldrd	r0, [r7]
 2574 0054 FFF7FEFF 		bl	__aeabi_dcmplt
 2575 0058 0346     		mov	r3, r0
 2576 005a 002B     		cmp	r3, #0
 2577 005c 1BD0     		beq	.L120
 440:main.c        ****         duty_cycle = -duty_cycle;
 2578              		.loc 1 440 0
 2579 005e 3B68     		ldr	r3, [r7]
 2580 0060 3B60     		str	r3, [r7]
 2581 0062 7B68     		ldr	r3, [r7, #4]
 2582 0064 83F00043 		eor	r3, r3, #-2147483648
 2583 0068 7B60     		str	r3, [r7, #4]
 441:main.c        ****         PWM_Motor_R_WriteCompare1(0);
 2584              		.loc 1 441 0
 2585 006a 0020     		movs	r0, #0
 2586 006c FFF7FEFF 		bl	PWM_Motor_R_WriteCompare1
 442:main.c        ****         PWM_Motor_R_WriteCompare2(duty_cycle*5000);
 2587              		.loc 1 442 0
 2588 0070 15A3     		adr	r3, .L122
 2589 0072 D3E90023 		ldrd	r2, [r3]
 2590 0076 D7E90001 		ldrd	r0, [r7]
 2591 007a FFF7FEFF 		bl	__aeabi_dmul
 2592 007e 0346     		mov	r3, r0
 2593 0080 0C46     		mov	r4, r1
 2594 0082 1846     		mov	r0, r3
 2595 0084 2146     		mov	r1, r4
 2596 0086 FFF7FEFF 		bl	__aeabi_d2uiz
 2597 008a 0346     		mov	r3, r0
 2598 008c 9BB2     		uxth	r3, r3
 2599 008e 1846     		mov	r0, r3
 2600 0090 FFF7FEFF 		bl	PWM_Motor_R_WriteCompare2
 443:main.c        ****     } else {
 444:main.c        ****         PWM_Motor_R_WriteCompare1(duty_cycle*5000);
 445:main.c        ****         PWM_Motor_R_WriteCompare2(0);
 446:main.c        ****     }
 447:main.c        **** }
 2601              		.loc 1 447 0
 2602 0094 14E0     		b	.L121
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 55


 2603              	.L120:
 444:main.c        ****         PWM_Motor_R_WriteCompare2(0);
 2604              		.loc 1 444 0
 2605 0096 0CA3     		adr	r3, .L122
 2606 0098 D3E90023 		ldrd	r2, [r3]
 2607 009c D7E90001 		ldrd	r0, [r7]
 2608 00a0 FFF7FEFF 		bl	__aeabi_dmul
 2609 00a4 0346     		mov	r3, r0
 2610 00a6 0C46     		mov	r4, r1
 2611 00a8 1846     		mov	r0, r3
 2612 00aa 2146     		mov	r1, r4
 2613 00ac FFF7FEFF 		bl	__aeabi_d2uiz
 2614 00b0 0346     		mov	r3, r0
 2615 00b2 9BB2     		uxth	r3, r3
 2616 00b4 1846     		mov	r0, r3
 2617 00b6 FFF7FEFF 		bl	PWM_Motor_R_WriteCompare1
 445:main.c        ****     }
 2618              		.loc 1 445 0
 2619 00ba 0020     		movs	r0, #0
 2620 00bc FFF7FEFF 		bl	PWM_Motor_R_WriteCompare2
 2621              	.L121:
 2622              		.loc 1 447 0
 2623 00c0 00BF     		nop
 2624 00c2 0C37     		adds	r7, r7, #12
 2625              		.cfi_def_cfa_offset 12
 2626 00c4 BD46     		mov	sp, r7
 2627              		.cfi_def_cfa_register 13
 2628              		@ sp needed
 2629 00c6 90BD     		pop	{r4, r7, pc}
 2630              	.L123:
 2631              		.align	3
 2632              	.L122:
 2633 00c8 00000000 		.word	0
 2634 00cc 0088B340 		.word	1085507584
 2635 00d0 0000F0BF 		.word	-1074790400
 2636 00d4 0000F03F 		.word	1072693248
 2637              		.cfi_endproc
 2638              	.LFE70:
 2639              		.size	Drive_Right_Motor, .-Drive_Right_Motor
 2640              		.text
 2641              	.Letext0:
 2642              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2643              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2644              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2645              		.file 5 "..\\VFH/..\\Helper\\helper.h"
 2646              		.file 6 "..\\VFH/..\\Robot\\robot.h"
 2647              		.file 7 "..\\VFH/vfh.h"
 2648              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 2649              		.section	.debug_info,"",%progbits
 2650              	.Ldebug_info0:
 2651 0000 7B080000 		.4byte	0x87b
 2652 0004 0400     		.2byte	0x4
 2653 0006 00000000 		.4byte	.Ldebug_abbrev0
 2654 000a 04       		.byte	0x4
 2655 000b 01       		.uleb128 0x1
 2656 000c 95000000 		.4byte	.LASF98
 2657 0010 0C       		.byte	0xc
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 56


 2658 0011 11040000 		.4byte	.LASF99
 2659 0015 F2010000 		.4byte	.LASF100
 2660 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2661 001d 00000000 		.4byte	0
 2662 0021 00000000 		.4byte	.Ldebug_line0
 2663 0025 02       		.uleb128 0x2
 2664 0026 01       		.byte	0x1
 2665 0027 06       		.byte	0x6
 2666 0028 EC020000 		.4byte	.LASF0
 2667 002c 03       		.uleb128 0x3
 2668 002d 7A020000 		.4byte	.LASF3
 2669 0031 02       		.byte	0x2
 2670 0032 1D       		.byte	0x1d
 2671 0033 37000000 		.4byte	0x37
 2672 0037 02       		.uleb128 0x2
 2673 0038 01       		.byte	0x1
 2674 0039 08       		.byte	0x8
 2675 003a C0020000 		.4byte	.LASF1
 2676 003e 02       		.uleb128 0x2
 2677 003f 02       		.byte	0x2
 2678 0040 05       		.byte	0x5
 2679 0041 6A010000 		.4byte	.LASF2
 2680 0045 03       		.uleb128 0x3
 2681 0046 2D010000 		.4byte	.LASF4
 2682 004a 02       		.byte	0x2
 2683 004b 2B       		.byte	0x2b
 2684 004c 50000000 		.4byte	0x50
 2685 0050 02       		.uleb128 0x2
 2686 0051 02       		.byte	0x2
 2687 0052 07       		.byte	0x7
 2688 0053 6E030000 		.4byte	.LASF5
 2689 0057 03       		.uleb128 0x3
 2690 0058 74040000 		.4byte	.LASF6
 2691 005c 02       		.byte	0x2
 2692 005d 3F       		.byte	0x3f
 2693 005e 62000000 		.4byte	0x62
 2694 0062 02       		.uleb128 0x2
 2695 0063 04       		.byte	0x4
 2696 0064 05       		.byte	0x5
 2697 0065 37020000 		.4byte	.LASF7
 2698 0069 02       		.uleb128 0x2
 2699 006a 04       		.byte	0x4
 2700 006b 07       		.byte	0x7
 2701 006c 32030000 		.4byte	.LASF8
 2702 0070 02       		.uleb128 0x2
 2703 0071 08       		.byte	0x8
 2704 0072 05       		.byte	0x5
 2705 0073 BF010000 		.4byte	.LASF9
 2706 0077 02       		.uleb128 0x2
 2707 0078 08       		.byte	0x8
 2708 0079 07       		.byte	0x7
 2709 007a FE020000 		.4byte	.LASF10
 2710 007e 04       		.uleb128 0x4
 2711 007f 04       		.byte	0x4
 2712 0080 05       		.byte	0x5
 2713 0081 696E7400 		.ascii	"int\000"
 2714 0085 02       		.uleb128 0x2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 57


 2715 0086 04       		.byte	0x4
 2716 0087 07       		.byte	0x7
 2717 0088 1C030000 		.4byte	.LASF11
 2718 008c 03       		.uleb128 0x3
 2719 008d 8C010000 		.4byte	.LASF12
 2720 0091 03       		.byte	0x3
 2721 0092 18       		.byte	0x18
 2722 0093 2C000000 		.4byte	0x2c
 2723 0097 03       		.uleb128 0x3
 2724 0098 29030000 		.4byte	.LASF13
 2725 009c 03       		.byte	0x3
 2726 009d 24       		.byte	0x24
 2727 009e 45000000 		.4byte	0x45
 2728 00a2 03       		.uleb128 0x3
 2729 00a3 7F000000 		.4byte	.LASF14
 2730 00a7 03       		.byte	0x3
 2731 00a8 2C       		.byte	0x2c
 2732 00a9 57000000 		.4byte	0x57
 2733 00ad 05       		.uleb128 0x5
 2734 00ae 3B040000 		.4byte	.LASF15
 2735 00b2 04       		.byte	0x4
 2736 00b3 ED01     		.2byte	0x1ed
 2737 00b5 62000000 		.4byte	0x62
 2738 00b9 02       		.uleb128 0x2
 2739 00ba 04       		.byte	0x4
 2740 00bb 04       		.byte	0x4
 2741 00bc AE010000 		.4byte	.LASF16
 2742 00c0 02       		.uleb128 0x2
 2743 00c1 08       		.byte	0x8
 2744 00c2 04       		.byte	0x4
 2745 00c3 CF040000 		.4byte	.LASF17
 2746 00c7 02       		.uleb128 0x2
 2747 00c8 01       		.byte	0x1
 2748 00c9 08       		.byte	0x8
 2749 00ca A1030000 		.4byte	.LASF18
 2750 00ce 02       		.uleb128 0x2
 2751 00cf 08       		.byte	0x8
 2752 00d0 04       		.byte	0x4
 2753 00d1 A5020000 		.4byte	.LASF19
 2754 00d5 02       		.uleb128 0x2
 2755 00d6 04       		.byte	0x4
 2756 00d7 07       		.byte	0x7
 2757 00d8 76000000 		.4byte	.LASF20
 2758 00dc 06       		.uleb128 0x6
 2759 00dd 28       		.byte	0x28
 2760 00de 05       		.byte	0x5
 2761 00df 22       		.byte	0x22
 2762 00e0 FD000000 		.4byte	0xfd
 2763 00e4 07       		.uleb128 0x7
 2764 00e5 23010000 		.4byte	.LASF21
 2765 00e9 05       		.byte	0x5
 2766 00ea 23       		.byte	0x23
 2767 00eb FD000000 		.4byte	0xfd
 2768 00ef 00       		.byte	0
 2769 00f0 07       		.uleb128 0x7
 2770 00f1 98030000 		.4byte	.LASF22
 2771 00f5 05       		.byte	0x5
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 58


 2772 00f6 24       		.byte	0x24
 2773 00f7 FD000000 		.4byte	0xfd
 2774 00fb 14       		.byte	0x14
 2775 00fc 00       		.byte	0
 2776 00fd 08       		.uleb128 0x8
 2777 00fe 7E000000 		.4byte	0x7e
 2778 0102 0D010000 		.4byte	0x10d
 2779 0106 09       		.uleb128 0x9
 2780 0107 D5000000 		.4byte	0xd5
 2781 010b 04       		.byte	0x4
 2782 010c 00       		.byte	0
 2783 010d 03       		.uleb128 0x3
 2784 010e 9E020000 		.4byte	.LASF23
 2785 0112 05       		.byte	0x5
 2786 0113 25       		.byte	0x25
 2787 0114 DC000000 		.4byte	0xdc
 2788 0118 06       		.uleb128 0x6
 2789 0119 48       		.byte	0x48
 2790 011a 06       		.byte	0x6
 2791 011b 0A       		.byte	0xa
 2792 011c 89010000 		.4byte	0x189
 2793 0120 07       		.uleb128 0x7
 2794 0121 69040000 		.4byte	.LASF24
 2795 0125 06       		.byte	0x6
 2796 0126 0B       		.byte	0xb
 2797 0127 CE000000 		.4byte	0xce
 2798 012b 00       		.byte	0
 2799 012c 07       		.uleb128 0x7
 2800 012d 7E040000 		.4byte	.LASF25
 2801 0131 06       		.byte	0x6
 2802 0132 0C       		.byte	0xc
 2803 0133 CE000000 		.4byte	0xce
 2804 0137 08       		.byte	0x8
 2805 0138 0A       		.uleb128 0xa
 2806 0139 7700     		.ascii	"w\000"
 2807 013b 06       		.byte	0x6
 2808 013c 0D       		.byte	0xd
 2809 013d CE000000 		.4byte	0xce
 2810 0141 10       		.byte	0x10
 2811 0142 07       		.uleb128 0x7
 2812 0143 D6040000 		.4byte	.LASF26
 2813 0147 06       		.byte	0x6
 2814 0148 0E       		.byte	0xe
 2815 0149 CE000000 		.4byte	0xce
 2816 014d 18       		.byte	0x18
 2817 014e 07       		.uleb128 0x7
 2818 014f E2020000 		.4byte	.LASF27
 2819 0153 06       		.byte	0x6
 2820 0154 0F       		.byte	0xf
 2821 0155 CE000000 		.4byte	0xce
 2822 0159 20       		.byte	0x20
 2823 015a 0A       		.uleb128 0xa
 2824 015b 4B6900   		.ascii	"Ki\000"
 2825 015e 06       		.byte	0x6
 2826 015f 10       		.byte	0x10
 2827 0160 CE000000 		.4byte	0xce
 2828 0164 28       		.byte	0x28
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 59


 2829 0165 0A       		.uleb128 0xa
 2830 0166 4B7000   		.ascii	"Kp\000"
 2831 0169 06       		.byte	0x6
 2832 016a 11       		.byte	0x11
 2833 016b CE000000 		.4byte	0xce
 2834 016f 30       		.byte	0x30
 2835 0170 07       		.uleb128 0x7
 2836 0171 E5010000 		.4byte	.LASF28
 2837 0175 06       		.byte	0x6
 2838 0176 12       		.byte	0x12
 2839 0177 C0000000 		.4byte	0xc0
 2840 017b 38       		.byte	0x38
 2841 017c 07       		.uleb128 0x7
 2842 017d B9040000 		.4byte	.LASF29
 2843 0181 06       		.byte	0x6
 2844 0182 13       		.byte	0x13
 2845 0183 7E000000 		.4byte	0x7e
 2846 0187 40       		.byte	0x40
 2847 0188 00       		.byte	0
 2848 0189 03       		.uleb128 0x3
 2849 018a B1020000 		.4byte	.LASF30
 2850 018e 06       		.byte	0x6
 2851 018f 15       		.byte	0x15
 2852 0190 18010000 		.4byte	0x118
 2853 0194 06       		.uleb128 0x6
 2854 0195 70       		.byte	0x70
 2855 0196 06       		.byte	0x6
 2856 0197 1A       		.byte	0x1a
 2857 0198 3B020000 		.4byte	0x23b
 2858 019c 07       		.uleb128 0x7
 2859 019d 1A000000 		.4byte	.LASF31
 2860 01a1 06       		.byte	0x6
 2861 01a2 1C       		.byte	0x1c
 2862 01a3 CE000000 		.4byte	0xce
 2863 01a7 00       		.byte	0
 2864 01a8 07       		.uleb128 0x7
 2865 01a9 C3040000 		.4byte	.LASF32
 2866 01ad 06       		.byte	0x6
 2867 01ae 1F       		.byte	0x1f
 2868 01af CE000000 		.4byte	0xce
 2869 01b3 08       		.byte	0x8
 2870 01b4 0A       		.uleb128 0xa
 2871 01b5 7800     		.ascii	"x\000"
 2872 01b7 06       		.byte	0x6
 2873 01b8 20       		.byte	0x20
 2874 01b9 CE000000 		.4byte	0xce
 2875 01bd 10       		.byte	0x10
 2876 01be 0A       		.uleb128 0xa
 2877 01bf 7900     		.ascii	"y\000"
 2878 01c1 06       		.byte	0x6
 2879 01c2 21       		.byte	0x21
 2880 01c3 CE000000 		.4byte	0xce
 2881 01c7 18       		.byte	0x18
 2882 01c8 0A       		.uleb128 0xa
 2883 01c9 7600     		.ascii	"v\000"
 2884 01cb 06       		.byte	0x6
 2885 01cc 24       		.byte	0x24
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 60


 2886 01cd CE000000 		.4byte	0xce
 2887 01d1 20       		.byte	0x20
 2888 01d2 0A       		.uleb128 0xa
 2889 01d3 7700     		.ascii	"w\000"
 2890 01d5 06       		.byte	0x6
 2891 01d6 25       		.byte	0x25
 2892 01d7 CE000000 		.4byte	0xce
 2893 01db 28       		.byte	0x28
 2894 01dc 07       		.uleb128 0x7
 2895 01dd D8020000 		.4byte	.LASF33
 2896 01e1 06       		.byte	0x6
 2897 01e2 28       		.byte	0x28
 2898 01e3 CE000000 		.4byte	0xce
 2899 01e7 30       		.byte	0x30
 2900 01e8 07       		.uleb128 0x7
 2901 01e9 2C000000 		.4byte	.LASF34
 2902 01ed 06       		.byte	0x6
 2903 01ee 29       		.byte	0x29
 2904 01ef CE000000 		.4byte	0xce
 2905 01f3 38       		.byte	0x38
 2906 01f4 0A       		.uleb128 0xa
 2907 01f5 4B6900   		.ascii	"Ki\000"
 2908 01f8 06       		.byte	0x6
 2909 01f9 2C       		.byte	0x2c
 2910 01fa CE000000 		.4byte	0xce
 2911 01fe 40       		.byte	0x40
 2912 01ff 0A       		.uleb128 0xa
 2913 0200 4B7000   		.ascii	"Kp\000"
 2914 0203 06       		.byte	0x6
 2915 0204 2D       		.byte	0x2d
 2916 0205 CE000000 		.4byte	0xce
 2917 0209 48       		.byte	0x48
 2918 020a 07       		.uleb128 0x7
 2919 020b 7E040000 		.4byte	.LASF25
 2920 020f 06       		.byte	0x6
 2921 0210 2E       		.byte	0x2e
 2922 0211 CE000000 		.4byte	0xce
 2923 0215 50       		.byte	0x50
 2924 0216 07       		.uleb128 0x7
 2925 0217 94010000 		.4byte	.LASF35
 2926 021b 06       		.byte	0x6
 2927 021c 31       		.byte	0x31
 2928 021d CE000000 		.4byte	0xce
 2929 0221 58       		.byte	0x58
 2930 0222 07       		.uleb128 0x7
 2931 0223 A1010000 		.4byte	.LASF36
 2932 0227 06       		.byte	0x6
 2933 0228 32       		.byte	0x32
 2934 0229 CE000000 		.4byte	0xce
 2935 022d 60       		.byte	0x60
 2936 022e 07       		.uleb128 0x7
 2937 022f 9F040000 		.4byte	.LASF37
 2938 0233 06       		.byte	0x6
 2939 0234 33       		.byte	0x33
 2940 0235 CE000000 		.4byte	0xce
 2941 0239 68       		.byte	0x68
 2942 023a 00       		.byte	0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 61


 2943 023b 03       		.uleb128 0x3
 2944 023c 8F000000 		.4byte	.LASF38
 2945 0240 06       		.byte	0x6
 2946 0241 35       		.byte	0x35
 2947 0242 94010000 		.4byte	0x194
 2948 0246 06       		.uleb128 0x6
 2949 0247 10       		.byte	0x10
 2950 0248 07       		.byte	0x7
 2951 0249 13       		.byte	0x13
 2952 024a 7F020000 		.4byte	0x27f
 2953 024e 07       		.uleb128 0x7
 2954 024f A8010000 		.4byte	.LASF39
 2955 0253 07       		.byte	0x7
 2956 0254 14       		.byte	0x14
 2957 0255 7E000000 		.4byte	0x7e
 2958 0259 00       		.byte	0
 2959 025a 07       		.uleb128 0x7
 2960 025b 15030000 		.4byte	.LASF40
 2961 025f 07       		.byte	0x7
 2962 0260 15       		.byte	0x15
 2963 0261 7E000000 		.4byte	0x7e
 2964 0265 04       		.byte	0x4
 2965 0266 07       		.uleb128 0x7
 2966 0267 B9030000 		.4byte	.LASF41
 2967 026b 07       		.byte	0x7
 2968 026c 16       		.byte	0x16
 2969 026d 7E000000 		.4byte	0x7e
 2970 0271 08       		.byte	0x8
 2971 0272 07       		.uleb128 0x7
 2972 0273 FC030000 		.4byte	.LASF42
 2973 0277 07       		.byte	0x7
 2974 0278 17       		.byte	0x17
 2975 0279 7F020000 		.4byte	0x27f
 2976 027d 0C       		.byte	0xc
 2977 027e 00       		.byte	0
 2978 027f 0B       		.uleb128 0xb
 2979 0280 04       		.byte	0x4
 2980 0281 85000000 		.4byte	0x85
 2981 0285 03       		.uleb128 0x3
 2982 0286 69030000 		.4byte	.LASF43
 2983 028a 07       		.byte	0x7
 2984 028b 18       		.byte	0x18
 2985 028c 46020000 		.4byte	0x246
 2986 0290 06       		.uleb128 0x6
 2987 0291 08       		.byte	0x8
 2988 0292 07       		.byte	0x7
 2989 0293 2E       		.byte	0x2e
 2990 0294 B1020000 		.4byte	0x2b1
 2991 0298 07       		.uleb128 0x7
 2992 0299 00000000 		.4byte	.LASF44
 2993 029d 07       		.byte	0x7
 2994 029e 2F       		.byte	0x2f
 2995 029f 7E000000 		.4byte	0x7e
 2996 02a3 00       		.byte	0
 2997 02a4 07       		.uleb128 0x7
 2998 02a5 3A000000 		.4byte	.LASF45
 2999 02a9 07       		.byte	0x7
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 62


 3000 02aa 30       		.byte	0x30
 3001 02ab B1020000 		.4byte	0x2b1
 3002 02af 04       		.byte	0x4
 3003 02b0 00       		.byte	0
 3004 02b1 0B       		.uleb128 0xb
 3005 02b2 04       		.byte	0x4
 3006 02b3 C0000000 		.4byte	0xc0
 3007 02b7 0C       		.uleb128 0xc
 3008 02b8 504F4400 		.ascii	"POD\000"
 3009 02bc 07       		.byte	0x7
 3010 02bd 31       		.byte	0x31
 3011 02be 90020000 		.4byte	0x290
 3012 02c2 0D       		.uleb128 0xd
 3013 02c3 49040000 		.4byte	.LASF101
 3014 02c7 01       		.byte	0x1
 3015 02c8 34       		.byte	0x34
 3016 02c9 00000000 		.4byte	.LFB64
 3017 02cd 84000000 		.4byte	.LFE64-.LFB64
 3018 02d1 01       		.uleb128 0x1
 3019 02d2 9C       		.byte	0x9c
 3020 02d3 0E       		.uleb128 0xe
 3021 02d4 CD010000 		.4byte	.LASF50
 3022 02d8 01       		.byte	0x1
 3023 02d9 4B       		.byte	0x4b
 3024 02da 00000000 		.4byte	.LFB65
 3025 02de 5C040000 		.4byte	.LFE65-.LFB65
 3026 02e2 01       		.uleb128 0x1
 3027 02e3 9C       		.byte	0x9c
 3028 02e4 30030000 		.4byte	0x330
 3029 02e8 0F       		.uleb128 0xf
 3030 02e9 6E657700 		.ascii	"new\000"
 3031 02ed 01       		.byte	0x1
 3032 02ee 4D       		.byte	0x4d
 3033 02ef AD000000 		.4byte	0xad
 3034 02f3 02       		.uleb128 0x2
 3035 02f4 91       		.byte	0x91
 3036 02f5 4C       		.sleb128 -52
 3037 02f6 10       		.uleb128 0x10
 3038 02f7 42000000 		.4byte	.LASF46
 3039 02fb 01       		.byte	0x1
 3040 02fc 4D       		.byte	0x4d
 3041 02fd AD000000 		.4byte	0xad
 3042 0301 02       		.uleb128 0x2
 3043 0302 91       		.byte	0x91
 3044 0303 48       		.sleb128 -56
 3045 0304 10       		.uleb128 0x10
 3046 0305 C9040000 		.4byte	.LASF47
 3047 0309 01       		.byte	0x1
 3048 030a 67       		.byte	0x67
 3049 030b CE000000 		.4byte	0xce
 3050 030f 02       		.uleb128 0x2
 3051 0310 91       		.byte	0x91
 3052 0311 50       		.sleb128 -48
 3053 0312 10       		.uleb128 0x10
 3054 0313 C4030000 		.4byte	.LASF48
 3055 0317 01       		.byte	0x1
 3056 0318 70       		.byte	0x70
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 63


 3057 0319 C0000000 		.4byte	0xc0
 3058 031d 02       		.uleb128 0x2
 3059 031e 91       		.byte	0x91
 3060 031f 40       		.sleb128 -64
 3061 0320 10       		.uleb128 0x10
 3062 0321 AD040000 		.4byte	.LASF49
 3063 0325 01       		.byte	0x1
 3064 0326 74       		.byte	0x74
 3065 0327 CE000000 		.4byte	0xce
 3066 032b 03       		.uleb128 0x3
 3067 032c 91       		.byte	0x91
 3068 032d B87F     		.sleb128 -72
 3069 032f 00       		.byte	0
 3070 0330 0E       		.uleb128 0xe
 3071 0331 38010000 		.4byte	.LASF51
 3072 0335 01       		.byte	0x1
 3073 0336 7B       		.byte	0x7b
 3074 0337 00000000 		.4byte	.LFB66
 3075 033b 54010000 		.4byte	.LFE66-.LFB66
 3076 033f 01       		.uleb128 0x1
 3077 0340 9C       		.byte	0x9c
 3078 0341 54030000 		.4byte	0x354
 3079 0345 10       		.uleb128 0x10
 3080 0346 C9040000 		.4byte	.LASF47
 3081 034a 01       		.byte	0x1
 3082 034b 7C       		.byte	0x7c
 3083 034c CE000000 		.4byte	0xce
 3084 0350 02       		.uleb128 0x2
 3085 0351 91       		.byte	0x91
 3086 0352 60       		.sleb128 -32
 3087 0353 00       		.byte	0
 3088 0354 0E       		.uleb128 0xe
 3089 0355 D7030000 		.4byte	.LASF52
 3090 0359 01       		.byte	0x1
 3091 035a 89       		.byte	0x89
 3092 035b 00000000 		.4byte	.LFB67
 3093 035f 74000000 		.4byte	.LFE67-.LFB67
 3094 0363 01       		.uleb128 0x1
 3095 0364 9C       		.byte	0x9c
 3096 0365 78030000 		.4byte	0x378
 3097 0369 10       		.uleb128 0x10
 3098 036a B3040000 		.4byte	.LASF53
 3099 036e 01       		.byte	0x1
 3100 036f 8A       		.byte	0x8a
 3101 0370 CE000000 		.4byte	0xce
 3102 0374 02       		.uleb128 0x2
 3103 0375 91       		.byte	0x91
 3104 0376 68       		.sleb128 -24
 3105 0377 00       		.byte	0
 3106 0378 11       		.uleb128 0x11
 3107 0379 B4030000 		.4byte	.LASF102
 3108 037d 01       		.byte	0x1
 3109 037e 93       		.byte	0x93
 3110 037f 7E000000 		.4byte	0x7e
 3111 0383 00000000 		.4byte	.LFB68
 3112 0387 980D0000 		.4byte	.LFE68-.LFB68
 3113 038b 01       		.uleb128 0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 64


 3114 038c 9C       		.byte	0x9c
 3115 038d DC060000 		.4byte	0x6dc
 3116 0391 10       		.uleb128 0x10
 3117 0392 09050000 		.4byte	.LASF54
 3118 0396 01       		.byte	0x1
 3119 0397 AA       		.byte	0xaa
 3120 0398 CE000000 		.4byte	0xce
 3121 039c 03       		.uleb128 0x3
 3122 039d 91       		.byte	0x91
 3123 039e 907F     		.sleb128 -112
 3124 03a0 10       		.uleb128 0x10
 3125 03a1 B7020000 		.4byte	.LASF55
 3126 03a5 01       		.byte	0x1
 3127 03a6 AB       		.byte	0xab
 3128 03a7 CE000000 		.4byte	0xce
 3129 03ab 03       		.uleb128 0x3
 3130 03ac 91       		.byte	0x91
 3131 03ad 887F     		.sleb128 -120
 3132 03af 10       		.uleb128 0x10
 3133 03b0 44030000 		.4byte	.LASF56
 3134 03b4 01       		.byte	0x1
 3135 03b5 AC       		.byte	0xac
 3136 03b6 CE000000 		.4byte	0xce
 3137 03ba 03       		.uleb128 0x3
 3138 03bb 91       		.byte	0x91
 3139 03bc 807F     		.sleb128 -128
 3140 03be 10       		.uleb128 0x10
 3141 03bf 69020000 		.4byte	.LASF57
 3142 03c3 01       		.byte	0x1
 3143 03c4 B2       		.byte	0xb2
 3144 03c5 CE000000 		.4byte	0xce
 3145 03c9 03       		.uleb128 0x3
 3146 03ca 91       		.byte	0x91
 3147 03cb F87E     		.sleb128 -136
 3148 03cd 10       		.uleb128 0x10
 3149 03ce F3030000 		.4byte	.LASF58
 3150 03d2 01       		.byte	0x1
 3151 03d3 B3       		.byte	0xb3
 3152 03d4 CE000000 		.4byte	0xce
 3153 03d8 03       		.uleb128 0x3
 3154 03d9 91       		.byte	0x91
 3155 03da F07E     		.sleb128 -144
 3156 03dc 10       		.uleb128 0x10
 3157 03dd 09000000 		.4byte	.LASF59
 3158 03e1 01       		.byte	0x1
 3159 03e2 B4       		.byte	0xb4
 3160 03e3 CE000000 		.4byte	0xce
 3161 03e7 03       		.uleb128 0x3
 3162 03e8 91       		.byte	0x91
 3163 03e9 E87E     		.sleb128 -152
 3164 03eb 10       		.uleb128 0x10
 3165 03ec ED040000 		.4byte	.LASF60
 3166 03f0 01       		.byte	0x1
 3167 03f1 B5       		.byte	0xb5
 3168 03f2 CE000000 		.4byte	0xce
 3169 03f6 03       		.uleb128 0x3
 3170 03f7 91       		.byte	0x91
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 65


 3171 03f8 E07E     		.sleb128 -160
 3172 03fa 10       		.uleb128 0x10
 3173 03fb 47000000 		.4byte	.LASF61
 3174 03ff 01       		.byte	0x1
 3175 0400 B9       		.byte	0xb9
 3176 0401 CE000000 		.4byte	0xce
 3177 0405 03       		.uleb128 0x3
 3178 0406 91       		.byte	0x91
 3179 0407 D87E     		.sleb128 -168
 3180 0409 10       		.uleb128 0x10
 3181 040a 4F000000 		.4byte	.LASF62
 3182 040e 01       		.byte	0x1
 3183 040f BA       		.byte	0xba
 3184 0410 CE000000 		.4byte	0xce
 3185 0414 03       		.uleb128 0x3
 3186 0415 91       		.byte	0x91
 3187 0416 D07E     		.sleb128 -176
 3188 0418 10       		.uleb128 0x10
 3189 0419 29050000 		.4byte	.LASF63
 3190 041d 01       		.byte	0x1
 3191 041e C8       		.byte	0xc8
 3192 041f C0000000 		.4byte	0xc0
 3193 0423 03       		.uleb128 0x3
 3194 0424 91       		.byte	0x91
 3195 0425 C87E     		.sleb128 -184
 3196 0427 10       		.uleb128 0x10
 3197 0428 23050000 		.4byte	.LASF64
 3198 042c 01       		.byte	0x1
 3199 042d C9       		.byte	0xc9
 3200 042e DC060000 		.4byte	0x6dc
 3201 0432 03       		.uleb128 0x3
 3202 0433 91       		.byte	0x91
 3203 0434 987D     		.sleb128 -360
 3204 0436 10       		.uleb128 0x10
 3205 0437 5B020000 		.4byte	.LASF65
 3206 043b 01       		.byte	0x1
 3207 043c CC       		.byte	0xcc
 3208 043d 7E000000 		.4byte	0x7e
 3209 0441 02       		.uleb128 0x2
 3210 0442 91       		.byte	0x91
 3211 0443 5C       		.sleb128 -36
 3212 0444 10       		.uleb128 0x10
 3213 0445 5B040000 		.4byte	.LASF66
 3214 0449 01       		.byte	0x1
 3215 044a D9       		.byte	0xd9
 3216 044b C0000000 		.4byte	0xc0
 3217 044f 03       		.uleb128 0x3
 3218 0450 91       		.byte	0x91
 3219 0451 C07E     		.sleb128 -192
 3220 0453 10       		.uleb128 0x10
 3221 0454 61040000 		.4byte	.LASF67
 3222 0458 01       		.byte	0x1
 3223 0459 DA       		.byte	0xda
 3224 045a C0000000 		.4byte	0xc0
 3225 045e 03       		.uleb128 0x3
 3226 045f 91       		.byte	0x91
 3227 0460 B87E     		.sleb128 -200
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 66


 3228 0462 10       		.uleb128 0x10
 3229 0463 17050000 		.4byte	.LASF68
 3230 0467 01       		.byte	0x1
 3231 0468 DB       		.byte	0xdb
 3232 0469 7E000000 		.4byte	0x7e
 3233 046d 03       		.uleb128 0x3
 3234 046e 91       		.byte	0x91
 3235 046f B47E     		.sleb128 -204
 3236 0471 10       		.uleb128 0x10
 3237 0472 12000000 		.4byte	.LASF69
 3238 0476 01       		.byte	0x1
 3239 0477 DC       		.byte	0xdc
 3240 0478 C0000000 		.4byte	0xc0
 3241 047c 03       		.uleb128 0x3
 3242 047d 91       		.byte	0x91
 3243 047e A87E     		.sleb128 -216
 3244 0480 10       		.uleb128 0x10
 3245 0481 41040000 		.4byte	.LASF70
 3246 0485 01       		.byte	0x1
 3247 0486 DD       		.byte	0xdd
 3248 0487 C0000000 		.4byte	0xc0
 3249 048b 03       		.uleb128 0x3
 3250 048c 91       		.byte	0x91
 3251 048d A07E     		.sleb128 -224
 3252 048f 10       		.uleb128 0x10
 3253 0490 81030000 		.4byte	.LASF71
 3254 0494 01       		.byte	0x1
 3255 0495 E5       		.byte	0xe5
 3256 0496 C0000000 		.4byte	0xc0
 3257 049a 03       		.uleb128 0x3
 3258 049b 91       		.byte	0x91
 3259 049c 987E     		.sleb128 -232
 3260 049e 10       		.uleb128 0x10
 3261 049f 88040000 		.4byte	.LASF72
 3262 04a3 01       		.byte	0x1
 3263 04a4 E6       		.byte	0xe6
 3264 04a5 C0000000 		.4byte	0xc0
 3265 04a9 03       		.uleb128 0x3
 3266 04aa 91       		.byte	0x91
 3267 04ab 907E     		.sleb128 -240
 3268 04ad 10       		.uleb128 0x10
 3269 04ae 9B010000 		.4byte	.LASF73
 3270 04b2 01       		.byte	0x1
 3271 04b3 E7       		.byte	0xe7
 3272 04b4 C0000000 		.4byte	0xc0
 3273 04b8 03       		.uleb128 0x3
 3274 04b9 91       		.byte	0x91
 3275 04ba 887E     		.sleb128 -248
 3276 04bc 0F       		.uleb128 0xf
 3277 04bd 685F6D00 		.ascii	"h_m\000"
 3278 04c1 01       		.byte	0x1
 3279 04c2 E8       		.byte	0xe8
 3280 04c3 C0000000 		.4byte	0xc0
 3281 04c7 03       		.uleb128 0x3
 3282 04c8 91       		.byte	0x91
 3283 04c9 807E     		.sleb128 -256
 3284 04cb 10       		.uleb128 0x10
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 67


 3285 04cc 84020000 		.4byte	.LASF74
 3286 04d0 01       		.byte	0x1
 3287 04d1 EA       		.byte	0xea
 3288 04d2 C0000000 		.4byte	0xc0
 3289 04d6 03       		.uleb128 0x3
 3290 04d7 91       		.byte	0x91
 3291 04d8 E07D     		.sleb128 -288
 3292 04da 10       		.uleb128 0x10
 3293 04db 02040000 		.4byte	.LASF75
 3294 04df 01       		.byte	0x1
 3295 04e0 EA       		.byte	0xea
 3296 04e1 C0000000 		.4byte	0xc0
 3297 04e5 03       		.uleb128 0x3
 3298 04e6 91       		.byte	0x91
 3299 04e7 D87D     		.sleb128 -296
 3300 04e9 10       		.uleb128 0x10
 3301 04ea 90020000 		.4byte	.LASF76
 3302 04ee 01       		.byte	0x1
 3303 04ef ED       		.byte	0xed
 3304 04f0 EC060000 		.4byte	0x6ec
 3305 04f4 03       		.uleb128 0x3
 3306 04f5 91       		.byte	0x91
 3307 04f6 F87A     		.sleb128 -648
 3308 04f8 12       		.uleb128 0x12
 3309 04f9 6A00     		.ascii	"j\000"
 3310 04fb 01       		.byte	0x1
 3311 04fc 1401     		.2byte	0x114
 3312 04fe 7E000000 		.4byte	0x7e
 3313 0502 03       		.uleb128 0x3
 3314 0503 91       		.byte	0x91
 3315 0504 FC7D     		.sleb128 -260
 3316 0506 13       		.uleb128 0x13
 3317 0507 57000000 		.4byte	.LASF77
 3318 050b 01       		.byte	0x1
 3319 050c 2D01     		.2byte	0x12d
 3320 050e 7E000000 		.4byte	0x7e
 3321 0512 03       		.uleb128 0x3
 3322 0513 91       		.byte	0x91
 3323 0514 F87D     		.sleb128 -264
 3324 0516 13       		.uleb128 0x13
 3325 0517 CD030000 		.4byte	.LASF78
 3326 051b 01       		.byte	0x1
 3327 051c 2E01     		.2byte	0x12e
 3328 051e 7E000000 		.4byte	0x7e
 3329 0522 03       		.uleb128 0x3
 3330 0523 91       		.byte	0x91
 3331 0524 A87F     		.sleb128 -88
 3332 0526 14       		.uleb128 0x14
 3333 0527 42030000 		.4byte	.LBB2
 3334 052b 8E000000 		.4byte	.LBE2-.LBB2
 3335 052f 56050000 		.4byte	0x556
 3336 0533 0F       		.uleb128 0xf
 3337 0534 6900     		.ascii	"i\000"
 3338 0536 01       		.byte	0x1
 3339 0537 F4       		.byte	0xf4
 3340 0538 7E000000 		.4byte	0x7e
 3341 053c 02       		.uleb128 0x2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 68


 3342 053d 91       		.byte	0x91
 3343 053e 58       		.sleb128 -40
 3344 053f 15       		.uleb128 0x15
 3345 0540 4A030000 		.4byte	.LBB3
 3346 0544 6A000000 		.4byte	.LBE3-.LBB3
 3347 0548 0F       		.uleb128 0xf
 3348 0549 6A00     		.ascii	"j\000"
 3349 054b 01       		.byte	0x1
 3350 054c F5       		.byte	0xf5
 3351 054d 7E000000 		.4byte	0x7e
 3352 0551 02       		.uleb128 0x2
 3353 0552 91       		.byte	0x91
 3354 0553 54       		.sleb128 -44
 3355 0554 00       		.byte	0
 3356 0555 00       		.byte	0
 3357 0556 14       		.uleb128 0x14
 3358 0557 D0030000 		.4byte	.LBB4
 3359 055b A0000000 		.4byte	.LBE4-.LBB4
 3360 055f 86050000 		.4byte	0x586
 3361 0563 0F       		.uleb128 0xf
 3362 0564 6900     		.ascii	"i\000"
 3363 0566 01       		.byte	0x1
 3364 0567 FC       		.byte	0xfc
 3365 0568 7E000000 		.4byte	0x7e
 3366 056c 02       		.uleb128 0x2
 3367 056d 91       		.byte	0x91
 3368 056e 50       		.sleb128 -48
 3369 056f 15       		.uleb128 0x15
 3370 0570 D8030000 		.4byte	.LBB5
 3371 0574 7C000000 		.4byte	.LBE5-.LBB5
 3372 0578 0F       		.uleb128 0xf
 3373 0579 6A00     		.ascii	"j\000"
 3374 057b 01       		.byte	0x1
 3375 057c FD       		.byte	0xfd
 3376 057d 7E000000 		.4byte	0x7e
 3377 0581 02       		.uleb128 0x2
 3378 0582 91       		.byte	0x91
 3379 0583 4C       		.sleb128 -52
 3380 0584 00       		.byte	0
 3381 0585 00       		.byte	0
 3382 0586 14       		.uleb128 0x14
 3383 0587 70040000 		.4byte	.LBB6
 3384 058b A0000000 		.4byte	.LBE6-.LBB6
 3385 058f B8050000 		.4byte	0x5b8
 3386 0593 12       		.uleb128 0x12
 3387 0594 6900     		.ascii	"i\000"
 3388 0596 01       		.byte	0x1
 3389 0597 0401     		.2byte	0x104
 3390 0599 7E000000 		.4byte	0x7e
 3391 059d 02       		.uleb128 0x2
 3392 059e 91       		.byte	0x91
 3393 059f 48       		.sleb128 -56
 3394 05a0 15       		.uleb128 0x15
 3395 05a1 78040000 		.4byte	.LBB7
 3396 05a5 7C000000 		.4byte	.LBE7-.LBB7
 3397 05a9 12       		.uleb128 0x12
 3398 05aa 6A00     		.ascii	"j\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 69


 3399 05ac 01       		.byte	0x1
 3400 05ad 0501     		.2byte	0x105
 3401 05af 7E000000 		.4byte	0x7e
 3402 05b3 02       		.uleb128 0x2
 3403 05b4 91       		.byte	0x91
 3404 05b5 44       		.sleb128 -60
 3405 05b6 00       		.byte	0
 3406 05b7 00       		.byte	0
 3407 05b8 14       		.uleb128 0x14
 3408 05b9 10050000 		.4byte	.LBB8
 3409 05bd A0000000 		.4byte	.LBE8-.LBB8
 3410 05c1 EB050000 		.4byte	0x5eb
 3411 05c5 12       		.uleb128 0x12
 3412 05c6 6900     		.ascii	"i\000"
 3413 05c8 01       		.byte	0x1
 3414 05c9 0C01     		.2byte	0x10c
 3415 05cb 7E000000 		.4byte	0x7e
 3416 05cf 02       		.uleb128 0x2
 3417 05d0 91       		.byte	0x91
 3418 05d1 40       		.sleb128 -64
 3419 05d2 15       		.uleb128 0x15
 3420 05d3 18050000 		.4byte	.LBB9
 3421 05d7 7C000000 		.4byte	.LBE9-.LBB9
 3422 05db 12       		.uleb128 0x12
 3423 05dc 6A00     		.ascii	"j\000"
 3424 05de 01       		.byte	0x1
 3425 05df 0D01     		.2byte	0x10d
 3426 05e1 7E000000 		.4byte	0x7e
 3427 05e5 03       		.uleb128 0x3
 3428 05e6 91       		.byte	0x91
 3429 05e7 BC7F     		.sleb128 -68
 3430 05e9 00       		.byte	0
 3431 05ea 00       		.byte	0
 3432 05eb 14       		.uleb128 0x14
 3433 05ec B6050000 		.4byte	.LBB10
 3434 05f0 58000000 		.4byte	.LBE10-.LBB10
 3435 05f4 07060000 		.4byte	0x607
 3436 05f8 12       		.uleb128 0x12
 3437 05f9 6900     		.ascii	"i\000"
 3438 05fb 01       		.byte	0x1
 3439 05fc 1501     		.2byte	0x115
 3440 05fe 7E000000 		.4byte	0x7e
 3441 0602 03       		.uleb128 0x3
 3442 0603 91       		.byte	0x91
 3443 0604 B87F     		.sleb128 -72
 3444 0606 00       		.byte	0
 3445 0607 14       		.uleb128 0x14
 3446 0608 0E060000 		.4byte	.LBB11
 3447 060c 58000000 		.4byte	.LBE11-.LBB11
 3448 0610 23060000 		.4byte	0x623
 3449 0614 12       		.uleb128 0x12
 3450 0615 6900     		.ascii	"i\000"
 3451 0617 01       		.byte	0x1
 3452 0618 1601     		.2byte	0x116
 3453 061a 7E000000 		.4byte	0x7e
 3454 061e 03       		.uleb128 0x3
 3455 061f 91       		.byte	0x91
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 70


 3456 0620 B47F     		.sleb128 -76
 3457 0622 00       		.byte	0
 3458 0623 14       		.uleb128 0x14
 3459 0624 70060000 		.4byte	.LBB12
 3460 0628 84000000 		.4byte	.LBE12-.LBB12
 3461 062c 3F060000 		.4byte	0x63f
 3462 0630 12       		.uleb128 0x12
 3463 0631 6900     		.ascii	"i\000"
 3464 0633 01       		.byte	0x1
 3465 0634 1901     		.2byte	0x119
 3466 0636 7E000000 		.4byte	0x7e
 3467 063a 03       		.uleb128 0x3
 3468 063b 91       		.byte	0x91
 3469 063c B07F     		.sleb128 -80
 3470 063e 00       		.byte	0
 3471 063f 14       		.uleb128 0x14
 3472 0640 F4060000 		.4byte	.LBB13
 3473 0644 58000000 		.4byte	.LBE13-.LBB13
 3474 0648 5B060000 		.4byte	0x65b
 3475 064c 12       		.uleb128 0x12
 3476 064d 6900     		.ascii	"i\000"
 3477 064f 01       		.byte	0x1
 3478 0650 1A01     		.2byte	0x11a
 3479 0652 7E000000 		.4byte	0x7e
 3480 0656 03       		.uleb128 0x3
 3481 0657 91       		.byte	0x91
 3482 0658 AC7F     		.sleb128 -84
 3483 065a 00       		.byte	0
 3484 065b 15       		.uleb128 0x15
 3485 065c 58070000 		.4byte	.LBB14
 3486 0660 24060000 		.4byte	.LBE14-.LBB14
 3487 0664 13       		.uleb128 0x13
 3488 0665 7F010000 		.4byte	.LASF79
 3489 0669 01       		.byte	0x1
 3490 066a 3201     		.2byte	0x132
 3491 066c C0000000 		.4byte	0xc0
 3492 0670 03       		.uleb128 0x3
 3493 0671 91       		.byte	0x91
 3494 0672 F07D     		.sleb128 -272
 3495 0674 14       		.uleb128 0x14
 3496 0675 3E080000 		.4byte	.LBB15
 3497 0679 4C030000 		.4byte	.LBE15-.LBB15
 3498 067d A8060000 		.4byte	0x6a8
 3499 0681 12       		.uleb128 0x12
 3500 0682 6A00     		.ascii	"j\000"
 3501 0684 01       		.byte	0x1
 3502 0685 5301     		.2byte	0x153
 3503 0687 7E000000 		.4byte	0x7e
 3504 068b 03       		.uleb128 0x3
 3505 068c 91       		.byte	0x91
 3506 068d A47F     		.sleb128 -92
 3507 068f 15       		.uleb128 0x15
 3508 0690 4A080000 		.4byte	.LBB16
 3509 0694 1E030000 		.4byte	.LBE16-.LBB16
 3510 0698 12       		.uleb128 0x12
 3511 0699 6900     		.ascii	"i\000"
 3512 069b 01       		.byte	0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 71


 3513 069c 5401     		.2byte	0x154
 3514 069e 7E000000 		.4byte	0x7e
 3515 06a2 03       		.uleb128 0x3
 3516 06a3 91       		.byte	0x91
 3517 06a4 A07F     		.sleb128 -96
 3518 06a6 00       		.byte	0
 3519 06a7 00       		.byte	0
 3520 06a8 15       		.uleb128 0x15
 3521 06a9 C80B0000 		.4byte	.LBB17
 3522 06ad A4000000 		.4byte	.LBE17-.LBB17
 3523 06b1 12       		.uleb128 0x12
 3524 06b2 6900     		.ascii	"i\000"
 3525 06b4 01       		.byte	0x1
 3526 06b5 6E01     		.2byte	0x16e
 3527 06b7 7E000000 		.4byte	0x7e
 3528 06bb 03       		.uleb128 0x3
 3529 06bc 91       		.byte	0x91
 3530 06bd 9C7F     		.sleb128 -100
 3531 06bf 15       		.uleb128 0x15
 3532 06c0 D00B0000 		.4byte	.LBB18
 3533 06c4 86000000 		.4byte	.LBE18-.LBB18
 3534 06c8 12       		.uleb128 0x12
 3535 06c9 76616C00 		.ascii	"val\000"
 3536 06cd 01       		.byte	0x1
 3537 06ce 6F01     		.2byte	0x16f
 3538 06d0 C0000000 		.4byte	0xc0
 3539 06d4 03       		.uleb128 0x3
 3540 06d5 91       		.byte	0x91
 3541 06d6 E87D     		.sleb128 -280
 3542 06d8 00       		.byte	0
 3543 06d9 00       		.byte	0
 3544 06da 00       		.byte	0
 3545 06db 00       		.byte	0
 3546 06dc 08       		.uleb128 0x8
 3547 06dd C0000000 		.4byte	0xc0
 3548 06e1 EC060000 		.4byte	0x6ec
 3549 06e5 09       		.uleb128 0x9
 3550 06e6 D5000000 		.4byte	0xd5
 3551 06ea 07       		.byte	0x7
 3552 06eb 00       		.byte	0
 3553 06ec 08       		.uleb128 0x8
 3554 06ed 7E000000 		.4byte	0x7e
 3555 06f1 FC060000 		.4byte	0x6fc
 3556 06f5 09       		.uleb128 0x9
 3557 06f6 D5000000 		.4byte	0xd5
 3558 06fa 47       		.byte	0x47
 3559 06fb 00       		.byte	0
 3560 06fc 16       		.uleb128 0x16
 3561 06fd 4D010000 		.4byte	.LASF80
 3562 0701 01       		.byte	0x1
 3563 0702 9F01     		.2byte	0x19f
 3564 0704 00000000 		.4byte	.LFB69
 3565 0708 D8000000 		.4byte	.LFE69-.LFB69
 3566 070c 01       		.uleb128 0x1
 3567 070d 9C       		.byte	0x9c
 3568 070e 22070000 		.4byte	0x722
 3569 0712 17       		.uleb128 0x17
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 72


 3570 0713 69040000 		.4byte	.LASF24
 3571 0717 01       		.byte	0x1
 3572 0718 9F01     		.2byte	0x19f
 3573 071a CE000000 		.4byte	0xce
 3574 071e 02       		.uleb128 0x2
 3575 071f 91       		.byte	0x91
 3576 0720 68       		.sleb128 -24
 3577 0721 00       		.byte	0
 3578 0722 16       		.uleb128 0x16
 3579 0723 57030000 		.4byte	.LASF81
 3580 0727 01       		.byte	0x1
 3581 0728 B001     		.2byte	0x1b0
 3582 072a 00000000 		.4byte	.LFB70
 3583 072e D8000000 		.4byte	.LFE70-.LFB70
 3584 0732 01       		.uleb128 0x1
 3585 0733 9C       		.byte	0x9c
 3586 0734 48070000 		.4byte	0x748
 3587 0738 17       		.uleb128 0x17
 3588 0739 69040000 		.4byte	.LASF24
 3589 073d 01       		.byte	0x1
 3590 073e B001     		.2byte	0x1b0
 3591 0740 CE000000 		.4byte	0xce
 3592 0744 02       		.uleb128 0x2
 3593 0745 91       		.byte	0x91
 3594 0746 68       		.sleb128 -24
 3595 0747 00       		.byte	0
 3596 0748 18       		.uleb128 0x18
 3597 0749 E0040000 		.4byte	.LASF82
 3598 074d 08       		.byte	0x8
 3599 074e 1207     		.2byte	0x712
 3600 0750 54070000 		.4byte	0x754
 3601 0754 19       		.uleb128 0x19
 3602 0755 A2000000 		.4byte	0xa2
 3603 0759 1A       		.uleb128 0x1a
 3604 075a FA040000 		.4byte	.LASF83
 3605 075e 01       		.byte	0x1
 3606 075f 19       		.byte	0x19
 3607 0760 6A070000 		.4byte	0x76a
 3608 0764 05       		.uleb128 0x5
 3609 0765 03       		.byte	0x3
 3610 0766 00000000 		.4byte	PULSES_PER_REV
 3611 076a 1B       		.uleb128 0x1b
 3612 076b C0000000 		.4byte	0xc0
 3613 076f 1A       		.uleb128 0x1a
 3614 0770 63000000 		.4byte	.LASF84
 3615 0774 01       		.byte	0x1
 3616 0775 1A       		.byte	0x1a
 3617 0776 6A070000 		.4byte	0x76a
 3618 077a 05       		.uleb128 0x5
 3619 077b 03       		.byte	0x3
 3620 077c 00000000 		.4byte	POSE_UPDATE_PERIOD
 3621 0780 1A       		.uleb128 0x1a
 3622 0781 CE020000 		.4byte	.LASF85
 3623 0785 01       		.byte	0x1
 3624 0786 1C       		.byte	0x1c
 3625 0787 8C000000 		.4byte	0x8c
 3626 078b 05       		.uleb128 0x5
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 73


 3627 078c 03       		.byte	0x3
 3628 078d 00000000 		.4byte	echo_flag
 3629 0791 1A       		.uleb128 0x1a
 3630 0792 4D030000 		.4byte	.LASF86
 3631 0796 01       		.byte	0x1
 3632 0797 1D       		.byte	0x1d
 3633 0798 97000000 		.4byte	0x97
 3634 079c 05       		.uleb128 0x5
 3635 079d 03       		.byte	0x3
 3636 079e 00000000 		.4byte	max_count
 3637 07a2 1A       		.uleb128 0x1a
 3638 07a3 4D020000 		.4byte	.LASF87
 3639 07a7 01       		.byte	0x1
 3640 07a8 1E       		.byte	0x1e
 3641 07a9 97000000 		.4byte	0x97
 3642 07ad 05       		.uleb128 0x5
 3643 07ae 03       		.byte	0x3
 3644 07af 00000000 		.4byte	echo_distance
 3645 07b3 1A       		.uleb128 0x1a
 3646 07b4 B4010000 		.4byte	.LASF88
 3647 07b8 01       		.byte	0x1
 3648 07b9 1F       		.byte	0x1f
 3649 07ba 8C000000 		.4byte	0x8c
 3650 07be 05       		.uleb128 0x5
 3651 07bf 03       		.byte	0x3
 3652 07c0 00000000 		.4byte	mux_select
 3653 07c4 1A       		.uleb128 0x1a
 3654 07c5 2A040000 		.4byte	.LASF89
 3655 07c9 01       		.byte	0x1
 3656 07ca 21       		.byte	0x21
 3657 07cb AD000000 		.4byte	0xad
 3658 07cf 05       		.uleb128 0x5
 3659 07d0 03       		.byte	0x3
 3660 07d1 00000000 		.4byte	left_wheel_count
 3661 07d5 1A       		.uleb128 0x1a
 3662 07d6 18040000 		.4byte	.LASF90
 3663 07da 01       		.byte	0x1
 3664 07db 22       		.byte	0x22
 3665 07dc AD000000 		.4byte	0xad
 3666 07e0 05       		.uleb128 0x5
 3667 07e1 03       		.byte	0x3
 3668 07e2 00000000 		.4byte	right_wheel_count
 3669 07e6 08       		.uleb128 0x8
 3670 07e7 C7000000 		.4byte	0xc7
 3671 07eb F6070000 		.4byte	0x7f6
 3672 07ef 09       		.uleb128 0x9
 3673 07f0 D5000000 		.4byte	0xd5
 3674 07f4 95       		.byte	0x95
 3675 07f5 00       		.byte	0
 3676 07f6 1A       		.uleb128 0x1a
 3677 07f7 A6030000 		.4byte	.LASF91
 3678 07fb 01       		.byte	0x1
 3679 07fc 23       		.byte	0x23
 3680 07fd E6070000 		.4byte	0x7e6
 3681 0801 05       		.uleb128 0x5
 3682 0802 03       		.byte	0x3
 3683 0803 00000000 		.4byte	serial_output
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 74


 3684 0807 1A       		.uleb128 0x1a
 3685 0808 74010000 		.4byte	.LASF92
 3686 080c 01       		.byte	0x1
 3687 080d 26       		.byte	0x26
 3688 080e 89010000 		.4byte	0x189
 3689 0812 05       		.uleb128 0x5
 3690 0813 03       		.byte	0x3
 3691 0814 00000000 		.4byte	left_motor
 3692 0818 1A       		.uleb128 0x1a
 3693 0819 5E010000 		.4byte	.LASF93
 3694 081d 01       		.byte	0x1
 3695 081e 27       		.byte	0x27
 3696 081f 89010000 		.4byte	0x189
 3697 0823 05       		.uleb128 0x5
 3698 0824 03       		.byte	0x3
 3699 0825 00000000 		.4byte	right_motor
 3700 0829 1A       		.uleb128 0x1a
 3701 082a F8020000 		.4byte	.LASF94
 3702 082e 01       		.byte	0x1
 3703 082f 28       		.byte	0x28
 3704 0830 3B020000 		.4byte	0x23b
 3705 0834 05       		.uleb128 0x5
 3706 0835 03       		.byte	0x3
 3707 0836 00000000 		.4byte	robot
 3708 083a 1A       		.uleb128 0x1a
 3709 083b 87000000 		.4byte	.LASF95
 3710 083f 01       		.byte	0x1
 3711 0840 29       		.byte	0x29
 3712 0841 0D010000 		.4byte	0x10d
 3713 0845 05       		.uleb128 0x5
 3714 0846 03       		.byte	0x3
 3715 0847 00000000 		.4byte	sensors
 3716 084b 1C       		.uleb128 0x1c
 3717 084c 6D617000 		.ascii	"map\000"
 3718 0850 01       		.byte	0x1
 3719 0851 2A       		.byte	0x2a
 3720 0852 85020000 		.4byte	0x285
 3721 0856 05       		.uleb128 0x5
 3722 0857 03       		.byte	0x3
 3723 0858 00000000 		.4byte	map
 3724 085c 1A       		.uleb128 0x1a
 3725 085d 25000000 		.4byte	.LASF96
 3726 0861 01       		.byte	0x1
 3727 0862 2C       		.byte	0x2c
 3728 0863 85020000 		.4byte	0x285
 3729 0867 05       		.uleb128 0x5
 3730 0868 03       		.byte	0x3
 3731 0869 00000000 		.4byte	active
 3732 086d 1A       		.uleb128 0x1a
 3733 086e 40020000 		.4byte	.LASF97
 3734 0872 01       		.byte	0x1
 3735 0873 2D       		.byte	0x2d
 3736 0874 B7020000 		.4byte	0x2b7
 3737 0878 05       		.uleb128 0x5
 3738 0879 03       		.byte	0x3
 3739 087a 00000000 		.4byte	smoothed_POD
 3740 087e 00       		.byte	0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 75


 3741              		.section	.debug_abbrev,"",%progbits
 3742              	.Ldebug_abbrev0:
 3743 0000 01       		.uleb128 0x1
 3744 0001 11       		.uleb128 0x11
 3745 0002 01       		.byte	0x1
 3746 0003 25       		.uleb128 0x25
 3747 0004 0E       		.uleb128 0xe
 3748 0005 13       		.uleb128 0x13
 3749 0006 0B       		.uleb128 0xb
 3750 0007 03       		.uleb128 0x3
 3751 0008 0E       		.uleb128 0xe
 3752 0009 1B       		.uleb128 0x1b
 3753 000a 0E       		.uleb128 0xe
 3754 000b 55       		.uleb128 0x55
 3755 000c 17       		.uleb128 0x17
 3756 000d 11       		.uleb128 0x11
 3757 000e 01       		.uleb128 0x1
 3758 000f 10       		.uleb128 0x10
 3759 0010 17       		.uleb128 0x17
 3760 0011 00       		.byte	0
 3761 0012 00       		.byte	0
 3762 0013 02       		.uleb128 0x2
 3763 0014 24       		.uleb128 0x24
 3764 0015 00       		.byte	0
 3765 0016 0B       		.uleb128 0xb
 3766 0017 0B       		.uleb128 0xb
 3767 0018 3E       		.uleb128 0x3e
 3768 0019 0B       		.uleb128 0xb
 3769 001a 03       		.uleb128 0x3
 3770 001b 0E       		.uleb128 0xe
 3771 001c 00       		.byte	0
 3772 001d 00       		.byte	0
 3773 001e 03       		.uleb128 0x3
 3774 001f 16       		.uleb128 0x16
 3775 0020 00       		.byte	0
 3776 0021 03       		.uleb128 0x3
 3777 0022 0E       		.uleb128 0xe
 3778 0023 3A       		.uleb128 0x3a
 3779 0024 0B       		.uleb128 0xb
 3780 0025 3B       		.uleb128 0x3b
 3781 0026 0B       		.uleb128 0xb
 3782 0027 49       		.uleb128 0x49
 3783 0028 13       		.uleb128 0x13
 3784 0029 00       		.byte	0
 3785 002a 00       		.byte	0
 3786 002b 04       		.uleb128 0x4
 3787 002c 24       		.uleb128 0x24
 3788 002d 00       		.byte	0
 3789 002e 0B       		.uleb128 0xb
 3790 002f 0B       		.uleb128 0xb
 3791 0030 3E       		.uleb128 0x3e
 3792 0031 0B       		.uleb128 0xb
 3793 0032 03       		.uleb128 0x3
 3794 0033 08       		.uleb128 0x8
 3795 0034 00       		.byte	0
 3796 0035 00       		.byte	0
 3797 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 76


 3798 0037 16       		.uleb128 0x16
 3799 0038 00       		.byte	0
 3800 0039 03       		.uleb128 0x3
 3801 003a 0E       		.uleb128 0xe
 3802 003b 3A       		.uleb128 0x3a
 3803 003c 0B       		.uleb128 0xb
 3804 003d 3B       		.uleb128 0x3b
 3805 003e 05       		.uleb128 0x5
 3806 003f 49       		.uleb128 0x49
 3807 0040 13       		.uleb128 0x13
 3808 0041 00       		.byte	0
 3809 0042 00       		.byte	0
 3810 0043 06       		.uleb128 0x6
 3811 0044 13       		.uleb128 0x13
 3812 0045 01       		.byte	0x1
 3813 0046 0B       		.uleb128 0xb
 3814 0047 0B       		.uleb128 0xb
 3815 0048 3A       		.uleb128 0x3a
 3816 0049 0B       		.uleb128 0xb
 3817 004a 3B       		.uleb128 0x3b
 3818 004b 0B       		.uleb128 0xb
 3819 004c 01       		.uleb128 0x1
 3820 004d 13       		.uleb128 0x13
 3821 004e 00       		.byte	0
 3822 004f 00       		.byte	0
 3823 0050 07       		.uleb128 0x7
 3824 0051 0D       		.uleb128 0xd
 3825 0052 00       		.byte	0
 3826 0053 03       		.uleb128 0x3
 3827 0054 0E       		.uleb128 0xe
 3828 0055 3A       		.uleb128 0x3a
 3829 0056 0B       		.uleb128 0xb
 3830 0057 3B       		.uleb128 0x3b
 3831 0058 0B       		.uleb128 0xb
 3832 0059 49       		.uleb128 0x49
 3833 005a 13       		.uleb128 0x13
 3834 005b 38       		.uleb128 0x38
 3835 005c 0B       		.uleb128 0xb
 3836 005d 00       		.byte	0
 3837 005e 00       		.byte	0
 3838 005f 08       		.uleb128 0x8
 3839 0060 01       		.uleb128 0x1
 3840 0061 01       		.byte	0x1
 3841 0062 49       		.uleb128 0x49
 3842 0063 13       		.uleb128 0x13
 3843 0064 01       		.uleb128 0x1
 3844 0065 13       		.uleb128 0x13
 3845 0066 00       		.byte	0
 3846 0067 00       		.byte	0
 3847 0068 09       		.uleb128 0x9
 3848 0069 21       		.uleb128 0x21
 3849 006a 00       		.byte	0
 3850 006b 49       		.uleb128 0x49
 3851 006c 13       		.uleb128 0x13
 3852 006d 2F       		.uleb128 0x2f
 3853 006e 0B       		.uleb128 0xb
 3854 006f 00       		.byte	0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 77


 3855 0070 00       		.byte	0
 3856 0071 0A       		.uleb128 0xa
 3857 0072 0D       		.uleb128 0xd
 3858 0073 00       		.byte	0
 3859 0074 03       		.uleb128 0x3
 3860 0075 08       		.uleb128 0x8
 3861 0076 3A       		.uleb128 0x3a
 3862 0077 0B       		.uleb128 0xb
 3863 0078 3B       		.uleb128 0x3b
 3864 0079 0B       		.uleb128 0xb
 3865 007a 49       		.uleb128 0x49
 3866 007b 13       		.uleb128 0x13
 3867 007c 38       		.uleb128 0x38
 3868 007d 0B       		.uleb128 0xb
 3869 007e 00       		.byte	0
 3870 007f 00       		.byte	0
 3871 0080 0B       		.uleb128 0xb
 3872 0081 0F       		.uleb128 0xf
 3873 0082 00       		.byte	0
 3874 0083 0B       		.uleb128 0xb
 3875 0084 0B       		.uleb128 0xb
 3876 0085 49       		.uleb128 0x49
 3877 0086 13       		.uleb128 0x13
 3878 0087 00       		.byte	0
 3879 0088 00       		.byte	0
 3880 0089 0C       		.uleb128 0xc
 3881 008a 16       		.uleb128 0x16
 3882 008b 00       		.byte	0
 3883 008c 03       		.uleb128 0x3
 3884 008d 08       		.uleb128 0x8
 3885 008e 3A       		.uleb128 0x3a
 3886 008f 0B       		.uleb128 0xb
 3887 0090 3B       		.uleb128 0x3b
 3888 0091 0B       		.uleb128 0xb
 3889 0092 49       		.uleb128 0x49
 3890 0093 13       		.uleb128 0x13
 3891 0094 00       		.byte	0
 3892 0095 00       		.byte	0
 3893 0096 0D       		.uleb128 0xd
 3894 0097 2E       		.uleb128 0x2e
 3895 0098 00       		.byte	0
 3896 0099 3F       		.uleb128 0x3f
 3897 009a 19       		.uleb128 0x19
 3898 009b 03       		.uleb128 0x3
 3899 009c 0E       		.uleb128 0xe
 3900 009d 3A       		.uleb128 0x3a
 3901 009e 0B       		.uleb128 0xb
 3902 009f 3B       		.uleb128 0x3b
 3903 00a0 0B       		.uleb128 0xb
 3904 00a1 27       		.uleb128 0x27
 3905 00a2 19       		.uleb128 0x19
 3906 00a3 11       		.uleb128 0x11
 3907 00a4 01       		.uleb128 0x1
 3908 00a5 12       		.uleb128 0x12
 3909 00a6 06       		.uleb128 0x6
 3910 00a7 40       		.uleb128 0x40
 3911 00a8 18       		.uleb128 0x18
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 78


 3912 00a9 9642     		.uleb128 0x2116
 3913 00ab 19       		.uleb128 0x19
 3914 00ac 00       		.byte	0
 3915 00ad 00       		.byte	0
 3916 00ae 0E       		.uleb128 0xe
 3917 00af 2E       		.uleb128 0x2e
 3918 00b0 01       		.byte	0x1
 3919 00b1 3F       		.uleb128 0x3f
 3920 00b2 19       		.uleb128 0x19
 3921 00b3 03       		.uleb128 0x3
 3922 00b4 0E       		.uleb128 0xe
 3923 00b5 3A       		.uleb128 0x3a
 3924 00b6 0B       		.uleb128 0xb
 3925 00b7 3B       		.uleb128 0x3b
 3926 00b8 0B       		.uleb128 0xb
 3927 00b9 27       		.uleb128 0x27
 3928 00ba 19       		.uleb128 0x19
 3929 00bb 11       		.uleb128 0x11
 3930 00bc 01       		.uleb128 0x1
 3931 00bd 12       		.uleb128 0x12
 3932 00be 06       		.uleb128 0x6
 3933 00bf 40       		.uleb128 0x40
 3934 00c0 18       		.uleb128 0x18
 3935 00c1 9642     		.uleb128 0x2116
 3936 00c3 19       		.uleb128 0x19
 3937 00c4 01       		.uleb128 0x1
 3938 00c5 13       		.uleb128 0x13
 3939 00c6 00       		.byte	0
 3940 00c7 00       		.byte	0
 3941 00c8 0F       		.uleb128 0xf
 3942 00c9 34       		.uleb128 0x34
 3943 00ca 00       		.byte	0
 3944 00cb 03       		.uleb128 0x3
 3945 00cc 08       		.uleb128 0x8
 3946 00cd 3A       		.uleb128 0x3a
 3947 00ce 0B       		.uleb128 0xb
 3948 00cf 3B       		.uleb128 0x3b
 3949 00d0 0B       		.uleb128 0xb
 3950 00d1 49       		.uleb128 0x49
 3951 00d2 13       		.uleb128 0x13
 3952 00d3 02       		.uleb128 0x2
 3953 00d4 18       		.uleb128 0x18
 3954 00d5 00       		.byte	0
 3955 00d6 00       		.byte	0
 3956 00d7 10       		.uleb128 0x10
 3957 00d8 34       		.uleb128 0x34
 3958 00d9 00       		.byte	0
 3959 00da 03       		.uleb128 0x3
 3960 00db 0E       		.uleb128 0xe
 3961 00dc 3A       		.uleb128 0x3a
 3962 00dd 0B       		.uleb128 0xb
 3963 00de 3B       		.uleb128 0x3b
 3964 00df 0B       		.uleb128 0xb
 3965 00e0 49       		.uleb128 0x49
 3966 00e1 13       		.uleb128 0x13
 3967 00e2 02       		.uleb128 0x2
 3968 00e3 18       		.uleb128 0x18
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 79


 3969 00e4 00       		.byte	0
 3970 00e5 00       		.byte	0
 3971 00e6 11       		.uleb128 0x11
 3972 00e7 2E       		.uleb128 0x2e
 3973 00e8 01       		.byte	0x1
 3974 00e9 3F       		.uleb128 0x3f
 3975 00ea 19       		.uleb128 0x19
 3976 00eb 03       		.uleb128 0x3
 3977 00ec 0E       		.uleb128 0xe
 3978 00ed 3A       		.uleb128 0x3a
 3979 00ee 0B       		.uleb128 0xb
 3980 00ef 3B       		.uleb128 0x3b
 3981 00f0 0B       		.uleb128 0xb
 3982 00f1 27       		.uleb128 0x27
 3983 00f2 19       		.uleb128 0x19
 3984 00f3 49       		.uleb128 0x49
 3985 00f4 13       		.uleb128 0x13
 3986 00f5 11       		.uleb128 0x11
 3987 00f6 01       		.uleb128 0x1
 3988 00f7 12       		.uleb128 0x12
 3989 00f8 06       		.uleb128 0x6
 3990 00f9 40       		.uleb128 0x40
 3991 00fa 18       		.uleb128 0x18
 3992 00fb 9642     		.uleb128 0x2116
 3993 00fd 19       		.uleb128 0x19
 3994 00fe 01       		.uleb128 0x1
 3995 00ff 13       		.uleb128 0x13
 3996 0100 00       		.byte	0
 3997 0101 00       		.byte	0
 3998 0102 12       		.uleb128 0x12
 3999 0103 34       		.uleb128 0x34
 4000 0104 00       		.byte	0
 4001 0105 03       		.uleb128 0x3
 4002 0106 08       		.uleb128 0x8
 4003 0107 3A       		.uleb128 0x3a
 4004 0108 0B       		.uleb128 0xb
 4005 0109 3B       		.uleb128 0x3b
 4006 010a 05       		.uleb128 0x5
 4007 010b 49       		.uleb128 0x49
 4008 010c 13       		.uleb128 0x13
 4009 010d 02       		.uleb128 0x2
 4010 010e 18       		.uleb128 0x18
 4011 010f 00       		.byte	0
 4012 0110 00       		.byte	0
 4013 0111 13       		.uleb128 0x13
 4014 0112 34       		.uleb128 0x34
 4015 0113 00       		.byte	0
 4016 0114 03       		.uleb128 0x3
 4017 0115 0E       		.uleb128 0xe
 4018 0116 3A       		.uleb128 0x3a
 4019 0117 0B       		.uleb128 0xb
 4020 0118 3B       		.uleb128 0x3b
 4021 0119 05       		.uleb128 0x5
 4022 011a 49       		.uleb128 0x49
 4023 011b 13       		.uleb128 0x13
 4024 011c 02       		.uleb128 0x2
 4025 011d 18       		.uleb128 0x18
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 80


 4026 011e 00       		.byte	0
 4027 011f 00       		.byte	0
 4028 0120 14       		.uleb128 0x14
 4029 0121 0B       		.uleb128 0xb
 4030 0122 01       		.byte	0x1
 4031 0123 11       		.uleb128 0x11
 4032 0124 01       		.uleb128 0x1
 4033 0125 12       		.uleb128 0x12
 4034 0126 06       		.uleb128 0x6
 4035 0127 01       		.uleb128 0x1
 4036 0128 13       		.uleb128 0x13
 4037 0129 00       		.byte	0
 4038 012a 00       		.byte	0
 4039 012b 15       		.uleb128 0x15
 4040 012c 0B       		.uleb128 0xb
 4041 012d 01       		.byte	0x1
 4042 012e 11       		.uleb128 0x11
 4043 012f 01       		.uleb128 0x1
 4044 0130 12       		.uleb128 0x12
 4045 0131 06       		.uleb128 0x6
 4046 0132 00       		.byte	0
 4047 0133 00       		.byte	0
 4048 0134 16       		.uleb128 0x16
 4049 0135 2E       		.uleb128 0x2e
 4050 0136 01       		.byte	0x1
 4051 0137 3F       		.uleb128 0x3f
 4052 0138 19       		.uleb128 0x19
 4053 0139 03       		.uleb128 0x3
 4054 013a 0E       		.uleb128 0xe
 4055 013b 3A       		.uleb128 0x3a
 4056 013c 0B       		.uleb128 0xb
 4057 013d 3B       		.uleb128 0x3b
 4058 013e 05       		.uleb128 0x5
 4059 013f 27       		.uleb128 0x27
 4060 0140 19       		.uleb128 0x19
 4061 0141 11       		.uleb128 0x11
 4062 0142 01       		.uleb128 0x1
 4063 0143 12       		.uleb128 0x12
 4064 0144 06       		.uleb128 0x6
 4065 0145 40       		.uleb128 0x40
 4066 0146 18       		.uleb128 0x18
 4067 0147 9642     		.uleb128 0x2116
 4068 0149 19       		.uleb128 0x19
 4069 014a 01       		.uleb128 0x1
 4070 014b 13       		.uleb128 0x13
 4071 014c 00       		.byte	0
 4072 014d 00       		.byte	0
 4073 014e 17       		.uleb128 0x17
 4074 014f 05       		.uleb128 0x5
 4075 0150 00       		.byte	0
 4076 0151 03       		.uleb128 0x3
 4077 0152 0E       		.uleb128 0xe
 4078 0153 3A       		.uleb128 0x3a
 4079 0154 0B       		.uleb128 0xb
 4080 0155 3B       		.uleb128 0x3b
 4081 0156 05       		.uleb128 0x5
 4082 0157 49       		.uleb128 0x49
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 81


 4083 0158 13       		.uleb128 0x13
 4084 0159 02       		.uleb128 0x2
 4085 015a 18       		.uleb128 0x18
 4086 015b 00       		.byte	0
 4087 015c 00       		.byte	0
 4088 015d 18       		.uleb128 0x18
 4089 015e 34       		.uleb128 0x34
 4090 015f 00       		.byte	0
 4091 0160 03       		.uleb128 0x3
 4092 0161 0E       		.uleb128 0xe
 4093 0162 3A       		.uleb128 0x3a
 4094 0163 0B       		.uleb128 0xb
 4095 0164 3B       		.uleb128 0x3b
 4096 0165 05       		.uleb128 0x5
 4097 0166 49       		.uleb128 0x49
 4098 0167 13       		.uleb128 0x13
 4099 0168 3F       		.uleb128 0x3f
 4100 0169 19       		.uleb128 0x19
 4101 016a 3C       		.uleb128 0x3c
 4102 016b 19       		.uleb128 0x19
 4103 016c 00       		.byte	0
 4104 016d 00       		.byte	0
 4105 016e 19       		.uleb128 0x19
 4106 016f 35       		.uleb128 0x35
 4107 0170 00       		.byte	0
 4108 0171 49       		.uleb128 0x49
 4109 0172 13       		.uleb128 0x13
 4110 0173 00       		.byte	0
 4111 0174 00       		.byte	0
 4112 0175 1A       		.uleb128 0x1a
 4113 0176 34       		.uleb128 0x34
 4114 0177 00       		.byte	0
 4115 0178 03       		.uleb128 0x3
 4116 0179 0E       		.uleb128 0xe
 4117 017a 3A       		.uleb128 0x3a
 4118 017b 0B       		.uleb128 0xb
 4119 017c 3B       		.uleb128 0x3b
 4120 017d 0B       		.uleb128 0xb
 4121 017e 49       		.uleb128 0x49
 4122 017f 13       		.uleb128 0x13
 4123 0180 3F       		.uleb128 0x3f
 4124 0181 19       		.uleb128 0x19
 4125 0182 02       		.uleb128 0x2
 4126 0183 18       		.uleb128 0x18
 4127 0184 00       		.byte	0
 4128 0185 00       		.byte	0
 4129 0186 1B       		.uleb128 0x1b
 4130 0187 26       		.uleb128 0x26
 4131 0188 00       		.byte	0
 4132 0189 49       		.uleb128 0x49
 4133 018a 13       		.uleb128 0x13
 4134 018b 00       		.byte	0
 4135 018c 00       		.byte	0
 4136 018d 1C       		.uleb128 0x1c
 4137 018e 34       		.uleb128 0x34
 4138 018f 00       		.byte	0
 4139 0190 03       		.uleb128 0x3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 82


 4140 0191 08       		.uleb128 0x8
 4141 0192 3A       		.uleb128 0x3a
 4142 0193 0B       		.uleb128 0xb
 4143 0194 3B       		.uleb128 0x3b
 4144 0195 0B       		.uleb128 0xb
 4145 0196 49       		.uleb128 0x49
 4146 0197 13       		.uleb128 0x13
 4147 0198 3F       		.uleb128 0x3f
 4148 0199 19       		.uleb128 0x19
 4149 019a 02       		.uleb128 0x2
 4150 019b 18       		.uleb128 0x18
 4151 019c 00       		.byte	0
 4152 019d 00       		.byte	0
 4153 019e 00       		.byte	0
 4154              		.section	.debug_aranges,"",%progbits
 4155 0000 4C000000 		.4byte	0x4c
 4156 0004 0200     		.2byte	0x2
 4157 0006 00000000 		.4byte	.Ldebug_info0
 4158 000a 04       		.byte	0x4
 4159 000b 00       		.byte	0
 4160 000c 0000     		.2byte	0
 4161 000e 0000     		.2byte	0
 4162 0010 00000000 		.4byte	.LFB64
 4163 0014 84000000 		.4byte	.LFE64-.LFB64
 4164 0018 00000000 		.4byte	.LFB65
 4165 001c 5C040000 		.4byte	.LFE65-.LFB65
 4166 0020 00000000 		.4byte	.LFB66
 4167 0024 54010000 		.4byte	.LFE66-.LFB66
 4168 0028 00000000 		.4byte	.LFB67
 4169 002c 74000000 		.4byte	.LFE67-.LFB67
 4170 0030 00000000 		.4byte	.LFB68
 4171 0034 980D0000 		.4byte	.LFE68-.LFB68
 4172 0038 00000000 		.4byte	.LFB69
 4173 003c D8000000 		.4byte	.LFE69-.LFB69
 4174 0040 00000000 		.4byte	.LFB70
 4175 0044 D8000000 		.4byte	.LFE70-.LFB70
 4176 0048 00000000 		.4byte	0
 4177 004c 00000000 		.4byte	0
 4178              		.section	.debug_ranges,"",%progbits
 4179              	.Ldebug_ranges0:
 4180 0000 00000000 		.4byte	.LFB64
 4181 0004 84000000 		.4byte	.LFE64
 4182 0008 00000000 		.4byte	.LFB65
 4183 000c 5C040000 		.4byte	.LFE65
 4184 0010 00000000 		.4byte	.LFB66
 4185 0014 54010000 		.4byte	.LFE66
 4186 0018 00000000 		.4byte	.LFB67
 4187 001c 74000000 		.4byte	.LFE67
 4188 0020 00000000 		.4byte	.LFB68
 4189 0024 980D0000 		.4byte	.LFE68
 4190 0028 00000000 		.4byte	.LFB69
 4191 002c D8000000 		.4byte	.LFE69
 4192 0030 00000000 		.4byte	.LFB70
 4193 0034 D8000000 		.4byte	.LFE70
 4194 0038 00000000 		.4byte	0
 4195 003c 00000000 		.4byte	0
 4196              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 83


 4197              	.Ldebug_line0:
 4198 0000 37040000 		.section	.debug_str,"MS",%progbits,1
 4198      02009401 
 4198      00000201 
 4198      FB0E0D00 
 4198      01010101 
 4199              	.LASF44:
 4200 0000 6E736563 		.ascii	"nsectors\000"
 4200      746F7273 
 4200      00
 4201              	.LASF59:
 4202 0009 726F626F 		.ascii	"robot_Kp\000"
 4202      745F4B70 
 4202      00
 4203              	.LASF69:
 4204 0012 636F6566 		.ascii	"coeff_a\000"
 4204      665F6100 
 4205              	.LASF31:
 4206 001a 61786C65 		.ascii	"axle_width\000"
 4206      5F776964 
 4206      746800
 4207              	.LASF96:
 4208 0025 61637469 		.ascii	"active\000"
 4208      766500
 4209              	.LASF34:
 4210 002c 64657369 		.ascii	"desired_theta\000"
 4210      7265645F 
 4210      74686574 
 4210      6100
 4211              	.LASF45:
 4212 003a 64656E73 		.ascii	"density\000"
 4212      69747900 
 4213              	.LASF46:
 4214 0042 64696666 		.ascii	"diff\000"
 4214      00
 4215              	.LASF61:
 4216 0047 73746172 		.ascii	"start_x\000"
 4216      745F7800 
 4217              	.LASF62:
 4218 004f 73746172 		.ascii	"start_y\000"
 4218      745F7900 
 4219              	.LASF77:
 4220 0057 7072696E 		.ascii	"print_delay\000"
 4220      745F6465 
 4220      6C617900 
 4221              	.LASF84:
 4222 0063 504F5345 		.ascii	"POSE_UPDATE_PERIOD\000"
 4222      5F555044 
 4222      4154455F 
 4222      50455249 
 4222      4F4400
 4223              	.LASF20:
 4224 0076 73697A65 		.ascii	"sizetype\000"
 4224      74797065 
 4224      00
 4225              	.LASF14:
 4226 007f 696E7433 		.ascii	"int32_t\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 84


 4226      325F7400 
 4227              	.LASF95:
 4228 0087 73656E73 		.ascii	"sensors\000"
 4228      6F727300 
 4229              	.LASF38:
 4230 008f 526F626F 		.ascii	"Robot\000"
 4230      7400
 4231              	.LASF98:
 4232 0095 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4232      43313120 
 4232      352E342E 
 4232      31203230 
 4232      31363036 
 4233 00c8 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4233      20726576 
 4233      6973696F 
 4233      6E203233 
 4233      37373135 
 4234 00fb 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4234      66756E63 
 4234      74696F6E 
 4234      2D736563 
 4234      74696F6E 
 4235              	.LASF21:
 4236 0123 64697265 		.ascii	"direction\000"
 4236      6374696F 
 4236      6E00
 4237              	.LASF4:
 4238 012d 5F5F7569 		.ascii	"__uint16_t\000"
 4238      6E743136 
 4238      5F7400
 4239              	.LASF51:
 4240 0138 4D6F746F 		.ascii	"Motor_PI_Int_Handler\000"
 4240      725F5049 
 4240      5F496E74 
 4240      5F48616E 
 4240      646C6572 
 4241              	.LASF80:
 4242 014d 44726976 		.ascii	"Drive_Left_Motor\000"
 4242      655F4C65 
 4242      66745F4D 
 4242      6F746F72 
 4242      00
 4243              	.LASF93:
 4244 015e 72696768 		.ascii	"right_motor\000"
 4244      745F6D6F 
 4244      746F7200 
 4245              	.LASF2:
 4246 016a 73686F72 		.ascii	"short int\000"
 4246      7420696E 
 4246      7400
 4247              	.LASF92:
 4248 0174 6C656674 		.ascii	"left_motor\000"
 4248      5F6D6F74 
 4248      6F7200
 4249              	.LASF79:
 4250 017f 64697374 		.ascii	"dist_to_goal\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 85


 4250      5F746F5F 
 4250      676F616C 
 4250      00
 4251              	.LASF12:
 4252 018c 75696E74 		.ascii	"uint8_t\000"
 4252      385F7400 
 4253              	.LASF35:
 4254 0194 676F616C 		.ascii	"goal_x\000"
 4254      5F7800
 4255              	.LASF73:
 4256 019b 735F6D61 		.ascii	"s_max\000"
 4256      7800
 4257              	.LASF36:
 4258 01a1 676F616C 		.ascii	"goal_y\000"
 4258      5F7900
 4259              	.LASF39:
 4260 01a8 77696474 		.ascii	"width\000"
 4260      6800
 4261              	.LASF16:
 4262 01ae 666C6F61 		.ascii	"float\000"
 4262      7400
 4263              	.LASF88:
 4264 01b4 6D75785F 		.ascii	"mux_select\000"
 4264      73656C65 
 4264      637400
 4265              	.LASF9:
 4266 01bf 6C6F6E67 		.ascii	"long long int\000"
 4266      206C6F6E 
 4266      6720696E 
 4266      7400
 4267              	.LASF50:
 4268 01cd 506F7365 		.ascii	"Pose_Update_Int_Handler\000"
 4268      5F557064 
 4268      6174655F 
 4268      496E745F 
 4268      48616E64 
 4269              	.LASF28:
 4270 01e5 77686565 		.ascii	"wheel_radius\000"
 4270      6C5F7261 
 4270      64697573 
 4270      00
 4271              	.LASF100:
 4272 01f2 433A5C55 		.ascii	"C:\\Users\\jmspi\\OneDrive\\Documents\\GitHub\\ECE4"
 4272      73657273 
 4272      5C6A6D73 
 4272      70695C4F 
 4272      6E654472 
 4273 021f 3139315C 		.ascii	"191\\DeliveryRobot.cydsn\000"
 4273      44656C69 
 4273      76657279 
 4273      526F626F 
 4273      742E6379 
 4274              	.LASF7:
 4275 0237 6C6F6E67 		.ascii	"long int\000"
 4275      20696E74 
 4275      00
 4276              	.LASF97:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 86


 4277 0240 736D6F6F 		.ascii	"smoothed_POD\000"
 4277      74686564 
 4277      5F504F44 
 4277      00
 4278              	.LASF87:
 4279 024d 6563686F 		.ascii	"echo_distance\000"
 4279      5F646973 
 4279      74616E63 
 4279      6500
 4280              	.LASF65:
 4281 025b 676F616C 		.ascii	"goals_reached\000"
 4281      735F7265 
 4281      61636865 
 4281      6400
 4282              	.LASF57:
 4283 0269 726F626F 		.ascii	"robot_axle_width\000"
 4283      745F6178 
 4283      6C655F77 
 4283      69647468 
 4283      00
 4284              	.LASF3:
 4285 027a 5F5F7569 		.ascii	"__uint8_t\000"
 4285      6E74385F 
 4285      7400
 4286              	.LASF74:
 4287 0284 69646561 		.ascii	"ideal_angle\000"
 4287      6C5F616E 
 4287      676C6500 
 4288              	.LASF76:
 4289 0290 63616E64 		.ascii	"candidate_idx\000"
 4289      69646174 
 4289      655F6964 
 4289      7800
 4290              	.LASF23:
 4291 029e 53656E73 		.ascii	"Sensor\000"
 4291      6F7200
 4292              	.LASF19:
 4293 02a5 6C6F6E67 		.ascii	"long double\000"
 4293      20646F75 
 4293      626C6500 
 4294              	.LASF30:
 4295 02b1 4D6F746F 		.ascii	"Motor\000"
 4295      7200
 4296              	.LASF55:
 4297 02b7 6D6F746F 		.ascii	"motor_Ki\000"
 4297      725F4B69 
 4297      00
 4298              	.LASF1:
 4299 02c0 756E7369 		.ascii	"unsigned char\000"
 4299      676E6564 
 4299      20636861 
 4299      7200
 4300              	.LASF85:
 4301 02ce 6563686F 		.ascii	"echo_flag\000"
 4301      5F666C61 
 4301      6700
 4302              	.LASF33:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 87


 4303 02d8 64657369 		.ascii	"desired_v\000"
 4303      7265645F 
 4303      7600
 4304              	.LASF27:
 4305 02e2 64657369 		.ascii	"desired_w\000"
 4305      7265645F 
 4305      7700
 4306              	.LASF0:
 4307 02ec 7369676E 		.ascii	"signed char\000"
 4307      65642063 
 4307      68617200 
 4308              	.LASF94:
 4309 02f8 726F626F 		.ascii	"robot\000"
 4309      7400
 4310              	.LASF10:
 4311 02fe 6C6F6E67 		.ascii	"long long unsigned int\000"
 4311      206C6F6E 
 4311      6720756E 
 4311      7369676E 
 4311      65642069 
 4312              	.LASF40:
 4313 0315 68656967 		.ascii	"height\000"
 4313      687400
 4314              	.LASF11:
 4315 031c 756E7369 		.ascii	"unsigned int\000"
 4315      676E6564 
 4315      20696E74 
 4315      00
 4316              	.LASF13:
 4317 0329 75696E74 		.ascii	"uint16_t\000"
 4317      31365F74 
 4317      00
 4318              	.LASF8:
 4319 0332 6C6F6E67 		.ascii	"long unsigned int\000"
 4319      20756E73 
 4319      69676E65 
 4319      6420696E 
 4319      7400
 4320              	.LASF56:
 4321 0344 6D6F746F 		.ascii	"motor_Kp\000"
 4321      725F4B70 
 4321      00
 4322              	.LASF86:
 4323 034d 6D61785F 		.ascii	"max_count\000"
 4323      636F756E 
 4323      7400
 4324              	.LASF81:
 4325 0357 44726976 		.ascii	"Drive_Right_Motor\000"
 4325      655F5269 
 4325      6768745F 
 4325      4D6F746F 
 4325      7200
 4326              	.LASF43:
 4327 0369 67726964 		.ascii	"grid\000"
 4327      00
 4328              	.LASF5:
 4329 036e 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 88


 4329      7420756E 
 4329      7369676E 
 4329      65642069 
 4329      6E7400
 4330              	.LASF71:
 4331 0381 76616C6C 		.ascii	"valley_threshold_lower\000"
 4331      65795F74 
 4331      68726573 
 4331      686F6C64 
 4331      5F6C6F77 
 4332              	.LASF22:
 4333 0398 64697374 		.ascii	"distance\000"
 4333      616E6365 
 4333      00
 4334              	.LASF18:
 4335 03a1 63686172 		.ascii	"char\000"
 4335      00
 4336              	.LASF91:
 4337 03a6 73657269 		.ascii	"serial_output\000"
 4337      616C5F6F 
 4337      75747075 
 4337      7400
 4338              	.LASF102:
 4339 03b4 6D61696E 		.ascii	"main\000"
 4339      00
 4340              	.LASF41:
 4341 03b9 7265736F 		.ascii	"resolution\000"
 4341      6C757469 
 4341      6F6E00
 4342              	.LASF48:
 4343 03c4 7363616C 		.ascii	"scaled_V\000"
 4343      65645F56 
 4343      00
 4344              	.LASF78:
 4345 03cd 7072696E 		.ascii	"print_cnt\000"
 4345      745F636E 
 4345      7400
 4346              	.LASF52:
 4347 03d7 4E617669 		.ascii	"Navigation_Test_Int_Handler\000"
 4347      67617469 
 4347      6F6E5F54 
 4347      6573745F 
 4347      496E745F 
 4348              	.LASF58:
 4349 03f3 726F626F 		.ascii	"robot_Ki\000"
 4349      745F4B69 
 4349      00
 4350              	.LASF42:
 4351 03fc 63656C6C 		.ascii	"cells\000"
 4351      7300
 4352              	.LASF75:
 4353 0402 69646561 		.ascii	"ideal_velocity\000"
 4353      6C5F7665 
 4353      6C6F6369 
 4353      747900
 4354              	.LASF99:
 4355 0411 6D61696E 		.ascii	"main.c\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 89


 4355      2E6300
 4356              	.LASF90:
 4357 0418 72696768 		.ascii	"right_wheel_count\000"
 4357      745F7768 
 4357      65656C5F 
 4357      636F756E 
 4357      7400
 4358              	.LASF89:
 4359 042a 6C656674 		.ascii	"left_wheel_count\000"
 4359      5F776865 
 4359      656C5F63 
 4359      6F756E74 
 4359      00
 4360              	.LASF15:
 4361 043b 696E7433 		.ascii	"int32\000"
 4361      3200
 4362              	.LASF70:
 4363 0441 636F6566 		.ascii	"coeff_b\000"
 4363      665F6200 
 4364              	.LASF101:
 4365 0449 54696D65 		.ascii	"Timer_Int_Handler\000"
 4365      725F496E 
 4365      745F4861 
 4365      6E646C65 
 4365      7200
 4366              	.LASF66:
 4367 045b 616C7068 		.ascii	"alpha\000"
 4367      6100
 4368              	.LASF67:
 4369 0461 636F6566 		.ascii	"coeff_l\000"
 4369      665F6C00 
 4370              	.LASF24:
 4371 0469 64757479 		.ascii	"duty_cycle\000"
 4371      5F637963 
 4371      6C6500
 4372              	.LASF6:
 4373 0474 5F5F696E 		.ascii	"__int32_t\000"
 4373      7433325F 
 4373      7400
 4374              	.LASF25:
 4375 047e 696E745F 		.ascii	"int_error\000"
 4375      6572726F 
 4375      7200
 4376              	.LASF72:
 4377 0488 76616C6C 		.ascii	"valley_threshold_upper\000"
 4377      65795F74 
 4377      68726573 
 4377      686F6C64 
 4377      5F757070 
 4378              	.LASF37:
 4379 049f 676F616C 		.ascii	"goal_min_dist\000"
 4379      5F6D696E 
 4379      5F646973 
 4379      7400
 4380              	.LASF49:
 4381 04ad 6E65775F 		.ascii	"new_w\000"
 4381      7700
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccN7TaZ5.s 			page 90


 4382              	.LASF53:
 4383 04b3 616E676C 		.ascii	"angle\000"
 4383      6500
 4384              	.LASF29:
 4385 04b9 656E635F 		.ascii	"enc_count\000"
 4385      636F756E 
 4385      7400
 4386              	.LASF32:
 4387 04c3 74686574 		.ascii	"theta\000"
 4387      6100
 4388              	.LASF47:
 4389 04c9 6572726F 		.ascii	"error\000"
 4389      7200
 4390              	.LASF17:
 4391 04cf 646F7562 		.ascii	"double\000"
 4391      6C6500
 4392              	.LASF26:
 4393 04d6 74616E67 		.ascii	"tangent_v\000"
 4393      656E745F 
 4393      7600
 4394              	.LASF82:
 4395 04e0 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4395      52784275 
 4395      66666572 
 4395      00
 4396              	.LASF60:
 4397 04ed 6D696E5F 		.ascii	"min_distance\000"
 4397      64697374 
 4397      616E6365 
 4397      00
 4398              	.LASF83:
 4399 04fa 50554C53 		.ascii	"PULSES_PER_REV\000"
 4399      45535F50 
 4399      45525F52 
 4399      455600
 4400              	.LASF54:
 4401 0509 77686565 		.ascii	"wheel_r_scale\000"
 4401      6C5F725F 
 4401      7363616C 
 4401      6500
 4402              	.LASF68:
 4403 0517 77696E64 		.ascii	"window_size\000"
 4403      6F775F73 
 4403      697A6500 
 4404              	.LASF64:
 4405 0523 676F616C 		.ascii	"goals\000"
 4405      7300
 4406              	.LASF63:
 4407 0529 6E5F676F 		.ascii	"n_goals\000"
 4407      616C7300 
 4408              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
