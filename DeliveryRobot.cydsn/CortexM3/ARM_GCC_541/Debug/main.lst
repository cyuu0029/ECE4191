ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	PULSES_PER_REV
  20              		.section	.rodata
  21              		.align	3
  22              		.type	PULSES_PER_REV, %object
  23              		.size	PULSES_PER_REV, 8
  24              	PULSES_PER_REV:
  25 0000 A4703D0A 		.word	171798692
  26 0004 D70FAC40 		.word	1085018071
  27              		.global	POSE_UPDATE_PERIOD
  28              		.align	3
  29              		.type	POSE_UPDATE_PERIOD, %object
  30              		.size	POSE_UPDATE_PERIOD, 8
  31              	POSE_UPDATE_PERIOD:
  32 0008 7B14AE47 		.word	1202590843
  33 000c E17A943F 		.word	1066695393
  34              		.global	echo_flag
  35              		.bss
  36              		.type	echo_flag, %object
  37              		.size	echo_flag, 1
  38              	echo_flag:
  39 0000 00       		.space	1
  40              		.global	max_count
  41              		.data
  42              		.align	1
  43              		.type	max_count, %object
  44              		.size	max_count, 2
  45              	max_count:
  46 0000 FFFF     		.short	-1
  47              		.comm	echo_distance,2,2
  48              		.global	mux_select
  49              		.bss
  50              		.type	mux_select, %object
  51              		.size	mux_select, 1
  52              	mux_select:
  53 0001 00       		.space	1
  54              		.global	left_wheel_count
  55 0002 0000     		.align	2
  56              		.type	left_wheel_count, %object
  57              		.size	left_wheel_count, 4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 2


  58              	left_wheel_count:
  59 0004 00000000 		.space	4
  60              		.global	right_wheel_count
  61              		.align	2
  62              		.type	right_wheel_count, %object
  63              		.size	right_wheel_count, 4
  64              	right_wheel_count:
  65 0008 00000000 		.space	4
  66              		.comm	serial_output,150,4
  67              		.comm	left_motor,72,8
  68              		.comm	right_motor,72,8
  69              		.comm	robot,112,8
  70              		.section	.text.Timer_Int_Handler,"ax",%progbits
  71              		.align	2
  72              		.global	Timer_Int_Handler
  73              		.thumb
  74              		.thumb_func
  75              		.type	Timer_Int_Handler, %function
  76              	Timer_Int_Handler:
  77              	.LFB64:
  78              		.file 1 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  *
   3:main.c        ****  * Copyright YOUR COMPANY, THE YEAR
   4:main.c        ****  * All Rights Reserved
   5:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:main.c        ****  *
   7:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:main.c        ****  * WHICH IS THE PROPERTY OF your company.
   9:main.c        ****  *
  10:main.c        ****  * ========================================
  11:main.c        **** */
  12:main.c        **** #include "project.h"
  13:main.c        **** #include <stdio.h>
  14:main.c        **** #include <math.h>
  15:main.c        **** 
  16:main.c        **** #include "vfh.h"
  17:main.c        **** #include "histogram_grid.h"
  18:main.c        **** #include "polar_histogram.h"
  19:main.c        **** 
  20:main.c        **** struct Motor {
  21:main.c        ****     long double duty_cycle;
  22:main.c        ****     long double int_error;  // integrated error
  23:main.c        ****     long double w; // omega, [rad per sec]
  24:main.c        ****     long double tangent_v; //tangential velocity, [cm per sec]
  25:main.c        ****     long double desired_w;
  26:main.c        ****     long double Ki;
  27:main.c        ****     long double Kp;
  28:main.c        ****     long double wheel_radius; // wheel radius in cm
  29:main.c        ****     int32 enc_count;
  30:main.c        **** };
  31:main.c        **** 
  32:main.c        **** struct Robot {
  33:main.c        ****     long double theta;  // in RADIANS
  34:main.c        ****     long double x;   // in cm
  35:main.c        ****     long double y;   // in cm
  36:main.c        ****     long double axle_width; // in cm
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 3


  37:main.c        ****     
  38:main.c        ****     long double V;   // in cm/s
  39:main.c        ****     long double w;   // in rad/s
  40:main.c        ****     
  41:main.c        ****     long double desired_V;
  42:main.c        ****     long double desired_theta;
  43:main.c        ****     
  44:main.c        ****     long double Ki;
  45:main.c        ****     long double Kp;
  46:main.c        ****     long double int_error; // integrated error for PI control
  47:main.c        ****     
  48:main.c        ****     long double goal_x;
  49:main.c        ****     long double goal_y;
  50:main.c        ****     long double goal_min_dist; // specifies a threshold of minimum distance to goal at which robot 
  51:main.c        **** };
  52:main.c        **** 
  53:main.c        **** const long double PULSES_PER_REV = 3591.92;
  54:main.c        **** const long double POSE_UPDATE_PERIOD = 1.0/50.0; // seconds
  55:main.c        **** 
  56:main.c        **** void Drive_Left_Motor(long double duty_cycle);
  57:main.c        **** void Drive_Right_Motor(long double duty_cycle);
  58:main.c        **** long double angle_modulo(long double angle);
  59:main.c        **** 
  60:main.c        **** uint8_t echo_flag = 0;
  61:main.c        **** uint16_t max_count = 65535;
  62:main.c        **** uint16_t echo_distance;
  63:main.c        **** uint8_t mux_select = 0;
  64:main.c        **** int32 left_wheel_count = 0;
  65:main.c        **** int32 right_wheel_count = 0;
  66:main.c        **** char serial_output[150];
  67:main.c        **** 
  68:main.c        **** struct Motor left_motor;
  69:main.c        **** struct Motor right_motor;
  70:main.c        **** struct Robot robot;
  71:main.c        **** 
  72:main.c        ****   
  73:main.c        **** CY_ISR( Timer_Int_Handler ) {
  79              		.loc 1 73 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 1, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84 0000 80B4     		push	{r7}
  85              		.cfi_def_cfa_offset 4
  86              		.cfi_offset 7, -4
  87 0002 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
  74:main.c        ****     echo_flag = 1;
  89              		.loc 1 74 0
  90 0004 034B     		ldr	r3, .L2
  91 0006 0122     		movs	r2, #1
  92 0008 1A70     		strb	r2, [r3]
  75:main.c        **** }
  93              		.loc 1 75 0
  94 000a 00BF     		nop
  95 000c BD46     		mov	sp, r7
  96              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 4


  97              		@ sp needed
  98 000e 80BC     		pop	{r7}
  99              		.cfi_restore 7
 100              		.cfi_def_cfa_offset 0
 101 0010 7047     		bx	lr
 102              	.L3:
 103 0012 00BF     		.align	2
 104              	.L2:
 105 0014 00000000 		.word	echo_flag
 106              		.cfi_endproc
 107              	.LFE64:
 108              		.size	Timer_Int_Handler, .-Timer_Int_Handler
 109              		.global	__aeabi_i2d
 110              		.global	__aeabi_dmul
 111              		.global	__aeabi_ddiv
 112              		.global	__aeabi_dsub
 113              		.global	__aeabi_dadd
 114              		.global	__aeabi_dcmpgt
 115              		.global	__aeabi_dcmplt
 116              		.section	.text.Pose_Update_Int_Handler,"ax",%progbits
 117              		.align	2
 118              		.global	Pose_Update_Int_Handler
 119              		.thumb
 120              		.thumb_func
 121              		.type	Pose_Update_Int_Handler, %function
 122              	Pose_Update_Int_Handler:
 123              	.LFB65:
  76:main.c        **** 
  77:main.c        **** CY_ISR( Pose_Update_Int_Handler ) {
 124              		.loc 1 77 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 24
 127              		@ frame_needed = 1, uses_anonymous_args = 0
 128 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 129              		.cfi_def_cfa_offset 36
 130              		.cfi_offset 4, -36
 131              		.cfi_offset 5, -32
 132              		.cfi_offset 6, -28
 133              		.cfi_offset 7, -24
 134              		.cfi_offset 8, -20
 135              		.cfi_offset 9, -16
 136              		.cfi_offset 10, -12
 137              		.cfi_offset 11, -8
 138              		.cfi_offset 14, -4
 139 0004 87B0     		sub	sp, sp, #28
 140              		.cfi_def_cfa_offset 64
 141 0006 00AF     		add	r7, sp, #0
 142              		.cfi_def_cfa_register 7
  78:main.c        ****     int32 new = QuadDec_R_GetCounter();
 143              		.loc 1 78 0
 144 0008 FFF7FEFF 		bl	QuadDec_R_GetCounter
 145 000c F860     		str	r0, [r7, #12]
  79:main.c        ****     int32 diff = new - right_motor.enc_count;
 146              		.loc 1 79 0
 147 000e B64B     		ldr	r3, .L11+40
 148 0010 1B6C     		ldr	r3, [r3, #64]
 149 0012 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 5


 150 0014 D31A     		subs	r3, r2, r3
 151 0016 BB60     		str	r3, [r7, #8]
  80:main.c        ****     right_motor.enc_count = new;
 152              		.loc 1 80 0
 153 0018 B34A     		ldr	r2, .L11+40
 154 001a FB68     		ldr	r3, [r7, #12]
 155 001c 1364     		str	r3, [r2, #64]
  81:main.c        ****     right_motor.w = M_TWOPI*diff/POSE_UPDATE_PERIOD/PULSES_PER_REV;
 156              		.loc 1 81 0
 157 001e B868     		ldr	r0, [r7, #8]
 158 0020 FFF7FEFF 		bl	__aeabi_i2d
 159 0024 A6A3     		adr	r3, .L11
 160 0026 D3E90023 		ldrd	r2, [r3]
 161 002a FFF7FEFF 		bl	__aeabi_dmul
 162 002e 0246     		mov	r2, r0
 163 0030 0B46     		mov	r3, r1
 164 0032 1046     		mov	r0, r2
 165 0034 1946     		mov	r1, r3
 166 0036 A4A3     		adr	r3, .L11+8
 167 0038 D3E90023 		ldrd	r2, [r3]
 168 003c FFF7FEFF 		bl	__aeabi_ddiv
 169 0040 0246     		mov	r2, r0
 170 0042 0B46     		mov	r3, r1
 171 0044 1046     		mov	r0, r2
 172 0046 1946     		mov	r1, r3
 173 0048 A1A3     		adr	r3, .L11+16
 174 004a D3E90023 		ldrd	r2, [r3]
 175 004e FFF7FEFF 		bl	__aeabi_ddiv
 176 0052 0246     		mov	r2, r0
 177 0054 0B46     		mov	r3, r1
 178 0056 A449     		ldr	r1, .L11+40
 179 0058 C1E90423 		strd	r2, [r1, #16]
  82:main.c        ****     
  83:main.c        ****     new = QuadDec_L_GetCounter();
 180              		.loc 1 83 0
 181 005c FFF7FEFF 		bl	QuadDec_L_GetCounter
 182 0060 F860     		str	r0, [r7, #12]
  84:main.c        ****     diff = new - left_motor.enc_count;
 183              		.loc 1 84 0
 184 0062 A24B     		ldr	r3, .L11+44
 185 0064 1B6C     		ldr	r3, [r3, #64]
 186 0066 FA68     		ldr	r2, [r7, #12]
 187 0068 D31A     		subs	r3, r2, r3
 188 006a BB60     		str	r3, [r7, #8]
  85:main.c        ****     left_motor.enc_count = new;
 189              		.loc 1 85 0
 190 006c 9F4A     		ldr	r2, .L11+44
 191 006e FB68     		ldr	r3, [r7, #12]
 192 0070 1364     		str	r3, [r2, #64]
  86:main.c        ****     left_motor.w = M_TWOPI*diff/POSE_UPDATE_PERIOD/PULSES_PER_REV;
 193              		.loc 1 86 0
 194 0072 B868     		ldr	r0, [r7, #8]
 195 0074 FFF7FEFF 		bl	__aeabi_i2d
 196 0078 91A3     		adr	r3, .L11
 197 007a D3E90023 		ldrd	r2, [r3]
 198 007e FFF7FEFF 		bl	__aeabi_dmul
 199 0082 0246     		mov	r2, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 6


 200 0084 0B46     		mov	r3, r1
 201 0086 1046     		mov	r0, r2
 202 0088 1946     		mov	r1, r3
 203 008a 8FA3     		adr	r3, .L11+8
 204 008c D3E90023 		ldrd	r2, [r3]
 205 0090 FFF7FEFF 		bl	__aeabi_ddiv
 206 0094 0246     		mov	r2, r0
 207 0096 0B46     		mov	r3, r1
 208 0098 1046     		mov	r0, r2
 209 009a 1946     		mov	r1, r3
 210 009c 8CA3     		adr	r3, .L11+16
 211 009e D3E90023 		ldrd	r2, [r3]
 212 00a2 FFF7FEFF 		bl	__aeabi_ddiv
 213 00a6 0246     		mov	r2, r0
 214 00a8 0B46     		mov	r3, r1
 215 00aa 9049     		ldr	r1, .L11+44
 216 00ac C1E90423 		strd	r2, [r1, #16]
  87:main.c        ****     
  88:main.c        ****     
  89:main.c        ****     
  90:main.c        ****     //Calculate and update tangential velocity of wheels
  91:main.c        ****     left_motor.tangent_v = left_motor.w*left_motor.wheel_radius;
 217              		.loc 1 91 0
 218 00b0 8E4B     		ldr	r3, .L11+44
 219 00b2 D3E90401 		ldrd	r0, [r3, #16]
 220 00b6 8D4B     		ldr	r3, .L11+44
 221 00b8 D3E90E23 		ldrd	r2, [r3, #56]
 222 00bc FFF7FEFF 		bl	__aeabi_dmul
 223 00c0 0246     		mov	r2, r0
 224 00c2 0B46     		mov	r3, r1
 225 00c4 8949     		ldr	r1, .L11+44
 226 00c6 C1E90623 		strd	r2, [r1, #24]
  92:main.c        ****     right_motor.tangent_v = right_motor.w*right_motor.wheel_radius;
 227              		.loc 1 92 0
 228 00ca 874B     		ldr	r3, .L11+40
 229 00cc D3E90401 		ldrd	r0, [r3, #16]
 230 00d0 854B     		ldr	r3, .L11+40
 231 00d2 D3E90E23 		ldrd	r2, [r3, #56]
 232 00d6 FFF7FEFF 		bl	__aeabi_dmul
 233 00da 0246     		mov	r2, r0
 234 00dc 0B46     		mov	r3, r1
 235 00de 8249     		ldr	r1, .L11+40
 236 00e0 C1E90623 		strd	r2, [r1, #24]
  93:main.c        **** 
  94:main.c        ****     //temporary values
  95:main.c        ****     robot.w = (right_motor.tangent_v - left_motor.tangent_v)/robot.axle_width; //instantaneous turn
 237              		.loc 1 95 0
 238 00e4 804B     		ldr	r3, .L11+40
 239 00e6 D3E90601 		ldrd	r0, [r3, #24]
 240 00ea 804B     		ldr	r3, .L11+44
 241 00ec D3E90623 		ldrd	r2, [r3, #24]
 242 00f0 FFF7FEFF 		bl	__aeabi_dsub
 243 00f4 0246     		mov	r2, r0
 244 00f6 0B46     		mov	r3, r1
 245 00f8 1046     		mov	r0, r2
 246 00fa 1946     		mov	r1, r3
 247 00fc 7C4B     		ldr	r3, .L11+48
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 7


 248 00fe D3E90623 		ldrd	r2, [r3, #24]
 249 0102 FFF7FEFF 		bl	__aeabi_ddiv
 250 0106 0246     		mov	r2, r0
 251 0108 0B46     		mov	r3, r1
 252 010a 7949     		ldr	r1, .L11+48
 253 010c C1E90A23 		strd	r2, [r1, #40]
  96:main.c        ****     robot.V =  (right_motor.tangent_v + left_motor.tangent_v)/2; //instantaneous tangential velocit
 254              		.loc 1 96 0
 255 0110 754B     		ldr	r3, .L11+40
 256 0112 D3E90601 		ldrd	r0, [r3, #24]
 257 0116 754B     		ldr	r3, .L11+44
 258 0118 D3E90623 		ldrd	r2, [r3, #24]
 259 011c FFF7FEFF 		bl	__aeabi_dadd
 260 0120 0246     		mov	r2, r0
 261 0122 0B46     		mov	r3, r1
 262 0124 1046     		mov	r0, r2
 263 0126 1946     		mov	r1, r3
 264 0128 4FF00002 		mov	r2, #0
 265 012c 4FF08043 		mov	r3, #1073741824
 266 0130 FFF7FEFF 		bl	__aeabi_ddiv
 267 0134 0246     		mov	r2, r0
 268 0136 0B46     		mov	r3, r1
 269 0138 6D49     		ldr	r1, .L11+48
 270 013a C1E90823 		strd	r2, [r1, #32]
  97:main.c        **** 
  98:main.c        ****     // update pose variables
  99:main.c        ****     robot.theta = robot.theta + robot.w * POSE_UPDATE_PERIOD;
 271              		.loc 1 99 0
 272 013e 6C4B     		ldr	r3, .L11+48
 273 0140 D3E90089 		ldrd	r8, [r3]
 274 0144 6A4B     		ldr	r3, .L11+48
 275 0146 D3E90A01 		ldrd	r0, [r3, #40]
 276 014a 5FA3     		adr	r3, .L11+8
 277 014c D3E90023 		ldrd	r2, [r3]
 278 0150 FFF7FEFF 		bl	__aeabi_dmul
 279 0154 0246     		mov	r2, r0
 280 0156 0B46     		mov	r3, r1
 281 0158 4046     		mov	r0, r8
 282 015a 4946     		mov	r1, r9
 283 015c FFF7FEFF 		bl	__aeabi_dadd
 284 0160 0246     		mov	r2, r0
 285 0162 0B46     		mov	r3, r1
 286 0164 6249     		ldr	r1, .L11+48
 287 0166 C1E90023 		strd	r2, [r1]
 100:main.c        ****     robot.theta = robot.theta - M_TWOPI * floor(robot.theta / M_TWOPI); // ensures theta is in rang
 288              		.loc 1 100 0
 289 016a 614B     		ldr	r3, .L11+48
 290 016c D3E90089 		ldrd	r8, [r3]
 291 0170 5F4B     		ldr	r3, .L11+48
 292 0172 D3E90001 		ldrd	r0, [r3]
 293 0176 52A3     		adr	r3, .L11
 294 0178 D3E90023 		ldrd	r2, [r3]
 295 017c FFF7FEFF 		bl	__aeabi_ddiv
 296 0180 0246     		mov	r2, r0
 297 0182 0B46     		mov	r3, r1
 298 0184 1046     		mov	r0, r2
 299 0186 1946     		mov	r1, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 8


 300 0188 FFF7FEFF 		bl	floor
 301 018c 4CA3     		adr	r3, .L11
 302 018e D3E90023 		ldrd	r2, [r3]
 303 0192 FFF7FEFF 		bl	__aeabi_dmul
 304 0196 0246     		mov	r2, r0
 305 0198 0B46     		mov	r3, r1
 306 019a 4046     		mov	r0, r8
 307 019c 4946     		mov	r1, r9
 308 019e FFF7FEFF 		bl	__aeabi_dsub
 309 01a2 0246     		mov	r2, r0
 310 01a4 0B46     		mov	r3, r1
 311 01a6 5249     		ldr	r1, .L11+48
 312 01a8 C1E90023 		strd	r2, [r1]
 101:main.c        ****     robot.x = robot.x + POSE_UPDATE_PERIOD * robot.V * cos(robot.theta);
 313              		.loc 1 101 0
 314 01ac 504B     		ldr	r3, .L11+48
 315 01ae D3E90289 		ldrd	r8, [r3, #8]
 316 01b2 4F4B     		ldr	r3, .L11+48
 317 01b4 D3E90801 		ldrd	r0, [r3, #32]
 318 01b8 43A3     		adr	r3, .L11+8
 319 01ba D3E90023 		ldrd	r2, [r3]
 320 01be FFF7FEFF 		bl	__aeabi_dmul
 321 01c2 0246     		mov	r2, r0
 322 01c4 0B46     		mov	r3, r1
 323 01c6 9246     		mov	r10, r2
 324 01c8 9B46     		mov	fp, r3
 325 01ca 494B     		ldr	r3, .L11+48
 326 01cc D3E90023 		ldrd	r2, [r3]
 327 01d0 1046     		mov	r0, r2
 328 01d2 1946     		mov	r1, r3
 329 01d4 FFF7FEFF 		bl	cos
 330 01d8 0246     		mov	r2, r0
 331 01da 0B46     		mov	r3, r1
 332 01dc 5046     		mov	r0, r10
 333 01de 5946     		mov	r1, fp
 334 01e0 FFF7FEFF 		bl	__aeabi_dmul
 335 01e4 0246     		mov	r2, r0
 336 01e6 0B46     		mov	r3, r1
 337 01e8 4046     		mov	r0, r8
 338 01ea 4946     		mov	r1, r9
 339 01ec FFF7FEFF 		bl	__aeabi_dadd
 340 01f0 0246     		mov	r2, r0
 341 01f2 0B46     		mov	r3, r1
 342 01f4 3E49     		ldr	r1, .L11+48
 343 01f6 C1E90223 		strd	r2, [r1, #8]
 102:main.c        ****     robot.y = robot.y + POSE_UPDATE_PERIOD * robot.V * sin(robot.theta);
 344              		.loc 1 102 0
 345 01fa 3D4B     		ldr	r3, .L11+48
 346 01fc D3E90489 		ldrd	r8, [r3, #16]
 347 0200 3B4B     		ldr	r3, .L11+48
 348 0202 D3E90801 		ldrd	r0, [r3, #32]
 349 0206 30A3     		adr	r3, .L11+8
 350 0208 D3E90023 		ldrd	r2, [r3]
 351 020c FFF7FEFF 		bl	__aeabi_dmul
 352 0210 0246     		mov	r2, r0
 353 0212 0B46     		mov	r3, r1
 354 0214 9246     		mov	r10, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 9


 355 0216 9B46     		mov	fp, r3
 356 0218 354B     		ldr	r3, .L11+48
 357 021a D3E90023 		ldrd	r2, [r3]
 358 021e 1046     		mov	r0, r2
 359 0220 1946     		mov	r1, r3
 360 0222 FFF7FEFF 		bl	sin
 361 0226 0246     		mov	r2, r0
 362 0228 0B46     		mov	r3, r1
 363 022a 5046     		mov	r0, r10
 364 022c 5946     		mov	r1, fp
 365 022e FFF7FEFF 		bl	__aeabi_dmul
 366 0232 0246     		mov	r2, r0
 367 0234 0B46     		mov	r3, r1
 368 0236 4046     		mov	r0, r8
 369 0238 4946     		mov	r1, r9
 370 023a FFF7FEFF 		bl	__aeabi_dadd
 371 023e 0246     		mov	r2, r0
 372 0240 0B46     		mov	r3, r1
 373 0242 2B49     		ldr	r1, .L11+48
 374 0244 C1E90423 		strd	r2, [r1, #16]
 103:main.c        ****     
 104:main.c        ****     
 105:main.c        ****     // do robot PI control
 106:main.c        ****     long double error = robot.desired_theta - robot.theta;   
 375              		.loc 1 106 0
 376 0248 294B     		ldr	r3, .L11+48
 377 024a D3E90E01 		ldrd	r0, [r3, #56]
 378 024e 284B     		ldr	r3, .L11+48
 379 0250 D3E90023 		ldrd	r2, [r3]
 380 0254 FFF7FEFF 		bl	__aeabi_dsub
 381 0258 0246     		mov	r2, r0
 382 025a 0B46     		mov	r3, r1
 383 025c C7E90423 		strd	r2, [r7, #16]
 107:main.c        ****     if( error > M_PI ) {     // TODO: give this more thought. Want the robot to choose direction of
 384              		.loc 1 107 0
 385 0260 1DA3     		adr	r3, .L11+24
 386 0262 D3E90023 		ldrd	r2, [r3]
 387 0266 D7E90401 		ldrd	r0, [r7, #16]
 388 026a FFF7FEFF 		bl	__aeabi_dcmpgt
 389 026e 0346     		mov	r3, r0
 390 0270 002B     		cmp	r3, #0
 391 0272 0AD0     		beq	.L5
 108:main.c        ****         error = error - M_TWOPI;
 392              		.loc 1 108 0
 393 0274 12A3     		adr	r3, .L11
 394 0276 D3E90023 		ldrd	r2, [r3]
 395 027a D7E90401 		ldrd	r0, [r7, #16]
 396 027e FFF7FEFF 		bl	__aeabi_dsub
 397 0282 0246     		mov	r2, r0
 398 0284 0B46     		mov	r3, r1
 399 0286 C7E90423 		strd	r2, [r7, #16]
 400              	.L5:
 109:main.c        ****     }
 110:main.c        ****     if( error < -M_PI) {
 401              		.loc 1 110 0
 402 028a 15A3     		adr	r3, .L11+32
 403 028c D3E90023 		ldrd	r2, [r3]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 10


 404 0290 D7E90401 		ldrd	r0, [r7, #16]
 405 0294 FFF7FEFF 		bl	__aeabi_dcmplt
 406 0298 0346     		mov	r3, r0
 407 029a 002B     		cmp	r3, #0
 408 029c 0AD0     		beq	.L7
 111:main.c        ****         error = error + M_TWOPI;
 409              		.loc 1 111 0
 410 029e 08A3     		adr	r3, .L11
 411 02a0 D3E90023 		ldrd	r2, [r3]
 412 02a4 D7E90401 		ldrd	r0, [r7, #16]
 413 02a8 FFF7FEFF 		bl	__aeabi_dadd
 414 02ac 0246     		mov	r2, r0
 415 02ae 0B46     		mov	r3, r1
 416 02b0 C7E90423 		strd	r2, [r7, #16]
 417              	.L7:
 112:main.c        ****     }
 113:main.c        ****     
 114:main.c        ****     //robot.V = robot.desired_V *sqrtl( 1 - (error/M_PI) );
 115:main.c        ****     robot.V = robot.desired_V *( 1 - logl( (M_E-1) * fabsl(error) / M_PI + 1 )); // scales velocity
 418              		.loc 1 115 0
 419 02b4 0E4B     		ldr	r3, .L11+48
 420 02b6 D3E90C89 		ldrd	r8, [r3, #48]
 421 02ba 1BE0     		b	.L12
 422              	.L13:
 423 02bc AFF30080 		.align	3
 424              	.L11:
 425 02c0 182D4454 		.word	1413754136
 426 02c4 FB211940 		.word	1075388923
 427 02c8 7B14AE47 		.word	1202590843
 428 02cc E17A943F 		.word	1066695393
 429 02d0 A4703D0A 		.word	171798692
 430 02d4 D70FAC40 		.word	1085018071
 431 02d8 182D4454 		.word	1413754136
 432 02dc FB210940 		.word	1074340347
 433 02e0 182D4454 		.word	1413754136
 434 02e4 FB2109C0 		.word	-1073143301
 435 02e8 00000000 		.word	right_motor
 436 02ec 00000000 		.word	left_motor
 437 02f0 00000000 		.word	robot
 438              	.L12:
 439 02f4 3C69     		ldr	r4, [r7, #16]
 440 02f6 7B69     		ldr	r3, [r7, #20]
 441 02f8 23F00045 		bic	r5, r3, #-2147483648
 442 02fc 60A3     		adr	r3, .L14
 443 02fe D3E90023 		ldrd	r2, [r3]
 444 0302 2046     		mov	r0, r4
 445 0304 2946     		mov	r1, r5
 446 0306 FFF7FEFF 		bl	__aeabi_dmul
 447 030a 0346     		mov	r3, r0
 448 030c 0C46     		mov	r4, r1
 449 030e 1846     		mov	r0, r3
 450 0310 2146     		mov	r1, r4
 451 0312 5DA3     		adr	r3, .L14+8
 452 0314 D3E90023 		ldrd	r2, [r3]
 453 0318 FFF7FEFF 		bl	__aeabi_ddiv
 454 031c 0346     		mov	r3, r0
 455 031e 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 11


 456 0320 1846     		mov	r0, r3
 457 0322 2146     		mov	r1, r4
 458 0324 4FF00002 		mov	r2, #0
 459 0328 594B     		ldr	r3, .L14+16
 460 032a FFF7FEFF 		bl	__aeabi_dadd
 461 032e 0346     		mov	r3, r0
 462 0330 0C46     		mov	r4, r1
 463 0332 1846     		mov	r0, r3
 464 0334 2146     		mov	r1, r4
 465 0336 FFF7FEFF 		bl	logl
 466 033a 0346     		mov	r3, r0
 467 033c 0C46     		mov	r4, r1
 468 033e 1A46     		mov	r2, r3
 469 0340 2346     		mov	r3, r4
 470 0342 4FF00000 		mov	r0, #0
 471 0346 5249     		ldr	r1, .L14+16
 472 0348 FFF7FEFF 		bl	__aeabi_dsub
 473 034c 0346     		mov	r3, r0
 474 034e 0C46     		mov	r4, r1
 475 0350 1A46     		mov	r2, r3
 476 0352 2346     		mov	r3, r4
 477 0354 4046     		mov	r0, r8
 478 0356 4946     		mov	r1, r9
 479 0358 FFF7FEFF 		bl	__aeabi_dmul
 480 035c 0346     		mov	r3, r0
 481 035e 0C46     		mov	r4, r1
 482 0360 4C4A     		ldr	r2, .L14+20
 483 0362 C2E90834 		strd	r3, [r2, #32]
 116:main.c        ****     
 117:main.c        ****     robot.int_error = robot.int_error + error;
 484              		.loc 1 117 0
 485 0366 4B4B     		ldr	r3, .L14+20
 486 0368 D3E91401 		ldrd	r0, [r3, #80]
 487 036c D7E90423 		ldrd	r2, [r7, #16]
 488 0370 FFF7FEFF 		bl	__aeabi_dadd
 489 0374 0346     		mov	r3, r0
 490 0376 0C46     		mov	r4, r1
 491 0378 464A     		ldr	r2, .L14+20
 492 037a C2E91434 		strd	r3, [r2, #80]
 118:main.c        ****     long double new_omega = robot.Kp * error + robot.Ki * robot.int_error;
 493              		.loc 1 118 0
 494 037e 454B     		ldr	r3, .L14+20
 495 0380 D3E91201 		ldrd	r0, [r3, #72]
 496 0384 D7E90423 		ldrd	r2, [r7, #16]
 497 0388 FFF7FEFF 		bl	__aeabi_dmul
 498 038c 0346     		mov	r3, r0
 499 038e 0C46     		mov	r4, r1
 500 0390 1D46     		mov	r5, r3
 501 0392 2646     		mov	r6, r4
 502 0394 3F4B     		ldr	r3, .L14+20
 503 0396 D3E91001 		ldrd	r0, [r3, #64]
 504 039a 3E4B     		ldr	r3, .L14+20
 505 039c 03F15004 		add	r4, r3, #80
 506 03a0 D4E90034 		ldrd	r3, [r4]
 507 03a4 1A46     		mov	r2, r3
 508 03a6 2346     		mov	r3, r4
 509 03a8 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 12


 510 03ac 0346     		mov	r3, r0
 511 03ae 0C46     		mov	r4, r1
 512 03b0 1A46     		mov	r2, r3
 513 03b2 2346     		mov	r3, r4
 514 03b4 2846     		mov	r0, r5
 515 03b6 3146     		mov	r1, r6
 516 03b8 FFF7FEFF 		bl	__aeabi_dadd
 517 03bc 0346     		mov	r3, r0
 518 03be 0C46     		mov	r4, r1
 519 03c0 C7E90034 		strd	r3, [r7]
 119:main.c        ****     right_motor.desired_w = (robot.V + new_omega * robot.axle_width / 2) / right_motor.wheel_radius
 520              		.loc 1 119 0
 521 03c4 334B     		ldr	r3, .L14+20
 522 03c6 D3E90845 		ldrd	r4, [r3, #32]
 523 03ca 324B     		ldr	r3, .L14+20
 524 03cc D3E90601 		ldrd	r0, [r3, #24]
 525 03d0 D7E90023 		ldrd	r2, [r7]
 526 03d4 FFF7FEFF 		bl	__aeabi_dmul
 527 03d8 0246     		mov	r2, r0
 528 03da 0B46     		mov	r3, r1
 529 03dc 1046     		mov	r0, r2
 530 03de 1946     		mov	r1, r3
 531 03e0 4FF00002 		mov	r2, #0
 532 03e4 4FF08043 		mov	r3, #1073741824
 533 03e8 FFF7FEFF 		bl	__aeabi_ddiv
 534 03ec 0246     		mov	r2, r0
 535 03ee 0B46     		mov	r3, r1
 536 03f0 2046     		mov	r0, r4
 537 03f2 2946     		mov	r1, r5
 538 03f4 FFF7FEFF 		bl	__aeabi_dadd
 539 03f8 0346     		mov	r3, r0
 540 03fa 0C46     		mov	r4, r1
 541 03fc 1846     		mov	r0, r3
 542 03fe 2146     		mov	r1, r4
 543 0400 254B     		ldr	r3, .L14+24
 544 0402 03F13804 		add	r4, r3, #56
 545 0406 D4E90034 		ldrd	r3, [r4]
 546 040a 1A46     		mov	r2, r3
 547 040c 2346     		mov	r3, r4
 548 040e FFF7FEFF 		bl	__aeabi_ddiv
 549 0412 0346     		mov	r3, r0
 550 0414 0C46     		mov	r4, r1
 551 0416 204A     		ldr	r2, .L14+24
 552 0418 C2E90834 		strd	r3, [r2, #32]
 120:main.c        ****     left_motor.desired_w = (robot.V - new_omega * robot.axle_width / 2) / left_motor.wheel_radius; 
 553              		.loc 1 120 0
 554 041c 1D4B     		ldr	r3, .L14+20
 555 041e D3E90845 		ldrd	r4, [r3, #32]
 556 0422 1C4B     		ldr	r3, .L14+20
 557 0424 D3E90601 		ldrd	r0, [r3, #24]
 558 0428 D7E90023 		ldrd	r2, [r7]
 559 042c FFF7FEFF 		bl	__aeabi_dmul
 560 0430 0246     		mov	r2, r0
 561 0432 0B46     		mov	r3, r1
 562 0434 1046     		mov	r0, r2
 563 0436 1946     		mov	r1, r3
 564 0438 4FF00002 		mov	r2, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 13


 565 043c 4FF08043 		mov	r3, #1073741824
 566 0440 FFF7FEFF 		bl	__aeabi_ddiv
 567 0444 0246     		mov	r2, r0
 568 0446 0B46     		mov	r3, r1
 569 0448 2046     		mov	r0, r4
 570 044a 2946     		mov	r1, r5
 571 044c FFF7FEFF 		bl	__aeabi_dsub
 572 0450 0346     		mov	r3, r0
 573 0452 0C46     		mov	r4, r1
 574 0454 1846     		mov	r0, r3
 575 0456 2146     		mov	r1, r4
 576 0458 104B     		ldr	r3, .L14+28
 577 045a 03F13804 		add	r4, r3, #56
 578 045e D4E90034 		ldrd	r3, [r4]
 579 0462 1A46     		mov	r2, r3
 580 0464 2346     		mov	r3, r4
 581 0466 FFF7FEFF 		bl	__aeabi_ddiv
 582 046a 0346     		mov	r3, r0
 583 046c 0C46     		mov	r4, r1
 584 046e 0B4A     		ldr	r2, .L14+28
 585 0470 C2E90834 		strd	r3, [r2, #32]
 121:main.c        ****     
 122:main.c        **** }
 586              		.loc 1 122 0
 587 0474 00BF     		nop
 588 0476 1C37     		adds	r7, r7, #28
 589              		.cfi_def_cfa_offset 36
 590 0478 BD46     		mov	sp, r7
 591              		.cfi_def_cfa_register 13
 592              		@ sp needed
 593 047a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 594              	.L15:
 595 047e 00BF     		.align	3
 596              	.L14:
 597 0480 D2AE2816 		.word	371764946
 598 0484 157EFB3F 		.word	1073446421
 599 0488 182D4454 		.word	1413754136
 600 048c FB210940 		.word	1074340347
 601 0490 0000F03F 		.word	1072693248
 602 0494 00000000 		.word	robot
 603 0498 00000000 		.word	right_motor
 604 049c 00000000 		.word	left_motor
 605              		.cfi_endproc
 606              	.LFE65:
 607              		.size	Pose_Update_Int_Handler, .-Pose_Update_Int_Handler
 608              		.section	.text.Motor_PI_Int_Handler,"ax",%progbits
 609              		.align	2
 610              		.global	Motor_PI_Int_Handler
 611              		.thumb
 612              		.thumb_func
 613              		.type	Motor_PI_Int_Handler, %function
 614              	Motor_PI_Int_Handler:
 615              	.LFB66:
 123:main.c        **** 
 124:main.c        **** CY_ISR( Motor_PI_Int_Handler ) {
 616              		.loc 1 124 0
 617              		.cfi_startproc
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 14


 618              		@ args = 0, pretend = 0, frame = 8
 619              		@ frame_needed = 1, uses_anonymous_args = 0
 620 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 621              		.cfi_def_cfa_offset 20
 622              		.cfi_offset 4, -20
 623              		.cfi_offset 5, -16
 624              		.cfi_offset 6, -12
 625              		.cfi_offset 7, -8
 626              		.cfi_offset 14, -4
 627 0002 83B0     		sub	sp, sp, #12
 628              		.cfi_def_cfa_offset 32
 629 0004 00AF     		add	r7, sp, #0
 630              		.cfi_def_cfa_register 7
 125:main.c        ****     long double error = left_motor.desired_w - left_motor.w;
 631              		.loc 1 125 0
 632 0006 514B     		ldr	r3, .L17
 633 0008 D3E90801 		ldrd	r0, [r3, #32]
 634 000c 4F4B     		ldr	r3, .L17
 635 000e 03F11004 		add	r4, r3, #16
 636 0012 D4E90034 		ldrd	r3, [r4]
 637 0016 1A46     		mov	r2, r3
 638 0018 2346     		mov	r3, r4
 639 001a FFF7FEFF 		bl	__aeabi_dsub
 640 001e 0346     		mov	r3, r0
 641 0020 0C46     		mov	r4, r1
 642 0022 C7E90034 		strd	r3, [r7]
 126:main.c        ****     left_motor.int_error  = left_motor.int_error + error;
 643              		.loc 1 126 0
 644 0026 494B     		ldr	r3, .L17
 645 0028 D3E90201 		ldrd	r0, [r3, #8]
 646 002c D7E90023 		ldrd	r2, [r7]
 647 0030 FFF7FEFF 		bl	__aeabi_dadd
 648 0034 0346     		mov	r3, r0
 649 0036 0C46     		mov	r4, r1
 650 0038 444A     		ldr	r2, .L17
 651 003a C2E90234 		strd	r3, [r2, #8]
 127:main.c        ****     left_motor.duty_cycle = left_motor.duty_cycle + left_motor.Kp*error + left_motor.Ki*left_motor.
 652              		.loc 1 127 0
 653 003e 434B     		ldr	r3, .L17
 654 0040 D3E90045 		ldrd	r4, [r3]
 655 0044 414B     		ldr	r3, .L17
 656 0046 D3E90C01 		ldrd	r0, [r3, #48]
 657 004a D7E90023 		ldrd	r2, [r7]
 658 004e FFF7FEFF 		bl	__aeabi_dmul
 659 0052 0246     		mov	r2, r0
 660 0054 0B46     		mov	r3, r1
 661 0056 2046     		mov	r0, r4
 662 0058 2946     		mov	r1, r5
 663 005a FFF7FEFF 		bl	__aeabi_dadd
 664 005e 0346     		mov	r3, r0
 665 0060 0C46     		mov	r4, r1
 666 0062 1D46     		mov	r5, r3
 667 0064 2646     		mov	r6, r4
 668 0066 394B     		ldr	r3, .L17
 669 0068 D3E90A01 		ldrd	r0, [r3, #40]
 670 006c 374B     		ldr	r3, .L17
 671 006e 03F10804 		add	r4, r3, #8
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 15


 672 0072 D4E90034 		ldrd	r3, [r4]
 673 0076 1A46     		mov	r2, r3
 674 0078 2346     		mov	r3, r4
 675 007a FFF7FEFF 		bl	__aeabi_dmul
 676 007e 0346     		mov	r3, r0
 677 0080 0C46     		mov	r4, r1
 678 0082 1A46     		mov	r2, r3
 679 0084 2346     		mov	r3, r4
 680 0086 2846     		mov	r0, r5
 681 0088 3146     		mov	r1, r6
 682 008a FFF7FEFF 		bl	__aeabi_dadd
 683 008e 0346     		mov	r3, r0
 684 0090 0C46     		mov	r4, r1
 685 0092 2E4A     		ldr	r2, .L17
 686 0094 C2E90034 		strd	r3, [r2]
 128:main.c        ****     Drive_Left_Motor(left_motor.duty_cycle);
 687              		.loc 1 128 0
 688 0098 2C4B     		ldr	r3, .L17
 689 009a 18CB     		ldmia	r3, {r3-r4}
 690 009c 1846     		mov	r0, r3
 691 009e 2146     		mov	r1, r4
 692 00a0 FFF7FEFF 		bl	Drive_Left_Motor
 129:main.c        ****     
 130:main.c        ****     error = right_motor.desired_w - right_motor.w;
 693              		.loc 1 130 0
 694 00a4 2A4B     		ldr	r3, .L17+4
 695 00a6 D3E90801 		ldrd	r0, [r3, #32]
 696 00aa 294B     		ldr	r3, .L17+4
 697 00ac 03F11004 		add	r4, r3, #16
 698 00b0 D4E90034 		ldrd	r3, [r4]
 699 00b4 1A46     		mov	r2, r3
 700 00b6 2346     		mov	r3, r4
 701 00b8 FFF7FEFF 		bl	__aeabi_dsub
 702 00bc 0346     		mov	r3, r0
 703 00be 0C46     		mov	r4, r1
 704 00c0 C7E90034 		strd	r3, [r7]
 131:main.c        ****     right_motor.int_error  = right_motor.int_error + error;
 705              		.loc 1 131 0
 706 00c4 224B     		ldr	r3, .L17+4
 707 00c6 D3E90201 		ldrd	r0, [r3, #8]
 708 00ca D7E90023 		ldrd	r2, [r7]
 709 00ce FFF7FEFF 		bl	__aeabi_dadd
 710 00d2 0346     		mov	r3, r0
 711 00d4 0C46     		mov	r4, r1
 712 00d6 1E4A     		ldr	r2, .L17+4
 713 00d8 C2E90234 		strd	r3, [r2, #8]
 132:main.c        ****     right_motor.duty_cycle = right_motor.duty_cycle + right_motor.Kp*error + right_motor.Ki*right_m
 714              		.loc 1 132 0
 715 00dc 1C4B     		ldr	r3, .L17+4
 716 00de D3E90045 		ldrd	r4, [r3]
 717 00e2 1B4B     		ldr	r3, .L17+4
 718 00e4 D3E90C01 		ldrd	r0, [r3, #48]
 719 00e8 D7E90023 		ldrd	r2, [r7]
 720 00ec FFF7FEFF 		bl	__aeabi_dmul
 721 00f0 0246     		mov	r2, r0
 722 00f2 0B46     		mov	r3, r1
 723 00f4 2046     		mov	r0, r4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 16


 724 00f6 2946     		mov	r1, r5
 725 00f8 FFF7FEFF 		bl	__aeabi_dadd
 726 00fc 0346     		mov	r3, r0
 727 00fe 0C46     		mov	r4, r1
 728 0100 1D46     		mov	r5, r3
 729 0102 2646     		mov	r6, r4
 730 0104 124B     		ldr	r3, .L17+4
 731 0106 D3E90A01 		ldrd	r0, [r3, #40]
 732 010a 114B     		ldr	r3, .L17+4
 733 010c 03F10804 		add	r4, r3, #8
 734 0110 D4E90034 		ldrd	r3, [r4]
 735 0114 1A46     		mov	r2, r3
 736 0116 2346     		mov	r3, r4
 737 0118 FFF7FEFF 		bl	__aeabi_dmul
 738 011c 0346     		mov	r3, r0
 739 011e 0C46     		mov	r4, r1
 740 0120 1A46     		mov	r2, r3
 741 0122 2346     		mov	r3, r4
 742 0124 2846     		mov	r0, r5
 743 0126 3146     		mov	r1, r6
 744 0128 FFF7FEFF 		bl	__aeabi_dadd
 745 012c 0346     		mov	r3, r0
 746 012e 0C46     		mov	r4, r1
 747 0130 074A     		ldr	r2, .L17+4
 748 0132 C2E90034 		strd	r3, [r2]
 133:main.c        ****     Drive_Right_Motor(right_motor.duty_cycle);
 749              		.loc 1 133 0
 750 0136 064B     		ldr	r3, .L17+4
 751 0138 18CB     		ldmia	r3, {r3-r4}
 752 013a 1846     		mov	r0, r3
 753 013c 2146     		mov	r1, r4
 754 013e FFF7FEFF 		bl	Drive_Right_Motor
 134:main.c        **** }
 755              		.loc 1 134 0
 756 0142 00BF     		nop
 757 0144 0C37     		adds	r7, r7, #12
 758              		.cfi_def_cfa_offset 20
 759 0146 BD46     		mov	sp, r7
 760              		.cfi_def_cfa_register 13
 761              		@ sp needed
 762 0148 F0BD     		pop	{r4, r5, r6, r7, pc}
 763              	.L18:
 764 014a 00BF     		.align	2
 765              	.L17:
 766 014c 00000000 		.word	left_motor
 767 0150 00000000 		.word	right_motor
 768              		.cfi_endproc
 769              	.LFE66:
 770              		.size	Motor_PI_Int_Handler, .-Motor_PI_Int_Handler
 771              		.global	__aeabi_dcmpge
 772              		.section	.text.Navigation_Test_Int_Handler,"ax",%progbits
 773              		.align	2
 774              		.global	Navigation_Test_Int_Handler
 775              		.thumb
 776              		.thumb_func
 777              		.type	Navigation_Test_Int_Handler, %function
 778              	Navigation_Test_Int_Handler:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 17


 779              	.LFB67:
 135:main.c        **** 
 136:main.c        **** CY_ISR( Navigation_Test_Int_Handler ) {
 780              		.loc 1 136 0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 8
 783              		@ frame_needed = 1, uses_anonymous_args = 0
 784 0000 90B5     		push	{r4, r7, lr}
 785              		.cfi_def_cfa_offset 12
 786              		.cfi_offset 4, -12
 787              		.cfi_offset 7, -8
 788              		.cfi_offset 14, -4
 789 0002 83B0     		sub	sp, sp, #12
 790              		.cfi_def_cfa_offset 24
 791 0004 00AF     		add	r7, sp, #0
 792              		.cfi_def_cfa_register 7
 137:main.c        ****     long double angle;
 138:main.c        ****     angle = robot.desired_theta + M_PI/2;
 793              		.loc 1 138 0
 794 0006 1A4B     		ldr	r3, .L23+16
 795 0008 D3E90E01 		ldrd	r0, [r3, #56]
 796 000c 14A3     		adr	r3, .L23
 797 000e D3E90023 		ldrd	r2, [r3]
 798 0012 FFF7FEFF 		bl	__aeabi_dadd
 799 0016 0346     		mov	r3, r0
 800 0018 0C46     		mov	r4, r1
 801 001a C7E90034 		strd	r3, [r7]
 139:main.c        ****     if( angle >= M_TWOPI ) {
 802              		.loc 1 139 0
 803 001e 12A3     		adr	r3, .L23+8
 804 0020 D3E90023 		ldrd	r2, [r3]
 805 0024 D7E90001 		ldrd	r0, [r7]
 806 0028 FFF7FEFF 		bl	__aeabi_dcmpge
 807 002c 0346     		mov	r3, r0
 808 002e 002B     		cmp	r3, #0
 809 0030 0AD0     		beq	.L20
 140:main.c        ****         angle = angle - M_TWOPI;
 810              		.loc 1 140 0
 811 0032 0DA3     		adr	r3, .L23+8
 812 0034 D3E90023 		ldrd	r2, [r3]
 813 0038 D7E90001 		ldrd	r0, [r7]
 814 003c FFF7FEFF 		bl	__aeabi_dsub
 815 0040 0346     		mov	r3, r0
 816 0042 0C46     		mov	r4, r1
 817 0044 C7E90034 		strd	r3, [r7]
 818              	.L20:
 141:main.c        ****     }
 142:main.c        ****     robot.desired_theta = angle;
 819              		.loc 1 142 0
 820 0048 094A     		ldr	r2, .L23+16
 821 004a D7E90034 		ldrd	r3, [r7]
 822 004e C2E90E34 		strd	r3, [r2, #56]
 143:main.c        **** }
 823              		.loc 1 143 0
 824 0052 00BF     		nop
 825 0054 0C37     		adds	r7, r7, #12
 826              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 18


 827 0056 BD46     		mov	sp, r7
 828              		.cfi_def_cfa_register 13
 829              		@ sp needed
 830 0058 90BD     		pop	{r4, r7, pc}
 831              	.L24:
 832 005a 00BFAFF3 		.align	3
 832      0080
 833              	.L23:
 834 0060 182D4454 		.word	1413754136
 835 0064 FB21F93F 		.word	1073291771
 836 0068 182D4454 		.word	1413754136
 837 006c FB211940 		.word	1075388923
 838 0070 00000000 		.word	robot
 839              		.cfi_endproc
 840              	.LFE67:
 841              		.size	Navigation_Test_Int_Handler, .-Navigation_Test_Int_Handler
 842              		.global	__aeabi_dcmple
 843              		.section	.rodata
 844              		.align	2
 845              	.LC0:
 846 0010 64783A20 		.ascii	"dx: %Lf, dy: %Lf, dtg: %Lf, ttg: %Lf, dist: %i, tmr"
 846      254C662C 
 846      2064793A 
 846      20254C66 
 846      2C206474 
 847 0043 3A202569 		.ascii	": %i\012\000"
 847      0A00
 848              		.section	.text.main,"ax",%progbits
 849              		.align	2
 850              		.global	main
 851              		.thumb
 852              		.thumb_func
 853              		.type	main, %function
 854              	main:
 855              	.LFB68:
 144:main.c        **** 
 145:main.c        **** 
 146:main.c        **** 
 147:main.c        **** 
 148:main.c        **** int main(void)
 149:main.c        **** {
 856              		.loc 1 149 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 40
 859              		@ frame_needed = 1, uses_anonymous_args = 0
 860 0000 B0B5     		push	{r4, r5, r7, lr}
 861              		.cfi_def_cfa_offset 16
 862              		.cfi_offset 4, -16
 863              		.cfi_offset 5, -12
 864              		.cfi_offset 7, -8
 865              		.cfi_offset 14, -4
 866 0002 92B0     		sub	sp, sp, #72
 867              		.cfi_def_cfa_offset 88
 868 0004 08AF     		add	r7, sp, #32
 869              		.cfi_def_cfa 7, 56
 150:main.c        ****     long double wheel_r_scale = 0.9578;   
 870              		.loc 1 150 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 19


 871 0006 9CA4     		adr	r4, .L40
 872 0008 D4E90034 		ldrd	r3, [r4]
 873 000c C7E90834 		strd	r3, [r7, #32]
 151:main.c        ****     left_motor.duty_cycle = 0;
 874              		.loc 1 151 0
 875 0010 A54A     		ldr	r2, .L40+48
 876 0012 4FF00003 		mov	r3, #0
 877 0016 4FF00004 		mov	r4, #0
 878 001a C2E90034 		strd	r3, [r2]
 152:main.c        ****     left_motor.int_error = 0;
 879              		.loc 1 152 0
 880 001e A24A     		ldr	r2, .L40+48
 881 0020 4FF00003 		mov	r3, #0
 882 0024 4FF00004 		mov	r4, #0
 883 0028 C2E90234 		strd	r3, [r2, #8]
 153:main.c        ****     left_motor.desired_w = 0;
 884              		.loc 1 153 0
 885 002c 9E4A     		ldr	r2, .L40+48
 886 002e 4FF00003 		mov	r3, #0
 887 0032 4FF00004 		mov	r4, #0
 888 0036 C2E90834 		strd	r3, [r2, #32]
 154:main.c        ****     left_motor.wheel_radius = wheel_r_scale * 2.75;
 889              		.loc 1 154 0
 890 003a 4FF00002 		mov	r2, #0
 891 003e 9B4B     		ldr	r3, .L40+52
 892 0040 D7E90801 		ldrd	r0, [r7, #32]
 893 0044 FFF7FEFF 		bl	__aeabi_dmul
 894 0048 0346     		mov	r3, r0
 895 004a 0C46     		mov	r4, r1
 896 004c 964A     		ldr	r2, .L40+48
 897 004e C2E90E34 		strd	r3, [r2, #56]
 155:main.c        ****     left_motor.enc_count = 0;
 898              		.loc 1 155 0
 899 0052 954B     		ldr	r3, .L40+48
 900 0054 0022     		movs	r2, #0
 901 0056 1A64     		str	r2, [r3, #64]
 156:main.c        ****     left_motor.Ki = 3e-6;  // TODO: determine good PI params
 902              		.loc 1 156 0
 903 0058 934A     		ldr	r2, .L40+48
 904 005a 89A4     		adr	r4, .L40+8
 905 005c D4E90034 		ldrd	r3, [r4]
 906 0060 C2E90A34 		strd	r3, [r2, #40]
 157:main.c        ****     left_motor.Kp = 0.0025;
 907              		.loc 1 157 0
 908 0064 904A     		ldr	r2, .L40+48
 909 0066 88A4     		adr	r4, .L40+16
 910 0068 D4E90034 		ldrd	r3, [r4]
 911 006c C2E90C34 		strd	r3, [r2, #48]
 158:main.c        ****     
 159:main.c        ****     right_motor.duty_cycle = 0;
 912              		.loc 1 159 0
 913 0070 8F4A     		ldr	r2, .L40+56
 914 0072 4FF00003 		mov	r3, #0
 915 0076 4FF00004 		mov	r4, #0
 916 007a C2E90034 		strd	r3, [r2]
 160:main.c        ****     right_motor.int_error = 0;
 917              		.loc 1 160 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 20


 918 007e 8C4A     		ldr	r2, .L40+56
 919 0080 4FF00003 		mov	r3, #0
 920 0084 4FF00004 		mov	r4, #0
 921 0088 C2E90234 		strd	r3, [r2, #8]
 161:main.c        ****     right_motor.desired_w = 0;
 922              		.loc 1 161 0
 923 008c 884A     		ldr	r2, .L40+56
 924 008e 4FF00003 		mov	r3, #0
 925 0092 4FF00004 		mov	r4, #0
 926 0096 C2E90834 		strd	r3, [r2, #32]
 162:main.c        ****     right_motor.wheel_radius = wheel_r_scale * 1.001*2.75;
 927              		.loc 1 162 0
 928 009a 7DA3     		adr	r3, .L40+24
 929 009c D3E90023 		ldrd	r2, [r3]
 930 00a0 D7E90801 		ldrd	r0, [r7, #32]
 931 00a4 FFF7FEFF 		bl	__aeabi_dmul
 932 00a8 0346     		mov	r3, r0
 933 00aa 0C46     		mov	r4, r1
 934 00ac 1846     		mov	r0, r3
 935 00ae 2146     		mov	r1, r4
 936 00b0 4FF00002 		mov	r2, #0
 937 00b4 7D4B     		ldr	r3, .L40+52
 938 00b6 FFF7FEFF 		bl	__aeabi_dmul
 939 00ba 0346     		mov	r3, r0
 940 00bc 0C46     		mov	r4, r1
 941 00be 7C4A     		ldr	r2, .L40+56
 942 00c0 C2E90E34 		strd	r3, [r2, #56]
 163:main.c        ****     right_motor.enc_count = 0;
 943              		.loc 1 163 0
 944 00c4 7A4B     		ldr	r3, .L40+56
 945 00c6 0022     		movs	r2, #0
 946 00c8 1A64     		str	r2, [r3, #64]
 164:main.c        ****     right_motor.Ki = 3e-7;  // TODO: determine good PI params
 947              		.loc 1 164 0
 948 00ca 794A     		ldr	r2, .L40+56
 949 00cc 72A4     		adr	r4, .L40+32
 950 00ce D4E90034 		ldrd	r3, [r4]
 951 00d2 C2E90A34 		strd	r3, [r2, #40]
 165:main.c        ****     right_motor.Kp = 0.0025;
 952              		.loc 1 165 0
 953 00d6 764A     		ldr	r2, .L40+56
 954 00d8 6BA4     		adr	r4, .L40+16
 955 00da D4E90034 		ldrd	r3, [r4]
 956 00de C2E90C34 		strd	r3, [r2, #48]
 166:main.c        ****     
 167:main.c        ****     robot.axle_width = 0.935*22.5; // TODO: get accurate measurement
 957              		.loc 1 167 0
 958 00e2 744A     		ldr	r2, .L40+60
 959 00e4 6EA4     		adr	r4, .L40+40
 960 00e6 D4E90034 		ldrd	r3, [r4]
 961 00ea C2E90634 		strd	r3, [r2, #24]
 168:main.c        ****     robot.int_error = 0;
 962              		.loc 1 168 0
 963 00ee 714A     		ldr	r2, .L40+60
 964 00f0 4FF00003 		mov	r3, #0
 965 00f4 4FF00004 		mov	r4, #0
 966 00f8 C2E91434 		strd	r3, [r2, #80]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 21


 169:main.c        ****     robot.Ki = 3e-7;    // TODO: determine good PI values
 967              		.loc 1 169 0
 968 00fc 6D4A     		ldr	r2, .L40+60
 969 00fe 66A4     		adr	r4, .L40+32
 970 0100 D4E90034 		ldrd	r3, [r4]
 971 0104 C2E91034 		strd	r3, [r2, #64]
 170:main.c        ****     robot.Kp = 1;
 972              		.loc 1 170 0
 973 0108 6A4A     		ldr	r2, .L40+60
 974 010a 4FF00003 		mov	r3, #0
 975 010e 6A4C     		ldr	r4, .L40+64
 976 0110 C2E91234 		strd	r3, [r2, #72]
 171:main.c        ****     robot.desired_V = 0;
 977              		.loc 1 171 0
 978 0114 674A     		ldr	r2, .L40+60
 979 0116 4FF00003 		mov	r3, #0
 980 011a 4FF00004 		mov	r4, #0
 981 011e C2E90C34 		strd	r3, [r2, #48]
 172:main.c        ****     robot.desired_theta = 0;
 982              		.loc 1 172 0
 983 0122 644A     		ldr	r2, .L40+60
 984 0124 4FF00003 		mov	r3, #0
 985 0128 4FF00004 		mov	r4, #0
 986 012c C2E90E34 		strd	r3, [r2, #56]
 173:main.c        ****     
 174:main.c        ****     robot.goal_min_dist = 1;
 987              		.loc 1 174 0
 988 0130 604A     		ldr	r2, .L40+60
 989 0132 4FF00003 		mov	r3, #0
 990 0136 604C     		ldr	r4, .L40+64
 991 0138 C2E91A34 		strd	r3, [r2, #104]
 175:main.c        ****     robot.goal_x = 100;
 992              		.loc 1 175 0
 993 013c 5D4A     		ldr	r2, .L40+60
 994 013e 4FF00003 		mov	r3, #0
 995 0142 5E4C     		ldr	r4, .L40+68
 996 0144 C2E91634 		strd	r3, [r2, #88]
 176:main.c        ****     robot.goal_y = 0;
 997              		.loc 1 176 0
 998 0148 5A4A     		ldr	r2, .L40+60
 999 014a 4FF00003 		mov	r3, #0
 1000 014e 4FF00004 		mov	r4, #0
 1001 0152 C2E91834 		strd	r3, [r2, #96]
 177:main.c        ****     
 178:main.c        ****     CyGlobalIntEnable;
 1002              		.loc 1 178 0
 1003              		.syntax unified
 1004              	@ 178 "main.c" 1
 1005 0156 62B6     		CPSIE   i
 1006              	@ 0 "" 2
 179:main.c        ****     
 180:main.c        ****     // Registration of Timer ISR
 181:main.c        ****     Timer_Echo_Int_StartEx( Timer_Int_Handler );
 1007              		.loc 1 181 0
 1008              		.thumb
 1009              		.syntax unified
 1010 0158 5948     		ldr	r0, .L40+72
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 22


 1011 015a FFF7FEFF 		bl	Timer_Echo_Int_StartEx
 182:main.c        ****     Pose_Update_Int_StartEx( Pose_Update_Int_Handler );
 1012              		.loc 1 182 0
 1013 015e 5948     		ldr	r0, .L40+76
 1014 0160 FFF7FEFF 		bl	Pose_Update_Int_StartEx
 183:main.c        ****     Motor_PI_Int_StartEx( Motor_PI_Int_Handler );
 1015              		.loc 1 183 0
 1016 0164 5848     		ldr	r0, .L40+80
 1017 0166 FFF7FEFF 		bl	Motor_PI_Int_StartEx
 184:main.c        ****     //Testing_Int_StartEx( Navigation_Test_Int_Handler );
 185:main.c        ****     
 186:main.c        ****     // Start up code - enable UART, PWM and Timer used for ultrasonic module
 187:main.c        ****     UART_Start();
 1018              		.loc 1 187 0
 1019 016a FFF7FEFF 		bl	UART_Start
 188:main.c        ****     Timer_Echo_Start();
 1020              		.loc 1 188 0
 1021 016e FFF7FEFF 		bl	Timer_Echo_Start
 189:main.c        ****     PWM_Trigger_Start();
 1022              		.loc 1 189 0
 1023 0172 FFF7FEFF 		bl	PWM_Trigger_Start
 190:main.c        ****     QuadDec_L_Start();
 1024              		.loc 1 190 0
 1025 0176 FFF7FEFF 		bl	QuadDec_L_Start
 191:main.c        ****     PWM_Motor_L_Start();
 1026              		.loc 1 191 0
 1027 017a FFF7FEFF 		bl	PWM_Motor_L_Start
 192:main.c        ****     QuadDec_R_Start();
 1028              		.loc 1 192 0
 1029 017e FFF7FEFF 		bl	QuadDec_R_Start
 193:main.c        ****     PWM_Motor_R_Start();
 1030              		.loc 1 193 0
 1031 0182 FFF7FEFF 		bl	PWM_Motor_R_Start
 194:main.c        ****     Timer_Avoidance_Start();
 1032              		.loc 1 194 0
 1033 0186 FFF7FEFF 		bl	Timer_Avoidance_Start
 195:main.c        ****     Timer_Avoidance_WriteCounter(60000); // Cause robot to start moving immediately
 1034              		.loc 1 195 0
 1035 018a 4EF66020 		movw	r0, #60000
 1036 018e FFF7FEFF 		bl	Timer_Avoidance_WriteCounter
 1037              	.L34:
 1038              	.LBB2:
 196:main.c        ****     
 197:main.c        ****     for(;;) {
 198:main.c        ****         long double dy = robot.goal_y - robot.y;
 1039              		.loc 1 198 0
 1040 0192 484B     		ldr	r3, .L40+60
 1041 0194 D3E91801 		ldrd	r0, [r3, #96]
 1042 0198 464B     		ldr	r3, .L40+60
 1043 019a 03F11004 		add	r4, r3, #16
 1044 019e D4E90034 		ldrd	r3, [r4]
 1045 01a2 1A46     		mov	r2, r3
 1046 01a4 2346     		mov	r3, r4
 1047 01a6 FFF7FEFF 		bl	__aeabi_dsub
 1048 01aa 0346     		mov	r3, r0
 1049 01ac 0C46     		mov	r4, r1
 1050 01ae C7E90634 		strd	r3, [r7, #24]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 23


 199:main.c        ****         long double dx = robot.goal_x - robot.x;
 1051              		.loc 1 199 0
 1052 01b2 404B     		ldr	r3, .L40+60
 1053 01b4 D3E91601 		ldrd	r0, [r3, #88]
 1054 01b8 3E4B     		ldr	r3, .L40+60
 1055 01ba 03F10804 		add	r4, r3, #8
 1056 01be D4E90034 		ldrd	r3, [r4]
 1057 01c2 1A46     		mov	r2, r3
 1058 01c4 2346     		mov	r3, r4
 1059 01c6 FFF7FEFF 		bl	__aeabi_dsub
 1060 01ca 0346     		mov	r3, r0
 1061 01cc 0C46     		mov	r4, r1
 1062 01ce C7E90434 		strd	r3, [r7, #16]
 200:main.c        ****         long double dist_to_goal = sqrtl( dy*dy + dx*dx );
 1063              		.loc 1 200 0
 1064 01d2 D7E90623 		ldrd	r2, [r7, #24]
 1065 01d6 D7E90601 		ldrd	r0, [r7, #24]
 1066 01da FFF7FEFF 		bl	__aeabi_dmul
 1067 01de 0346     		mov	r3, r0
 1068 01e0 0C46     		mov	r4, r1
 1069 01e2 2546     		mov	r5, r4
 1070 01e4 1C46     		mov	r4, r3
 1071 01e6 D7E90423 		ldrd	r2, [r7, #16]
 1072 01ea D7E90401 		ldrd	r0, [r7, #16]
 1073 01ee FFF7FEFF 		bl	__aeabi_dmul
 1074 01f2 0246     		mov	r2, r0
 1075 01f4 0B46     		mov	r3, r1
 1076 01f6 2046     		mov	r0, r4
 1077 01f8 2946     		mov	r1, r5
 1078 01fa FFF7FEFF 		bl	__aeabi_dadd
 1079 01fe 0346     		mov	r3, r0
 1080 0200 0C46     		mov	r4, r1
 1081 0202 1846     		mov	r0, r3
 1082 0204 2146     		mov	r1, r4
 1083 0206 FFF7FEFF 		bl	sqrtl
 1084 020a C7E90201 		strd	r0, [r7, #8]
 201:main.c        ****         long double theta_to_goal = atan2l( dy, dx );
 1085              		.loc 1 201 0
 1086 020e D7E90423 		ldrd	r2, [r7, #16]
 1087 0212 D7E90601 		ldrd	r0, [r7, #24]
 1088 0216 FFF7FEFF 		bl	atan2l
 1089 021a C7E90001 		strd	r0, [r7]
 202:main.c        ****         
 203:main.c        ****         if( dist_to_goal <= robot.goal_min_dist ) {
 1090              		.loc 1 203 0
 1091 021e 254B     		ldr	r3, .L40+60
 1092 0220 D3E91A01 		ldrd	r0, [r3, #104]
 1093 0224 D7E90223 		ldrd	r2, [r7, #8]
 1094 0228 FFF7FEFF 		bl	__aeabi_dcmpge
 1095 022c 0346     		mov	r3, r0
 1096 022e 002B     		cmp	r3, #0
 1097 0230 07D0     		beq	.L38
 204:main.c        ****             robot.desired_V = 0;
 1098              		.loc 1 204 0
 1099 0232 204A     		ldr	r2, .L40+60
 1100 0234 4FF00003 		mov	r3, #0
 1101 0238 4FF00004 		mov	r4, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 24


 1102 023c C2E90C34 		strd	r3, [r2, #48]
 1103 0240 6DE0     		b	.L28
 1104              	.L38:
 205:main.c        ****         } else if( echo_flag && echo_distance < 40 && echo_distance <= dist_to_goal) {
 1105              		.loc 1 205 0
 1106 0242 224B     		ldr	r3, .L40+84
 1107 0244 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1108 0246 002B     		cmp	r3, #0
 1109 0248 44D0     		beq	.L29
 1110              		.loc 1 205 0 is_stmt 0 discriminator 1
 1111 024a 214B     		ldr	r3, .L40+88
 1112 024c 1B88     		ldrh	r3, [r3]
 1113 024e 272B     		cmp	r3, #39
 1114 0250 40D8     		bhi	.L29
 1115              		.loc 1 205 0 discriminator 2
 1116 0252 1F4B     		ldr	r3, .L40+88
 1117 0254 1B88     		ldrh	r3, [r3]
 1118 0256 1846     		mov	r0, r3
 1119 0258 FFF7FEFF 		bl	__aeabi_i2d
 1120 025c D7E90223 		ldrd	r2, [r7, #8]
 1121 0260 FFF7FEFF 		bl	__aeabi_dcmple
 1122 0264 0346     		mov	r3, r0
 1123 0266 002B     		cmp	r3, #0
 1124 0268 34D0     		beq	.L29
 206:main.c        ****             //robot.desired_theta = angle_modulo( robot.theta - M_PI/3 );
 207:main.c        ****             Timer_Avoidance_WriteCounter(65535);
 1125              		.loc 1 207 0 is_stmt 1
 1126 026a 4FF6FF70 		movw	r0, #65535
 1127 026e FFF7FEFF 		bl	Timer_Avoidance_WriteCounter
 1128 0272 54E0     		b	.L28
 1129              	.L41:
 1130 0274 AFF30080 		.align	3
 1131              	.L40:
 1132 0278 4A7B832F 		.word	797145930
 1133 027c 4CA6EE3F 		.word	1072604748
 1134 0280 54E41071 		.word	1896932436
 1135 0284 732AC93E 		.word	1053370995
 1136 0288 7B14AE47 		.word	1202590843
 1137 028c E17A643F 		.word	1063549665
 1138 0290 6ABC7493 		.word	-1821066134
 1139 0294 1804F03F 		.word	1072694296
 1140 0298 76830DF4 		.word	-200440970
 1141 029c F521943E 		.word	1049895413
 1142 02a0 9A999999 		.word	-1717986918
 1143 02a4 99093540 		.word	1077217689
 1144 02a8 00000000 		.word	left_motor
 1145 02ac 00000640 		.word	1074135040
 1146 02b0 00000000 		.word	right_motor
 1147 02b4 00000000 		.word	robot
 1148 02b8 0000F03F 		.word	1072693248
 1149 02bc 00005940 		.word	1079574528
 1150 02c0 00000000 		.word	Timer_Int_Handler
 1151 02c4 00000000 		.word	Pose_Update_Int_Handler
 1152 02c8 00000000 		.word	Motor_PI_Int_Handler
 1153 02cc 00000000 		.word	echo_flag
 1154 02d0 00000000 		.word	echo_distance
 1155              	.L29:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 25


 208:main.c        ****         } else if( Timer_Avoidance_ReadCounter() < 65532 ){
 1156              		.loc 1 208 0
 1157 02d4 FFF7FEFF 		bl	Timer_Avoidance_ReadCounter
 1158 02d8 0346     		mov	r3, r0
 1159 02da 1A46     		mov	r2, r3
 1160 02dc 4FF6FB73 		movw	r3, #65531
 1161 02e0 9A42     		cmp	r2, r3
 1162 02e2 1CD8     		bhi	.L28
 209:main.c        ****             robot.desired_theta = theta_to_goal;
 1163              		.loc 1 209 0
 1164 02e4 264A     		ldr	r2, .L42
 1165 02e6 D7E90034 		ldrd	r3, [r7]
 1166 02ea C2E90E34 		strd	r3, [r2, #56]
 210:main.c        ****             if( dist_to_goal < 10 ) {
 1167              		.loc 1 210 0
 1168 02ee 4FF00002 		mov	r2, #0
 1169 02f2 244B     		ldr	r3, .L42+4
 1170 02f4 D7E90201 		ldrd	r0, [r7, #8]
 1171 02f8 FFF7FEFF 		bl	__aeabi_dcmplt
 1172 02fc 0346     		mov	r3, r0
 1173 02fe 002B     		cmp	r3, #0
 1174 0300 07D0     		beq	.L39
 211:main.c        ****                 robot.desired_V = 2;
 1175              		.loc 1 211 0
 1176 0302 1F4A     		ldr	r2, .L42
 1177 0304 4FF00003 		mov	r3, #0
 1178 0308 4FF08044 		mov	r4, #1073741824
 1179 030c C2E90C34 		strd	r3, [r2, #48]
 1180 0310 05E0     		b	.L28
 1181              	.L39:
 212:main.c        ****             } else {
 213:main.c        ****                 robot.desired_V = 3;
 1182              		.loc 1 213 0
 1183 0312 1B4A     		ldr	r2, .L42
 1184 0314 4FF00003 		mov	r3, #0
 1185 0318 1B4C     		ldr	r4, .L42+8
 1186 031a C2E90C34 		strd	r3, [r2, #48]
 1187              	.L28:
 214:main.c        ****             }
 215:main.c        ****         }
 216:main.c        ****         
 217:main.c        ****         // if a distance was measured, print the distance and clear the flag
 218:main.c        ****         if ( echo_flag == 1 ) {
 1188              		.loc 1 218 0
 1189 031e 1B4B     		ldr	r3, .L42+12
 1190 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1191 0322 012B     		cmp	r3, #1
 1192 0324 0ED1     		bne	.L33
 219:main.c        ****             echo_distance = 65535 - Timer_Echo_ReadCapture();  // in cm
 1193              		.loc 1 219 0
 1194 0326 FFF7FEFF 		bl	Timer_Echo_ReadCapture
 1195 032a 0346     		mov	r3, r0
 1196 032c DB43     		mvns	r3, r3
 1197 032e 9AB2     		uxth	r2, r3
 1198 0330 174B     		ldr	r3, .L42+16
 1199 0332 1A80     		strh	r2, [r3]	@ movhi
 220:main.c        ****             //Timer_Echo_WriteCounter(max_count); // TODO: check if this is needed next lab
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 26


 221:main.c        ****             // clear the interrupt
 222:main.c        ****             
 223:main.c        ****             //sprintf(serial_output, "%d cm\n", echo_distance);
 224:main.c        ****             //UART_PutString(serial_output);
 225:main.c        ****             
 226:main.c        ****             /*
 227:main.c        ****             Timer_Echo_Stop();
 228:main.c        ****             //CyDelayUs(1); // TODO: Should be able to make this shorter, one or two bus clock cycl
 229:main.c        ****             if (mux_select == 0) {
 230:main.c        ****                 mux_select = 1;
 231:main.c        ****             } else {
 232:main.c        ****                 mux_select = 0;
 233:main.c        ****             }
 234:main.c        ****             mux_select = 0;
 235:main.c        ****             Control_Reg_US_Write(mux_select);
 236:main.c        ****             Timer_Echo_Enable();
 237:main.c        ****             */
 238:main.c        ****             PWM_Trigger_WriteCounter(255);    
 1200              		.loc 1 238 0
 1201 0334 FF20     		movs	r0, #255
 1202 0336 FFF7FEFF 		bl	PWM_Trigger_WriteCounter
 239:main.c        **** 
 240:main.c        ****             CyGlobalIntDisable; // Disable global interrupts, so the flag gets cleared. 
 1203              		.loc 1 240 0
 1204              		.syntax unified
 1205              	@ 240 "main.c" 1
 1206 033a 72B6     		CPSID   i
 1207              	@ 0 "" 2
 241:main.c        ****             echo_flag = 0;
 1208              		.loc 1 241 0
 1209              		.thumb
 1210              		.syntax unified
 1211 033c 134B     		ldr	r3, .L42+12
 1212 033e 0022     		movs	r2, #0
 1213 0340 1A70     		strb	r2, [r3]
 242:main.c        ****             CyGlobalIntEnable; // Enable global interrupts after the flag is cleared. 
 1214              		.loc 1 242 0
 1215              		.syntax unified
 1216              	@ 242 "main.c" 1
 1217 0342 62B6     		CPSIE   i
 1218              	@ 0 "" 2
 1219              		.thumb
 1220              		.syntax unified
 1221              	.L33:
 243:main.c        ****         }
 244:main.c        ****         
 245:main.c        ****         sprintf(serial_output, "dx: %Lf, dy: %Lf, dtg: %Lf, ttg: %Lf, dist: %i, tmr: %i\n", dx, dy,
 1222              		.loc 1 245 0
 1223 0344 124B     		ldr	r3, .L42+16
 1224 0346 1B88     		ldrh	r3, [r3]
 1225 0348 1C46     		mov	r4, r3
 1226 034a FFF7FEFF 		bl	Timer_Avoidance_ReadCounter
 1227 034e 0346     		mov	r3, r0
 1228 0350 0793     		str	r3, [sp, #28]
 1229 0352 0694     		str	r4, [sp, #24]
 1230 0354 D7E90034 		ldrd	r3, [r7]
 1231 0358 CDE90434 		strd	r3, [sp, #16]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 27


 1232 035c D7E90234 		ldrd	r3, [r7, #8]
 1233 0360 CDE90234 		strd	r3, [sp, #8]
 1234 0364 D7E90634 		ldrd	r3, [r7, #24]
 1235 0368 CDE90034 		strd	r3, [sp]
 1236 036c D7E90423 		ldrd	r2, [r7, #16]
 1237 0370 0849     		ldr	r1, .L42+20
 1238 0372 0948     		ldr	r0, .L42+24
 1239 0374 FFF7FEFF 		bl	sprintf
 246:main.c        ****         //sprintf(serial_output, "desired: %lf, actual: %lf, dc:%lf, enc: %li\n", right_motor.desir
 247:main.c        ****         //sprintf(serial_output, "x: %lf, y: %lf, theta: %lf\n", robot.x, robot.y, robot.theta);
 248:main.c        ****         UART_PutString(serial_output);
 1240              		.loc 1 248 0
 1241 0378 0748     		ldr	r0, .L42+24
 1242 037a FFF7FEFF 		bl	UART_PutString
 1243              	.LBE2:
 249:main.c        ****     }
 1244              		.loc 1 249 0
 1245 037e 08E7     		b	.L34
 1246              	.L43:
 1247              		.align	2
 1248              	.L42:
 1249 0380 00000000 		.word	robot
 1250 0384 00002440 		.word	1076101120
 1251 0388 00000840 		.word	1074266112
 1252 038c 00000000 		.word	echo_flag
 1253 0390 00000000 		.word	echo_distance
 1254 0394 10000000 		.word	.LC0
 1255 0398 00000000 		.word	serial_output
 1256              		.cfi_endproc
 1257              	.LFE68:
 1258              		.size	main, .-main
 1259              		.global	__aeabi_d2uiz
 1260              		.section	.text.Drive_Left_Motor,"ax",%progbits
 1261              		.align	2
 1262              		.global	Drive_Left_Motor
 1263              		.thumb
 1264              		.thumb_func
 1265              		.type	Drive_Left_Motor, %function
 1266              	Drive_Left_Motor:
 1267              	.LFB69:
 250:main.c        ****   
 251:main.c        **** }
 252:main.c        **** 
 253:main.c        **** void Drive_Left_Motor(long double duty_cycle) {
 1268              		.loc 1 253 0
 1269              		.cfi_startproc
 1270              		@ args = 0, pretend = 0, frame = 8
 1271              		@ frame_needed = 1, uses_anonymous_args = 0
 1272 0000 90B5     		push	{r4, r7, lr}
 1273              		.cfi_def_cfa_offset 12
 1274              		.cfi_offset 4, -12
 1275              		.cfi_offset 7, -8
 1276              		.cfi_offset 14, -4
 1277 0002 83B0     		sub	sp, sp, #12
 1278              		.cfi_def_cfa_offset 24
 1279 0004 00AF     		add	r7, sp, #0
 1280              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 28


 1281 0006 C7E90001 		strd	r0, [r7]
 254:main.c        ****     if (duty_cycle < -1) {
 1282              		.loc 1 254 0
 1283 000a 4FF00002 		mov	r2, #0
 1284 000e 304B     		ldr	r3, .L58+8
 1285 0010 D7E90001 		ldrd	r0, [r7]
 1286 0014 FFF7FEFF 		bl	__aeabi_dcmplt
 1287 0018 0346     		mov	r3, r0
 1288 001a 002B     		cmp	r3, #0
 1289 001c 05D0     		beq	.L55
 255:main.c        ****         duty_cycle = -1;
 1290              		.loc 1 255 0
 1291 001e 4FF00003 		mov	r3, #0
 1292 0022 2B4C     		ldr	r4, .L58+8
 1293 0024 C7E90034 		strd	r3, [r7]
 1294 0028 0EE0     		b	.L47
 1295              	.L55:
 256:main.c        ****     } else if (duty_cycle > 1) {
 1296              		.loc 1 256 0
 1297 002a 4FF00002 		mov	r2, #0
 1298 002e 294B     		ldr	r3, .L58+12
 1299 0030 D7E90001 		ldrd	r0, [r7]
 1300 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 1301 0038 0346     		mov	r3, r0
 1302 003a 002B     		cmp	r3, #0
 1303 003c 04D0     		beq	.L47
 257:main.c        ****         duty_cycle = 1;
 1304              		.loc 1 257 0
 1305 003e 4FF00003 		mov	r3, #0
 1306 0042 244C     		ldr	r4, .L58+12
 1307 0044 C7E90034 		strd	r3, [r7]
 1308              	.L47:
 258:main.c        ****     }
 259:main.c        ****     
 260:main.c        ****     if (duty_cycle < 0) {
 1309              		.loc 1 260 0
 1310 0048 4FF00002 		mov	r2, #0
 1311 004c 4FF00003 		mov	r3, #0
 1312 0050 D7E90001 		ldrd	r0, [r7]
 1313 0054 FFF7FEFF 		bl	__aeabi_dcmplt
 1314 0058 0346     		mov	r3, r0
 1315 005a 002B     		cmp	r3, #0
 1316 005c 1BD0     		beq	.L56
 261:main.c        ****         duty_cycle = -duty_cycle;
 1317              		.loc 1 261 0
 1318 005e 3B68     		ldr	r3, [r7]
 1319 0060 3B60     		str	r3, [r7]
 1320 0062 7B68     		ldr	r3, [r7, #4]
 1321 0064 83F00043 		eor	r3, r3, #-2147483648
 1322 0068 7B60     		str	r3, [r7, #4]
 262:main.c        ****         PWM_Motor_L_WriteCompare1(0);
 1323              		.loc 1 262 0
 1324 006a 0020     		movs	r0, #0
 1325 006c FFF7FEFF 		bl	PWM_Motor_L_WriteCompare1
 263:main.c        ****         PWM_Motor_L_WriteCompare2(duty_cycle*10000);
 1326              		.loc 1 263 0
 1327 0070 15A3     		adr	r3, .L58
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 29


 1328 0072 D3E90023 		ldrd	r2, [r3]
 1329 0076 D7E90001 		ldrd	r0, [r7]
 1330 007a FFF7FEFF 		bl	__aeabi_dmul
 1331 007e 0346     		mov	r3, r0
 1332 0080 0C46     		mov	r4, r1
 1333 0082 1846     		mov	r0, r3
 1334 0084 2146     		mov	r1, r4
 1335 0086 FFF7FEFF 		bl	__aeabi_d2uiz
 1336 008a 0346     		mov	r3, r0
 1337 008c 9BB2     		uxth	r3, r3
 1338 008e 1846     		mov	r0, r3
 1339 0090 FFF7FEFF 		bl	PWM_Motor_L_WriteCompare2
 264:main.c        ****     } else {
 265:main.c        ****         PWM_Motor_L_WriteCompare1(duty_cycle*10000);
 266:main.c        ****         PWM_Motor_L_WriteCompare2(0);
 267:main.c        ****     }
 268:main.c        **** }
 1340              		.loc 1 268 0
 1341 0094 14E0     		b	.L57
 1342              	.L56:
 265:main.c        ****         PWM_Motor_L_WriteCompare2(0);
 1343              		.loc 1 265 0
 1344 0096 0CA3     		adr	r3, .L58
 1345 0098 D3E90023 		ldrd	r2, [r3]
 1346 009c D7E90001 		ldrd	r0, [r7]
 1347 00a0 FFF7FEFF 		bl	__aeabi_dmul
 1348 00a4 0346     		mov	r3, r0
 1349 00a6 0C46     		mov	r4, r1
 1350 00a8 1846     		mov	r0, r3
 1351 00aa 2146     		mov	r1, r4
 1352 00ac FFF7FEFF 		bl	__aeabi_d2uiz
 1353 00b0 0346     		mov	r3, r0
 1354 00b2 9BB2     		uxth	r3, r3
 1355 00b4 1846     		mov	r0, r3
 1356 00b6 FFF7FEFF 		bl	PWM_Motor_L_WriteCompare1
 266:main.c        ****     }
 1357              		.loc 1 266 0
 1358 00ba 0020     		movs	r0, #0
 1359 00bc FFF7FEFF 		bl	PWM_Motor_L_WriteCompare2
 1360              	.L57:
 1361              		.loc 1 268 0
 1362 00c0 00BF     		nop
 1363 00c2 0C37     		adds	r7, r7, #12
 1364              		.cfi_def_cfa_offset 12
 1365 00c4 BD46     		mov	sp, r7
 1366              		.cfi_def_cfa_register 13
 1367              		@ sp needed
 1368 00c6 90BD     		pop	{r4, r7, pc}
 1369              	.L59:
 1370              		.align	3
 1371              	.L58:
 1372 00c8 00000000 		.word	0
 1373 00cc 0088C340 		.word	1086556160
 1374 00d0 0000F0BF 		.word	-1074790400
 1375 00d4 0000F03F 		.word	1072693248
 1376              		.cfi_endproc
 1377              	.LFE69:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 30


 1378              		.size	Drive_Left_Motor, .-Drive_Left_Motor
 1379              		.section	.text.Drive_Right_Motor,"ax",%progbits
 1380              		.align	2
 1381              		.global	Drive_Right_Motor
 1382              		.thumb
 1383              		.thumb_func
 1384              		.type	Drive_Right_Motor, %function
 1385              	Drive_Right_Motor:
 1386              	.LFB70:
 269:main.c        **** 
 270:main.c        **** void Drive_Right_Motor(long double duty_cycle) {
 1387              		.loc 1 270 0
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 8
 1390              		@ frame_needed = 1, uses_anonymous_args = 0
 1391 0000 90B5     		push	{r4, r7, lr}
 1392              		.cfi_def_cfa_offset 12
 1393              		.cfi_offset 4, -12
 1394              		.cfi_offset 7, -8
 1395              		.cfi_offset 14, -4
 1396 0002 83B0     		sub	sp, sp, #12
 1397              		.cfi_def_cfa_offset 24
 1398 0004 00AF     		add	r7, sp, #0
 1399              		.cfi_def_cfa_register 7
 1400 0006 C7E90001 		strd	r0, [r7]
 271:main.c        ****     if (duty_cycle < -1) {
 1401              		.loc 1 271 0
 1402 000a 4FF00002 		mov	r2, #0
 1403 000e 304B     		ldr	r3, .L74+8
 1404 0010 D7E90001 		ldrd	r0, [r7]
 1405 0014 FFF7FEFF 		bl	__aeabi_dcmplt
 1406 0018 0346     		mov	r3, r0
 1407 001a 002B     		cmp	r3, #0
 1408 001c 05D0     		beq	.L71
 272:main.c        ****         duty_cycle = -1;
 1409              		.loc 1 272 0
 1410 001e 4FF00003 		mov	r3, #0
 1411 0022 2B4C     		ldr	r4, .L74+8
 1412 0024 C7E90034 		strd	r3, [r7]
 1413 0028 0EE0     		b	.L63
 1414              	.L71:
 273:main.c        ****     } else if (duty_cycle > 1) {
 1415              		.loc 1 273 0
 1416 002a 4FF00002 		mov	r2, #0
 1417 002e 294B     		ldr	r3, .L74+12
 1418 0030 D7E90001 		ldrd	r0, [r7]
 1419 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 1420 0038 0346     		mov	r3, r0
 1421 003a 002B     		cmp	r3, #0
 1422 003c 04D0     		beq	.L63
 274:main.c        ****         duty_cycle = 1;
 1423              		.loc 1 274 0
 1424 003e 4FF00003 		mov	r3, #0
 1425 0042 244C     		ldr	r4, .L74+12
 1426 0044 C7E90034 		strd	r3, [r7]
 1427              	.L63:
 275:main.c        ****     }
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 31


 276:main.c        ****     
 277:main.c        ****     if (duty_cycle < 0) {
 1428              		.loc 1 277 0
 1429 0048 4FF00002 		mov	r2, #0
 1430 004c 4FF00003 		mov	r3, #0
 1431 0050 D7E90001 		ldrd	r0, [r7]
 1432 0054 FFF7FEFF 		bl	__aeabi_dcmplt
 1433 0058 0346     		mov	r3, r0
 1434 005a 002B     		cmp	r3, #0
 1435 005c 1BD0     		beq	.L72
 278:main.c        ****         duty_cycle = -duty_cycle;
 1436              		.loc 1 278 0
 1437 005e 3B68     		ldr	r3, [r7]
 1438 0060 3B60     		str	r3, [r7]
 1439 0062 7B68     		ldr	r3, [r7, #4]
 1440 0064 83F00043 		eor	r3, r3, #-2147483648
 1441 0068 7B60     		str	r3, [r7, #4]
 279:main.c        ****         PWM_Motor_R_WriteCompare1(0);
 1442              		.loc 1 279 0
 1443 006a 0020     		movs	r0, #0
 1444 006c FFF7FEFF 		bl	PWM_Motor_R_WriteCompare1
 280:main.c        ****         PWM_Motor_R_WriteCompare2(duty_cycle*5000);
 1445              		.loc 1 280 0
 1446 0070 15A3     		adr	r3, .L74
 1447 0072 D3E90023 		ldrd	r2, [r3]
 1448 0076 D7E90001 		ldrd	r0, [r7]
 1449 007a FFF7FEFF 		bl	__aeabi_dmul
 1450 007e 0346     		mov	r3, r0
 1451 0080 0C46     		mov	r4, r1
 1452 0082 1846     		mov	r0, r3
 1453 0084 2146     		mov	r1, r4
 1454 0086 FFF7FEFF 		bl	__aeabi_d2uiz
 1455 008a 0346     		mov	r3, r0
 1456 008c 9BB2     		uxth	r3, r3
 1457 008e 1846     		mov	r0, r3
 1458 0090 FFF7FEFF 		bl	PWM_Motor_R_WriteCompare2
 281:main.c        ****     } else {
 282:main.c        ****         PWM_Motor_R_WriteCompare1(duty_cycle*5000);
 283:main.c        ****         PWM_Motor_R_WriteCompare2(0);
 284:main.c        ****     }
 285:main.c        **** }
 1459              		.loc 1 285 0
 1460 0094 14E0     		b	.L73
 1461              	.L72:
 282:main.c        ****         PWM_Motor_R_WriteCompare2(0);
 1462              		.loc 1 282 0
 1463 0096 0CA3     		adr	r3, .L74
 1464 0098 D3E90023 		ldrd	r2, [r3]
 1465 009c D7E90001 		ldrd	r0, [r7]
 1466 00a0 FFF7FEFF 		bl	__aeabi_dmul
 1467 00a4 0346     		mov	r3, r0
 1468 00a6 0C46     		mov	r4, r1
 1469 00a8 1846     		mov	r0, r3
 1470 00aa 2146     		mov	r1, r4
 1471 00ac FFF7FEFF 		bl	__aeabi_d2uiz
 1472 00b0 0346     		mov	r3, r0
 1473 00b2 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 32


 1474 00b4 1846     		mov	r0, r3
 1475 00b6 FFF7FEFF 		bl	PWM_Motor_R_WriteCompare1
 283:main.c        ****     }
 1476              		.loc 1 283 0
 1477 00ba 0020     		movs	r0, #0
 1478 00bc FFF7FEFF 		bl	PWM_Motor_R_WriteCompare2
 1479              	.L73:
 1480              		.loc 1 285 0
 1481 00c0 00BF     		nop
 1482 00c2 0C37     		adds	r7, r7, #12
 1483              		.cfi_def_cfa_offset 12
 1484 00c4 BD46     		mov	sp, r7
 1485              		.cfi_def_cfa_register 13
 1486              		@ sp needed
 1487 00c6 90BD     		pop	{r4, r7, pc}
 1488              	.L75:
 1489              		.align	3
 1490              	.L74:
 1491 00c8 00000000 		.word	0
 1492 00cc 0088B340 		.word	1085507584
 1493 00d0 0000F0BF 		.word	-1074790400
 1494 00d4 0000F03F 		.word	1072693248
 1495              		.cfi_endproc
 1496              	.LFE70:
 1497              		.size	Drive_Right_Motor, .-Drive_Right_Motor
 1498              		.section	.text.angle_modulo,"ax",%progbits
 1499              		.align	2
 1500              		.global	angle_modulo
 1501              		.thumb
 1502              		.thumb_func
 1503              		.type	angle_modulo, %function
 1504              	angle_modulo:
 1505              	.LFB71:
 286:main.c        **** 
 287:main.c        **** long double angle_modulo(long double angle) {
 1506              		.loc 1 287 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 8
 1509              		@ frame_needed = 1, uses_anonymous_args = 0
 1510 0000 90B5     		push	{r4, r7, lr}
 1511              		.cfi_def_cfa_offset 12
 1512              		.cfi_offset 4, -12
 1513              		.cfi_offset 7, -8
 1514              		.cfi_offset 14, -4
 1515 0002 83B0     		sub	sp, sp, #12
 1516              		.cfi_def_cfa_offset 24
 1517 0004 00AF     		add	r7, sp, #0
 1518              		.cfi_def_cfa_register 7
 1519 0006 C7E90001 		strd	r0, [r7]
 288:main.c        ****     return angle - M_TWOPI * floor(angle / M_TWOPI);  
 1520              		.loc 1 288 0
 1521 000a 11A3     		adr	r3, .L78
 1522 000c D3E90023 		ldrd	r2, [r3]
 1523 0010 D7E90001 		ldrd	r0, [r7]
 1524 0014 FFF7FEFF 		bl	__aeabi_ddiv
 1525 0018 0346     		mov	r3, r0
 1526 001a 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 33


 1527 001c 1846     		mov	r0, r3
 1528 001e 2146     		mov	r1, r4
 1529 0020 FFF7FEFF 		bl	floor
 1530 0024 0AA3     		adr	r3, .L78
 1531 0026 D3E90023 		ldrd	r2, [r3]
 1532 002a FFF7FEFF 		bl	__aeabi_dmul
 1533 002e 0346     		mov	r3, r0
 1534 0030 0C46     		mov	r4, r1
 1535 0032 1A46     		mov	r2, r3
 1536 0034 2346     		mov	r3, r4
 1537 0036 D7E90001 		ldrd	r0, [r7]
 1538 003a FFF7FEFF 		bl	__aeabi_dsub
 1539 003e 0346     		mov	r3, r0
 1540 0040 0C46     		mov	r4, r1
 289:main.c        **** }
 1541              		.loc 1 289 0
 1542 0042 1846     		mov	r0, r3
 1543 0044 2146     		mov	r1, r4
 1544 0046 0C37     		adds	r7, r7, #12
 1545              		.cfi_def_cfa_offset 12
 1546 0048 BD46     		mov	sp, r7
 1547              		.cfi_def_cfa_register 13
 1548              		@ sp needed
 1549 004a 90BD     		pop	{r4, r7, pc}
 1550              	.L79:
 1551 004c AFF30080 		.align	3
 1552              	.L78:
 1553 0050 182D4454 		.word	1413754136
 1554 0054 FB211940 		.word	1075388923
 1555              		.cfi_endproc
 1556              	.LFE71:
 1557              		.size	angle_modulo, .-angle_modulo
 1558              		.text
 1559              	.Letext0:
 1560              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1561              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1562              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1563              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 1564              		.section	.debug_info,"",%progbits
 1565              	.Ldebug_info0:
 1566 0000 6E040000 		.4byte	0x46e
 1567 0004 0400     		.2byte	0x4
 1568 0006 00000000 		.4byte	.Ldebug_abbrev0
 1569 000a 04       		.byte	0x4
 1570 000b 01       		.uleb128 0x1
 1571 000c 57000000 		.4byte	.LASF63
 1572 0010 0C       		.byte	0xc
 1573 0011 FE020000 		.4byte	.LASF64
 1574 0015 9A010000 		.4byte	.LASF65
 1575 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1576 001d 00000000 		.4byte	0
 1577 0021 00000000 		.4byte	.Ldebug_line0
 1578 0025 02       		.uleb128 0x2
 1579 0026 01       		.byte	0x1
 1580 0027 06       		.byte	0x6
 1581 0028 3E020000 		.4byte	.LASF0
 1582 002c 03       		.uleb128 0x3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 34


 1583 002d 00020000 		.4byte	.LASF3
 1584 0031 02       		.byte	0x2
 1585 0032 1D       		.byte	0x1d
 1586 0033 37000000 		.4byte	0x37
 1587 0037 02       		.uleb128 0x2
 1588 0038 01       		.byte	0x1
 1589 0039 08       		.byte	0x8
 1590 003a 1C020000 		.4byte	.LASF1
 1591 003e 02       		.uleb128 0x2
 1592 003f 02       		.byte	0x2
 1593 0040 05       		.byte	0x5
 1594 0041 2B000000 		.4byte	.LASF2
 1595 0045 03       		.uleb128 0x3
 1596 0046 E5000000 		.4byte	.LASF4
 1597 004a 02       		.byte	0x2
 1598 004b 2B       		.byte	0x2b
 1599 004c 50000000 		.4byte	0x50
 1600 0050 02       		.uleb128 0x2
 1601 0051 02       		.byte	0x2
 1602 0052 07       		.byte	0x7
 1603 0053 AE020000 		.4byte	.LASF5
 1604 0057 03       		.uleb128 0x3
 1605 0058 60030000 		.4byte	.LASF6
 1606 005c 02       		.byte	0x2
 1607 005d 3F       		.byte	0x3f
 1608 005e 62000000 		.4byte	0x62
 1609 0062 02       		.uleb128 0x2
 1610 0063 04       		.byte	0x4
 1611 0064 05       		.byte	0x5
 1612 0065 DF010000 		.4byte	.LASF7
 1613 0069 02       		.uleb128 0x2
 1614 006a 04       		.byte	0x4
 1615 006b 07       		.byte	0x7
 1616 006c 80020000 		.4byte	.LASF8
 1617 0070 02       		.uleb128 0x2
 1618 0071 08       		.byte	0x8
 1619 0072 05       		.byte	0x5
 1620 0073 67010000 		.4byte	.LASF9
 1621 0077 02       		.uleb128 0x2
 1622 0078 08       		.byte	0x8
 1623 0079 07       		.byte	0x7
 1624 007a 52020000 		.4byte	.LASF10
 1625 007e 04       		.uleb128 0x4
 1626 007f 04       		.byte	0x4
 1627 0080 05       		.byte	0x5
 1628 0081 696E7400 		.ascii	"int\000"
 1629 0085 02       		.uleb128 0x2
 1630 0086 04       		.byte	0x4
 1631 0087 07       		.byte	0x7
 1632 0088 69020000 		.4byte	.LASF11
 1633 008c 03       		.uleb128 0x3
 1634 008d 47010000 		.4byte	.LASF12
 1635 0091 03       		.byte	0x3
 1636 0092 18       		.byte	0x18
 1637 0093 2C000000 		.4byte	0x2c
 1638 0097 03       		.uleb128 0x3
 1639 0098 F5020000 		.4byte	.LASF13
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 35


 1640 009c 03       		.byte	0x3
 1641 009d 24       		.byte	0x24
 1642 009e 45000000 		.4byte	0x45
 1643 00a2 03       		.uleb128 0x3
 1644 00a3 4A020000 		.4byte	.LASF14
 1645 00a7 03       		.byte	0x3
 1646 00a8 2C       		.byte	0x2c
 1647 00a9 57000000 		.4byte	0x57
 1648 00ad 05       		.uleb128 0x5
 1649 00ae 28030000 		.4byte	.LASF15
 1650 00b2 04       		.byte	0x4
 1651 00b3 ED01     		.2byte	0x1ed
 1652 00b5 62000000 		.4byte	0x62
 1653 00b9 02       		.uleb128 0x2
 1654 00ba 04       		.byte	0x4
 1655 00bb 04       		.byte	0x4
 1656 00bc 56010000 		.4byte	.LASF16
 1657 00c0 02       		.uleb128 0x2
 1658 00c1 08       		.byte	0x8
 1659 00c2 04       		.byte	0x4
 1660 00c3 2E030000 		.4byte	.LASF17
 1661 00c7 02       		.uleb128 0x2
 1662 00c8 01       		.byte	0x1
 1663 00c9 08       		.byte	0x8
 1664 00ca C1020000 		.4byte	.LASF18
 1665 00ce 02       		.uleb128 0x2
 1666 00cf 08       		.byte	0x8
 1667 00d0 04       		.byte	0x4
 1668 00d1 0A020000 		.4byte	.LASF19
 1669 00d5 02       		.uleb128 0x2
 1670 00d6 04       		.byte	0x4
 1671 00d7 07       		.byte	0x7
 1672 00d8 48000000 		.4byte	.LASF20
 1673 00dc 06       		.uleb128 0x6
 1674 00dd 16020000 		.4byte	.LASF27
 1675 00e1 48       		.byte	0x48
 1676 00e2 01       		.byte	0x1
 1677 00e3 14       		.byte	0x14
 1678 00e4 51010000 		.4byte	0x151
 1679 00e8 07       		.uleb128 0x7
 1680 00e9 55030000 		.4byte	.LASF21
 1681 00ed 01       		.byte	0x1
 1682 00ee 15       		.byte	0x15
 1683 00ef CE000000 		.4byte	0xce
 1684 00f3 00       		.byte	0
 1685 00f4 07       		.uleb128 0x7
 1686 00f5 6A030000 		.4byte	.LASF22
 1687 00f9 01       		.byte	0x1
 1688 00fa 16       		.byte	0x16
 1689 00fb CE000000 		.4byte	0xce
 1690 00ff 08       		.byte	0x8
 1691 0100 08       		.uleb128 0x8
 1692 0101 7700     		.ascii	"w\000"
 1693 0103 01       		.byte	0x1
 1694 0104 17       		.byte	0x17
 1695 0105 CE000000 		.4byte	0xce
 1696 0109 10       		.byte	0x10
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 36


 1697 010a 07       		.uleb128 0x7
 1698 010b 9E030000 		.4byte	.LASF23
 1699 010f 01       		.byte	0x1
 1700 0110 18       		.byte	0x18
 1701 0111 CE000000 		.4byte	0xce
 1702 0115 18       		.byte	0x18
 1703 0116 07       		.uleb128 0x7
 1704 0117 34020000 		.4byte	.LASF24
 1705 011b 01       		.byte	0x1
 1706 011c 19       		.byte	0x19
 1707 011d CE000000 		.4byte	0xce
 1708 0121 20       		.byte	0x20
 1709 0122 08       		.uleb128 0x8
 1710 0123 4B6900   		.ascii	"Ki\000"
 1711 0126 01       		.byte	0x1
 1712 0127 1A       		.byte	0x1a
 1713 0128 CE000000 		.4byte	0xce
 1714 012c 28       		.byte	0x28
 1715 012d 08       		.uleb128 0x8
 1716 012e 4B7000   		.ascii	"Kp\000"
 1717 0131 01       		.byte	0x1
 1718 0132 1B       		.byte	0x1b
 1719 0133 CE000000 		.4byte	0xce
 1720 0137 30       		.byte	0x30
 1721 0138 07       		.uleb128 0x7
 1722 0139 8D010000 		.4byte	.LASF25
 1723 013d 01       		.byte	0x1
 1724 013e 1C       		.byte	0x1c
 1725 013f CE000000 		.4byte	0xce
 1726 0143 38       		.byte	0x38
 1727 0144 07       		.uleb128 0x7
 1728 0145 8E030000 		.4byte	.LASF26
 1729 0149 01       		.byte	0x1
 1730 014a 1D       		.byte	0x1d
 1731 014b AD000000 		.4byte	0xad
 1732 014f 40       		.byte	0x40
 1733 0150 00       		.byte	0
 1734 0151 06       		.uleb128 0x6
 1735 0152 51000000 		.4byte	.LASF28
 1736 0156 70       		.byte	0x70
 1737 0157 01       		.byte	0x1
 1738 0158 20       		.byte	0x20
 1739 0159 FC010000 		.4byte	0x1fc
 1740 015d 07       		.uleb128 0x7
 1741 015e 74030000 		.4byte	.LASF29
 1742 0162 01       		.byte	0x1
 1743 0163 21       		.byte	0x21
 1744 0164 CE000000 		.4byte	0xce
 1745 0168 00       		.byte	0
 1746 0169 08       		.uleb128 0x8
 1747 016a 7800     		.ascii	"x\000"
 1748 016c 01       		.byte	0x1
 1749 016d 22       		.byte	0x22
 1750 016e CE000000 		.4byte	0xce
 1751 0172 08       		.byte	0x8
 1752 0173 08       		.uleb128 0x8
 1753 0174 7900     		.ascii	"y\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 37


 1754 0176 01       		.byte	0x1
 1755 0177 23       		.byte	0x23
 1756 0178 CE000000 		.4byte	0xce
 1757 017c 10       		.byte	0x10
 1758 017d 07       		.uleb128 0x7
 1759 017e 00000000 		.4byte	.LASF30
 1760 0182 01       		.byte	0x1
 1761 0183 24       		.byte	0x24
 1762 0184 CE000000 		.4byte	0xce
 1763 0188 18       		.byte	0x18
 1764 0189 08       		.uleb128 0x8
 1765 018a 5600     		.ascii	"V\000"
 1766 018c 01       		.byte	0x1
 1767 018d 26       		.byte	0x26
 1768 018e CE000000 		.4byte	0xce
 1769 0192 20       		.byte	0x20
 1770 0193 08       		.uleb128 0x8
 1771 0194 7700     		.ascii	"w\000"
 1772 0196 01       		.byte	0x1
 1773 0197 27       		.byte	0x27
 1774 0198 CE000000 		.4byte	0xce
 1775 019c 28       		.byte	0x28
 1776 019d 07       		.uleb128 0x7
 1777 019e E8010000 		.4byte	.LASF31
 1778 01a2 01       		.byte	0x1
 1779 01a3 29       		.byte	0x29
 1780 01a4 CE000000 		.4byte	0xce
 1781 01a8 30       		.byte	0x30
 1782 01a9 07       		.uleb128 0x7
 1783 01aa 18000000 		.4byte	.LASF32
 1784 01ae 01       		.byte	0x1
 1785 01af 2A       		.byte	0x2a
 1786 01b0 CE000000 		.4byte	0xce
 1787 01b4 38       		.byte	0x38
 1788 01b5 08       		.uleb128 0x8
 1789 01b6 4B6900   		.ascii	"Ki\000"
 1790 01b9 01       		.byte	0x1
 1791 01ba 2C       		.byte	0x2c
 1792 01bb CE000000 		.4byte	0xce
 1793 01bf 40       		.byte	0x40
 1794 01c0 08       		.uleb128 0x8
 1795 01c1 4B7000   		.ascii	"Kp\000"
 1796 01c4 01       		.byte	0x1
 1797 01c5 2D       		.byte	0x2d
 1798 01c6 CE000000 		.4byte	0xce
 1799 01ca 48       		.byte	0x48
 1800 01cb 07       		.uleb128 0x7
 1801 01cc 6A030000 		.4byte	.LASF22
 1802 01d0 01       		.byte	0x1
 1803 01d1 2E       		.byte	0x2e
 1804 01d2 CE000000 		.4byte	0xce
 1805 01d6 50       		.byte	0x50
 1806 01d7 07       		.uleb128 0x7
 1807 01d8 4F010000 		.4byte	.LASF33
 1808 01dc 01       		.byte	0x1
 1809 01dd 30       		.byte	0x30
 1810 01de CE000000 		.4byte	0xce
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 38


 1811 01e2 58       		.byte	0x58
 1812 01e3 07       		.uleb128 0x7
 1813 01e4 0B000000 		.4byte	.LASF34
 1814 01e8 01       		.byte	0x1
 1815 01e9 31       		.byte	0x31
 1816 01ea CE000000 		.4byte	0xce
 1817 01ee 60       		.byte	0x60
 1818 01ef 07       		.uleb128 0x7
 1819 01f0 7A030000 		.4byte	.LASF35
 1820 01f4 01       		.byte	0x1
 1821 01f5 32       		.byte	0x32
 1822 01f6 CE000000 		.4byte	0xce
 1823 01fa 68       		.byte	0x68
 1824 01fb 00       		.byte	0
 1825 01fc 09       		.uleb128 0x9
 1826 01fd 43030000 		.4byte	.LASF66
 1827 0201 01       		.byte	0x1
 1828 0202 49       		.byte	0x49
 1829 0203 00000000 		.4byte	.LFB64
 1830 0207 18000000 		.4byte	.LFE64-.LFB64
 1831 020b 01       		.uleb128 0x1
 1832 020c 9C       		.byte	0x9c
 1833 020d 0A       		.uleb128 0xa
 1834 020e 75010000 		.4byte	.LASF39
 1835 0212 01       		.byte	0x1
 1836 0213 4D       		.byte	0x4d
 1837 0214 00000000 		.4byte	.LFB65
 1838 0218 A0040000 		.4byte	.LFE65-.LFB65
 1839 021c 01       		.uleb128 0x1
 1840 021d 9C       		.byte	0x9c
 1841 021e 5B020000 		.4byte	0x25b
 1842 0222 0B       		.uleb128 0xb
 1843 0223 6E657700 		.ascii	"new\000"
 1844 0227 01       		.byte	0x1
 1845 0228 4E       		.byte	0x4e
 1846 0229 AD000000 		.4byte	0xad
 1847 022d 02       		.uleb128 0x2
 1848 022e 91       		.byte	0x91
 1849 022f 4C       		.sleb128 -52
 1850 0230 0C       		.uleb128 0xc
 1851 0231 26000000 		.4byte	.LASF36
 1852 0235 01       		.byte	0x1
 1853 0236 4F       		.byte	0x4f
 1854 0237 AD000000 		.4byte	0xad
 1855 023b 02       		.uleb128 0x2
 1856 023c 91       		.byte	0x91
 1857 023d 48       		.sleb128 -56
 1858 023e 0C       		.uleb128 0xc
 1859 023f 98030000 		.4byte	.LASF37
 1860 0243 01       		.byte	0x1
 1861 0244 6A       		.byte	0x6a
 1862 0245 CE000000 		.4byte	0xce
 1863 0249 02       		.uleb128 0x2
 1864 024a 91       		.byte	0x91
 1865 024b 50       		.sleb128 -48
 1866 024c 0C       		.uleb128 0xc
 1867 024d 76020000 		.4byte	.LASF38
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 39


 1868 0251 01       		.byte	0x1
 1869 0252 76       		.byte	0x76
 1870 0253 CE000000 		.4byte	0xce
 1871 0257 02       		.uleb128 0x2
 1872 0258 91       		.byte	0x91
 1873 0259 40       		.sleb128 -64
 1874 025a 00       		.byte	0
 1875 025b 0A       		.uleb128 0xa
 1876 025c F0000000 		.4byte	.LASF40
 1877 0260 01       		.byte	0x1
 1878 0261 7C       		.byte	0x7c
 1879 0262 00000000 		.4byte	.LFB66
 1880 0266 54010000 		.4byte	.LFE66-.LFB66
 1881 026a 01       		.uleb128 0x1
 1882 026b 9C       		.byte	0x9c
 1883 026c 7F020000 		.4byte	0x27f
 1884 0270 0C       		.uleb128 0xc
 1885 0271 98030000 		.4byte	.LASF37
 1886 0275 01       		.byte	0x1
 1887 0276 7D       		.byte	0x7d
 1888 0277 CE000000 		.4byte	0xce
 1889 027b 02       		.uleb128 0x2
 1890 027c 91       		.byte	0x91
 1891 027d 60       		.sleb128 -32
 1892 027e 00       		.byte	0
 1893 027f 0A       		.uleb128 0xa
 1894 0280 D9020000 		.4byte	.LASF41
 1895 0284 01       		.byte	0x1
 1896 0285 88       		.byte	0x88
 1897 0286 00000000 		.4byte	.LFB67
 1898 028a 74000000 		.4byte	.LFE67-.LFB67
 1899 028e 01       		.uleb128 0x1
 1900 028f 9C       		.byte	0x9c
 1901 0290 A3020000 		.4byte	0x2a3
 1902 0294 0C       		.uleb128 0xc
 1903 0295 88030000 		.4byte	.LASF42
 1904 0299 01       		.byte	0x1
 1905 029a 89       		.byte	0x89
 1906 029b CE000000 		.4byte	0xce
 1907 029f 02       		.uleb128 0x2
 1908 02a0 91       		.byte	0x91
 1909 02a1 68       		.sleb128 -24
 1910 02a2 00       		.byte	0
 1911 02a3 0D       		.uleb128 0xd
 1912 02a4 D4020000 		.4byte	.LASF48
 1913 02a8 01       		.byte	0x1
 1914 02a9 94       		.byte	0x94
 1915 02aa 7E000000 		.4byte	0x7e
 1916 02ae 00000000 		.4byte	.LFB68
 1917 02b2 9C030000 		.4byte	.LFE68-.LFB68
 1918 02b6 01       		.uleb128 0x1
 1919 02b7 9C       		.byte	0x9c
 1920 02b8 0B030000 		.4byte	0x30b
 1921 02bc 0C       		.uleb128 0xc
 1922 02bd C4030000 		.4byte	.LASF43
 1923 02c1 01       		.byte	0x1
 1924 02c2 96       		.byte	0x96
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 40


 1925 02c3 CE000000 		.4byte	0xce
 1926 02c7 02       		.uleb128 0x2
 1927 02c8 91       		.byte	0x91
 1928 02c9 68       		.sleb128 -24
 1929 02ca 0E       		.uleb128 0xe
 1930 02cb 92010000 		.4byte	.LBB2
 1931 02cf EC010000 		.4byte	.LBE2-.LBB2
 1932 02d3 0B       		.uleb128 0xb
 1933 02d4 647900   		.ascii	"dy\000"
 1934 02d7 01       		.byte	0x1
 1935 02d8 C6       		.byte	0xc6
 1936 02d9 CE000000 		.4byte	0xce
 1937 02dd 02       		.uleb128 0x2
 1938 02de 91       		.byte	0x91
 1939 02df 60       		.sleb128 -32
 1940 02e0 0B       		.uleb128 0xb
 1941 02e1 647800   		.ascii	"dx\000"
 1942 02e4 01       		.byte	0x1
 1943 02e5 C7       		.byte	0xc7
 1944 02e6 CE000000 		.4byte	0xce
 1945 02ea 02       		.uleb128 0x2
 1946 02eb 91       		.byte	0x91
 1947 02ec 58       		.sleb128 -40
 1948 02ed 0C       		.uleb128 0xc
 1949 02ee 3A010000 		.4byte	.LASF44
 1950 02f2 01       		.byte	0x1
 1951 02f3 C8       		.byte	0xc8
 1952 02f4 CE000000 		.4byte	0xce
 1953 02f8 02       		.uleb128 0x2
 1954 02f9 91       		.byte	0x91
 1955 02fa 50       		.sleb128 -48
 1956 02fb 0C       		.uleb128 0xc
 1957 02fc 35030000 		.4byte	.LASF45
 1958 0300 01       		.byte	0x1
 1959 0301 C9       		.byte	0xc9
 1960 0302 CE000000 		.4byte	0xce
 1961 0306 02       		.uleb128 0x2
 1962 0307 91       		.byte	0x91
 1963 0308 48       		.sleb128 -56
 1964 0309 00       		.byte	0
 1965 030a 00       		.byte	0
 1966 030b 0A       		.uleb128 0xa
 1967 030c 05010000 		.4byte	.LASF46
 1968 0310 01       		.byte	0x1
 1969 0311 FD       		.byte	0xfd
 1970 0312 00000000 		.4byte	.LFB69
 1971 0316 D8000000 		.4byte	.LFE69-.LFB69
 1972 031a 01       		.uleb128 0x1
 1973 031b 9C       		.byte	0x9c
 1974 031c 2F030000 		.4byte	0x32f
 1975 0320 0F       		.uleb128 0xf
 1976 0321 55030000 		.4byte	.LASF21
 1977 0325 01       		.byte	0x1
 1978 0326 FD       		.byte	0xfd
 1979 0327 CE000000 		.4byte	0xce
 1980 032b 02       		.uleb128 0x2
 1981 032c 91       		.byte	0x91
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 41


 1982 032d 68       		.sleb128 -24
 1983 032e 00       		.byte	0
 1984 032f 10       		.uleb128 0x10
 1985 0330 9C020000 		.4byte	.LASF47
 1986 0334 01       		.byte	0x1
 1987 0335 0E01     		.2byte	0x10e
 1988 0337 00000000 		.4byte	.LFB70
 1989 033b D8000000 		.4byte	.LFE70-.LFB70
 1990 033f 01       		.uleb128 0x1
 1991 0340 9C       		.byte	0x9c
 1992 0341 55030000 		.4byte	0x355
 1993 0345 11       		.uleb128 0x11
 1994 0346 55030000 		.4byte	.LASF21
 1995 034a 01       		.byte	0x1
 1996 034b 0E01     		.2byte	0x10e
 1997 034d CE000000 		.4byte	0xce
 1998 0351 02       		.uleb128 0x2
 1999 0352 91       		.byte	0x91
 2000 0353 68       		.sleb128 -24
 2001 0354 00       		.byte	0
 2002 0355 12       		.uleb128 0x12
 2003 0356 22010000 		.4byte	.LASF49
 2004 035a 01       		.byte	0x1
 2005 035b 1F01     		.2byte	0x11f
 2006 035d CE000000 		.4byte	0xce
 2007 0361 00000000 		.4byte	.LFB71
 2008 0365 58000000 		.4byte	.LFE71-.LFB71
 2009 0369 01       		.uleb128 0x1
 2010 036a 9C       		.byte	0x9c
 2011 036b 7F030000 		.4byte	0x37f
 2012 036f 11       		.uleb128 0x11
 2013 0370 88030000 		.4byte	.LASF42
 2014 0374 01       		.byte	0x1
 2015 0375 1F01     		.2byte	0x11f
 2016 0377 CE000000 		.4byte	0xce
 2017 037b 02       		.uleb128 0x2
 2018 037c 91       		.byte	0x91
 2019 037d 68       		.sleb128 -24
 2020 037e 00       		.byte	0
 2021 037f 13       		.uleb128 0x13
 2022 0380 A8030000 		.4byte	.LASF50
 2023 0384 05       		.byte	0x5
 2024 0385 1207     		.2byte	0x712
 2025 0387 8B030000 		.4byte	0x38b
 2026 038b 14       		.uleb128 0x14
 2027 038c A2000000 		.4byte	0xa2
 2028 0390 15       		.uleb128 0x15
 2029 0391 B5030000 		.4byte	.LASF51
 2030 0395 01       		.byte	0x1
 2031 0396 35       		.byte	0x35
 2032 0397 A1030000 		.4byte	0x3a1
 2033 039b 05       		.uleb128 0x5
 2034 039c 03       		.byte	0x3
 2035 039d 00000000 		.4byte	PULSES_PER_REV
 2036 03a1 16       		.uleb128 0x16
 2037 03a2 CE000000 		.4byte	0xce
 2038 03a6 15       		.uleb128 0x15
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 42


 2039 03a7 35000000 		.4byte	.LASF52
 2040 03ab 01       		.byte	0x1
 2041 03ac 36       		.byte	0x36
 2042 03ad A1030000 		.4byte	0x3a1
 2043 03b1 05       		.uleb128 0x5
 2044 03b2 03       		.byte	0x3
 2045 03b3 00000000 		.4byte	POSE_UPDATE_PERIOD
 2046 03b7 15       		.uleb128 0x15
 2047 03b8 2A020000 		.4byte	.LASF53
 2048 03bc 01       		.byte	0x1
 2049 03bd 3C       		.byte	0x3c
 2050 03be 8C000000 		.4byte	0x8c
 2051 03c2 05       		.uleb128 0x5
 2052 03c3 03       		.byte	0x3
 2053 03c4 00000000 		.4byte	echo_flag
 2054 03c8 15       		.uleb128 0x15
 2055 03c9 92020000 		.4byte	.LASF54
 2056 03cd 01       		.byte	0x1
 2057 03ce 3D       		.byte	0x3d
 2058 03cf 97000000 		.4byte	0x97
 2059 03d3 05       		.uleb128 0x5
 2060 03d4 03       		.byte	0x3
 2061 03d5 00000000 		.4byte	max_count
 2062 03d9 15       		.uleb128 0x15
 2063 03da F2010000 		.4byte	.LASF55
 2064 03de 01       		.byte	0x1
 2065 03df 3E       		.byte	0x3e
 2066 03e0 97000000 		.4byte	0x97
 2067 03e4 05       		.uleb128 0x5
 2068 03e5 03       		.byte	0x3
 2069 03e6 00000000 		.4byte	echo_distance
 2070 03ea 15       		.uleb128 0x15
 2071 03eb 5C010000 		.4byte	.LASF56
 2072 03ef 01       		.byte	0x1
 2073 03f0 3F       		.byte	0x3f
 2074 03f1 8C000000 		.4byte	0x8c
 2075 03f5 05       		.uleb128 0x5
 2076 03f6 03       		.byte	0x3
 2077 03f7 00000000 		.4byte	mux_select
 2078 03fb 15       		.uleb128 0x15
 2079 03fc 17030000 		.4byte	.LASF57
 2080 0400 01       		.byte	0x1
 2081 0401 40       		.byte	0x40
 2082 0402 AD000000 		.4byte	0xad
 2083 0406 05       		.uleb128 0x5
 2084 0407 03       		.byte	0x3
 2085 0408 00000000 		.4byte	left_wheel_count
 2086 040c 15       		.uleb128 0x15
 2087 040d 05030000 		.4byte	.LASF58
 2088 0411 01       		.byte	0x1
 2089 0412 41       		.byte	0x41
 2090 0413 AD000000 		.4byte	0xad
 2091 0417 05       		.uleb128 0x5
 2092 0418 03       		.byte	0x3
 2093 0419 00000000 		.4byte	right_wheel_count
 2094 041d 17       		.uleb128 0x17
 2095 041e C7000000 		.4byte	0xc7
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 43


 2096 0422 2D040000 		.4byte	0x42d
 2097 0426 18       		.uleb128 0x18
 2098 0427 D5000000 		.4byte	0xd5
 2099 042b 95       		.byte	0x95
 2100 042c 00       		.byte	0
 2101 042d 15       		.uleb128 0x15
 2102 042e C6020000 		.4byte	.LASF59
 2103 0432 01       		.byte	0x1
 2104 0433 42       		.byte	0x42
 2105 0434 1D040000 		.4byte	0x41d
 2106 0438 05       		.uleb128 0x5
 2107 0439 03       		.byte	0x3
 2108 043a 00000000 		.4byte	serial_output
 2109 043e 15       		.uleb128 0x15
 2110 043f 2F010000 		.4byte	.LASF60
 2111 0443 01       		.byte	0x1
 2112 0444 44       		.byte	0x44
 2113 0445 DC000000 		.4byte	0xdc
 2114 0449 05       		.uleb128 0x5
 2115 044a 03       		.byte	0x3
 2116 044b 00000000 		.4byte	left_motor
 2117 044f 15       		.uleb128 0x15
 2118 0450 16010000 		.4byte	.LASF61
 2119 0454 01       		.byte	0x1
 2120 0455 45       		.byte	0x45
 2121 0456 DC000000 		.4byte	0xdc
 2122 045a 05       		.uleb128 0x5
 2123 045b 03       		.byte	0x3
 2124 045c 00000000 		.4byte	right_motor
 2125 0460 15       		.uleb128 0x15
 2126 0461 12000000 		.4byte	.LASF62
 2127 0465 01       		.byte	0x1
 2128 0466 46       		.byte	0x46
 2129 0467 51010000 		.4byte	0x151
 2130 046b 05       		.uleb128 0x5
 2131 046c 03       		.byte	0x3
 2132 046d 00000000 		.4byte	robot
 2133 0471 00       		.byte	0
 2134              		.section	.debug_abbrev,"",%progbits
 2135              	.Ldebug_abbrev0:
 2136 0000 01       		.uleb128 0x1
 2137 0001 11       		.uleb128 0x11
 2138 0002 01       		.byte	0x1
 2139 0003 25       		.uleb128 0x25
 2140 0004 0E       		.uleb128 0xe
 2141 0005 13       		.uleb128 0x13
 2142 0006 0B       		.uleb128 0xb
 2143 0007 03       		.uleb128 0x3
 2144 0008 0E       		.uleb128 0xe
 2145 0009 1B       		.uleb128 0x1b
 2146 000a 0E       		.uleb128 0xe
 2147 000b 55       		.uleb128 0x55
 2148 000c 17       		.uleb128 0x17
 2149 000d 11       		.uleb128 0x11
 2150 000e 01       		.uleb128 0x1
 2151 000f 10       		.uleb128 0x10
 2152 0010 17       		.uleb128 0x17
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 44


 2153 0011 00       		.byte	0
 2154 0012 00       		.byte	0
 2155 0013 02       		.uleb128 0x2
 2156 0014 24       		.uleb128 0x24
 2157 0015 00       		.byte	0
 2158 0016 0B       		.uleb128 0xb
 2159 0017 0B       		.uleb128 0xb
 2160 0018 3E       		.uleb128 0x3e
 2161 0019 0B       		.uleb128 0xb
 2162 001a 03       		.uleb128 0x3
 2163 001b 0E       		.uleb128 0xe
 2164 001c 00       		.byte	0
 2165 001d 00       		.byte	0
 2166 001e 03       		.uleb128 0x3
 2167 001f 16       		.uleb128 0x16
 2168 0020 00       		.byte	0
 2169 0021 03       		.uleb128 0x3
 2170 0022 0E       		.uleb128 0xe
 2171 0023 3A       		.uleb128 0x3a
 2172 0024 0B       		.uleb128 0xb
 2173 0025 3B       		.uleb128 0x3b
 2174 0026 0B       		.uleb128 0xb
 2175 0027 49       		.uleb128 0x49
 2176 0028 13       		.uleb128 0x13
 2177 0029 00       		.byte	0
 2178 002a 00       		.byte	0
 2179 002b 04       		.uleb128 0x4
 2180 002c 24       		.uleb128 0x24
 2181 002d 00       		.byte	0
 2182 002e 0B       		.uleb128 0xb
 2183 002f 0B       		.uleb128 0xb
 2184 0030 3E       		.uleb128 0x3e
 2185 0031 0B       		.uleb128 0xb
 2186 0032 03       		.uleb128 0x3
 2187 0033 08       		.uleb128 0x8
 2188 0034 00       		.byte	0
 2189 0035 00       		.byte	0
 2190 0036 05       		.uleb128 0x5
 2191 0037 16       		.uleb128 0x16
 2192 0038 00       		.byte	0
 2193 0039 03       		.uleb128 0x3
 2194 003a 0E       		.uleb128 0xe
 2195 003b 3A       		.uleb128 0x3a
 2196 003c 0B       		.uleb128 0xb
 2197 003d 3B       		.uleb128 0x3b
 2198 003e 05       		.uleb128 0x5
 2199 003f 49       		.uleb128 0x49
 2200 0040 13       		.uleb128 0x13
 2201 0041 00       		.byte	0
 2202 0042 00       		.byte	0
 2203 0043 06       		.uleb128 0x6
 2204 0044 13       		.uleb128 0x13
 2205 0045 01       		.byte	0x1
 2206 0046 03       		.uleb128 0x3
 2207 0047 0E       		.uleb128 0xe
 2208 0048 0B       		.uleb128 0xb
 2209 0049 0B       		.uleb128 0xb
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 45


 2210 004a 3A       		.uleb128 0x3a
 2211 004b 0B       		.uleb128 0xb
 2212 004c 3B       		.uleb128 0x3b
 2213 004d 0B       		.uleb128 0xb
 2214 004e 01       		.uleb128 0x1
 2215 004f 13       		.uleb128 0x13
 2216 0050 00       		.byte	0
 2217 0051 00       		.byte	0
 2218 0052 07       		.uleb128 0x7
 2219 0053 0D       		.uleb128 0xd
 2220 0054 00       		.byte	0
 2221 0055 03       		.uleb128 0x3
 2222 0056 0E       		.uleb128 0xe
 2223 0057 3A       		.uleb128 0x3a
 2224 0058 0B       		.uleb128 0xb
 2225 0059 3B       		.uleb128 0x3b
 2226 005a 0B       		.uleb128 0xb
 2227 005b 49       		.uleb128 0x49
 2228 005c 13       		.uleb128 0x13
 2229 005d 38       		.uleb128 0x38
 2230 005e 0B       		.uleb128 0xb
 2231 005f 00       		.byte	0
 2232 0060 00       		.byte	0
 2233 0061 08       		.uleb128 0x8
 2234 0062 0D       		.uleb128 0xd
 2235 0063 00       		.byte	0
 2236 0064 03       		.uleb128 0x3
 2237 0065 08       		.uleb128 0x8
 2238 0066 3A       		.uleb128 0x3a
 2239 0067 0B       		.uleb128 0xb
 2240 0068 3B       		.uleb128 0x3b
 2241 0069 0B       		.uleb128 0xb
 2242 006a 49       		.uleb128 0x49
 2243 006b 13       		.uleb128 0x13
 2244 006c 38       		.uleb128 0x38
 2245 006d 0B       		.uleb128 0xb
 2246 006e 00       		.byte	0
 2247 006f 00       		.byte	0
 2248 0070 09       		.uleb128 0x9
 2249 0071 2E       		.uleb128 0x2e
 2250 0072 00       		.byte	0
 2251 0073 3F       		.uleb128 0x3f
 2252 0074 19       		.uleb128 0x19
 2253 0075 03       		.uleb128 0x3
 2254 0076 0E       		.uleb128 0xe
 2255 0077 3A       		.uleb128 0x3a
 2256 0078 0B       		.uleb128 0xb
 2257 0079 3B       		.uleb128 0x3b
 2258 007a 0B       		.uleb128 0xb
 2259 007b 27       		.uleb128 0x27
 2260 007c 19       		.uleb128 0x19
 2261 007d 11       		.uleb128 0x11
 2262 007e 01       		.uleb128 0x1
 2263 007f 12       		.uleb128 0x12
 2264 0080 06       		.uleb128 0x6
 2265 0081 40       		.uleb128 0x40
 2266 0082 18       		.uleb128 0x18
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 46


 2267 0083 9742     		.uleb128 0x2117
 2268 0085 19       		.uleb128 0x19
 2269 0086 00       		.byte	0
 2270 0087 00       		.byte	0
 2271 0088 0A       		.uleb128 0xa
 2272 0089 2E       		.uleb128 0x2e
 2273 008a 01       		.byte	0x1
 2274 008b 3F       		.uleb128 0x3f
 2275 008c 19       		.uleb128 0x19
 2276 008d 03       		.uleb128 0x3
 2277 008e 0E       		.uleb128 0xe
 2278 008f 3A       		.uleb128 0x3a
 2279 0090 0B       		.uleb128 0xb
 2280 0091 3B       		.uleb128 0x3b
 2281 0092 0B       		.uleb128 0xb
 2282 0093 27       		.uleb128 0x27
 2283 0094 19       		.uleb128 0x19
 2284 0095 11       		.uleb128 0x11
 2285 0096 01       		.uleb128 0x1
 2286 0097 12       		.uleb128 0x12
 2287 0098 06       		.uleb128 0x6
 2288 0099 40       		.uleb128 0x40
 2289 009a 18       		.uleb128 0x18
 2290 009b 9642     		.uleb128 0x2116
 2291 009d 19       		.uleb128 0x19
 2292 009e 01       		.uleb128 0x1
 2293 009f 13       		.uleb128 0x13
 2294 00a0 00       		.byte	0
 2295 00a1 00       		.byte	0
 2296 00a2 0B       		.uleb128 0xb
 2297 00a3 34       		.uleb128 0x34
 2298 00a4 00       		.byte	0
 2299 00a5 03       		.uleb128 0x3
 2300 00a6 08       		.uleb128 0x8
 2301 00a7 3A       		.uleb128 0x3a
 2302 00a8 0B       		.uleb128 0xb
 2303 00a9 3B       		.uleb128 0x3b
 2304 00aa 0B       		.uleb128 0xb
 2305 00ab 49       		.uleb128 0x49
 2306 00ac 13       		.uleb128 0x13
 2307 00ad 02       		.uleb128 0x2
 2308 00ae 18       		.uleb128 0x18
 2309 00af 00       		.byte	0
 2310 00b0 00       		.byte	0
 2311 00b1 0C       		.uleb128 0xc
 2312 00b2 34       		.uleb128 0x34
 2313 00b3 00       		.byte	0
 2314 00b4 03       		.uleb128 0x3
 2315 00b5 0E       		.uleb128 0xe
 2316 00b6 3A       		.uleb128 0x3a
 2317 00b7 0B       		.uleb128 0xb
 2318 00b8 3B       		.uleb128 0x3b
 2319 00b9 0B       		.uleb128 0xb
 2320 00ba 49       		.uleb128 0x49
 2321 00bb 13       		.uleb128 0x13
 2322 00bc 02       		.uleb128 0x2
 2323 00bd 18       		.uleb128 0x18
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 47


 2324 00be 00       		.byte	0
 2325 00bf 00       		.byte	0
 2326 00c0 0D       		.uleb128 0xd
 2327 00c1 2E       		.uleb128 0x2e
 2328 00c2 01       		.byte	0x1
 2329 00c3 3F       		.uleb128 0x3f
 2330 00c4 19       		.uleb128 0x19
 2331 00c5 03       		.uleb128 0x3
 2332 00c6 0E       		.uleb128 0xe
 2333 00c7 3A       		.uleb128 0x3a
 2334 00c8 0B       		.uleb128 0xb
 2335 00c9 3B       		.uleb128 0x3b
 2336 00ca 0B       		.uleb128 0xb
 2337 00cb 27       		.uleb128 0x27
 2338 00cc 19       		.uleb128 0x19
 2339 00cd 49       		.uleb128 0x49
 2340 00ce 13       		.uleb128 0x13
 2341 00cf 11       		.uleb128 0x11
 2342 00d0 01       		.uleb128 0x1
 2343 00d1 12       		.uleb128 0x12
 2344 00d2 06       		.uleb128 0x6
 2345 00d3 40       		.uleb128 0x40
 2346 00d4 18       		.uleb128 0x18
 2347 00d5 9642     		.uleb128 0x2116
 2348 00d7 19       		.uleb128 0x19
 2349 00d8 01       		.uleb128 0x1
 2350 00d9 13       		.uleb128 0x13
 2351 00da 00       		.byte	0
 2352 00db 00       		.byte	0
 2353 00dc 0E       		.uleb128 0xe
 2354 00dd 0B       		.uleb128 0xb
 2355 00de 01       		.byte	0x1
 2356 00df 11       		.uleb128 0x11
 2357 00e0 01       		.uleb128 0x1
 2358 00e1 12       		.uleb128 0x12
 2359 00e2 06       		.uleb128 0x6
 2360 00e3 00       		.byte	0
 2361 00e4 00       		.byte	0
 2362 00e5 0F       		.uleb128 0xf
 2363 00e6 05       		.uleb128 0x5
 2364 00e7 00       		.byte	0
 2365 00e8 03       		.uleb128 0x3
 2366 00e9 0E       		.uleb128 0xe
 2367 00ea 3A       		.uleb128 0x3a
 2368 00eb 0B       		.uleb128 0xb
 2369 00ec 3B       		.uleb128 0x3b
 2370 00ed 0B       		.uleb128 0xb
 2371 00ee 49       		.uleb128 0x49
 2372 00ef 13       		.uleb128 0x13
 2373 00f0 02       		.uleb128 0x2
 2374 00f1 18       		.uleb128 0x18
 2375 00f2 00       		.byte	0
 2376 00f3 00       		.byte	0
 2377 00f4 10       		.uleb128 0x10
 2378 00f5 2E       		.uleb128 0x2e
 2379 00f6 01       		.byte	0x1
 2380 00f7 3F       		.uleb128 0x3f
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 48


 2381 00f8 19       		.uleb128 0x19
 2382 00f9 03       		.uleb128 0x3
 2383 00fa 0E       		.uleb128 0xe
 2384 00fb 3A       		.uleb128 0x3a
 2385 00fc 0B       		.uleb128 0xb
 2386 00fd 3B       		.uleb128 0x3b
 2387 00fe 05       		.uleb128 0x5
 2388 00ff 27       		.uleb128 0x27
 2389 0100 19       		.uleb128 0x19
 2390 0101 11       		.uleb128 0x11
 2391 0102 01       		.uleb128 0x1
 2392 0103 12       		.uleb128 0x12
 2393 0104 06       		.uleb128 0x6
 2394 0105 40       		.uleb128 0x40
 2395 0106 18       		.uleb128 0x18
 2396 0107 9642     		.uleb128 0x2116
 2397 0109 19       		.uleb128 0x19
 2398 010a 01       		.uleb128 0x1
 2399 010b 13       		.uleb128 0x13
 2400 010c 00       		.byte	0
 2401 010d 00       		.byte	0
 2402 010e 11       		.uleb128 0x11
 2403 010f 05       		.uleb128 0x5
 2404 0110 00       		.byte	0
 2405 0111 03       		.uleb128 0x3
 2406 0112 0E       		.uleb128 0xe
 2407 0113 3A       		.uleb128 0x3a
 2408 0114 0B       		.uleb128 0xb
 2409 0115 3B       		.uleb128 0x3b
 2410 0116 05       		.uleb128 0x5
 2411 0117 49       		.uleb128 0x49
 2412 0118 13       		.uleb128 0x13
 2413 0119 02       		.uleb128 0x2
 2414 011a 18       		.uleb128 0x18
 2415 011b 00       		.byte	0
 2416 011c 00       		.byte	0
 2417 011d 12       		.uleb128 0x12
 2418 011e 2E       		.uleb128 0x2e
 2419 011f 01       		.byte	0x1
 2420 0120 3F       		.uleb128 0x3f
 2421 0121 19       		.uleb128 0x19
 2422 0122 03       		.uleb128 0x3
 2423 0123 0E       		.uleb128 0xe
 2424 0124 3A       		.uleb128 0x3a
 2425 0125 0B       		.uleb128 0xb
 2426 0126 3B       		.uleb128 0x3b
 2427 0127 05       		.uleb128 0x5
 2428 0128 27       		.uleb128 0x27
 2429 0129 19       		.uleb128 0x19
 2430 012a 49       		.uleb128 0x49
 2431 012b 13       		.uleb128 0x13
 2432 012c 11       		.uleb128 0x11
 2433 012d 01       		.uleb128 0x1
 2434 012e 12       		.uleb128 0x12
 2435 012f 06       		.uleb128 0x6
 2436 0130 40       		.uleb128 0x40
 2437 0131 18       		.uleb128 0x18
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 49


 2438 0132 9642     		.uleb128 0x2116
 2439 0134 19       		.uleb128 0x19
 2440 0135 01       		.uleb128 0x1
 2441 0136 13       		.uleb128 0x13
 2442 0137 00       		.byte	0
 2443 0138 00       		.byte	0
 2444 0139 13       		.uleb128 0x13
 2445 013a 34       		.uleb128 0x34
 2446 013b 00       		.byte	0
 2447 013c 03       		.uleb128 0x3
 2448 013d 0E       		.uleb128 0xe
 2449 013e 3A       		.uleb128 0x3a
 2450 013f 0B       		.uleb128 0xb
 2451 0140 3B       		.uleb128 0x3b
 2452 0141 05       		.uleb128 0x5
 2453 0142 49       		.uleb128 0x49
 2454 0143 13       		.uleb128 0x13
 2455 0144 3F       		.uleb128 0x3f
 2456 0145 19       		.uleb128 0x19
 2457 0146 3C       		.uleb128 0x3c
 2458 0147 19       		.uleb128 0x19
 2459 0148 00       		.byte	0
 2460 0149 00       		.byte	0
 2461 014a 14       		.uleb128 0x14
 2462 014b 35       		.uleb128 0x35
 2463 014c 00       		.byte	0
 2464 014d 49       		.uleb128 0x49
 2465 014e 13       		.uleb128 0x13
 2466 014f 00       		.byte	0
 2467 0150 00       		.byte	0
 2468 0151 15       		.uleb128 0x15
 2469 0152 34       		.uleb128 0x34
 2470 0153 00       		.byte	0
 2471 0154 03       		.uleb128 0x3
 2472 0155 0E       		.uleb128 0xe
 2473 0156 3A       		.uleb128 0x3a
 2474 0157 0B       		.uleb128 0xb
 2475 0158 3B       		.uleb128 0x3b
 2476 0159 0B       		.uleb128 0xb
 2477 015a 49       		.uleb128 0x49
 2478 015b 13       		.uleb128 0x13
 2479 015c 3F       		.uleb128 0x3f
 2480 015d 19       		.uleb128 0x19
 2481 015e 02       		.uleb128 0x2
 2482 015f 18       		.uleb128 0x18
 2483 0160 00       		.byte	0
 2484 0161 00       		.byte	0
 2485 0162 16       		.uleb128 0x16
 2486 0163 26       		.uleb128 0x26
 2487 0164 00       		.byte	0
 2488 0165 49       		.uleb128 0x49
 2489 0166 13       		.uleb128 0x13
 2490 0167 00       		.byte	0
 2491 0168 00       		.byte	0
 2492 0169 17       		.uleb128 0x17
 2493 016a 01       		.uleb128 0x1
 2494 016b 01       		.byte	0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 50


 2495 016c 49       		.uleb128 0x49
 2496 016d 13       		.uleb128 0x13
 2497 016e 01       		.uleb128 0x1
 2498 016f 13       		.uleb128 0x13
 2499 0170 00       		.byte	0
 2500 0171 00       		.byte	0
 2501 0172 18       		.uleb128 0x18
 2502 0173 21       		.uleb128 0x21
 2503 0174 00       		.byte	0
 2504 0175 49       		.uleb128 0x49
 2505 0176 13       		.uleb128 0x13
 2506 0177 2F       		.uleb128 0x2f
 2507 0178 0B       		.uleb128 0xb
 2508 0179 00       		.byte	0
 2509 017a 00       		.byte	0
 2510 017b 00       		.byte	0
 2511              		.section	.debug_aranges,"",%progbits
 2512 0000 54000000 		.4byte	0x54
 2513 0004 0200     		.2byte	0x2
 2514 0006 00000000 		.4byte	.Ldebug_info0
 2515 000a 04       		.byte	0x4
 2516 000b 00       		.byte	0
 2517 000c 0000     		.2byte	0
 2518 000e 0000     		.2byte	0
 2519 0010 00000000 		.4byte	.LFB64
 2520 0014 18000000 		.4byte	.LFE64-.LFB64
 2521 0018 00000000 		.4byte	.LFB65
 2522 001c A0040000 		.4byte	.LFE65-.LFB65
 2523 0020 00000000 		.4byte	.LFB66
 2524 0024 54010000 		.4byte	.LFE66-.LFB66
 2525 0028 00000000 		.4byte	.LFB67
 2526 002c 74000000 		.4byte	.LFE67-.LFB67
 2527 0030 00000000 		.4byte	.LFB68
 2528 0034 9C030000 		.4byte	.LFE68-.LFB68
 2529 0038 00000000 		.4byte	.LFB69
 2530 003c D8000000 		.4byte	.LFE69-.LFB69
 2531 0040 00000000 		.4byte	.LFB70
 2532 0044 D8000000 		.4byte	.LFE70-.LFB70
 2533 0048 00000000 		.4byte	.LFB71
 2534 004c 58000000 		.4byte	.LFE71-.LFB71
 2535 0050 00000000 		.4byte	0
 2536 0054 00000000 		.4byte	0
 2537              		.section	.debug_ranges,"",%progbits
 2538              	.Ldebug_ranges0:
 2539 0000 00000000 		.4byte	.LFB64
 2540 0004 18000000 		.4byte	.LFE64
 2541 0008 00000000 		.4byte	.LFB65
 2542 000c A0040000 		.4byte	.LFE65
 2543 0010 00000000 		.4byte	.LFB66
 2544 0014 54010000 		.4byte	.LFE66
 2545 0018 00000000 		.4byte	.LFB67
 2546 001c 74000000 		.4byte	.LFE67
 2547 0020 00000000 		.4byte	.LFB68
 2548 0024 9C030000 		.4byte	.LFE68
 2549 0028 00000000 		.4byte	.LFB69
 2550 002c D8000000 		.4byte	.LFE69
 2551 0030 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 51


 2552 0034 D8000000 		.4byte	.LFE70
 2553 0038 00000000 		.4byte	.LFB71
 2554 003c 58000000 		.4byte	.LFE71
 2555 0040 00000000 		.4byte	0
 2556 0044 00000000 		.4byte	0
 2557              		.section	.debug_line,"",%progbits
 2558              	.Ldebug_line0:
 2559 0000 7F020000 		.section	.debug_str,"MS",%progbits,1
 2559      02004C01 
 2559      00000201 
 2559      FB0E0D00 
 2559      01010101 
 2560              	.LASF30:
 2561 0000 61786C65 		.ascii	"axle_width\000"
 2561      5F776964 
 2561      746800
 2562              	.LASF34:
 2563 000b 676F616C 		.ascii	"goal_y\000"
 2563      5F7900
 2564              	.LASF62:
 2565 0012 726F626F 		.ascii	"robot\000"
 2565      7400
 2566              	.LASF32:
 2567 0018 64657369 		.ascii	"desired_theta\000"
 2567      7265645F 
 2567      74686574 
 2567      6100
 2568              	.LASF36:
 2569 0026 64696666 		.ascii	"diff\000"
 2569      00
 2570              	.LASF2:
 2571 002b 73686F72 		.ascii	"short int\000"
 2571      7420696E 
 2571      7400
 2572              	.LASF52:
 2573 0035 504F5345 		.ascii	"POSE_UPDATE_PERIOD\000"
 2573      5F555044 
 2573      4154455F 
 2573      50455249 
 2573      4F4400
 2574              	.LASF20:
 2575 0048 73697A65 		.ascii	"sizetype\000"
 2575      74797065 
 2575      00
 2576              	.LASF28:
 2577 0051 526F626F 		.ascii	"Robot\000"
 2577      7400
 2578              	.LASF63:
 2579 0057 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2579      43313120 
 2579      352E342E 
 2579      31203230 
 2579      31363036 
 2580 008a 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2580      20726576 
 2580      6973696F 
 2580      6E203233 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 52


 2580      37373135 
 2581 00bd 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2581      66756E63 
 2581      74696F6E 
 2581      2D736563 
 2581      74696F6E 
 2582              	.LASF4:
 2583 00e5 5F5F7569 		.ascii	"__uint16_t\000"
 2583      6E743136 
 2583      5F7400
 2584              	.LASF40:
 2585 00f0 4D6F746F 		.ascii	"Motor_PI_Int_Handler\000"
 2585      725F5049 
 2585      5F496E74 
 2585      5F48616E 
 2585      646C6572 
 2586              	.LASF46:
 2587 0105 44726976 		.ascii	"Drive_Left_Motor\000"
 2587      655F4C65 
 2587      66745F4D 
 2587      6F746F72 
 2587      00
 2588              	.LASF61:
 2589 0116 72696768 		.ascii	"right_motor\000"
 2589      745F6D6F 
 2589      746F7200 
 2590              	.LASF49:
 2591 0122 616E676C 		.ascii	"angle_modulo\000"
 2591      655F6D6F 
 2591      64756C6F 
 2591      00
 2592              	.LASF60:
 2593 012f 6C656674 		.ascii	"left_motor\000"
 2593      5F6D6F74 
 2593      6F7200
 2594              	.LASF44:
 2595 013a 64697374 		.ascii	"dist_to_goal\000"
 2595      5F746F5F 
 2595      676F616C 
 2595      00
 2596              	.LASF12:
 2597 0147 75696E74 		.ascii	"uint8_t\000"
 2597      385F7400 
 2598              	.LASF33:
 2599 014f 676F616C 		.ascii	"goal_x\000"
 2599      5F7800
 2600              	.LASF16:
 2601 0156 666C6F61 		.ascii	"float\000"
 2601      7400
 2602              	.LASF56:
 2603 015c 6D75785F 		.ascii	"mux_select\000"
 2603      73656C65 
 2603      637400
 2604              	.LASF9:
 2605 0167 6C6F6E67 		.ascii	"long long int\000"
 2605      206C6F6E 
 2605      6720696E 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 53


 2605      7400
 2606              	.LASF39:
 2607 0175 506F7365 		.ascii	"Pose_Update_Int_Handler\000"
 2607      5F557064 
 2607      6174655F 
 2607      496E745F 
 2607      48616E64 
 2608              	.LASF25:
 2609 018d 77686565 		.ascii	"wheel_radius\000"
 2609      6C5F7261 
 2609      64697573 
 2609      00
 2610              	.LASF65:
 2611 019a 433A5C55 		.ascii	"C:\\Users\\jmspi\\OneDrive\\Documents\\GitHub\\ECE4"
 2611      73657273 
 2611      5C6A6D73 
 2611      70695C4F 
 2611      6E654472 
 2612 01c7 3139315C 		.ascii	"191\\DeliveryRobot.cydsn\000"
 2612      44656C69 
 2612      76657279 
 2612      526F626F 
 2612      742E6379 
 2613              	.LASF7:
 2614 01df 6C6F6E67 		.ascii	"long int\000"
 2614      20696E74 
 2614      00
 2615              	.LASF31:
 2616 01e8 64657369 		.ascii	"desired_V\000"
 2616      7265645F 
 2616      5600
 2617              	.LASF55:
 2618 01f2 6563686F 		.ascii	"echo_distance\000"
 2618      5F646973 
 2618      74616E63 
 2618      6500
 2619              	.LASF3:
 2620 0200 5F5F7569 		.ascii	"__uint8_t\000"
 2620      6E74385F 
 2620      7400
 2621              	.LASF19:
 2622 020a 6C6F6E67 		.ascii	"long double\000"
 2622      20646F75 
 2622      626C6500 
 2623              	.LASF27:
 2624 0216 4D6F746F 		.ascii	"Motor\000"
 2624      7200
 2625              	.LASF1:
 2626 021c 756E7369 		.ascii	"unsigned char\000"
 2626      676E6564 
 2626      20636861 
 2626      7200
 2627              	.LASF53:
 2628 022a 6563686F 		.ascii	"echo_flag\000"
 2628      5F666C61 
 2628      6700
 2629              	.LASF24:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 54


 2630 0234 64657369 		.ascii	"desired_w\000"
 2630      7265645F 
 2630      7700
 2631              	.LASF0:
 2632 023e 7369676E 		.ascii	"signed char\000"
 2632      65642063 
 2632      68617200 
 2633              	.LASF14:
 2634 024a 696E7433 		.ascii	"int32_t\000"
 2634      325F7400 
 2635              	.LASF10:
 2636 0252 6C6F6E67 		.ascii	"long long unsigned int\000"
 2636      206C6F6E 
 2636      6720756E 
 2636      7369676E 
 2636      65642069 
 2637              	.LASF11:
 2638 0269 756E7369 		.ascii	"unsigned int\000"
 2638      676E6564 
 2638      20696E74 
 2638      00
 2639              	.LASF38:
 2640 0276 6E65775F 		.ascii	"new_omega\000"
 2640      6F6D6567 
 2640      6100
 2641              	.LASF8:
 2642 0280 6C6F6E67 		.ascii	"long unsigned int\000"
 2642      20756E73 
 2642      69676E65 
 2642      6420696E 
 2642      7400
 2643              	.LASF54:
 2644 0292 6D61785F 		.ascii	"max_count\000"
 2644      636F756E 
 2644      7400
 2645              	.LASF47:
 2646 029c 44726976 		.ascii	"Drive_Right_Motor\000"
 2646      655F5269 
 2646      6768745F 
 2646      4D6F746F 
 2646      7200
 2647              	.LASF5:
 2648 02ae 73686F72 		.ascii	"short unsigned int\000"
 2648      7420756E 
 2648      7369676E 
 2648      65642069 
 2648      6E7400
 2649              	.LASF18:
 2650 02c1 63686172 		.ascii	"char\000"
 2650      00
 2651              	.LASF59:
 2652 02c6 73657269 		.ascii	"serial_output\000"
 2652      616C5F6F 
 2652      75747075 
 2652      7400
 2653              	.LASF48:
 2654 02d4 6D61696E 		.ascii	"main\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 55


 2654      00
 2655              	.LASF41:
 2656 02d9 4E617669 		.ascii	"Navigation_Test_Int_Handler\000"
 2656      67617469 
 2656      6F6E5F54 
 2656      6573745F 
 2656      496E745F 
 2657              	.LASF13:
 2658 02f5 75696E74 		.ascii	"uint16_t\000"
 2658      31365F74 
 2658      00
 2659              	.LASF64:
 2660 02fe 6D61696E 		.ascii	"main.c\000"
 2660      2E6300
 2661              	.LASF58:
 2662 0305 72696768 		.ascii	"right_wheel_count\000"
 2662      745F7768 
 2662      65656C5F 
 2662      636F756E 
 2662      7400
 2663              	.LASF57:
 2664 0317 6C656674 		.ascii	"left_wheel_count\000"
 2664      5F776865 
 2664      656C5F63 
 2664      6F756E74 
 2664      00
 2665              	.LASF15:
 2666 0328 696E7433 		.ascii	"int32\000"
 2666      3200
 2667              	.LASF17:
 2668 032e 646F7562 		.ascii	"double\000"
 2668      6C6500
 2669              	.LASF45:
 2670 0335 74686574 		.ascii	"theta_to_goal\000"
 2670      615F746F 
 2670      5F676F61 
 2670      6C00
 2671              	.LASF66:
 2672 0343 54696D65 		.ascii	"Timer_Int_Handler\000"
 2672      725F496E 
 2672      745F4861 
 2672      6E646C65 
 2672      7200
 2673              	.LASF21:
 2674 0355 64757479 		.ascii	"duty_cycle\000"
 2674      5F637963 
 2674      6C6500
 2675              	.LASF6:
 2676 0360 5F5F696E 		.ascii	"__int32_t\000"
 2676      7433325F 
 2676      7400
 2677              	.LASF22:
 2678 036a 696E745F 		.ascii	"int_error\000"
 2678      6572726F 
 2678      7200
 2679              	.LASF29:
 2680 0374 74686574 		.ascii	"theta\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\cchTxcZm.s 			page 56


 2680      6100
 2681              	.LASF35:
 2682 037a 676F616C 		.ascii	"goal_min_dist\000"
 2682      5F6D696E 
 2682      5F646973 
 2682      7400
 2683              	.LASF42:
 2684 0388 616E676C 		.ascii	"angle\000"
 2684      6500
 2685              	.LASF26:
 2686 038e 656E635F 		.ascii	"enc_count\000"
 2686      636F756E 
 2686      7400
 2687              	.LASF37:
 2688 0398 6572726F 		.ascii	"error\000"
 2688      7200
 2689              	.LASF23:
 2690 039e 74616E67 		.ascii	"tangent_v\000"
 2690      656E745F 
 2690      7600
 2691              	.LASF50:
 2692 03a8 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2692      52784275 
 2692      66666572 
 2692      00
 2693              	.LASF51:
 2694 03b5 50554C53 		.ascii	"PULSES_PER_REV\000"
 2694      45535F50 
 2694      45525F52 
 2694      455600
 2695              	.LASF43:
 2696 03c4 77686565 		.ascii	"wheel_r_scale\000"
 2696      6C5F725F 
 2696      7363616C 
 2696      6500
 2697              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
