ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"vfh.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	__aeabi_ddiv
  20              		.global	__aeabi_dmul
  21              		.global	__aeabi_dsub
  22              		.section	.text.true_mod,"ax",%progbits
  23              		.align	2
  24              		.global	true_mod
  25              		.thumb
  26              		.thumb_func
  27              		.type	true_mod, %function
  28              	true_mod:
  29              	.LFB0:
  30              		.file 1 "..\\VFH\\vfh.c"
   1:..\VFH/vfh.c  **** /*
   2:..\VFH/vfh.c  **** ** Vector Field Histogram Implementation
   3:..\VFH/vfh.c  **** **  
   4:..\VFH/vfh.c  **** **
   5:..\VFH/vfh.c  **** */
   6:..\VFH/vfh.c  **** 
   7:..\VFH/vfh.c  **** #include <stdlib.h>
   8:..\VFH/vfh.c  **** #include <math.h>
   9:..\VFH/vfh.c  **** #include <assert.h>
  10:..\VFH/vfh.c  **** 
  11:..\VFH/vfh.c  **** #include "vfh.h"
  12:..\VFH/vfh.c  **** 
  13:..\VFH/vfh.c  **** // helper functions added by Jacob
  14:..\VFH/vfh.c  **** double true_mod(double a, double b) {
  31              		.loc 1 14 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 16
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35 0000 90B5     		push	{r4, r7, lr}
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 85B0     		sub	sp, sp, #20
  41              		.cfi_def_cfa_offset 32
  42 0004 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 2


  44 0006 C7E90201 		strd	r0, [r7, #8]
  45 000a C7E90023 		strd	r2, [r7]
  15:..\VFH/vfh.c  ****     return a - b * floor(a / b);  
  46              		.loc 1 15 0
  47 000e D7E90023 		ldrd	r2, [r7]
  48 0012 D7E90201 		ldrd	r0, [r7, #8]
  49 0016 FFF7FEFF 		bl	__aeabi_ddiv
  50 001a 0346     		mov	r3, r0
  51 001c 0C46     		mov	r4, r1
  52 001e 1846     		mov	r0, r3
  53 0020 2146     		mov	r1, r4
  54 0022 FFF7FEFF 		bl	floor
  55 0026 D7E90023 		ldrd	r2, [r7]
  56 002a FFF7FEFF 		bl	__aeabi_dmul
  57 002e 0346     		mov	r3, r0
  58 0030 0C46     		mov	r4, r1
  59 0032 1A46     		mov	r2, r3
  60 0034 2346     		mov	r3, r4
  61 0036 D7E90201 		ldrd	r0, [r7, #8]
  62 003a FFF7FEFF 		bl	__aeabi_dsub
  63 003e 0346     		mov	r3, r0
  64 0040 0C46     		mov	r4, r1
  16:..\VFH/vfh.c  **** }
  65              		.loc 1 16 0
  66 0042 1846     		mov	r0, r3
  67 0044 2146     		mov	r1, r4
  68 0046 1437     		adds	r7, r7, #20
  69              		.cfi_def_cfa_offset 12
  70 0048 BD46     		mov	sp, r7
  71              		.cfi_def_cfa_register 13
  72              		@ sp needed
  73 004a 90BD     		pop	{r4, r7, pc}
  74              		.cfi_endproc
  75              	.LFE0:
  76              		.size	true_mod, .-true_mod
  77              		.section	.text.min_sect_dist,"ax",%progbits
  78              		.align	2
  79              		.global	min_sect_dist
  80              		.thumb
  81              		.thumb_func
  82              		.type	min_sect_dist, %function
  83              	min_sect_dist:
  84              	.LFB1:
  17:..\VFH/vfh.c  **** 
  18:..\VFH/vfh.c  **** int min_sect_dist(int sect_a, int sect_b, int nsectors) {
  85              		.loc 1 18 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 24
  88              		@ frame_needed = 1, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90 0000 80B4     		push	{r7}
  91              		.cfi_def_cfa_offset 4
  92              		.cfi_offset 7, -4
  93 0002 87B0     		sub	sp, sp, #28
  94              		.cfi_def_cfa_offset 32
  95 0004 00AF     		add	r7, sp, #0
  96              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 3


  97 0006 F860     		str	r0, [r7, #12]
  98 0008 B960     		str	r1, [r7, #8]
  99 000a 7A60     		str	r2, [r7, #4]
  19:..\VFH/vfh.c  ****     int dist = abs(sect_a-sect_b);
 100              		.loc 1 19 0
 101 000c FA68     		ldr	r2, [r7, #12]
 102 000e BB68     		ldr	r3, [r7, #8]
 103 0010 D31A     		subs	r3, r2, r3
 104 0012 002B     		cmp	r3, #0
 105 0014 B8BF     		it	lt
 106 0016 5B42     		rsblt	r3, r3, #0
 107 0018 7B61     		str	r3, [r7, #20]
  20:..\VFH/vfh.c  ****     return dist>nsectors/2? nsectors-dist: dist;
 108              		.loc 1 20 0
 109 001a 7B68     		ldr	r3, [r7, #4]
 110 001c DA0F     		lsrs	r2, r3, #31
 111 001e 1344     		add	r3, r3, r2
 112 0020 5B10     		asrs	r3, r3, #1
 113 0022 1A46     		mov	r2, r3
 114 0024 7B69     		ldr	r3, [r7, #20]
 115 0026 9A42     		cmp	r2, r3
 116 0028 03DA     		bge	.L4
 117              		.loc 1 20 0 is_stmt 0 discriminator 1
 118 002a 7A68     		ldr	r2, [r7, #4]
 119 002c 7B69     		ldr	r3, [r7, #20]
 120 002e D31A     		subs	r3, r2, r3
 121 0030 00E0     		b	.L6
 122              	.L4:
 123              		.loc 1 20 0 discriminator 2
 124 0032 7B69     		ldr	r3, [r7, #20]
 125              	.L6:
  21:..\VFH/vfh.c  **** }
 126              		.loc 1 21 0 is_stmt 1 discriminator 5
 127 0034 1846     		mov	r0, r3
 128 0036 1C37     		adds	r7, r7, #28
 129              		.cfi_def_cfa_offset 4
 130 0038 BD46     		mov	sp, r7
 131              		.cfi_def_cfa_register 13
 132              		@ sp needed
 133 003a 80BC     		pop	{r7}
 134              		.cfi_restore 7
 135              		.cfi_def_cfa_offset 0
 136 003c 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE1:
 139              		.size	min_sect_dist, .-min_sect_dist
 140 003e 00BF     		.section	.text.grid_create,"ax",%progbits
 141              		.align	2
 142              		.global	grid_create
 143              		.thumb
 144              		.thumb_func
 145              		.type	grid_create, %function
 146              	grid_create:
 147              	.LFB2:
  22:..\VFH/vfh.c  **** 
  23:..\VFH/vfh.c  **** /*=======================================================================*/    
  24:..\VFH/vfh.c  **** // Histogram Grid Creation Code
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 4


  25:..\VFH/vfh.c  **** 
  26:..\VFH/vfh.c  **** grid * grid_create(int width, int height, int resolution) {
 148              		.loc 1 26 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 32
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152 0000 80B5     		push	{r7, lr}
 153              		.cfi_def_cfa_offset 8
 154              		.cfi_offset 7, -8
 155              		.cfi_offset 14, -4
 156 0002 88B0     		sub	sp, sp, #32
 157              		.cfi_def_cfa_offset 40
 158 0004 00AF     		add	r7, sp, #0
 159              		.cfi_def_cfa_register 7
 160 0006 F860     		str	r0, [r7, #12]
 161 0008 B960     		str	r1, [r7, #8]
 162 000a 7A60     		str	r2, [r7, #4]
  27:..\VFH/vfh.c  ****   /* Creates a map of our arena. */
  28:..\VFH/vfh.c  **** 
  29:..\VFH/vfh.c  ****   grid * map = malloc(sizeof(grid));  // Allocate memory for grid map
 163              		.loc 1 29 0
 164 000c 1020     		movs	r0, #16
 165 000e FFF7FEFF 		bl	malloc
 166 0012 0346     		mov	r3, r0
 167 0014 7B61     		str	r3, [r7, #20]
  30:..\VFH/vfh.c  **** 
  31:..\VFH/vfh.c  ****   // Return NULL if not enough memory
  32:..\VFH/vfh.c  ****   if (map == NULL) {
 168              		.loc 1 32 0
 169 0016 7B69     		ldr	r3, [r7, #20]
 170 0018 002B     		cmp	r3, #0
 171 001a 04D1     		bne	.L8
  33:..\VFH/vfh.c  ****     free(map);
 172              		.loc 1 33 0
 173 001c 7869     		ldr	r0, [r7, #20]
 174 001e FFF7FEFF 		bl	free
  34:..\VFH/vfh.c  ****     return NULL;
 175              		.loc 1 34 0
 176 0022 0023     		movs	r3, #0
 177 0024 43E0     		b	.L9
 178              	.L8:
  35:..\VFH/vfh.c  ****   }
  36:..\VFH/vfh.c  **** 
  37:..\VFH/vfh.c  ****   // Define variables
  38:..\VFH/vfh.c  ****   map->width = width;
 179              		.loc 1 38 0
 180 0026 7B69     		ldr	r3, [r7, #20]
 181 0028 FA68     		ldr	r2, [r7, #12]
 182 002a 1A60     		str	r2, [r3]
  39:..\VFH/vfh.c  ****   map->height = height;
 183              		.loc 1 39 0
 184 002c 7B69     		ldr	r3, [r7, #20]
 185 002e BA68     		ldr	r2, [r7, #8]
 186 0030 5A60     		str	r2, [r3, #4]
  40:..\VFH/vfh.c  ****   map->resolution = resolution;
 187              		.loc 1 40 0
 188 0032 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 5


 189 0034 7A68     		ldr	r2, [r7, #4]
 190 0036 9A60     		str	r2, [r3, #8]
  41:..\VFH/vfh.c  ****   map->cells = malloc(width * height * sizeof(int));
 191              		.loc 1 41 0
 192 0038 FB68     		ldr	r3, [r7, #12]
 193 003a BA68     		ldr	r2, [r7, #8]
 194 003c 02FB03F3 		mul	r3, r2, r3
 195 0040 9B00     		lsls	r3, r3, #2
 196 0042 1846     		mov	r0, r3
 197 0044 FFF7FEFF 		bl	malloc
 198 0048 0346     		mov	r3, r0
 199 004a 1A46     		mov	r2, r3
 200 004c 7B69     		ldr	r3, [r7, #20]
 201 004e DA60     		str	r2, [r3, #12]
  42:..\VFH/vfh.c  **** 
  43:..\VFH/vfh.c  ****   // Return NULL if not enough memory
  44:..\VFH/vfh.c  ****   if (map->cells == NULL) {
 202              		.loc 1 44 0
 203 0050 7B69     		ldr	r3, [r7, #20]
 204 0052 DB68     		ldr	r3, [r3, #12]
 205 0054 002B     		cmp	r3, #0
 206 0056 09D1     		bne	.L10
  45:..\VFH/vfh.c  ****     free(map);
 207              		.loc 1 45 0
 208 0058 7869     		ldr	r0, [r7, #20]
 209 005a FFF7FEFF 		bl	free
  46:..\VFH/vfh.c  ****     free(map->cells);
 210              		.loc 1 46 0
 211 005e 7B69     		ldr	r3, [r7, #20]
 212 0060 DB68     		ldr	r3, [r3, #12]
 213 0062 1846     		mov	r0, r3
 214 0064 FFF7FEFF 		bl	free
  47:..\VFH/vfh.c  ****     return NULL;
 215              		.loc 1 47 0
 216 0068 0023     		movs	r3, #0
 217 006a 20E0     		b	.L9
 218              	.L10:
 219              	.LBB2:
  48:..\VFH/vfh.c  ****   }
  49:..\VFH/vfh.c  **** 
  50:..\VFH/vfh.c  ****   // Define all initial grid values to be 0 as there are no obstacles
  51:..\VFH/vfh.c  ****   for (int i = 0; i < width; ++i) {
 220              		.loc 1 51 0
 221 006c 0023     		movs	r3, #0
 222 006e FB61     		str	r3, [r7, #28]
 223 0070 18E0     		b	.L11
 224              	.L14:
 225              	.LBB3:
  52:..\VFH/vfh.c  ****     for (int j = 0; j < height; ++j) {
 226              		.loc 1 52 0
 227 0072 0023     		movs	r3, #0
 228 0074 BB61     		str	r3, [r7, #24]
 229 0076 0EE0     		b	.L12
 230              	.L13:
  53:..\VFH/vfh.c  ****       map->cells[i * width + j] = 0;    // Map grid is defined as a 1D array
 231              		.loc 1 53 0 discriminator 3
 232 0078 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 6


 233 007a DA68     		ldr	r2, [r3, #12]
 234 007c FB69     		ldr	r3, [r7, #28]
 235 007e F968     		ldr	r1, [r7, #12]
 236 0080 01FB03F1 		mul	r1, r1, r3
 237 0084 BB69     		ldr	r3, [r7, #24]
 238 0086 0B44     		add	r3, r3, r1
 239 0088 9B00     		lsls	r3, r3, #2
 240 008a 1344     		add	r3, r3, r2
 241 008c 0022     		movs	r2, #0
 242 008e 1A60     		str	r2, [r3]
  52:..\VFH/vfh.c  ****     for (int j = 0; j < height; ++j) {
 243              		.loc 1 52 0 discriminator 3
 244 0090 BB69     		ldr	r3, [r7, #24]
 245 0092 0133     		adds	r3, r3, #1
 246 0094 BB61     		str	r3, [r7, #24]
 247              	.L12:
  52:..\VFH/vfh.c  ****     for (int j = 0; j < height; ++j) {
 248              		.loc 1 52 0 is_stmt 0 discriminator 1
 249 0096 BA69     		ldr	r2, [r7, #24]
 250 0098 BB68     		ldr	r3, [r7, #8]
 251 009a 9A42     		cmp	r2, r3
 252 009c ECDB     		blt	.L13
 253              	.LBE3:
  51:..\VFH/vfh.c  ****     for (int j = 0; j < height; ++j) {
 254              		.loc 1 51 0 is_stmt 1 discriminator 2
 255 009e FB69     		ldr	r3, [r7, #28]
 256 00a0 0133     		adds	r3, r3, #1
 257 00a2 FB61     		str	r3, [r7, #28]
 258              	.L11:
  51:..\VFH/vfh.c  ****     for (int j = 0; j < height; ++j) {
 259              		.loc 1 51 0 is_stmt 0 discriminator 1
 260 00a4 FA69     		ldr	r2, [r7, #28]
 261 00a6 FB68     		ldr	r3, [r7, #12]
 262 00a8 9A42     		cmp	r2, r3
 263 00aa E2DB     		blt	.L14
 264              	.LBE2:
  54:..\VFH/vfh.c  ****     }
  55:..\VFH/vfh.c  ****   }
  56:..\VFH/vfh.c  **** 
  57:..\VFH/vfh.c  ****   return map;
 265              		.loc 1 57 0 is_stmt 1
 266 00ac 7B69     		ldr	r3, [r7, #20]
 267              	.L9:
  58:..\VFH/vfh.c  **** }
 268              		.loc 1 58 0
 269 00ae 1846     		mov	r0, r3
 270 00b0 2037     		adds	r7, r7, #32
 271              		.cfi_def_cfa_offset 8
 272 00b2 BD46     		mov	sp, r7
 273              		.cfi_def_cfa_register 13
 274              		@ sp needed
 275 00b4 80BD     		pop	{r7, pc}
 276              		.cfi_endproc
 277              	.LFE2:
 278              		.size	grid_create, .-grid_create
 279              		.global	__aeabi_i2d
 280              		.global	__aeabi_dadd
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 7


 281              		.global	__aeabi_dcmplt
 282              		.global	__aeabi_dcmpge
 283              		.global	__aeabi_dcmpgt
 284              		.global	__aeabi_d2iz
 285 00b6 00BF     		.section	.text.grid_update,"ax",%progbits
 286              		.align	2
 287              		.global	grid_update
 288              		.thumb
 289              		.thumb_func
 290              		.type	grid_update, %function
 291              	grid_update:
 292              	.LFB3:
  59:..\VFH/vfh.c  **** 
  60:..\VFH/vfh.c  **** int grid_update(grid * map, Sensor * sensors, Robot * robot) {
 293              		.loc 1 60 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 128
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 298              		.cfi_def_cfa_offset 28
 299              		.cfi_offset 4, -28
 300              		.cfi_offset 5, -24
 301              		.cfi_offset 6, -20
 302              		.cfi_offset 7, -16
 303              		.cfi_offset 8, -12
 304              		.cfi_offset 9, -8
 305              		.cfi_offset 14, -4
 306 0004 A1B0     		sub	sp, sp, #132
 307              		.cfi_def_cfa_offset 160
 308 0006 00AF     		add	r7, sp, #0
 309              		.cfi_def_cfa_register 7
 310 0008 F860     		str	r0, [r7, #12]
 311 000a B960     		str	r1, [r7, #8]
 312 000c 7A60     		str	r2, [r7, #4]
  61:..\VFH/vfh.c  ****   /*
  62:..\VFH/vfh.c  ****    * Updates Histogram with detected obstacles.
  63:..\VFH/vfh.c  ****    * Takes robot positioning and sensor measurements to determine obstacles location.
  64:..\VFH/vfh.c  ****    *
  65:..\VFH/vfh.c  ****    * Remember that cos() and sin() expect angles in RADIANS, not DEGREES.
  66:..\VFH/vfh.c  ****   */
  67:..\VFH/vfh.c  **** 
  68:..\VFH/vfh.c  ****   // Check if grid map exists
  69:..\VFH/vfh.c  ****   if (map == NULL) return 0;
 313              		.loc 1 69 0
 314 000e FB68     		ldr	r3, [r7, #12]
 315 0010 002B     		cmp	r3, #0
 316 0012 01D1     		bne	.L16
 317              		.loc 1 69 0 is_stmt 0 discriminator 1
 318 0014 0023     		movs	r3, #0
 319 0016 88E1     		b	.L33
 320              	.L16:
  70:..\VFH/vfh.c  ****   if (map->cells == NULL) return 0;
 321              		.loc 1 70 0 is_stmt 1
 322 0018 FB68     		ldr	r3, [r7, #12]
 323 001a DB68     		ldr	r3, [r3, #12]
 324 001c 002B     		cmp	r3, #0
 325 001e 01D1     		bne	.L18
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 8


 326              		.loc 1 70 0 is_stmt 0 discriminator 1
 327 0020 0023     		movs	r3, #0
 328 0022 82E1     		b	.L33
 329              	.L18:
  71:..\VFH/vfh.c  **** 
  72:..\VFH/vfh.c  ****   // Extract needed variables from structure
  73:..\VFH/vfh.c  ****   double pos_x = robot->x;    // cm
 330              		.loc 1 73 0 is_stmt 1
 331 0024 7B68     		ldr	r3, [r7, #4]
 332 0026 03F11004 		add	r4, r3, #16
 333 002a D4E90034 		ldrd	r3, [r4]
 334 002e C7E91834 		strd	r3, [r7, #96]
  74:..\VFH/vfh.c  ****   double pos_y = robot->y;    // cm
 335              		.loc 1 74 0
 336 0032 7B68     		ldr	r3, [r7, #4]
 337 0034 03F11804 		add	r4, r3, #24
 338 0038 D4E90034 		ldrd	r3, [r4]
 339 003c C7E91634 		strd	r3, [r7, #88]
  75:..\VFH/vfh.c  ****   double yaw = robot->theta;  // radians
 340              		.loc 1 75 0
 341 0040 7B68     		ldr	r3, [r7, #4]
 342 0042 03F10804 		add	r4, r3, #8
 343 0046 D4E90034 		ldrd	r3, [r4]
 344 004a C7E91434 		strd	r3, [r7, #80]
 345              	.LBB4:
  76:..\VFH/vfh.c  **** 
  77:..\VFH/vfh.c  ****   // Determine distance of returned ultrasonic signal and convert into grid 
  78:..\VFH/vfh.c  ****   double cell_distance[N_SENSORS];
  79:..\VFH/vfh.c  ****   for (int i = 0; i < N_SENSORS; ++i) {
 346              		.loc 1 79 0
 347 004e 0023     		movs	r3, #0
 348 0050 FB67     		str	r3, [r7, #124]
 349 0052 19E0     		b	.L19
 350              	.L20:
  80:..\VFH/vfh.c  ****     cell_distance[i] = sensors->distance[i] / map->resolution;
 351              		.loc 1 80 0 discriminator 3
 352 0054 BA68     		ldr	r2, [r7, #8]
 353 0056 FB6F     		ldr	r3, [r7, #124]
 354 0058 0433     		adds	r3, r3, #4
 355 005a 9B00     		lsls	r3, r3, #2
 356 005c 1344     		add	r3, r3, r2
 357 005e 5A68     		ldr	r2, [r3, #4]
 358 0060 FB68     		ldr	r3, [r7, #12]
 359 0062 9B68     		ldr	r3, [r3, #8]
 360 0064 92FBF3F3 		sdiv	r3, r2, r3
 361 0068 1846     		mov	r0, r3
 362 006a FFF7FEFF 		bl	__aeabi_i2d
 363 006e 0346     		mov	r3, r0
 364 0070 0C46     		mov	r4, r1
 365 0072 FA6F     		ldr	r2, [r7, #124]
 366 0074 D200     		lsls	r2, r2, #3
 367 0076 07F18001 		add	r1, r7, #128
 368 007a 0A44     		add	r2, r2, r1
 369 007c 703A     		subs	r2, r2, #112
 370 007e C2E90034 		strd	r3, [r2]
  79:..\VFH/vfh.c  ****     cell_distance[i] = sensors->distance[i] / map->resolution;
 371              		.loc 1 79 0 discriminator 3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 9


 372 0082 FB6F     		ldr	r3, [r7, #124]
 373 0084 0133     		adds	r3, r3, #1
 374 0086 FB67     		str	r3, [r7, #124]
 375              	.L19:
  79:..\VFH/vfh.c  ****     cell_distance[i] = sensors->distance[i] / map->resolution;
 376              		.loc 1 79 0 is_stmt 0 discriminator 1
 377 0088 FB6F     		ldr	r3, [r7, #124]
 378 008a 042B     		cmp	r3, #4
 379 008c E2DD     		ble	.L20
 380              	.LBE4:
 381              	.LBB5:
  81:..\VFH/vfh.c  ****   }
  82:..\VFH/vfh.c  **** 
  83:..\VFH/vfh.c  ****   // Determine cell location of obstacles
  84:..\VFH/vfh.c  ****   double theta; 
  85:..\VFH/vfh.c  ****   double sensor_radians;
  86:..\VFH/vfh.c  **** 
  87:..\VFH/vfh.c  ****   for (int i = 0; i < N_SENSORS; ++i){
 382              		.loc 1 87 0 is_stmt 1
 383 008e 0023     		movs	r3, #0
 384 0090 FB66     		str	r3, [r7, #108]
 385 0092 45E1     		b	.L21
 386              	.L32:
 387              	.LBB6:
  88:..\VFH/vfh.c  ****     // Convert sensor angle into radians
  89:..\VFH/vfh.c  ****     sensor_radians = M_PI * sensors->direction[i] / 180;
 388              		.loc 1 89 0
 389 0094 BB68     		ldr	r3, [r7, #8]
 390 0096 FA6E     		ldr	r2, [r7, #108]
 391 0098 53F82230 		ldr	r3, [r3, r2, lsl #2]
 392 009c 1846     		mov	r0, r3
 393 009e FFF7FEFF 		bl	__aeabi_i2d
 394 00a2 A5A3     		adr	r3, .L42
 395 00a4 D3E90023 		ldrd	r2, [r3]
 396 00a8 FFF7FEFF 		bl	__aeabi_dmul
 397 00ac 0346     		mov	r3, r0
 398 00ae 0C46     		mov	r4, r1
 399 00b0 1846     		mov	r0, r3
 400 00b2 2146     		mov	r1, r4
 401 00b4 4FF00002 		mov	r2, #0
 402 00b8 A34B     		ldr	r3, .L42+16
 403 00ba FFF7FEFF 		bl	__aeabi_ddiv
 404 00be 0346     		mov	r3, r0
 405 00c0 0C46     		mov	r4, r1
 406 00c2 C7E91234 		strd	r3, [r7, #72]
  90:..\VFH/vfh.c  ****     if (yaw + sensor_radians < 0) {
 407              		.loc 1 90 0
 408 00c6 D7E91223 		ldrd	r2, [r7, #72]
 409 00ca D7E91401 		ldrd	r0, [r7, #80]
 410 00ce FFF7FEFF 		bl	__aeabi_dadd
 411 00d2 0346     		mov	r3, r0
 412 00d4 0C46     		mov	r4, r1
 413 00d6 1846     		mov	r0, r3
 414 00d8 2146     		mov	r1, r4
 415 00da 4FF00002 		mov	r2, #0
 416 00de 4FF00003 		mov	r3, #0
 417 00e2 FFF7FEFF 		bl	__aeabi_dcmplt
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 10


 418 00e6 0346     		mov	r3, r0
 419 00e8 002B     		cmp	r3, #0
 420 00ea 13D0     		beq	.L40
  91:..\VFH/vfh.c  ****       theta = yaw + sensor_radians + M_TWOPI;
 421              		.loc 1 91 0
 422 00ec D7E91223 		ldrd	r2, [r7, #72]
 423 00f0 D7E91401 		ldrd	r0, [r7, #80]
 424 00f4 FFF7FEFF 		bl	__aeabi_dadd
 425 00f8 0346     		mov	r3, r0
 426 00fa 0C46     		mov	r4, r1
 427 00fc 1846     		mov	r0, r3
 428 00fe 2146     		mov	r1, r4
 429 0100 8FA3     		adr	r3, .L42+8
 430 0102 D3E90023 		ldrd	r2, [r3]
 431 0106 FFF7FEFF 		bl	__aeabi_dadd
 432 010a 0346     		mov	r3, r0
 433 010c 0C46     		mov	r4, r1
 434 010e C7E91C34 		strd	r3, [r7, #112]
 435 0112 2FE0     		b	.L24
 436              	.L40:
  92:..\VFH/vfh.c  ****     } else if (yaw + sensor_radians >= M_TWOPI) {
 437              		.loc 1 92 0
 438 0114 D7E91223 		ldrd	r2, [r7, #72]
 439 0118 D7E91401 		ldrd	r0, [r7, #80]
 440 011c FFF7FEFF 		bl	__aeabi_dadd
 441 0120 0346     		mov	r3, r0
 442 0122 0C46     		mov	r4, r1
 443 0124 1846     		mov	r0, r3
 444 0126 2146     		mov	r1, r4
 445 0128 85A3     		adr	r3, .L42+8
 446 012a D3E90023 		ldrd	r2, [r3]
 447 012e FFF7FEFF 		bl	__aeabi_dcmpge
 448 0132 0346     		mov	r3, r0
 449 0134 002B     		cmp	r3, #0
 450 0136 13D0     		beq	.L41
  93:..\VFH/vfh.c  ****       theta = yaw + sensor_radians - M_TWOPI;
 451              		.loc 1 93 0
 452 0138 D7E91223 		ldrd	r2, [r7, #72]
 453 013c D7E91401 		ldrd	r0, [r7, #80]
 454 0140 FFF7FEFF 		bl	__aeabi_dadd
 455 0144 0346     		mov	r3, r0
 456 0146 0C46     		mov	r4, r1
 457 0148 1846     		mov	r0, r3
 458 014a 2146     		mov	r1, r4
 459 014c 7CA3     		adr	r3, .L42+8
 460 014e D3E90023 		ldrd	r2, [r3]
 461 0152 FFF7FEFF 		bl	__aeabi_dsub
 462 0156 0346     		mov	r3, r0
 463 0158 0C46     		mov	r4, r1
 464 015a C7E91C34 		strd	r3, [r7, #112]
 465 015e 09E0     		b	.L24
 466              	.L41:
  94:..\VFH/vfh.c  ****     } else {
  95:..\VFH/vfh.c  ****       theta = yaw + sensor_radians;
 467              		.loc 1 95 0
 468 0160 D7E91223 		ldrd	r2, [r7, #72]
 469 0164 D7E91401 		ldrd	r0, [r7, #80]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 11


 470 0168 FFF7FEFF 		bl	__aeabi_dadd
 471 016c 0346     		mov	r3, r0
 472 016e 0C46     		mov	r4, r1
 473 0170 C7E91C34 		strd	r3, [r7, #112]
 474              	.L24:
  96:..\VFH/vfh.c  ****     }
  97:..\VFH/vfh.c  ****     
  98:..\VFH/vfh.c  ****     double new_x = (pos_x/map->resolution - 1) + floor(cell_distance[i] * cos(theta));
 475              		.loc 1 98 0
 476 0174 FB68     		ldr	r3, [r7, #12]
 477 0176 9B68     		ldr	r3, [r3, #8]
 478 0178 1846     		mov	r0, r3
 479 017a FFF7FEFF 		bl	__aeabi_i2d
 480 017e 0346     		mov	r3, r0
 481 0180 0C46     		mov	r4, r1
 482 0182 1A46     		mov	r2, r3
 483 0184 2346     		mov	r3, r4
 484 0186 D7E91801 		ldrd	r0, [r7, #96]
 485 018a FFF7FEFF 		bl	__aeabi_ddiv
 486 018e 0346     		mov	r3, r0
 487 0190 0C46     		mov	r4, r1
 488 0192 1846     		mov	r0, r3
 489 0194 2146     		mov	r1, r4
 490 0196 4FF00002 		mov	r2, #0
 491 019a 6C4B     		ldr	r3, .L42+20
 492 019c FFF7FEFF 		bl	__aeabi_dsub
 493 01a0 0346     		mov	r3, r0
 494 01a2 0C46     		mov	r4, r1
 495 01a4 9846     		mov	r8, r3
 496 01a6 A146     		mov	r9, r4
 497 01a8 FB6E     		ldr	r3, [r7, #108]
 498 01aa DB00     		lsls	r3, r3, #3
 499 01ac 07F18002 		add	r2, r7, #128
 500 01b0 1344     		add	r3, r3, r2
 501 01b2 703B     		subs	r3, r3, #112
 502 01b4 D3E90045 		ldrd	r4, [r3]
 503 01b8 D7E91C01 		ldrd	r0, [r7, #112]
 504 01bc FFF7FEFF 		bl	cos
 505 01c0 0246     		mov	r2, r0
 506 01c2 0B46     		mov	r3, r1
 507 01c4 2046     		mov	r0, r4
 508 01c6 2946     		mov	r1, r5
 509 01c8 FFF7FEFF 		bl	__aeabi_dmul
 510 01cc 0346     		mov	r3, r0
 511 01ce 0C46     		mov	r4, r1
 512 01d0 1846     		mov	r0, r3
 513 01d2 2146     		mov	r1, r4
 514 01d4 FFF7FEFF 		bl	floor
 515 01d8 0346     		mov	r3, r0
 516 01da 0C46     		mov	r4, r1
 517 01dc 1A46     		mov	r2, r3
 518 01de 2346     		mov	r3, r4
 519 01e0 4046     		mov	r0, r8
 520 01e2 4946     		mov	r1, r9
 521 01e4 FFF7FEFF 		bl	__aeabi_dadd
 522 01e8 0346     		mov	r3, r0
 523 01ea 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 12


 524 01ec C7E91034 		strd	r3, [r7, #64]
  99:..\VFH/vfh.c  ****     double new_y = (pos_y/map->resolution - 1) + floor(cell_distance[i] * sin(theta));
 525              		.loc 1 99 0
 526 01f0 FB68     		ldr	r3, [r7, #12]
 527 01f2 9B68     		ldr	r3, [r3, #8]
 528 01f4 1846     		mov	r0, r3
 529 01f6 FFF7FEFF 		bl	__aeabi_i2d
 530 01fa 0346     		mov	r3, r0
 531 01fc 0C46     		mov	r4, r1
 532 01fe 1A46     		mov	r2, r3
 533 0200 2346     		mov	r3, r4
 534 0202 D7E91601 		ldrd	r0, [r7, #88]
 535 0206 FFF7FEFF 		bl	__aeabi_ddiv
 536 020a 0346     		mov	r3, r0
 537 020c 0C46     		mov	r4, r1
 538 020e 1846     		mov	r0, r3
 539 0210 2146     		mov	r1, r4
 540 0212 4FF00002 		mov	r2, #0
 541 0216 4D4B     		ldr	r3, .L42+20
 542 0218 FFF7FEFF 		bl	__aeabi_dsub
 543 021c 0346     		mov	r3, r0
 544 021e 0C46     		mov	r4, r1
 545 0220 9846     		mov	r8, r3
 546 0222 A146     		mov	r9, r4
 547 0224 FB6E     		ldr	r3, [r7, #108]
 548 0226 DB00     		lsls	r3, r3, #3
 549 0228 07F18002 		add	r2, r7, #128
 550 022c 1344     		add	r3, r3, r2
 551 022e 703B     		subs	r3, r3, #112
 552 0230 D3E90045 		ldrd	r4, [r3]
 553 0234 D7E91C01 		ldrd	r0, [r7, #112]
 554 0238 FFF7FEFF 		bl	sin
 555 023c 0246     		mov	r2, r0
 556 023e 0B46     		mov	r3, r1
 557 0240 2046     		mov	r0, r4
 558 0242 2946     		mov	r1, r5
 559 0244 FFF7FEFF 		bl	__aeabi_dmul
 560 0248 0346     		mov	r3, r0
 561 024a 0C46     		mov	r4, r1
 562 024c 1846     		mov	r0, r3
 563 024e 2146     		mov	r1, r4
 564 0250 FFF7FEFF 		bl	floor
 565 0254 0346     		mov	r3, r0
 566 0256 0C46     		mov	r4, r1
 567 0258 1A46     		mov	r2, r3
 568 025a 2346     		mov	r3, r4
 569 025c 4046     		mov	r0, r8
 570 025e 4946     		mov	r1, r9
 571 0260 FFF7FEFF 		bl	__aeabi_dadd
 572 0264 0346     		mov	r3, r0
 573 0266 0C46     		mov	r4, r1
 574 0268 C7E90E34 		strd	r3, [r7, #56]
 100:..\VFH/vfh.c  ****     
 101:..\VFH/vfh.c  ****     //char out[60];
 102:..\VFH/vfh.c  ****     //sprintf(out, "new x: %lf, new y: %lf\n\n", new_x, new_y);
 103:..\VFH/vfh.c  ****     //UART_PutString(out);
 104:..\VFH/vfh.c  ****     
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 13


 105:..\VFH/vfh.c  ****     // Check if point is within grid to avoid overflow
 106:..\VFH/vfh.c  ****     if (new_x < map->width && new_y < map->height && new_x >= 0 && new_y >= 0) {
 575              		.loc 1 106 0
 576 026c FB68     		ldr	r3, [r7, #12]
 577 026e 1B68     		ldr	r3, [r3]
 578 0270 1846     		mov	r0, r3
 579 0272 FFF7FEFF 		bl	__aeabi_i2d
 580 0276 D7E91023 		ldrd	r2, [r7, #64]
 581 027a FFF7FEFF 		bl	__aeabi_dcmpgt
 582 027e 0346     		mov	r3, r0
 583 0280 002B     		cmp	r3, #0
 584 0282 4AD0     		beq	.L27
 585              		.loc 1 106 0 is_stmt 0 discriminator 1
 586 0284 FB68     		ldr	r3, [r7, #12]
 587 0286 5B68     		ldr	r3, [r3, #4]
 588 0288 1846     		mov	r0, r3
 589 028a FFF7FEFF 		bl	__aeabi_i2d
 590 028e D7E90E23 		ldrd	r2, [r7, #56]
 591 0292 FFF7FEFF 		bl	__aeabi_dcmpgt
 592 0296 0346     		mov	r3, r0
 593 0298 002B     		cmp	r3, #0
 594 029a 3ED0     		beq	.L27
 595              		.loc 1 106 0 discriminator 2
 596 029c 4FF00002 		mov	r2, #0
 597 02a0 4FF00003 		mov	r3, #0
 598 02a4 D7E91001 		ldrd	r0, [r7, #64]
 599 02a8 FFF7FEFF 		bl	__aeabi_dcmpge
 600 02ac 0346     		mov	r3, r0
 601 02ae 002B     		cmp	r3, #0
 602 02b0 33D0     		beq	.L27
 603              		.loc 1 106 0 discriminator 3
 604 02b2 4FF00002 		mov	r2, #0
 605 02b6 4FF00003 		mov	r3, #0
 606 02ba D7E90E01 		ldrd	r0, [r7, #56]
 607 02be FFF7FEFF 		bl	__aeabi_dcmpge
 608 02c2 0346     		mov	r3, r0
 609 02c4 002B     		cmp	r3, #0
 610 02c6 28D0     		beq	.L27
 107:..\VFH/vfh.c  ****       map->cells[(int) new_x * map->width + (int) new_y] += 1;
 611              		.loc 1 107 0 is_stmt 1
 612 02c8 FB68     		ldr	r3, [r7, #12]
 613 02ca DC68     		ldr	r4, [r3, #12]
 614 02cc D7E91001 		ldrd	r0, [r7, #64]
 615 02d0 FFF7FEFF 		bl	__aeabi_d2iz
 616 02d4 0246     		mov	r2, r0
 617 02d6 FB68     		ldr	r3, [r7, #12]
 618 02d8 1B68     		ldr	r3, [r3]
 619 02da 03FB02F5 		mul	r5, r3, r2
 620 02de D7E90E01 		ldrd	r0, [r7, #56]
 621 02e2 FFF7FEFF 		bl	__aeabi_d2iz
 622 02e6 0346     		mov	r3, r0
 623 02e8 2B44     		add	r3, r3, r5
 624 02ea 9B00     		lsls	r3, r3, #2
 625 02ec 1C44     		add	r4, r4, r3
 626 02ee FB68     		ldr	r3, [r7, #12]
 627 02f0 DD68     		ldr	r5, [r3, #12]
 628 02f2 D7E91001 		ldrd	r0, [r7, #64]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 14


 629 02f6 FFF7FEFF 		bl	__aeabi_d2iz
 630 02fa 0246     		mov	r2, r0
 631 02fc FB68     		ldr	r3, [r7, #12]
 632 02fe 1B68     		ldr	r3, [r3]
 633 0300 03FB02F6 		mul	r6, r3, r2
 634 0304 D7E90E01 		ldrd	r0, [r7, #56]
 635 0308 FFF7FEFF 		bl	__aeabi_d2iz
 636 030c 0346     		mov	r3, r0
 637 030e 3344     		add	r3, r3, r6
 638 0310 9B00     		lsls	r3, r3, #2
 639 0312 2B44     		add	r3, r3, r5
 640 0314 1B68     		ldr	r3, [r3]
 641 0316 0133     		adds	r3, r3, #1
 642 0318 2360     		str	r3, [r4]
 643              	.L27:
 644              	.LBE6:
  87:..\VFH/vfh.c  ****     // Convert sensor angle into radians
 645              		.loc 1 87 0 discriminator 2
 646 031a FB6E     		ldr	r3, [r7, #108]
 647 031c 0133     		adds	r3, r3, #1
 648 031e FB66     		str	r3, [r7, #108]
 649              	.L21:
  87:..\VFH/vfh.c  ****     // Convert sensor angle into radians
 650              		.loc 1 87 0 is_stmt 0 discriminator 1
 651 0320 FB6E     		ldr	r3, [r7, #108]
 652 0322 042B     		cmp	r3, #4
 653 0324 7FF7B6AE 		ble	.L32
 654              	.LBE5:
 108:..\VFH/vfh.c  ****     } 
 109:..\VFH/vfh.c  ****   }
 110:..\VFH/vfh.c  **** 
 111:..\VFH/vfh.c  ****   return 1;
 655              		.loc 1 111 0 is_stmt 1
 656 0328 0123     		movs	r3, #1
 657              	.L33:
 112:..\VFH/vfh.c  **** }
 658              		.loc 1 112 0 discriminator 1
 659 032a 1846     		mov	r0, r3
 660 032c 8437     		adds	r7, r7, #132
 661              		.cfi_def_cfa_offset 28
 662 032e BD46     		mov	sp, r7
 663              		.cfi_def_cfa_register 13
 664              		@ sp needed
 665 0330 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 666              	.L43:
 667 0334 AFF30080 		.align	3
 668              	.L42:
 669 0338 182D4454 		.word	1413754136
 670 033c FB210940 		.word	1074340347
 671 0340 182D4454 		.word	1413754136
 672 0344 FB211940 		.word	1075388923
 673 0348 00806640 		.word	1080459264
 674 034c 0000F03F 		.word	1072693248
 675              		.cfi_endproc
 676              	.LFE3:
 677              		.size	grid_update, .-grid_update
 678              		.section	.text.active_window,"ax",%progbits
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 15


 679              		.align	2
 680              		.global	active_window
 681              		.thumb
 682              		.thumb_func
 683              		.type	active_window, %function
 684              	active_window:
 685              	.LFB4:
 113:..\VFH/vfh.c  **** 
 114:..\VFH/vfh.c  **** void active_window(grid * map, grid * active, Robot * robot) {
 686              		.loc 1 114 0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 40
 689              		@ frame_needed = 1, uses_anonymous_args = 0
 690 0000 90B5     		push	{r4, r7, lr}
 691              		.cfi_def_cfa_offset 12
 692              		.cfi_offset 4, -12
 693              		.cfi_offset 7, -8
 694              		.cfi_offset 14, -4
 695 0002 8BB0     		sub	sp, sp, #44
 696              		.cfi_def_cfa_offset 56
 697 0004 00AF     		add	r7, sp, #0
 698              		.cfi_def_cfa_register 7
 699 0006 F860     		str	r0, [r7, #12]
 700 0008 B960     		str	r1, [r7, #8]
 701 000a 7A60     		str	r2, [r7, #4]
 115:..\VFH/vfh.c  ****   /*
 116:..\VFH/vfh.c  ****   * Creates an active window surrounding robot.
 117:..\VFH/vfh.c  ****   */
 118:..\VFH/vfh.c  **** 
 119:..\VFH/vfh.c  ****   // Robot variables
 120:..\VFH/vfh.c  ****   int x = robot->x;
 702              		.loc 1 120 0
 703 000c 7B68     		ldr	r3, [r7, #4]
 704 000e 03F11004 		add	r4, r3, #16
 705 0012 D4E90034 		ldrd	r3, [r4]
 706 0016 1846     		mov	r0, r3
 707 0018 2146     		mov	r1, r4
 708 001a FFF7FEFF 		bl	__aeabi_d2iz
 709 001e 0346     		mov	r3, r0
 710 0020 FB61     		str	r3, [r7, #28]
 121:..\VFH/vfh.c  ****   int y = robot->y;
 711              		.loc 1 121 0
 712 0022 7B68     		ldr	r3, [r7, #4]
 713 0024 03F11804 		add	r4, r3, #24
 714 0028 D4E90034 		ldrd	r3, [r4]
 715 002c 1846     		mov	r0, r3
 716 002e 2146     		mov	r1, r4
 717 0030 FFF7FEFF 		bl	__aeabi_d2iz
 718 0034 0346     		mov	r3, r0
 719 0036 BB61     		str	r3, [r7, #24]
 720              	.LBB7:
 122:..\VFH/vfh.c  **** 
 123:..\VFH/vfh.c  ****   // Create active window based on generated map
 124:..\VFH/vfh.c  ****   for (int i = 0; i < active->width; ++i) {
 721              		.loc 1 124 0
 722 0038 0023     		movs	r3, #0
 723 003a 7B62     		str	r3, [r7, #36]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 16


 724 003c 53E0     		b	.L45
 725              	.L49:
 726              	.LBB8:
 125:..\VFH/vfh.c  ****       for (int j = 0; j < active->height; ++j) {
 727              		.loc 1 125 0
 728 003e 0023     		movs	r3, #0
 729 0040 3B62     		str	r3, [r7, #32]
 730 0042 48E0     		b	.L46
 731              	.L48:
 732              	.LBB9:
 126:..\VFH/vfh.c  **** 
 127:..\VFH/vfh.c  ****         /* x and y are the center coordinates of the body with sensors. */
 128:..\VFH/vfh.c  ****         int grid_i = i + x/map->resolution - (active->width - 1) / 2;
 733              		.loc 1 128 0
 734 0044 FB68     		ldr	r3, [r7, #12]
 735 0046 9B68     		ldr	r3, [r3, #8]
 736 0048 FA69     		ldr	r2, [r7, #28]
 737 004a 92FBF3F2 		sdiv	r2, r2, r3
 738 004e 7B6A     		ldr	r3, [r7, #36]
 739 0050 1A44     		add	r2, r2, r3
 740 0052 BB68     		ldr	r3, [r7, #8]
 741 0054 1B68     		ldr	r3, [r3]
 742 0056 013B     		subs	r3, r3, #1
 743 0058 D90F     		lsrs	r1, r3, #31
 744 005a 0B44     		add	r3, r3, r1
 745 005c 5B10     		asrs	r3, r3, #1
 746 005e D31A     		subs	r3, r2, r3
 747 0060 7B61     		str	r3, [r7, #20]
 129:..\VFH/vfh.c  ****         int grid_j = j + y/map->resolution - (active->height - 1) / 2;
 748              		.loc 1 129 0
 749 0062 FB68     		ldr	r3, [r7, #12]
 750 0064 9B68     		ldr	r3, [r3, #8]
 751 0066 BA69     		ldr	r2, [r7, #24]
 752 0068 92FBF3F2 		sdiv	r2, r2, r3
 753 006c 3B6A     		ldr	r3, [r7, #32]
 754 006e 1A44     		add	r2, r2, r3
 755 0070 BB68     		ldr	r3, [r7, #8]
 756 0072 5B68     		ldr	r3, [r3, #4]
 757 0074 013B     		subs	r3, r3, #1
 758 0076 D90F     		lsrs	r1, r3, #31
 759 0078 0B44     		add	r3, r3, r1
 760 007a 5B10     		asrs	r3, r3, #1
 761 007c D31A     		subs	r3, r2, r3
 762 007e 3B61     		str	r3, [r7, #16]
 130:..\VFH/vfh.c  **** 
 131:..\VFH/vfh.c  ****         /* Copy the information from the grid to the moving window. */
 132:..\VFH/vfh.c  ****         if (grid_i < map->width && grid_j < map->height && grid_i >= 0 && grid_j >= 0) {
 763              		.loc 1 132 0
 764 0080 FB68     		ldr	r3, [r7, #12]
 765 0082 1A68     		ldr	r2, [r3]
 766 0084 7B69     		ldr	r3, [r7, #20]
 767 0086 9A42     		cmp	r2, r3
 768 0088 22DD     		ble	.L47
 769              		.loc 1 132 0 is_stmt 0 discriminator 1
 770 008a FB68     		ldr	r3, [r7, #12]
 771 008c 5A68     		ldr	r2, [r3, #4]
 772 008e 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 17


 773 0090 9A42     		cmp	r2, r3
 774 0092 1DDD     		ble	.L47
 775              		.loc 1 132 0 discriminator 2
 776 0094 7B69     		ldr	r3, [r7, #20]
 777 0096 002B     		cmp	r3, #0
 778 0098 1ADB     		blt	.L47
 779              		.loc 1 132 0 discriminator 3
 780 009a 3B69     		ldr	r3, [r7, #16]
 781 009c 002B     		cmp	r3, #0
 782 009e 17DB     		blt	.L47
 133:..\VFH/vfh.c  ****           active->cells[i * active->width + j] = map->cells[grid_i * map->width + grid_j];
 783              		.loc 1 133 0 is_stmt 1
 784 00a0 BB68     		ldr	r3, [r7, #8]
 785 00a2 DA68     		ldr	r2, [r3, #12]
 786 00a4 BB68     		ldr	r3, [r7, #8]
 787 00a6 1B68     		ldr	r3, [r3]
 788 00a8 796A     		ldr	r1, [r7, #36]
 789 00aa 01FB03F1 		mul	r1, r1, r3
 790 00ae 3B6A     		ldr	r3, [r7, #32]
 791 00b0 0B44     		add	r3, r3, r1
 792 00b2 9B00     		lsls	r3, r3, #2
 793 00b4 1344     		add	r3, r3, r2
 794 00b6 FA68     		ldr	r2, [r7, #12]
 795 00b8 D168     		ldr	r1, [r2, #12]
 796 00ba FA68     		ldr	r2, [r7, #12]
 797 00bc 1268     		ldr	r2, [r2]
 798 00be 7869     		ldr	r0, [r7, #20]
 799 00c0 00FB02F0 		mul	r0, r0, r2
 800 00c4 3A69     		ldr	r2, [r7, #16]
 801 00c6 0244     		add	r2, r2, r0
 802 00c8 9200     		lsls	r2, r2, #2
 803 00ca 0A44     		add	r2, r2, r1
 804 00cc 1268     		ldr	r2, [r2]
 805 00ce 1A60     		str	r2, [r3]
 806              	.L47:
 807              	.LBE9:
 125:..\VFH/vfh.c  **** 
 808              		.loc 1 125 0 discriminator 2
 809 00d0 3B6A     		ldr	r3, [r7, #32]
 810 00d2 0133     		adds	r3, r3, #1
 811 00d4 3B62     		str	r3, [r7, #32]
 812              	.L46:
 125:..\VFH/vfh.c  **** 
 813              		.loc 1 125 0 is_stmt 0 discriminator 1
 814 00d6 BB68     		ldr	r3, [r7, #8]
 815 00d8 5A68     		ldr	r2, [r3, #4]
 816 00da 3B6A     		ldr	r3, [r7, #32]
 817 00dc 9A42     		cmp	r2, r3
 818 00de B1DC     		bgt	.L48
 819              	.LBE8:
 124:..\VFH/vfh.c  ****       for (int j = 0; j < active->height; ++j) {
 820              		.loc 1 124 0 is_stmt 1 discriminator 2
 821 00e0 7B6A     		ldr	r3, [r7, #36]
 822 00e2 0133     		adds	r3, r3, #1
 823 00e4 7B62     		str	r3, [r7, #36]
 824              	.L45:
 124:..\VFH/vfh.c  ****       for (int j = 0; j < active->height; ++j) {
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 18


 825              		.loc 1 124 0 is_stmt 0 discriminator 1
 826 00e6 BB68     		ldr	r3, [r7, #8]
 827 00e8 1A68     		ldr	r2, [r3]
 828 00ea 7B6A     		ldr	r3, [r7, #36]
 829 00ec 9A42     		cmp	r2, r3
 830 00ee A6DC     		bgt	.L49
 831              	.LBE7:
 134:..\VFH/vfh.c  ****         }
 135:..\VFH/vfh.c  ****       }
 136:..\VFH/vfh.c  ****     }
 137:..\VFH/vfh.c  **** }
 832              		.loc 1 137 0 is_stmt 1
 833 00f0 00BF     		nop
 834 00f2 2C37     		adds	r7, r7, #44
 835              		.cfi_def_cfa_offset 12
 836 00f4 BD46     		mov	sp, r7
 837              		.cfi_def_cfa_register 13
 838              		@ sp needed
 839 00f6 90BD     		pop	{r4, r7, pc}
 840              		.cfi_endproc
 841              	.LFE4:
 842              		.size	active_window, .-active_window
 843              		.global	__aeabi_d2uiz
 844              		.section	.text.pod_create,"ax",%progbits
 845              		.align	2
 846              		.global	pod_create
 847              		.thumb
 848              		.thumb_func
 849              		.type	pod_create, %function
 850              	pod_create:
 851              	.LFB5:
 138:..\VFH/vfh.c  **** 
 139:..\VFH/vfh.c  **** /*=======================================================================*/
 140:..\VFH/vfh.c  **** /*                             END OF GRID                               */
 141:..\VFH/vfh.c  **** /*=======================================================================*/
 142:..\VFH/vfh.c  **** // Polar Histogram
 143:..\VFH/vfh.c  **** 
 144:..\VFH/vfh.c  **** POD * pod_create(double alpha) {
 852              		.loc 1 144 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 16
 855              		@ frame_needed = 1, uses_anonymous_args = 0
 856 0000 90B5     		push	{r4, r7, lr}
 857              		.cfi_def_cfa_offset 12
 858              		.cfi_offset 4, -12
 859              		.cfi_offset 7, -8
 860              		.cfi_offset 14, -4
 861 0002 85B0     		sub	sp, sp, #20
 862              		.cfi_def_cfa_offset 32
 863 0004 00AF     		add	r7, sp, #0
 864              		.cfi_def_cfa_register 7
 865 0006 C7E90001 		strd	r0, [r7]
 145:..\VFH/vfh.c  ****   POD * pod = malloc(sizeof(POD));  // Allocate memory for grid map
 866              		.loc 1 145 0
 867 000a 0820     		movs	r0, #8
 868 000c FFF7FEFF 		bl	malloc
 869 0010 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 19


 870 0012 BB60     		str	r3, [r7, #8]
 146:..\VFH/vfh.c  **** 
 147:..\VFH/vfh.c  ****   // Return NULL if not enough memory
 148:..\VFH/vfh.c  ****   if (pod == NULL) {
 871              		.loc 1 148 0
 872 0014 BB68     		ldr	r3, [r7, #8]
 873 0016 002B     		cmp	r3, #0
 874 0018 04D1     		bne	.L51
 149:..\VFH/vfh.c  ****     free(pod);
 875              		.loc 1 149 0
 876 001a B868     		ldr	r0, [r7, #8]
 877 001c FFF7FEFF 		bl	free
 150:..\VFH/vfh.c  ****     return NULL;
 878              		.loc 1 150 0
 879 0020 0023     		movs	r3, #0
 880 0022 52E0     		b	.L52
 881              	.L51:
 151:..\VFH/vfh.c  ****   }
 152:..\VFH/vfh.c  **** 
 153:..\VFH/vfh.c  ****   // Define variables
 154:..\VFH/vfh.c  ****   pod->nsectors = 360 / alpha;
 882              		.loc 1 154 0
 883 0024 D7E90023 		ldrd	r2, [r7]
 884 0028 4FF00000 		mov	r0, #0
 885 002c 2949     		ldr	r1, .L56
 886 002e FFF7FEFF 		bl	__aeabi_ddiv
 887 0032 0346     		mov	r3, r0
 888 0034 0C46     		mov	r4, r1
 889 0036 1846     		mov	r0, r3
 890 0038 2146     		mov	r1, r4
 891 003a FFF7FEFF 		bl	__aeabi_d2iz
 892 003e 0246     		mov	r2, r0
 893 0040 BB68     		ldr	r3, [r7, #8]
 894 0042 1A60     		str	r2, [r3]
 155:..\VFH/vfh.c  ****   pod->density = malloc((360 / alpha) * sizeof(double));
 895              		.loc 1 155 0
 896 0044 D7E90023 		ldrd	r2, [r7]
 897 0048 4FF00000 		mov	r0, #0
 898 004c 2149     		ldr	r1, .L56
 899 004e FFF7FEFF 		bl	__aeabi_ddiv
 900 0052 0346     		mov	r3, r0
 901 0054 0C46     		mov	r4, r1
 902 0056 1846     		mov	r0, r3
 903 0058 2146     		mov	r1, r4
 904 005a 4FF00002 		mov	r2, #0
 905 005e 1E4B     		ldr	r3, .L56+4
 906 0060 FFF7FEFF 		bl	__aeabi_dmul
 907 0064 0346     		mov	r3, r0
 908 0066 0C46     		mov	r4, r1
 909 0068 1846     		mov	r0, r3
 910 006a 2146     		mov	r1, r4
 911 006c FFF7FEFF 		bl	__aeabi_d2uiz
 912 0070 0346     		mov	r3, r0
 913 0072 1846     		mov	r0, r3
 914 0074 FFF7FEFF 		bl	malloc
 915 0078 0346     		mov	r3, r0
 916 007a 1A46     		mov	r2, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 20


 917 007c BB68     		ldr	r3, [r7, #8]
 918 007e 5A60     		str	r2, [r3, #4]
 156:..\VFH/vfh.c  **** 
 157:..\VFH/vfh.c  ****   // Return NULL if not enough memory
 158:..\VFH/vfh.c  ****   if (pod->density == NULL) {
 919              		.loc 1 158 0
 920 0080 BB68     		ldr	r3, [r7, #8]
 921 0082 5B68     		ldr	r3, [r3, #4]
 922 0084 002B     		cmp	r3, #0
 923 0086 09D1     		bne	.L53
 159:..\VFH/vfh.c  ****     free(pod);
 924              		.loc 1 159 0
 925 0088 B868     		ldr	r0, [r7, #8]
 926 008a FFF7FEFF 		bl	free
 160:..\VFH/vfh.c  ****     free(pod->density);
 927              		.loc 1 160 0
 928 008e BB68     		ldr	r3, [r7, #8]
 929 0090 5B68     		ldr	r3, [r3, #4]
 930 0092 1846     		mov	r0, r3
 931 0094 FFF7FEFF 		bl	free
 161:..\VFH/vfh.c  ****     return NULL;
 932              		.loc 1 161 0
 933 0098 0023     		movs	r3, #0
 934 009a 16E0     		b	.L52
 935              	.L53:
 936              	.LBB10:
 162:..\VFH/vfh.c  ****   }
 163:..\VFH/vfh.c  **** 
 164:..\VFH/vfh.c  ****   // Define all initial grid values to be 0 as there are no obstacles
 165:..\VFH/vfh.c  ****   for (int i = 0; i < pod->nsectors; ++i) {
 937              		.loc 1 165 0
 938 009c 0023     		movs	r3, #0
 939 009e FB60     		str	r3, [r7, #12]
 940 00a0 0DE0     		b	.L54
 941              	.L55:
 166:..\VFH/vfh.c  ****     pod->density[i] = 0;    // Map grid is defined as a 1D array
 942              		.loc 1 166 0 discriminator 3
 943 00a2 BB68     		ldr	r3, [r7, #8]
 944 00a4 5A68     		ldr	r2, [r3, #4]
 945 00a6 FB68     		ldr	r3, [r7, #12]
 946 00a8 DB00     		lsls	r3, r3, #3
 947 00aa 1A44     		add	r2, r2, r3
 948 00ac 4FF00003 		mov	r3, #0
 949 00b0 4FF00004 		mov	r4, #0
 950 00b4 C2E90034 		strd	r3, [r2]
 165:..\VFH/vfh.c  ****     pod->density[i] = 0;    // Map grid is defined as a 1D array
 951              		.loc 1 165 0 discriminator 3
 952 00b8 FB68     		ldr	r3, [r7, #12]
 953 00ba 0133     		adds	r3, r3, #1
 954 00bc FB60     		str	r3, [r7, #12]
 955              	.L54:
 165:..\VFH/vfh.c  ****     pod->density[i] = 0;    // Map grid is defined as a 1D array
 956              		.loc 1 165 0 is_stmt 0 discriminator 1
 957 00be BB68     		ldr	r3, [r7, #8]
 958 00c0 1A68     		ldr	r2, [r3]
 959 00c2 FB68     		ldr	r3, [r7, #12]
 960 00c4 9A42     		cmp	r2, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 21


 961 00c6 ECDC     		bgt	.L55
 962              	.LBE10:
 167:..\VFH/vfh.c  ****   }
 168:..\VFH/vfh.c  **** 
 169:..\VFH/vfh.c  ****   return pod;
 963              		.loc 1 169 0 is_stmt 1
 964 00c8 BB68     		ldr	r3, [r7, #8]
 965              	.L52:
 170:..\VFH/vfh.c  **** }
 966              		.loc 1 170 0
 967 00ca 1846     		mov	r0, r3
 968 00cc 1437     		adds	r7, r7, #20
 969              		.cfi_def_cfa_offset 12
 970 00ce BD46     		mov	sp, r7
 971              		.cfi_def_cfa_register 13
 972              		@ sp needed
 973 00d0 90BD     		pop	{r4, r7, pc}
 974              	.L57:
 975 00d2 00BF     		.align	2
 976              	.L56:
 977 00d4 00807640 		.word	1081507840
 978 00d8 00002040 		.word	1075838976
 979              		.cfi_endproc
 980              	.LFE5:
 981              		.size	pod_create, .-pod_create
 982              		.global	__aeabi_ui2d
 983              		.section	.text.smoothed_POD_histogram,"ax",%progbits
 984              		.align	2
 985              		.global	smoothed_POD_histogram
 986              		.thumb
 987              		.thumb_func
 988              		.type	smoothed_POD_histogram, %function
 989              	smoothed_POD_histogram:
 990              	.LFB6:
 171:..\VFH/vfh.c  **** void smoothed_POD_histogram(POD * smoothed_POD, grid *active, double alpha, double l, double a, dou
 991              		.loc 1 171 0
 992              		.cfi_startproc
 993              		@ args = 24, pretend = 0, frame = 88
 994              		@ frame_needed = 1, uses_anonymous_args = 0
 995 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 996              		.cfi_def_cfa_offset 28
 997              		.cfi_offset 4, -28
 998              		.cfi_offset 5, -24
 999              		.cfi_offset 6, -20
 1000              		.cfi_offset 7, -16
 1001              		.cfi_offset 8, -12
 1002              		.cfi_offset 9, -8
 1003              		.cfi_offset 14, -4
 1004 0004 97B0     		sub	sp, sp, #92
 1005              		.cfi_def_cfa_offset 120
 1006 0006 00AF     		add	r7, sp, #0
 1007              		.cfi_def_cfa_register 7
 1008 0008 F860     		str	r0, [r7, #12]
 1009 000a B960     		str	r1, [r7, #8]
 1010 000c C7E90023 		strd	r2, [r7]
 1011              		.loc 1 171 0
 1012 0010 6B46     		mov	r3, sp
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 22


 1013 0012 1E46     		mov	r6, r3
 172:..\VFH/vfh.c  ****   int sectors = smoothed_POD->nsectors;
 1014              		.loc 1 172 0
 1015 0014 FB68     		ldr	r3, [r7, #12]
 1016 0016 1B68     		ldr	r3, [r3]
 1017 0018 BB63     		str	r3, [r7, #56]
 173:..\VFH/vfh.c  ****   int width = active->width;
 1018              		.loc 1 173 0
 1019 001a BB68     		ldr	r3, [r7, #8]
 1020 001c 1B68     		ldr	r3, [r3]
 1021 001e 7B63     		str	r3, [r7, #52]
 174:..\VFH/vfh.c  ****   int height = active->height;
 1022              		.loc 1 174 0
 1023 0020 BB68     		ldr	r3, [r7, #8]
 1024 0022 5B68     		ldr	r3, [r3, #4]
 1025 0024 3B63     		str	r3, [r7, #48]
 175:..\VFH/vfh.c  ****   double POD_hist[sectors];
 1026              		.loc 1 175 0
 1027 0026 B96B     		ldr	r1, [r7, #56]
 1028 0028 4B1E     		subs	r3, r1, #1
 1029 002a FB62     		str	r3, [r7, #44]
 1030 002c 0B46     		mov	r3, r1
 1031 002e 1A46     		mov	r2, r3
 1032 0030 4FF00003 		mov	r3, #0
 1033 0034 4FEA8319 		lsl	r9, r3, #6
 1034 0038 49EA9269 		orr	r9, r9, r2, lsr #26
 1035 003c 4FEA8218 		lsl	r8, r2, #6
 1036 0040 0B46     		mov	r3, r1
 1037 0042 1A46     		mov	r2, r3
 1038 0044 4FF00003 		mov	r3, #0
 1039 0048 9D01     		lsls	r5, r3, #6
 1040 004a 45EA9265 		orr	r5, r5, r2, lsr #26
 1041 004e 9401     		lsls	r4, r2, #6
 1042 0050 0B46     		mov	r3, r1
 1043 0052 DB00     		lsls	r3, r3, #3
 1044 0054 0733     		adds	r3, r3, #7
 1045 0056 0733     		adds	r3, r3, #7
 1046 0058 DB08     		lsrs	r3, r3, #3
 1047 005a DB00     		lsls	r3, r3, #3
 1048 005c ADEB030D 		sub	sp, sp, r3
 1049 0060 6B46     		mov	r3, sp
 1050 0062 0733     		adds	r3, r3, #7
 1051 0064 DB08     		lsrs	r3, r3, #3
 1052 0066 DB00     		lsls	r3, r3, #3
 1053 0068 BB62     		str	r3, [r7, #40]
 1054              	.LBB11:
 176:..\VFH/vfh.c  **** 
 177:..\VFH/vfh.c  ****   // Create POD histogram
 178:..\VFH/vfh.c  ****   for (int i=0; i< sectors; i++) {
 1055              		.loc 1 178 0
 1056 006a 0023     		movs	r3, #0
 1057 006c 7B65     		str	r3, [r7, #84]
 1058 006e 0CE0     		b	.L59
 1059              	.L60:
 179:..\VFH/vfh.c  ****     POD_hist[i] = 0;
 1060              		.loc 1 179 0 discriminator 3
 1061 0070 BA6A     		ldr	r2, [r7, #40]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 23


 1062 0072 7B6D     		ldr	r3, [r7, #84]
 1063 0074 DB00     		lsls	r3, r3, #3
 1064 0076 1A44     		add	r2, r2, r3
 1065 0078 4FF00003 		mov	r3, #0
 1066 007c 4FF00004 		mov	r4, #0
 1067 0080 C2E90034 		strd	r3, [r2]
 178:..\VFH/vfh.c  ****     POD_hist[i] = 0;
 1068              		.loc 1 178 0 discriminator 3
 1069 0084 7B6D     		ldr	r3, [r7, #84]
 1070 0086 0133     		adds	r3, r3, #1
 1071 0088 7B65     		str	r3, [r7, #84]
 1072              	.L59:
 178:..\VFH/vfh.c  ****     POD_hist[i] = 0;
 1073              		.loc 1 178 0 is_stmt 0 discriminator 1
 1074 008a 7A6D     		ldr	r2, [r7, #84]
 1075 008c BB6B     		ldr	r3, [r7, #56]
 1076 008e 9A42     		cmp	r2, r3
 1077 0090 EEDB     		blt	.L60
 1078              	.LBE11:
 1079              	.LBB12:
 180:..\VFH/vfh.c  **** }
 181:..\VFH/vfh.c  **** 
 182:..\VFH/vfh.c  ****   for (int i=0; i < width; i++) {
 1080              		.loc 1 182 0 is_stmt 1
 1081 0092 0023     		movs	r3, #0
 1082 0094 3B65     		str	r3, [r7, #80]
 1083 0096 D4E0     		b	.L61
 1084              	.L64:
 1085              	.LBB13:
 183:..\VFH/vfh.c  ****     for (int j=0; j < height; j++) {
 1086              		.loc 1 183 0
 1087 0098 0023     		movs	r3, #0
 1088 009a FB64     		str	r3, [r7, #76]
 1089 009c C9E0     		b	.L62
 1090              	.L63:
 1091              	.LBB14:
 184:..\VFH/vfh.c  ****         /* Calculate the angular position (beta) of this cell. */
 185:..\VFH/vfh.c  ****         double beta = true_mod(180 * atan2((double)(j - height/2), (double)(i - width/2))/M_PI, 360
 1092              		.loc 1 185 0 discriminator 3
 1093 009e 3B6B     		ldr	r3, [r7, #48]
 1094 00a0 DA0F     		lsrs	r2, r3, #31
 1095 00a2 1344     		add	r3, r3, r2
 1096 00a4 5B10     		asrs	r3, r3, #1
 1097 00a6 1A46     		mov	r2, r3
 1098 00a8 FB6C     		ldr	r3, [r7, #76]
 1099 00aa 9B1A     		subs	r3, r3, r2
 1100 00ac 1846     		mov	r0, r3
 1101 00ae FFF7FEFF 		bl	__aeabi_i2d
 1102 00b2 0446     		mov	r4, r0
 1103 00b4 0D46     		mov	r5, r1
 1104 00b6 7B6B     		ldr	r3, [r7, #52]
 1105 00b8 DA0F     		lsrs	r2, r3, #31
 1106 00ba 1344     		add	r3, r3, r2
 1107 00bc 5B10     		asrs	r3, r3, #1
 1108 00be 1A46     		mov	r2, r3
 1109 00c0 3B6D     		ldr	r3, [r7, #80]
 1110 00c2 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 24


 1111 00c4 1846     		mov	r0, r3
 1112 00c6 FFF7FEFF 		bl	__aeabi_i2d
 1113 00ca 0246     		mov	r2, r0
 1114 00cc 0B46     		mov	r3, r1
 1115 00ce 2046     		mov	r0, r4
 1116 00d0 2946     		mov	r1, r5
 1117 00d2 FFF7FEFF 		bl	atan2
 1118 00d6 4FF00002 		mov	r2, #0
 1119 00da 8B4B     		ldr	r3, .L71+8
 1120 00dc FFF7FEFF 		bl	__aeabi_dmul
 1121 00e0 0346     		mov	r3, r0
 1122 00e2 0C46     		mov	r4, r1
 1123 00e4 1846     		mov	r0, r3
 1124 00e6 2146     		mov	r1, r4
 1125 00e8 85A3     		adr	r3, .L71
 1126 00ea D3E90023 		ldrd	r2, [r3]
 1127 00ee FFF7FEFF 		bl	__aeabi_ddiv
 1128 00f2 0346     		mov	r3, r0
 1129 00f4 0C46     		mov	r4, r1
 1130 00f6 1846     		mov	r0, r3
 1131 00f8 2146     		mov	r1, r4
 1132 00fa 4FF00002 		mov	r2, #0
 1133 00fe 834B     		ldr	r3, .L71+12
 1134 0100 FFF7FEFF 		bl	true_mod
 1135 0104 C7E90801 		strd	r0, [r7, #32]
 186:..\VFH/vfh.c  **** 
 187:..\VFH/vfh.c  ****       /* Calculate the obstacle density of this cell. */
 188:..\VFH/vfh.c  ****       double density = pow(active->cells[i * width + j], 2);
 1136              		.loc 1 188 0 discriminator 3
 1137 0108 BB68     		ldr	r3, [r7, #8]
 1138 010a DA68     		ldr	r2, [r3, #12]
 1139 010c 3B6D     		ldr	r3, [r7, #80]
 1140 010e 796B     		ldr	r1, [r7, #52]
 1141 0110 01FB03F1 		mul	r1, r1, r3
 1142 0114 FB6C     		ldr	r3, [r7, #76]
 1143 0116 0B44     		add	r3, r3, r1
 1144 0118 9B00     		lsls	r3, r3, #2
 1145 011a 1344     		add	r3, r3, r2
 1146 011c 1B68     		ldr	r3, [r3]
 1147 011e 1846     		mov	r0, r3
 1148 0120 FFF7FEFF 		bl	__aeabi_ui2d
 1149 0124 4FF00002 		mov	r2, #0
 1150 0128 4FF08043 		mov	r3, #1073741824
 1151 012c FFF7FEFF 		bl	pow
 1152 0130 C7E90601 		strd	r0, [r7, #24]
 189:..\VFH/vfh.c  ****       density *= a - b * sqrt(pow(i - width/2, 2) + pow(j - height/2, 2));
 1153              		.loc 1 189 0 discriminator 3
 1154 0134 7B6B     		ldr	r3, [r7, #52]
 1155 0136 DA0F     		lsrs	r2, r3, #31
 1156 0138 1344     		add	r3, r3, r2
 1157 013a 5B10     		asrs	r3, r3, #1
 1158 013c 1A46     		mov	r2, r3
 1159 013e 3B6D     		ldr	r3, [r7, #80]
 1160 0140 9B1A     		subs	r3, r3, r2
 1161 0142 1846     		mov	r0, r3
 1162 0144 FFF7FEFF 		bl	__aeabi_i2d
 1163 0148 4FF00002 		mov	r2, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 25


 1164 014c 4FF08043 		mov	r3, #1073741824
 1165 0150 FFF7FEFF 		bl	pow
 1166 0154 0446     		mov	r4, r0
 1167 0156 0D46     		mov	r5, r1
 1168 0158 3B6B     		ldr	r3, [r7, #48]
 1169 015a DA0F     		lsrs	r2, r3, #31
 1170 015c 1344     		add	r3, r3, r2
 1171 015e 5B10     		asrs	r3, r3, #1
 1172 0160 1A46     		mov	r2, r3
 1173 0162 FB6C     		ldr	r3, [r7, #76]
 1174 0164 9B1A     		subs	r3, r3, r2
 1175 0166 1846     		mov	r0, r3
 1176 0168 FFF7FEFF 		bl	__aeabi_i2d
 1177 016c 4FF00002 		mov	r2, #0
 1178 0170 4FF08043 		mov	r3, #1073741824
 1179 0174 FFF7FEFF 		bl	pow
 1180 0178 0246     		mov	r2, r0
 1181 017a 0B46     		mov	r3, r1
 1182 017c 2046     		mov	r0, r4
 1183 017e 2946     		mov	r1, r5
 1184 0180 FFF7FEFF 		bl	__aeabi_dadd
 1185 0184 0346     		mov	r3, r0
 1186 0186 0C46     		mov	r4, r1
 1187 0188 1846     		mov	r0, r3
 1188 018a 2146     		mov	r1, r4
 1189 018c FFF7FEFF 		bl	sqrt
 1190 0190 D7E92223 		ldrd	r2, [r7, #136]
 1191 0194 FFF7FEFF 		bl	__aeabi_dmul
 1192 0198 0346     		mov	r3, r0
 1193 019a 0C46     		mov	r4, r1
 1194 019c 1A46     		mov	r2, r3
 1195 019e 2346     		mov	r3, r4
 1196 01a0 D7E92001 		ldrd	r0, [r7, #128]
 1197 01a4 FFF7FEFF 		bl	__aeabi_dsub
 1198 01a8 0346     		mov	r3, r0
 1199 01aa 0C46     		mov	r4, r1
 1200 01ac 1A46     		mov	r2, r3
 1201 01ae 2346     		mov	r3, r4
 1202 01b0 D7E90601 		ldrd	r0, [r7, #24]
 1203 01b4 FFF7FEFF 		bl	__aeabi_dmul
 1204 01b8 0346     		mov	r3, r0
 1205 01ba 0C46     		mov	r4, r1
 1206 01bc C7E90634 		strd	r3, [r7, #24]
 190:..\VFH/vfh.c  **** 
 191:..\VFH/vfh.c  ****       /* Add density to respective point in the histogram. */
 192:..\VFH/vfh.c  ****       POD_hist[(int) floor(beta / alpha)] += density;
 1207              		.loc 1 192 0 discriminator 3
 1208 01c0 D7E90023 		ldrd	r2, [r7]
 1209 01c4 D7E90801 		ldrd	r0, [r7, #32]
 1210 01c8 FFF7FEFF 		bl	__aeabi_ddiv
 1211 01cc 0346     		mov	r3, r0
 1212 01ce 0C46     		mov	r4, r1
 1213 01d0 1846     		mov	r0, r3
 1214 01d2 2146     		mov	r1, r4
 1215 01d4 FFF7FEFF 		bl	floor
 1216 01d8 0346     		mov	r3, r0
 1217 01da 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 26


 1218 01dc 1846     		mov	r0, r3
 1219 01de 2146     		mov	r1, r4
 1220 01e0 FFF7FEFF 		bl	__aeabi_d2iz
 1221 01e4 0546     		mov	r5, r0
 1222 01e6 D7E90023 		ldrd	r2, [r7]
 1223 01ea D7E90801 		ldrd	r0, [r7, #32]
 1224 01ee FFF7FEFF 		bl	__aeabi_ddiv
 1225 01f2 0346     		mov	r3, r0
 1226 01f4 0C46     		mov	r4, r1
 1227 01f6 1846     		mov	r0, r3
 1228 01f8 2146     		mov	r1, r4
 1229 01fa FFF7FEFF 		bl	floor
 1230 01fe 0346     		mov	r3, r0
 1231 0200 0C46     		mov	r4, r1
 1232 0202 1846     		mov	r0, r3
 1233 0204 2146     		mov	r1, r4
 1234 0206 FFF7FEFF 		bl	__aeabi_d2iz
 1235 020a 0346     		mov	r3, r0
 1236 020c BA6A     		ldr	r2, [r7, #40]
 1237 020e DB00     		lsls	r3, r3, #3
 1238 0210 1344     		add	r3, r3, r2
 1239 0212 D3E90001 		ldrd	r0, [r3]
 1240 0216 D7E90623 		ldrd	r2, [r7, #24]
 1241 021a FFF7FEFF 		bl	__aeabi_dadd
 1242 021e 0346     		mov	r3, r0
 1243 0220 0C46     		mov	r4, r1
 1244 0222 B96A     		ldr	r1, [r7, #40]
 1245 0224 EA00     		lsls	r2, r5, #3
 1246 0226 0A44     		add	r2, r2, r1
 1247 0228 C2E90034 		strd	r3, [r2]
 1248              	.LBE14:
 183:..\VFH/vfh.c  ****         /* Calculate the angular position (beta) of this cell. */
 1249              		.loc 1 183 0 discriminator 3
 1250 022c FB6C     		ldr	r3, [r7, #76]
 1251 022e 0133     		adds	r3, r3, #1
 1252 0230 FB64     		str	r3, [r7, #76]
 1253              	.L62:
 183:..\VFH/vfh.c  ****         /* Calculate the angular position (beta) of this cell. */
 1254              		.loc 1 183 0 is_stmt 0 discriminator 1
 1255 0232 FA6C     		ldr	r2, [r7, #76]
 1256 0234 3B6B     		ldr	r3, [r7, #48]
 1257 0236 9A42     		cmp	r2, r3
 1258 0238 FFF631AF 		blt	.L63
 1259              	.LBE13:
 182:..\VFH/vfh.c  ****     for (int j=0; j < height; j++) {
 1260              		.loc 1 182 0 is_stmt 1 discriminator 2
 1261 023c 3B6D     		ldr	r3, [r7, #80]
 1262 023e 0133     		adds	r3, r3, #1
 1263 0240 3B65     		str	r3, [r7, #80]
 1264              	.L61:
 182:..\VFH/vfh.c  ****     for (int j=0; j < height; j++) {
 1265              		.loc 1 182 0 is_stmt 0 discriminator 1
 1266 0242 3A6D     		ldr	r2, [r7, #80]
 1267 0244 7B6B     		ldr	r3, [r7, #52]
 1268 0246 9A42     		cmp	r2, r3
 1269 0248 FFF626AF 		blt	.L64
 1270              	.LBE12:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 27


 1271              	.LBB15:
 193:..\VFH/vfh.c  ****     }
 194:..\VFH/vfh.c  ****     
 195:..\VFH/vfh.c  ****   }
 196:..\VFH/vfh.c  ****   
 197:..\VFH/vfh.c  ****   
 198:..\VFH/vfh.c  **** 
 199:..\VFH/vfh.c  ****   // Smoothing POD histogram
 200:..\VFH/vfh.c  ****   for (int i=0; i < sectors; i++) {
 1272              		.loc 1 200 0 is_stmt 1
 1273 024c 0023     		movs	r3, #0
 1274 024e BB64     		str	r3, [r7, #72]
 1275 0250 CEE0     		b	.L65
 1276              	.L70:
 1277              	.LBB16:
 201:..\VFH/vfh.c  ****     double sum_element = POD_hist[i] * l;
 1278              		.loc 1 201 0
 1279 0252 BA6A     		ldr	r2, [r7, #40]
 1280 0254 BB6C     		ldr	r3, [r7, #72]
 1281 0256 DB00     		lsls	r3, r3, #3
 1282 0258 1344     		add	r3, r3, r2
 1283 025a D3E90001 		ldrd	r0, [r3]
 1284 025e D7E91E23 		ldrd	r2, [r7, #120]
 1285 0262 FFF7FEFF 		bl	__aeabi_dmul
 1286 0266 0346     		mov	r3, r0
 1287 0268 0C46     		mov	r4, r1
 1288 026a C7E91034 		strd	r3, [r7, #64]
 1289              	.LBB17:
 202:..\VFH/vfh.c  **** 
 203:..\VFH/vfh.c  ****     for (int j=0; j < l; j++) {
 1290              		.loc 1 203 0
 1291 026e 0023     		movs	r3, #0
 1292 0270 FB63     		str	r3, [r7, #60]
 1293 0272 8BE0     		b	.L66
 1294              	.L69:
 204:..\VFH/vfh.c  ****         if (i - (j+1) < 0) {
 1295              		.loc 1 204 0
 1296 0274 FB6B     		ldr	r3, [r7, #60]
 1297 0276 0133     		adds	r3, r3, #1
 1298 0278 BA6C     		ldr	r2, [r7, #72]
 1299 027a D31A     		subs	r3, r2, r3
 1300 027c 002B     		cmp	r3, #0
 1301 027e 47DA     		bge	.L67
 205:..\VFH/vfh.c  ****             sum_element += (POD_hist[i-(j+1)+sectors] + POD_hist[(i+(j+1)) % sectors]) * (l - j);
 1302              		.loc 1 205 0
 1303 0280 FB6B     		ldr	r3, [r7, #60]
 1304 0282 0133     		adds	r3, r3, #1
 1305 0284 BA6C     		ldr	r2, [r7, #72]
 1306 0286 D21A     		subs	r2, r2, r3
 1307 0288 BB6B     		ldr	r3, [r7, #56]
 1308 028a 1344     		add	r3, r3, r2
 1309 028c BA6A     		ldr	r2, [r7, #40]
 1310 028e DB00     		lsls	r3, r3, #3
 1311 0290 1344     		add	r3, r3, r2
 1312 0292 D3E90001 		ldrd	r0, [r3]
 1313 0296 FB6B     		ldr	r3, [r7, #60]
 1314 0298 5A1C     		adds	r2, r3, #1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 28


 1315 029a BB6C     		ldr	r3, [r7, #72]
 1316 029c 1344     		add	r3, r3, r2
 1317 029e BA6B     		ldr	r2, [r7, #56]
 1318 02a0 93FBF2F2 		sdiv	r2, r3, r2
 1319 02a4 BC6B     		ldr	r4, [r7, #56]
 1320 02a6 04FB02F2 		mul	r2, r4, r2
 1321 02aa 9B1A     		subs	r3, r3, r2
 1322 02ac BA6A     		ldr	r2, [r7, #40]
 1323 02ae DB00     		lsls	r3, r3, #3
 1324 02b0 1344     		add	r3, r3, r2
 1325 02b2 18CB     		ldmia	r3, {r3-r4}
 1326 02b4 1A46     		mov	r2, r3
 1327 02b6 2346     		mov	r3, r4
 1328 02b8 FFF7FEFF 		bl	__aeabi_dadd
 1329 02bc 0346     		mov	r3, r0
 1330 02be 0C46     		mov	r4, r1
 1331 02c0 2546     		mov	r5, r4
 1332 02c2 1C46     		mov	r4, r3
 1333 02c4 F86B     		ldr	r0, [r7, #60]
 1334 02c6 FFF7FEFF 		bl	__aeabi_i2d
 1335 02ca 0246     		mov	r2, r0
 1336 02cc 0B46     		mov	r3, r1
 1337 02ce D7E91E01 		ldrd	r0, [r7, #120]
 1338 02d2 FFF7FEFF 		bl	__aeabi_dsub
 1339 02d6 0246     		mov	r2, r0
 1340 02d8 0B46     		mov	r3, r1
 1341 02da 2046     		mov	r0, r4
 1342 02dc 2946     		mov	r1, r5
 1343 02de FFF7FEFF 		bl	__aeabi_dmul
 1344 02e2 0346     		mov	r3, r0
 1345 02e4 0C46     		mov	r4, r1
 1346 02e6 1A46     		mov	r2, r3
 1347 02e8 2346     		mov	r3, r4
 1348 02ea D7E91001 		ldrd	r0, [r7, #64]
 1349 02ee FFF7FEFF 		bl	__aeabi_dadd
 1350 02f2 0346     		mov	r3, r0
 1351 02f4 0C46     		mov	r4, r1
 1352 02f6 C7E91034 		strd	r3, [r7, #64]
 1353 02fa 44E0     		b	.L68
 1354              	.L72:
 1355 02fc AFF30080 		.align	3
 1356              	.L71:
 1357 0300 182D4454 		.word	1413754136
 1358 0304 FB210940 		.word	1074340347
 1359 0308 00806640 		.word	1080459264
 1360 030c 00807640 		.word	1081507840
 1361              	.L67:
 206:..\VFH/vfh.c  ****         } else {
 207:..\VFH/vfh.c  ****             sum_element += (POD_hist[i-(j+1)] + POD_hist[(i+(j+1)) % sectors]) * (l - j);
 1362              		.loc 1 207 0
 1363 0310 FB6B     		ldr	r3, [r7, #60]
 1364 0312 0133     		adds	r3, r3, #1
 1365 0314 BA6C     		ldr	r2, [r7, #72]
 1366 0316 D31A     		subs	r3, r2, r3
 1367 0318 BA6A     		ldr	r2, [r7, #40]
 1368 031a DB00     		lsls	r3, r3, #3
 1369 031c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 29


 1370 031e D3E90001 		ldrd	r0, [r3]
 1371 0322 FB6B     		ldr	r3, [r7, #60]
 1372 0324 5A1C     		adds	r2, r3, #1
 1373 0326 BB6C     		ldr	r3, [r7, #72]
 1374 0328 1344     		add	r3, r3, r2
 1375 032a BA6B     		ldr	r2, [r7, #56]
 1376 032c 93FBF2F2 		sdiv	r2, r3, r2
 1377 0330 BC6B     		ldr	r4, [r7, #56]
 1378 0332 04FB02F2 		mul	r2, r4, r2
 1379 0336 9B1A     		subs	r3, r3, r2
 1380 0338 BA6A     		ldr	r2, [r7, #40]
 1381 033a DB00     		lsls	r3, r3, #3
 1382 033c 1344     		add	r3, r3, r2
 1383 033e 18CB     		ldmia	r3, {r3-r4}
 1384 0340 1A46     		mov	r2, r3
 1385 0342 2346     		mov	r3, r4
 1386 0344 FFF7FEFF 		bl	__aeabi_dadd
 1387 0348 0346     		mov	r3, r0
 1388 034a 0C46     		mov	r4, r1
 1389 034c 2546     		mov	r5, r4
 1390 034e 1C46     		mov	r4, r3
 1391 0350 F86B     		ldr	r0, [r7, #60]
 1392 0352 FFF7FEFF 		bl	__aeabi_i2d
 1393 0356 0246     		mov	r2, r0
 1394 0358 0B46     		mov	r3, r1
 1395 035a D7E91E01 		ldrd	r0, [r7, #120]
 1396 035e FFF7FEFF 		bl	__aeabi_dsub
 1397 0362 0246     		mov	r2, r0
 1398 0364 0B46     		mov	r3, r1
 1399 0366 2046     		mov	r0, r4
 1400 0368 2946     		mov	r1, r5
 1401 036a FFF7FEFF 		bl	__aeabi_dmul
 1402 036e 0346     		mov	r3, r0
 1403 0370 0C46     		mov	r4, r1
 1404 0372 1A46     		mov	r2, r3
 1405 0374 2346     		mov	r3, r4
 1406 0376 D7E91001 		ldrd	r0, [r7, #64]
 1407 037a FFF7FEFF 		bl	__aeabi_dadd
 1408 037e 0346     		mov	r3, r0
 1409 0380 0C46     		mov	r4, r1
 1410 0382 C7E91034 		strd	r3, [r7, #64]
 1411              	.L68:
 203:..\VFH/vfh.c  ****         if (i - (j+1) < 0) {
 1412              		.loc 1 203 0 discriminator 2
 1413 0386 FB6B     		ldr	r3, [r7, #60]
 1414 0388 0133     		adds	r3, r3, #1
 1415 038a FB63     		str	r3, [r7, #60]
 1416              	.L66:
 203:..\VFH/vfh.c  ****         if (i - (j+1) < 0) {
 1417              		.loc 1 203 0 is_stmt 0 discriminator 1
 1418 038c F86B     		ldr	r0, [r7, #60]
 1419 038e FFF7FEFF 		bl	__aeabi_i2d
 1420 0392 D7E91E23 		ldrd	r2, [r7, #120]
 1421 0396 FFF7FEFF 		bl	__aeabi_dcmplt
 1422 039a 0346     		mov	r3, r0
 1423 039c 002B     		cmp	r3, #0
 1424 039e 7FF469AF 		bne	.L69
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 30


 1425              	.LBE17:
 208:..\VFH/vfh.c  ****         }
 209:..\VFH/vfh.c  ****     }
 210:..\VFH/vfh.c  **** 
 211:..\VFH/vfh.c  ****     double smoothed_element = sum_element / ((2 * l) + 1);
 1426              		.loc 1 211 0 is_stmt 1 discriminator 2
 1427 03a2 D7E91E01 		ldrd	r0, [r7, #120]
 1428 03a6 0246     		mov	r2, r0
 1429 03a8 0B46     		mov	r3, r1
 1430 03aa FFF7FEFF 		bl	__aeabi_dadd
 1431 03ae 0346     		mov	r3, r0
 1432 03b0 0C46     		mov	r4, r1
 1433 03b2 1846     		mov	r0, r3
 1434 03b4 2146     		mov	r1, r4
 1435 03b6 4FF00002 		mov	r2, #0
 1436 03ba 134B     		ldr	r3, .L73
 1437 03bc FFF7FEFF 		bl	__aeabi_dadd
 1438 03c0 0346     		mov	r3, r0
 1439 03c2 0C46     		mov	r4, r1
 1440 03c4 1A46     		mov	r2, r3
 1441 03c6 2346     		mov	r3, r4
 1442 03c8 D7E91001 		ldrd	r0, [r7, #64]
 1443 03cc FFF7FEFF 		bl	__aeabi_ddiv
 1444 03d0 0346     		mov	r3, r0
 1445 03d2 0C46     		mov	r4, r1
 1446 03d4 C7E90434 		strd	r3, [r7, #16]
 212:..\VFH/vfh.c  ****     smoothed_POD->density[i] = smoothed_element;
 1447              		.loc 1 212 0 discriminator 2
 1448 03d8 FB68     		ldr	r3, [r7, #12]
 1449 03da 5A68     		ldr	r2, [r3, #4]
 1450 03dc BB6C     		ldr	r3, [r7, #72]
 1451 03de DB00     		lsls	r3, r3, #3
 1452 03e0 1A44     		add	r2, r2, r3
 1453 03e2 D7E90434 		ldrd	r3, [r7, #16]
 1454 03e6 C2E90034 		strd	r3, [r2]
 1455              	.LBE16:
 200:..\VFH/vfh.c  ****     double sum_element = POD_hist[i] * l;
 1456              		.loc 1 200 0 discriminator 2
 1457 03ea BB6C     		ldr	r3, [r7, #72]
 1458 03ec 0133     		adds	r3, r3, #1
 1459 03ee BB64     		str	r3, [r7, #72]
 1460              	.L65:
 200:..\VFH/vfh.c  ****     double sum_element = POD_hist[i] * l;
 1461              		.loc 1 200 0 is_stmt 0 discriminator 1
 1462 03f0 BA6C     		ldr	r2, [r7, #72]
 1463 03f2 BB6B     		ldr	r3, [r7, #56]
 1464 03f4 9A42     		cmp	r2, r3
 1465 03f6 FFF62CAF 		blt	.L70
 1466              	.LBE15:
 1467 03fa B546     		mov	sp, r6
 213:..\VFH/vfh.c  ****   }
 214:..\VFH/vfh.c  **** 
 215:..\VFH/vfh.c  **** }
 1468              		.loc 1 215 0 is_stmt 1
 1469 03fc 00BF     		nop
 1470 03fe 5C37     		adds	r7, r7, #92
 1471              		.cfi_def_cfa_offset 28
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 31


 1472 0400 BD46     		mov	sp, r7
 1473              		.cfi_def_cfa_register 13
 1474              		@ sp needed
 1475 0402 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1476              	.L74:
 1477 0406 00BF     		.align	2
 1478              	.L73:
 1479 0408 0000F03F 		.word	1072693248
 1480              		.cfi_endproc
 1481              	.LFE6:
 1482              		.size	smoothed_POD_histogram, .-smoothed_POD_histogram
 1483              		.global	__aeabi_dcmpeq
 1484              		.section	.text.calculate_avoidance_angle,"ax",%progbits
 1485              		.align	2
 1486              		.global	calculate_avoidance_angle
 1487              		.thumb
 1488              		.thumb_func
 1489              		.type	calculate_avoidance_angle, %function
 1490              	calculate_avoidance_angle:
 1491              	.LFB7:
 216:..\VFH/vfh.c  **** 
 217:..\VFH/vfh.c  **** 
 218:..\VFH/vfh.c  **** /*=======================================================================*/
 219:..\VFH/vfh.c  **** 
 220:..\VFH/vfh.c  **** 
 221:..\VFH/vfh.c  **** double calculate_avoidance_angle(POD *smoothed_POD, Robot * robot, int * candidate_lst, double alph
 1492              		.loc 1 221 0
 1493              		.cfi_startproc
 1494              		@ args = 12, pretend = 0, frame = 152
 1495              		@ frame_needed = 1, uses_anonymous_args = 0
 1496 0000 B0B5     		push	{r4, r5, r7, lr}
 1497              		.cfi_def_cfa_offset 16
 1498              		.cfi_offset 4, -16
 1499              		.cfi_offset 5, -12
 1500              		.cfi_offset 7, -8
 1501              		.cfi_offset 14, -4
 1502 0002 ACB0     		sub	sp, sp, #176
 1503              		.cfi_def_cfa_offset 192
 1504 0004 06AF     		add	r7, sp, #24
 1505              		.cfi_def_cfa 7, 168
 1506 0006 F860     		str	r0, [r7, #12]
 1507 0008 B960     		str	r1, [r7, #8]
 1508 000a 7A60     		str	r2, [r7, #4]
 222:..\VFH/vfh.c  ****   /* Retrieves the angle that the robot must drive towards. */
 223:..\VFH/vfh.c  ****   int candidates_len = 72;
 1509              		.loc 1 223 0
 1510 000c 4823     		movs	r3, #72
 1511 000e 7B66     		str	r3, [r7, #100]
 224:..\VFH/vfh.c  ****   int nsectors = smoothed_POD->nsectors;
 1512              		.loc 1 224 0
 1513 0010 FB68     		ldr	r3, [r7, #12]
 1514 0012 1B68     		ldr	r3, [r3]
 1515 0014 3B66     		str	r3, [r7, #96]
 225:..\VFH/vfh.c  **** 
 226:..\VFH/vfh.c  ****   // Retrive useful variables
 227:..\VFH/vfh.c  ****   double pos_x = robot->x;
 1516              		.loc 1 227 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 32


 1517 0016 BB68     		ldr	r3, [r7, #8]
 1518 0018 03F11004 		add	r4, r3, #16
 1519 001c D4E90034 		ldrd	r3, [r4]
 1520 0020 C7E91634 		strd	r3, [r7, #88]
 228:..\VFH/vfh.c  ****   double pos_y = robot->y;
 1521              		.loc 1 228 0
 1522 0024 BB68     		ldr	r3, [r7, #8]
 1523 0026 03F11804 		add	r4, r3, #24
 1524 002a D4E90034 		ldrd	r3, [r4]
 1525 002e C7E91434 		strd	r3, [r7, #80]
 229:..\VFH/vfh.c  ****   double pos_yaw = robot->theta;
 1526              		.loc 1 229 0
 1527 0032 BB68     		ldr	r3, [r7, #8]
 1528 0034 03F10804 		add	r4, r3, #8
 1529 0038 D4E90034 		ldrd	r3, [r4]
 1530 003c C7E91234 		strd	r3, [r7, #72]
 230:..\VFH/vfh.c  ****   double goal_x = robot->goal_x;
 1531              		.loc 1 230 0
 1532 0040 BB68     		ldr	r3, [r7, #8]
 1533 0042 03F15804 		add	r4, r3, #88
 1534 0046 D4E90034 		ldrd	r3, [r4]
 1535 004a C7E91034 		strd	r3, [r7, #64]
 231:..\VFH/vfh.c  ****   double goal_y = robot->goal_y;
 1536              		.loc 1 231 0
 1537 004e BB68     		ldr	r3, [r7, #8]
 1538 0050 03F16004 		add	r4, r3, #96
 1539 0054 D4E90034 		ldrd	r3, [r4]
 1540 0058 C7E90E34 		strd	r3, [r7, #56]
 232:..\VFH/vfh.c  **** 
 233:..\VFH/vfh.c  ****   double goal_angle = calculate_goal_angle(pos_x, pos_y, pos_yaw, goal_x, goal_y);
 1541              		.loc 1 233 0
 1542 005c D7E90E34 		ldrd	r3, [r7, #56]
 1543 0060 CDE90434 		strd	r3, [sp, #16]
 1544 0064 D7E91034 		ldrd	r3, [r7, #64]
 1545 0068 CDE90234 		strd	r3, [sp, #8]
 1546 006c D7E91234 		ldrd	r3, [r7, #72]
 1547 0070 CDE90034 		strd	r3, [sp]
 1548 0074 D7E91423 		ldrd	r2, [r7, #80]
 1549 0078 D7E91601 		ldrd	r0, [r7, #88]
 1550 007c FFF7FEFF 		bl	calculate_goal_angle
 1551 0080 C7E90C01 		strd	r0, [r7, #48]
 234:..\VFH/vfh.c  ****   int goal_sector = round((180 * calculate_angle_modulo(goal_angle) / M_PI) / alpha);
 1552              		.loc 1 234 0
 1553 0084 D7E90C01 		ldrd	r0, [r7, #48]
 1554 0088 FFF7FEFF 		bl	calculate_angle_modulo
 1555 008c 4FF00002 		mov	r2, #0
 1556 0090 A34B     		ldr	r3, .L102+16
 1557 0092 FFF7FEFF 		bl	__aeabi_dmul
 1558 0096 0346     		mov	r3, r0
 1559 0098 0C46     		mov	r4, r1
 1560 009a 1846     		mov	r0, r3
 1561 009c 2146     		mov	r1, r4
 1562 009e 9CA3     		adr	r3, .L102
 1563 00a0 D3E90023 		ldrd	r2, [r3]
 1564 00a4 FFF7FEFF 		bl	__aeabi_ddiv
 1565 00a8 0346     		mov	r3, r0
 1566 00aa 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 33


 1567 00ac 1846     		mov	r0, r3
 1568 00ae 2146     		mov	r1, r4
 1569 00b0 D7E92A23 		ldrd	r2, [r7, #168]
 1570 00b4 FFF7FEFF 		bl	__aeabi_ddiv
 1571 00b8 0346     		mov	r3, r0
 1572 00ba 0C46     		mov	r4, r1
 1573 00bc 1846     		mov	r0, r3
 1574 00be 2146     		mov	r1, r4
 1575 00c0 FFF7FEFF 		bl	round
 1576 00c4 0346     		mov	r3, r0
 1577 00c6 0C46     		mov	r4, r1
 1578 00c8 1846     		mov	r0, r3
 1579 00ca 2146     		mov	r1, r4
 1580 00cc FFF7FEFF 		bl	__aeabi_d2iz
 1581 00d0 0346     		mov	r3, r0
 1582 00d2 FB62     		str	r3, [r7, #44]
 235:..\VFH/vfh.c  ****   int abs_min = 1000;
 1583              		.loc 1 235 0
 1584 00d4 4FF47A73 		mov	r3, #1000
 1585 00d8 C7F89430 		str	r3, [r7, #148]
 236:..\VFH/vfh.c  ****   int k_n, k_f;
 237:..\VFH/vfh.c  ****   int valley_flag = 0;
 1586              		.loc 1 237 0
 1587 00dc 0023     		movs	r3, #0
 1588 00de C7F88830 		str	r3, [r7, #136]
 238:..\VFH/vfh.c  ****   int abs_sec = 0;      // Sector where the absolute minimum distance is
 1589              		.loc 1 238 0
 1590 00e2 0023     		movs	r3, #0
 1591 00e4 C7F88430 		str	r3, [r7, #132]
 239:..\VFH/vfh.c  ****   int min_val = 1000;
 1592              		.loc 1 239 0
 1593 00e8 4FF47A73 		mov	r3, #1000
 1594 00ec C7F88030 		str	r3, [r7, #128]
 240:..\VFH/vfh.c  ****   double best_angle = 1000;  // Degrees
 1595              		.loc 1 240 0
 1596 00f0 4FF00003 		mov	r3, #0
 1597 00f4 8B4C     		ldr	r4, .L102+20
 1598 00f6 C7E91E34 		strd	r3, [r7, #120]
 1599              	.LBB18:
 241:..\VFH/vfh.c  **** 
 242:..\VFH/vfh.c  ****   // Find angle, note we are working in degrees here
 243:..\VFH/vfh.c  ****   for (int i = 0; i < candidates_len; i++) {
 1600              		.loc 1 243 0
 1601 00fa 0023     		movs	r3, #0
 1602 00fc 7B67     		str	r3, [r7, #116]
 1603 00fe 17E1     		b	.L76
 1604              	.L93:
 1605              	.LBB19:
 244:..\VFH/vfh.c  ****     int idx = candidate_lst[i];
 1606              		.loc 1 244 0
 1607 0100 7B6F     		ldr	r3, [r7, #116]
 1608 0102 9B00     		lsls	r3, r3, #2
 1609 0104 7A68     		ldr	r2, [r7, #4]
 1610 0106 1344     		add	r3, r3, r2
 1611 0108 1B68     		ldr	r3, [r3]
 1612 010a BB62     		str	r3, [r7, #40]
 245:..\VFH/vfh.c  ****   
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 34


 246:..\VFH/vfh.c  ****     // Calculating the minimum distance between the goal sector and the candidate valley
 247:..\VFH/vfh.c  ****     int min_distance;
 248:..\VFH/vfh.c  ****     //int knf_flag;       // Check if min distance is from the nearest or farthest edge
 249:..\VFH/vfh.c  ****     double angle;       // Degrees
 250:..\VFH/vfh.c  ****     
 251:..\VFH/vfh.c  ****     switch(idx) {
 1613              		.loc 1 251 0
 1614 010c BB6A     		ldr	r3, [r7, #40]
 1615 010e 002B     		cmp	r3, #0
 1616 0110 02D0     		beq	.L78
 1617 0112 012B     		cmp	r3, #1
 1618 0114 3CD0     		beq	.L79
 1619 0116 F3E0     		b	.L99
 1620              	.L78:
 252:..\VFH/vfh.c  ****         case 0:
 253:..\VFH/vfh.c  ****             // Early exit case if goal sector is clear
 254:..\VFH/vfh.c  ****             if (i == goal_sector) {
 255:..\VFH/vfh.c  ****                 //return goal_sector * alpha;
 256:..\VFH/vfh.c  ****             }
 257:..\VFH/vfh.c  ****             
 258:..\VFH/vfh.c  ****             // Calculate the 'distance' between current sector and the goal sector
 259:..\VFH/vfh.c  ****             /*
 260:..\VFH/vfh.c  ****             if (abs(i - goal_sector) < abs(abs(i - goal_sector) - nsectors)) {
 261:..\VFH/vfh.c  ****                 min_distance = abs(i - goal_sector);
 262:..\VFH/vfh.c  ****             } else {
 263:..\VFH/vfh.c  ****                 min_distance = abs(abs(i - goal_sector) - nsectors);
 264:..\VFH/vfh.c  ****             }
 265:..\VFH/vfh.c  ****             */
 266:..\VFH/vfh.c  ****             min_distance = abs(i-goal_sector);
 1621              		.loc 1 266 0
 1622 0118 7A6F     		ldr	r2, [r7, #116]
 1623 011a FB6A     		ldr	r3, [r7, #44]
 1624 011c D31A     		subs	r3, r2, r3
 1625 011e 002B     		cmp	r3, #0
 1626 0120 B8BF     		it	lt
 1627 0122 5B42     		rsblt	r3, r3, #0
 1628 0124 7B62     		str	r3, [r7, #36]
 267:..\VFH/vfh.c  ****             min_distance = min_distance > nsectors/2? nsectors-min_distance: min_distance;
 1629              		.loc 1 267 0
 1630 0126 3B6E     		ldr	r3, [r7, #96]
 1631 0128 DA0F     		lsrs	r2, r3, #31
 1632 012a 1344     		add	r3, r3, r2
 1633 012c 5B10     		asrs	r3, r3, #1
 1634 012e 1A46     		mov	r2, r3
 1635 0130 7B6A     		ldr	r3, [r7, #36]
 1636 0132 9A42     		cmp	r2, r3
 1637 0134 03DA     		bge	.L80
 1638              		.loc 1 267 0 is_stmt 0 discriminator 1
 1639 0136 3A6E     		ldr	r2, [r7, #96]
 1640 0138 7B6A     		ldr	r3, [r7, #36]
 1641 013a D31A     		subs	r3, r2, r3
 1642 013c 00E0     		b	.L81
 1643              	.L80:
 1644              		.loc 1 267 0 discriminator 2
 1645 013e 7B6A     		ldr	r3, [r7, #36]
 1646              	.L81:
 1647              		.loc 1 267 0 discriminator 4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 35


 1648 0140 7B62     		str	r3, [r7, #36]
 268:..\VFH/vfh.c  ****             
 269:..\VFH/vfh.c  ****                 
 270:..\VFH/vfh.c  ****             // Start entering a valley
 271:..\VFH/vfh.c  ****             if (valley_flag) {
 1649              		.loc 1 271 0 is_stmt 1 discriminator 4
 1650 0142 D7F88830 		ldr	r3, [r7, #136]
 1651 0146 002B     		cmp	r3, #0
 1652 0148 11D0     		beq	.L82
 272:..\VFH/vfh.c  ****                 k_f++;
 1653              		.loc 1 272 0
 1654 014a D7F88C30 		ldr	r3, [r7, #140]
 1655 014e 0133     		adds	r3, r3, #1
 1656 0150 C7F88C30 		str	r3, [r7, #140]
 273:..\VFH/vfh.c  ****                 // Check if new sector is closer to the goal 
 274:..\VFH/vfh.c  ****                 if (min_distance < abs_min){
 1657              		.loc 1 274 0
 1658 0154 7A6A     		ldr	r2, [r7, #36]
 1659 0156 D7F89430 		ldr	r3, [r7, #148]
 1660 015a 9A42     		cmp	r2, r3
 1661 015c 80F2D480 		bge	.L100
 275:..\VFH/vfh.c  ****                     abs_min = min_distance;
 1662              		.loc 1 275 0
 1663 0160 7B6A     		ldr	r3, [r7, #36]
 1664 0162 C7F89430 		str	r3, [r7, #148]
 276:..\VFH/vfh.c  ****                     abs_sec = i;
 1665              		.loc 1 276 0
 1666 0166 7B6F     		ldr	r3, [r7, #116]
 1667 0168 C7F88430 		str	r3, [r7, #132]
 277:..\VFH/vfh.c  ****                     //knf_flag = k_f;
 278:..\VFH/vfh.c  ****                 }
 279:..\VFH/vfh.c  ****                 
 280:..\VFH/vfh.c  ****             } else { 
 281:..\VFH/vfh.c  ****                 // Always select closest to goal sector
 282:..\VFH/vfh.c  ****                 abs_min = min_distance;
 283:..\VFH/vfh.c  ****                 abs_sec = i;
 284:..\VFH/vfh.c  ****                 k_n = i;
 285:..\VFH/vfh.c  ****                 k_f = k_n;
 286:..\VFH/vfh.c  ****                 
 287:..\VFH/vfh.c  ****                 // Start valley
 288:..\VFH/vfh.c  ****                 valley_flag = 1;
 289:..\VFH/vfh.c  ****                 //knf_flag = 0;
 290:..\VFH/vfh.c  ****             }
 291:..\VFH/vfh.c  ****             break;
 1668              		.loc 1 291 0
 1669 016c CCE0     		b	.L100
 1670              	.L82:
 282:..\VFH/vfh.c  ****                 abs_sec = i;
 1671              		.loc 1 282 0
 1672 016e 7B6A     		ldr	r3, [r7, #36]
 1673 0170 C7F89430 		str	r3, [r7, #148]
 283:..\VFH/vfh.c  ****                 k_n = i;
 1674              		.loc 1 283 0
 1675 0174 7B6F     		ldr	r3, [r7, #116]
 1676 0176 C7F88430 		str	r3, [r7, #132]
 284:..\VFH/vfh.c  ****                 k_f = k_n;
 1677              		.loc 1 284 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 36


 1678 017a 7B6F     		ldr	r3, [r7, #116]
 1679 017c C7F89030 		str	r3, [r7, #144]
 285:..\VFH/vfh.c  ****                 
 1680              		.loc 1 285 0
 1681 0180 D7F89030 		ldr	r3, [r7, #144]
 1682 0184 C7F88C30 		str	r3, [r7, #140]
 288:..\VFH/vfh.c  ****                 //knf_flag = 0;
 1683              		.loc 1 288 0
 1684 0188 0123     		movs	r3, #1
 1685 018a C7F88830 		str	r3, [r7, #136]
 1686              		.loc 1 291 0
 1687 018e BBE0     		b	.L100
 1688              	.L79:
 292:..\VFH/vfh.c  ****         
 293:..\VFH/vfh.c  ****         case 1:
 294:..\VFH/vfh.c  ****             // Exiting a valley
 295:..\VFH/vfh.c  ****             if (valley_flag) {
 1689              		.loc 1 295 0
 1690 0190 D7F88830 		ldr	r3, [r7, #136]
 1691 0194 002B     		cmp	r3, #0
 1692 0196 00F0C780 		beq	.L101
 1693              	.LBB20:
 296:..\VFH/vfh.c  ****                 // Update Valley flag
 297:..\VFH/vfh.c  ****                 valley_flag = 0;
 1694              		.loc 1 297 0
 1695 019a 0023     		movs	r3, #0
 1696 019c C7F88830 		str	r3, [r7, #136]
 298:..\VFH/vfh.c  ****                 
 299:..\VFH/vfh.c  ****                 // Check for wide and narrow valleys
 300:..\VFH/vfh.c  ****                 if (abs(k_n - k_f) < s_max) {   // Narrow Valley
 1697              		.loc 1 300 0
 1698 01a0 D7F89020 		ldr	r2, [r7, #144]
 1699 01a4 D7F88C30 		ldr	r3, [r7, #140]
 1700 01a8 D31A     		subs	r3, r2, r3
 1701 01aa 83EAE372 		eor	r2, r3, r3, asr #31
 1702 01ae A2EBE372 		sub	r2, r2, r3, asr #31
 1703 01b2 D7F8B030 		ldr	r3, [r7, #176]
 1704 01b6 9A42     		cmp	r2, r3
 1705 01b8 1ADA     		bge	.L87
 301:..\VFH/vfh.c  ****                     angle = ((k_n + k_f) / 2 % nsectors) * alpha; // Degrees
 1706              		.loc 1 301 0
 1707 01ba D7F89020 		ldr	r2, [r7, #144]
 1708 01be D7F88C30 		ldr	r3, [r7, #140]
 1709 01c2 1344     		add	r3, r3, r2
 1710 01c4 DA0F     		lsrs	r2, r3, #31
 1711 01c6 1344     		add	r3, r3, r2
 1712 01c8 5B10     		asrs	r3, r3, #1
 1713 01ca 3A6E     		ldr	r2, [r7, #96]
 1714 01cc 93FBF2F2 		sdiv	r2, r3, r2
 1715 01d0 396E     		ldr	r1, [r7, #96]
 1716 01d2 01FB02F2 		mul	r2, r1, r2
 1717 01d6 9B1A     		subs	r3, r3, r2
 1718 01d8 1846     		mov	r0, r3
 1719 01da FFF7FEFF 		bl	__aeabi_i2d
 1720 01de D7E92A23 		ldrd	r2, [r7, #168]
 1721 01e2 FFF7FEFF 		bl	__aeabi_dmul
 1722 01e6 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 37


 1723 01e8 0C46     		mov	r4, r1
 1724 01ea C7E91A34 		strd	r3, [r7, #104]
 1725 01ee 4EE0     		b	.L88
 1726              	.L87:
 1727              	.LBB21:
 302:..\VFH/vfh.c  ****                         
 303:..\VFH/vfh.c  ****                 } else {                        // Wide Valley
 304:..\VFH/vfh.c  ****                     int first = abs(k_n - goal_sector);
 1728              		.loc 1 304 0
 1729 01f0 D7F89020 		ldr	r2, [r7, #144]
 1730 01f4 FB6A     		ldr	r3, [r7, #44]
 1731 01f6 D31A     		subs	r3, r2, r3
 1732 01f8 002B     		cmp	r3, #0
 1733 01fa B8BF     		it	lt
 1734 01fc 5B42     		rsblt	r3, r3, #0
 1735 01fe 3B62     		str	r3, [r7, #32]
 305:..\VFH/vfh.c  ****                     int last = abs(k_f - goal_sector);
 1736              		.loc 1 305 0
 1737 0200 D7F88C20 		ldr	r2, [r7, #140]
 1738 0204 FB6A     		ldr	r3, [r7, #44]
 1739 0206 D31A     		subs	r3, r2, r3
 1740 0208 002B     		cmp	r3, #0
 1741 020a B8BF     		it	lt
 1742 020c 5B42     		rsblt	r3, r3, #0
 1743 020e FB61     		str	r3, [r7, #28]
 306:..\VFH/vfh.c  ****                     if (first <= abs_min) {
 1744              		.loc 1 306 0
 1745 0210 3A6A     		ldr	r2, [r7, #32]
 1746 0212 D7F89430 		ldr	r3, [r7, #148]
 1747 0216 9A42     		cmp	r2, r3
 1748 0218 1ADC     		bgt	.L89
 307:..\VFH/vfh.c  ****                         angle = ((k_n + s_max) / 2 % nsectors) * alpha;
 1749              		.loc 1 307 0
 1750 021a D7F89020 		ldr	r2, [r7, #144]
 1751 021e D7F8B030 		ldr	r3, [r7, #176]
 1752 0222 1344     		add	r3, r3, r2
 1753 0224 DA0F     		lsrs	r2, r3, #31
 1754 0226 1344     		add	r3, r3, r2
 1755 0228 5B10     		asrs	r3, r3, #1
 1756 022a 3A6E     		ldr	r2, [r7, #96]
 1757 022c 93FBF2F2 		sdiv	r2, r3, r2
 1758 0230 396E     		ldr	r1, [r7, #96]
 1759 0232 01FB02F2 		mul	r2, r1, r2
 1760 0236 9B1A     		subs	r3, r3, r2
 1761 0238 1846     		mov	r0, r3
 1762 023a FFF7FEFF 		bl	__aeabi_i2d
 1763 023e D7E92A23 		ldrd	r2, [r7, #168]
 1764 0242 FFF7FEFF 		bl	__aeabi_dmul
 1765 0246 0346     		mov	r3, r0
 1766 0248 0C46     		mov	r4, r1
 1767 024a C7E91A34 		strd	r3, [r7, #104]
 1768 024e 1EE0     		b	.L88
 1769              	.L89:
 308:..\VFH/vfh.c  ****                     } else if (last < abs_min) {
 1770              		.loc 1 308 0
 1771 0250 FA69     		ldr	r2, [r7, #28]
 1772 0252 D7F89430 		ldr	r3, [r7, #148]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 38


 1773 0256 9A42     		cmp	r2, r3
 1774 0258 19DA     		bge	.L88
 309:..\VFH/vfh.c  ****                         angle = ((k_f - s_max ) / 2 % nsectors) * alpha;
 1775              		.loc 1 309 0
 1776 025a D7F88C20 		ldr	r2, [r7, #140]
 1777 025e D7F8B030 		ldr	r3, [r7, #176]
 1778 0262 D31A     		subs	r3, r2, r3
 1779 0264 DA0F     		lsrs	r2, r3, #31
 1780 0266 1344     		add	r3, r3, r2
 1781 0268 5B10     		asrs	r3, r3, #1
 1782 026a 3A6E     		ldr	r2, [r7, #96]
 1783 026c 93FBF2F2 		sdiv	r2, r3, r2
 1784 0270 396E     		ldr	r1, [r7, #96]
 1785 0272 01FB02F2 		mul	r2, r1, r2
 1786 0276 9B1A     		subs	r3, r3, r2
 1787 0278 1846     		mov	r0, r3
 1788 027a FFF7FEFF 		bl	__aeabi_i2d
 1789 027e D7E92A23 		ldrd	r2, [r7, #168]
 1790 0282 FFF7FEFF 		bl	__aeabi_dmul
 1791 0286 0346     		mov	r3, r0
 1792 0288 0C46     		mov	r4, r1
 1793 028a C7E91A34 		strd	r3, [r7, #104]
 1794              	.L88:
 1795              	.LBE21:
 310:..\VFH/vfh.c  ****                     }
 311:..\VFH/vfh.c  **** 
 312:..\VFH/vfh.c  ****                 }
 313:..\VFH/vfh.c  ****                     
 314:..\VFH/vfh.c  ****                 // Check if this angle is closer to goal sector than current best
 315:..\VFH/vfh.c  ****                 int dist_angle_to_goal = abs(angle/alpha - goal_sector); // in sectors
 1796              		.loc 1 315 0
 1797 028e D7E92A23 		ldrd	r2, [r7, #168]
 1798 0292 D7E91A01 		ldrd	r0, [r7, #104]
 1799 0296 FFF7FEFF 		bl	__aeabi_ddiv
 1800 029a 0346     		mov	r3, r0
 1801 029c 0C46     		mov	r4, r1
 1802 029e 2546     		mov	r5, r4
 1803 02a0 1C46     		mov	r4, r3
 1804 02a2 F86A     		ldr	r0, [r7, #44]
 1805 02a4 FFF7FEFF 		bl	__aeabi_i2d
 1806 02a8 0246     		mov	r2, r0
 1807 02aa 0B46     		mov	r3, r1
 1808 02ac 2046     		mov	r0, r4
 1809 02ae 2946     		mov	r1, r5
 1810 02b0 FFF7FEFF 		bl	__aeabi_dsub
 1811 02b4 0346     		mov	r3, r0
 1812 02b6 0C46     		mov	r4, r1
 1813 02b8 1846     		mov	r0, r3
 1814 02ba 2146     		mov	r1, r4
 1815 02bc FFF7FEFF 		bl	__aeabi_d2iz
 1816 02c0 0346     		mov	r3, r0
 1817 02c2 002B     		cmp	r3, #0
 1818 02c4 B8BF     		it	lt
 1819 02c6 5B42     		rsblt	r3, r3, #0
 1820 02c8 BB61     		str	r3, [r7, #24]
 316:..\VFH/vfh.c  ****                 dist_angle_to_goal = dist_angle_to_goal > nsectors/2? nsectors - dist_angle_to_goal
 1821              		.loc 1 316 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 39


 1822 02ca 3B6E     		ldr	r3, [r7, #96]
 1823 02cc DA0F     		lsrs	r2, r3, #31
 1824 02ce 1344     		add	r3, r3, r2
 1825 02d0 5B10     		asrs	r3, r3, #1
 1826 02d2 1A46     		mov	r2, r3
 1827 02d4 BB69     		ldr	r3, [r7, #24]
 1828 02d6 9A42     		cmp	r2, r3
 1829 02d8 03DA     		bge	.L90
 1830              		.loc 1 316 0 is_stmt 0 discriminator 1
 1831 02da 3A6E     		ldr	r2, [r7, #96]
 1832 02dc BB69     		ldr	r3, [r7, #24]
 1833 02de D31A     		subs	r3, r2, r3
 1834 02e0 00E0     		b	.L91
 1835              	.L90:
 1836              		.loc 1 316 0 discriminator 2
 1837 02e2 BB69     		ldr	r3, [r7, #24]
 1838              	.L91:
 1839              		.loc 1 316 0 discriminator 4
 1840 02e4 BB61     		str	r3, [r7, #24]
 317:..\VFH/vfh.c  ****                 if (dist_angle_to_goal < min_val) {
 1841              		.loc 1 317 0 is_stmt 1 discriminator 4
 1842 02e6 BA69     		ldr	r2, [r7, #24]
 1843 02e8 D7F88030 		ldr	r3, [r7, #128]
 1844 02ec 9A42     		cmp	r2, r3
 1845 02ee 1BDA     		bge	.L101
 318:..\VFH/vfh.c  ****                     best_angle = angle;
 1846              		.loc 1 318 0
 1847 02f0 D7E91A34 		ldrd	r3, [r7, #104]
 1848 02f4 C7E91E34 		strd	r3, [r7, #120]
 319:..\VFH/vfh.c  ****                     min_val = dist_angle_to_goal;
 1849              		.loc 1 319 0
 1850 02f8 BB69     		ldr	r3, [r7, #24]
 1851 02fa C7F88030 		str	r3, [r7, #128]
 1852              	.LBE20:
 320:..\VFH/vfh.c  ****                 }
 321:..\VFH/vfh.c  ****             } 
 322:..\VFH/vfh.c  ****             break;
 1853              		.loc 1 322 0
 1854 02fe 13E0     		b	.L101
 1855              	.L99:
 323:..\VFH/vfh.c  ****         
 324:..\VFH/vfh.c  ****         default:
 325:..\VFH/vfh.c  ****             return 9000;
 1856              		.loc 1 325 0
 1857 0300 05A4     		adr	r4, .L102+8
 1858 0302 D4E90034 		ldrd	r3, [r4]
 1859 0306 96E0     		b	.L92
 1860              	.L100:
 291:..\VFH/vfh.c  ****         
 1861              		.loc 1 291 0
 1862 0308 00BF     		nop
 1863 030a 0EE0     		b	.L85
 1864              	.L103:
 1865 030c AFF30080 		.align	3
 1866              	.L102:
 1867 0310 182D4454 		.word	1413754136
 1868 0314 FB210940 		.word	1074340347
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 40


 1869 0318 00000000 		.word	0
 1870 031c 0094C140 		.word	1086428160
 1871 0320 00806640 		.word	1080459264
 1872 0324 00408F40 		.word	1083129856
 1873              	.L101:
 322:..\VFH/vfh.c  ****         
 1874              		.loc 1 322 0
 1875 0328 00BF     		nop
 1876              	.L85:
 1877              	.LBE19:
 243:..\VFH/vfh.c  ****     int idx = candidate_lst[i];
 1878              		.loc 1 243 0 discriminator 2
 1879 032a 7B6F     		ldr	r3, [r7, #116]
 1880 032c 0133     		adds	r3, r3, #1
 1881 032e 7B67     		str	r3, [r7, #116]
 1882              	.L76:
 243:..\VFH/vfh.c  ****     int idx = candidate_lst[i];
 1883              		.loc 1 243 0 is_stmt 0 discriminator 1
 1884 0330 7A6F     		ldr	r2, [r7, #116]
 1885 0332 7B6E     		ldr	r3, [r7, #100]
 1886 0334 9A42     		cmp	r2, r3
 1887 0336 FFF6E3AE 		blt	.L93
 1888              	.LBE18:
 326:..\VFH/vfh.c  ****     }
 327:..\VFH/vfh.c  ****   }    
 328:..\VFH/vfh.c  ****     if (best_angle == 1000) {
 1889              		.loc 1 328 0 is_stmt 1
 1890 033a 4FF00002 		mov	r2, #0
 1891 033e 404B     		ldr	r3, .L104
 1892 0340 D7E91E01 		ldrd	r0, [r7, #120]
 1893 0344 FFF7FEFF 		bl	__aeabi_dcmpeq
 1894 0348 0346     		mov	r3, r0
 1895 034a 002B     		cmp	r3, #0
 1896 034c 71D0     		beq	.L94
 1897              	.LBB22:
 329:..\VFH/vfh.c  ****         int first = abs((k_n + (s_max / 2)) - goal_sector);
 1898              		.loc 1 329 0
 1899 034e D7F8B030 		ldr	r3, [r7, #176]
 1900 0352 DA0F     		lsrs	r2, r3, #31
 1901 0354 1344     		add	r3, r3, r2
 1902 0356 5B10     		asrs	r3, r3, #1
 1903 0358 1A46     		mov	r2, r3
 1904 035a D7F89030 		ldr	r3, [r7, #144]
 1905 035e 1A44     		add	r2, r2, r3
 1906 0360 FB6A     		ldr	r3, [r7, #44]
 1907 0362 D31A     		subs	r3, r2, r3
 1908 0364 002B     		cmp	r3, #0
 1909 0366 B8BF     		it	lt
 1910 0368 5B42     		rsblt	r3, r3, #0
 1911 036a 7B61     		str	r3, [r7, #20]
 330:..\VFH/vfh.c  ****         int last = abs((k_f - (s_max / 2)) - goal_sector);
 1912              		.loc 1 330 0
 1913 036c D7F8B030 		ldr	r3, [r7, #176]
 1914 0370 DA0F     		lsrs	r2, r3, #31
 1915 0372 1344     		add	r3, r3, r2
 1916 0374 5B10     		asrs	r3, r3, #1
 1917 0376 1A46     		mov	r2, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 41


 1918 0378 D7F88C30 		ldr	r3, [r7, #140]
 1919 037c 9A1A     		subs	r2, r3, r2
 1920 037e FB6A     		ldr	r3, [r7, #44]
 1921 0380 D31A     		subs	r3, r2, r3
 1922 0382 002B     		cmp	r3, #0
 1923 0384 B8BF     		it	lt
 1924 0386 5B42     		rsblt	r3, r3, #0
 1925 0388 3B61     		str	r3, [r7, #16]
 331:..\VFH/vfh.c  ****         if (first < abs_min) {
 1926              		.loc 1 331 0
 1927 038a 7A69     		ldr	r2, [r7, #20]
 1928 038c D7F89430 		ldr	r3, [r7, #148]
 1929 0390 9A42     		cmp	r2, r3
 1930 0392 1EDA     		bge	.L96
 332:..\VFH/vfh.c  ****             best_angle = ((k_n + (s_max / 2)) / 2 % nsectors) * alpha;
 1931              		.loc 1 332 0
 1932 0394 D7F8B030 		ldr	r3, [r7, #176]
 1933 0398 DA0F     		lsrs	r2, r3, #31
 1934 039a 1344     		add	r3, r3, r2
 1935 039c 5B10     		asrs	r3, r3, #1
 1936 039e 1A46     		mov	r2, r3
 1937 03a0 D7F89030 		ldr	r3, [r7, #144]
 1938 03a4 1344     		add	r3, r3, r2
 1939 03a6 DA0F     		lsrs	r2, r3, #31
 1940 03a8 1344     		add	r3, r3, r2
 1941 03aa 5B10     		asrs	r3, r3, #1
 1942 03ac 3A6E     		ldr	r2, [r7, #96]
 1943 03ae 93FBF2F2 		sdiv	r2, r3, r2
 1944 03b2 396E     		ldr	r1, [r7, #96]
 1945 03b4 01FB02F2 		mul	r2, r1, r2
 1946 03b8 9B1A     		subs	r3, r3, r2
 1947 03ba 1846     		mov	r0, r3
 1948 03bc FFF7FEFF 		bl	__aeabi_i2d
 1949 03c0 D7E92A23 		ldrd	r2, [r7, #168]
 1950 03c4 FFF7FEFF 		bl	__aeabi_dmul
 1951 03c8 0346     		mov	r3, r0
 1952 03ca 0C46     		mov	r4, r1
 1953 03cc C7E91E34 		strd	r3, [r7, #120]
 1954 03d0 2FE0     		b	.L94
 1955              	.L96:
 333:..\VFH/vfh.c  ****         } else if (last < abs_min) {
 1956              		.loc 1 333 0
 1957 03d2 3A69     		ldr	r2, [r7, #16]
 1958 03d4 D7F89430 		ldr	r3, [r7, #148]
 1959 03d8 9A42     		cmp	r2, r3
 1960 03da 1EDA     		bge	.L97
 334:..\VFH/vfh.c  ****             best_angle = ((k_f - (s_max / 2)) / 2 % nsectors) * alpha;
 1961              		.loc 1 334 0
 1962 03dc D7F8B030 		ldr	r3, [r7, #176]
 1963 03e0 DA0F     		lsrs	r2, r3, #31
 1964 03e2 1344     		add	r3, r3, r2
 1965 03e4 5B10     		asrs	r3, r3, #1
 1966 03e6 1A46     		mov	r2, r3
 1967 03e8 D7F88C30 		ldr	r3, [r7, #140]
 1968 03ec 9B1A     		subs	r3, r3, r2
 1969 03ee DA0F     		lsrs	r2, r3, #31
 1970 03f0 1344     		add	r3, r3, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 42


 1971 03f2 5B10     		asrs	r3, r3, #1
 1972 03f4 3A6E     		ldr	r2, [r7, #96]
 1973 03f6 93FBF2F2 		sdiv	r2, r3, r2
 1974 03fa 396E     		ldr	r1, [r7, #96]
 1975 03fc 01FB02F2 		mul	r2, r1, r2
 1976 0400 9B1A     		subs	r3, r3, r2
 1977 0402 1846     		mov	r0, r3
 1978 0404 FFF7FEFF 		bl	__aeabi_i2d
 1979 0408 D7E92A23 		ldrd	r2, [r7, #168]
 1980 040c FFF7FEFF 		bl	__aeabi_dmul
 1981 0410 0346     		mov	r3, r0
 1982 0412 0C46     		mov	r4, r1
 1983 0414 C7E91E34 		strd	r3, [r7, #120]
 1984 0418 0BE0     		b	.L94
 1985              	.L97:
 335:..\VFH/vfh.c  ****         }
 336:..\VFH/vfh.c  ****         else {
 337:..\VFH/vfh.c  ****             best_angle = abs_sec * alpha;
 1986              		.loc 1 337 0
 1987 041a D7F88400 		ldr	r0, [r7, #132]
 1988 041e FFF7FEFF 		bl	__aeabi_i2d
 1989 0422 D7E92A23 		ldrd	r2, [r7, #168]
 1990 0426 FFF7FEFF 		bl	__aeabi_dmul
 1991 042a 0346     		mov	r3, r0
 1992 042c 0C46     		mov	r4, r1
 1993 042e C7E91E34 		strd	r3, [r7, #120]
 1994              	.L94:
 1995              	.LBE22:
 338:..\VFH/vfh.c  ****         }
 339:..\VFH/vfh.c  ****     }
 340:..\VFH/vfh.c  ****     return best_angle;
 1996              		.loc 1 340 0
 1997 0432 D7E91E34 		ldrd	r3, [r7, #120]
 1998              	.L92:
 341:..\VFH/vfh.c  ****   
 342:..\VFH/vfh.c  **** }
 1999              		.loc 1 342 0
 2000 0436 1846     		mov	r0, r3
 2001 0438 2146     		mov	r1, r4
 2002 043a 9837     		adds	r7, r7, #152
 2003              		.cfi_def_cfa_offset 16
 2004 043c BD46     		mov	sp, r7
 2005              		.cfi_def_cfa_register 13
 2006              		@ sp needed
 2007 043e B0BD     		pop	{r4, r5, r7, pc}
 2008              	.L105:
 2009              		.align	2
 2010              	.L104:
 2011 0440 00408F40 		.word	1083129856
 2012              		.cfi_endproc
 2013              	.LFE7:
 2014              		.size	calculate_avoidance_angle, .-calculate_avoidance_angle
 2015              		.section	.text.calculate_avoidance_angle2,"ax",%progbits
 2016              		.align	2
 2017              		.global	calculate_avoidance_angle2
 2018              		.thumb
 2019              		.thumb_func
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 43


 2020              		.type	calculate_avoidance_angle2, %function
 2021              	calculate_avoidance_angle2:
 2022              	.LFB8:
 343:..\VFH/vfh.c  **** 
 344:..\VFH/vfh.c  **** /*=======================================================================*/
 345:..\VFH/vfh.c  **** double calculate_avoidance_angle2(POD *smoothed_POD, Robot * robot, int * candidate_lst, double alp
 2023              		.loc 1 345 0
 2024              		.cfi_startproc
 2025              		@ args = 12, pretend = 0, frame = 120
 2026              		@ frame_needed = 1, uses_anonymous_args = 0
 2027 0000 B0B5     		push	{r4, r5, r7, lr}
 2028              		.cfi_def_cfa_offset 16
 2029              		.cfi_offset 4, -16
 2030              		.cfi_offset 5, -12
 2031              		.cfi_offset 7, -8
 2032              		.cfi_offset 14, -4
 2033 0002 9EB0     		sub	sp, sp, #120
 2034              		.cfi_def_cfa_offset 136
 2035 0004 00AF     		add	r7, sp, #0
 2036              		.cfi_def_cfa_register 7
 2037 0006 F860     		str	r0, [r7, #12]
 2038 0008 B960     		str	r1, [r7, #8]
 2039 000a 7A60     		str	r2, [r7, #4]
 346:..\VFH/vfh.c  ****     /* Retrieves the angle that the robot must drive towards. */
 347:..\VFH/vfh.c  ****     int candidates_len = 360/alpha;;
 2040              		.loc 1 347 0
 2041 000c D7E92223 		ldrd	r2, [r7, #136]
 2042 0010 4FF00000 		mov	r0, #0
 2043 0014 AE49     		ldr	r1, .L131+8
 2044 0016 FFF7FEFF 		bl	__aeabi_ddiv
 2045 001a 0346     		mov	r3, r0
 2046 001c 0C46     		mov	r4, r1
 2047 001e 1846     		mov	r0, r3
 2048 0020 2146     		mov	r1, r4
 2049 0022 FFF7FEFF 		bl	__aeabi_d2iz
 2050 0026 0346     		mov	r3, r0
 2051 0028 FB64     		str	r3, [r7, #76]
 348:..\VFH/vfh.c  ****     int nsectors = smoothed_POD->nsectors;
 2052              		.loc 1 348 0
 2053 002a FB68     		ldr	r3, [r7, #12]
 2054 002c 1B68     		ldr	r3, [r3]
 2055 002e BB64     		str	r3, [r7, #72]
 349:..\VFH/vfh.c  **** 
 350:..\VFH/vfh.c  ****     // Retrive useful variables
 351:..\VFH/vfh.c  ****     double pos_x = robot->x;
 2056              		.loc 1 351 0
 2057 0030 BB68     		ldr	r3, [r7, #8]
 2058 0032 03F11004 		add	r4, r3, #16
 2059 0036 D4E90034 		ldrd	r3, [r4]
 2060 003a C7E91034 		strd	r3, [r7, #64]
 352:..\VFH/vfh.c  ****     double pos_y = robot->y;
 2061              		.loc 1 352 0
 2062 003e BB68     		ldr	r3, [r7, #8]
 2063 0040 03F11804 		add	r4, r3, #24
 2064 0044 D4E90034 		ldrd	r3, [r4]
 2065 0048 C7E90E34 		strd	r3, [r7, #56]
 353:..\VFH/vfh.c  ****     double pos_yaw = robot->theta;
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 44


 2066              		.loc 1 353 0
 2067 004c BB68     		ldr	r3, [r7, #8]
 2068 004e 03F10804 		add	r4, r3, #8
 2069 0052 D4E90034 		ldrd	r3, [r4]
 2070 0056 C7E90C34 		strd	r3, [r7, #48]
 354:..\VFH/vfh.c  ****     double goal_x = robot->goal_x;
 2071              		.loc 1 354 0
 2072 005a BB68     		ldr	r3, [r7, #8]
 2073 005c 03F15804 		add	r4, r3, #88
 2074 0060 D4E90034 		ldrd	r3, [r4]
 2075 0064 C7E90A34 		strd	r3, [r7, #40]
 355:..\VFH/vfh.c  ****     double goal_y = robot->goal_y;
 2076              		.loc 1 355 0
 2077 0068 BB68     		ldr	r3, [r7, #8]
 2078 006a 03F16004 		add	r4, r3, #96
 2079 006e D4E90034 		ldrd	r3, [r4]
 2080 0072 C7E90834 		strd	r3, [r7, #32]
 356:..\VFH/vfh.c  **** 
 357:..\VFH/vfh.c  ****     double goal_angle = true_mod(180*atan2( goal_y-pos_y, goal_x - pos_x)/M_PI, 360);
 2081              		.loc 1 357 0
 2082 0076 D7E90E23 		ldrd	r2, [r7, #56]
 2083 007a D7E90801 		ldrd	r0, [r7, #32]
 2084 007e FFF7FEFF 		bl	__aeabi_dsub
 2085 0082 0346     		mov	r3, r0
 2086 0084 0C46     		mov	r4, r1
 2087 0086 2546     		mov	r5, r4
 2088 0088 1C46     		mov	r4, r3
 2089 008a D7E91023 		ldrd	r2, [r7, #64]
 2090 008e D7E90A01 		ldrd	r0, [r7, #40]
 2091 0092 FFF7FEFF 		bl	__aeabi_dsub
 2092 0096 0246     		mov	r2, r0
 2093 0098 0B46     		mov	r3, r1
 2094 009a 2046     		mov	r0, r4
 2095 009c 2946     		mov	r1, r5
 2096 009e FFF7FEFF 		bl	atan2
 2097 00a2 4FF00002 		mov	r2, #0
 2098 00a6 8B4B     		ldr	r3, .L131+12
 2099 00a8 FFF7FEFF 		bl	__aeabi_dmul
 2100 00ac 0346     		mov	r3, r0
 2101 00ae 0C46     		mov	r4, r1
 2102 00b0 1846     		mov	r0, r3
 2103 00b2 2146     		mov	r1, r4
 2104 00b4 84A3     		adr	r3, .L131
 2105 00b6 D3E90023 		ldrd	r2, [r3]
 2106 00ba FFF7FEFF 		bl	__aeabi_ddiv
 2107 00be 0346     		mov	r3, r0
 2108 00c0 0C46     		mov	r4, r1
 2109 00c2 1846     		mov	r0, r3
 2110 00c4 2146     		mov	r1, r4
 2111 00c6 4FF00002 		mov	r2, #0
 2112 00ca 814B     		ldr	r3, .L131+8
 2113 00cc FFF7FEFF 		bl	true_mod
 2114 00d0 C7E90601 		strd	r0, [r7, #24]
 358:..\VFH/vfh.c  ****     int goal_sector = floor(goal_angle/alpha);
 2115              		.loc 1 358 0
 2116 00d4 D7E92223 		ldrd	r2, [r7, #136]
 2117 00d8 D7E90601 		ldrd	r0, [r7, #24]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 45


 2118 00dc FFF7FEFF 		bl	__aeabi_ddiv
 2119 00e0 0346     		mov	r3, r0
 2120 00e2 0C46     		mov	r4, r1
 2121 00e4 1846     		mov	r0, r3
 2122 00e6 2146     		mov	r1, r4
 2123 00e8 FFF7FEFF 		bl	floor
 2124 00ec 0346     		mov	r3, r0
 2125 00ee 0C46     		mov	r4, r1
 2126 00f0 1846     		mov	r0, r3
 2127 00f2 2146     		mov	r1, r4
 2128 00f4 FFF7FEFF 		bl	__aeabi_d2iz
 2129 00f8 0346     		mov	r3, r0
 2130 00fa 7B61     		str	r3, [r7, #20]
 359:..\VFH/vfh.c  ****   
 360:..\VFH/vfh.c  ****     if( candidate_lst[goal_sector] == 0 ) // goal lies in a valley
 2131              		.loc 1 360 0
 2132 00fc 7B69     		ldr	r3, [r7, #20]
 2133 00fe 9B00     		lsls	r3, r3, #2
 2134 0100 7A68     		ldr	r2, [r7, #4]
 2135 0102 1344     		add	r3, r3, r2
 2136 0104 1B68     		ldr	r3, [r3]
 2137 0106 002B     		cmp	r3, #0
 2138 0108 40F02E81 		bne	.L107
 2139              	.LBB23:
 361:..\VFH/vfh.c  ****     {
 362:..\VFH/vfh.c  ****         int step = 1;
 2140              		.loc 1 362 0
 2141 010c 0123     		movs	r3, #1
 2142 010e 7B67     		str	r3, [r7, #116]
 363:..\VFH/vfh.c  ****         int cwise = true_mod(goal_sector-step, nsectors);
 2143              		.loc 1 363 0
 2144 0110 7A69     		ldr	r2, [r7, #20]
 2145 0112 7B6F     		ldr	r3, [r7, #116]
 2146 0114 D31A     		subs	r3, r2, r3
 2147 0116 1846     		mov	r0, r3
 2148 0118 FFF7FEFF 		bl	__aeabi_i2d
 2149 011c 0446     		mov	r4, r0
 2150 011e 0D46     		mov	r5, r1
 2151 0120 B86C     		ldr	r0, [r7, #72]
 2152 0122 FFF7FEFF 		bl	__aeabi_i2d
 2153 0126 0246     		mov	r2, r0
 2154 0128 0B46     		mov	r3, r1
 2155 012a 2046     		mov	r0, r4
 2156 012c 2946     		mov	r1, r5
 2157 012e FFF7FEFF 		bl	true_mod
 2158 0132 0346     		mov	r3, r0
 2159 0134 0C46     		mov	r4, r1
 2160 0136 1846     		mov	r0, r3
 2161 0138 2146     		mov	r1, r4
 2162 013a FFF7FEFF 		bl	__aeabi_d2iz
 2163 013e 0346     		mov	r3, r0
 2164 0140 3B67     		str	r3, [r7, #112]
 364:..\VFH/vfh.c  ****         int ccwise = true_mod(goal_sector+step, nsectors);
 2165              		.loc 1 364 0
 2166 0142 7A69     		ldr	r2, [r7, #20]
 2167 0144 7B6F     		ldr	r3, [r7, #116]
 2168 0146 1344     		add	r3, r3, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 46


 2169 0148 1846     		mov	r0, r3
 2170 014a FFF7FEFF 		bl	__aeabi_i2d
 2171 014e 0446     		mov	r4, r0
 2172 0150 0D46     		mov	r5, r1
 2173 0152 B86C     		ldr	r0, [r7, #72]
 2174 0154 FFF7FEFF 		bl	__aeabi_i2d
 2175 0158 0246     		mov	r2, r0
 2176 015a 0B46     		mov	r3, r1
 2177 015c 2046     		mov	r0, r4
 2178 015e 2946     		mov	r1, r5
 2179 0160 FFF7FEFF 		bl	true_mod
 2180 0164 0346     		mov	r3, r0
 2181 0166 0C46     		mov	r4, r1
 2182 0168 1846     		mov	r0, r3
 2183 016a 2146     		mov	r1, r4
 2184 016c FFF7FEFF 		bl	__aeabi_d2iz
 2185 0170 0346     		mov	r3, r0
 2186 0172 FB66     		str	r3, [r7, #108]
 365:..\VFH/vfh.c  ****         while( candidate_lst[cwise] == 0 && candidate_lst[ccwise]==0 && step<nsectors/2 ) 
 2187              		.loc 1 365 0
 2188 0174 34E0     		b	.L108
 2189              	.L110:
 366:..\VFH/vfh.c  ****         {
 367:..\VFH/vfh.c  ****             step++;
 2190              		.loc 1 367 0
 2191 0176 7B6F     		ldr	r3, [r7, #116]
 2192 0178 0133     		adds	r3, r3, #1
 2193 017a 7B67     		str	r3, [r7, #116]
 368:..\VFH/vfh.c  ****             cwise = true_mod(goal_sector-step, nsectors);
 2194              		.loc 1 368 0
 2195 017c 7A69     		ldr	r2, [r7, #20]
 2196 017e 7B6F     		ldr	r3, [r7, #116]
 2197 0180 D31A     		subs	r3, r2, r3
 2198 0182 1846     		mov	r0, r3
 2199 0184 FFF7FEFF 		bl	__aeabi_i2d
 2200 0188 0446     		mov	r4, r0
 2201 018a 0D46     		mov	r5, r1
 2202 018c B86C     		ldr	r0, [r7, #72]
 2203 018e FFF7FEFF 		bl	__aeabi_i2d
 2204 0192 0246     		mov	r2, r0
 2205 0194 0B46     		mov	r3, r1
 2206 0196 2046     		mov	r0, r4
 2207 0198 2946     		mov	r1, r5
 2208 019a FFF7FEFF 		bl	true_mod
 2209 019e 0346     		mov	r3, r0
 2210 01a0 0C46     		mov	r4, r1
 2211 01a2 1846     		mov	r0, r3
 2212 01a4 2146     		mov	r1, r4
 2213 01a6 FFF7FEFF 		bl	__aeabi_d2iz
 2214 01aa 0346     		mov	r3, r0
 2215 01ac 3B67     		str	r3, [r7, #112]
 369:..\VFH/vfh.c  ****             ccwise = true_mod(goal_sector+step, nsectors);
 2216              		.loc 1 369 0
 2217 01ae 7A69     		ldr	r2, [r7, #20]
 2218 01b0 7B6F     		ldr	r3, [r7, #116]
 2219 01b2 1344     		add	r3, r3, r2
 2220 01b4 1846     		mov	r0, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 47


 2221 01b6 FFF7FEFF 		bl	__aeabi_i2d
 2222 01ba 0446     		mov	r4, r0
 2223 01bc 0D46     		mov	r5, r1
 2224 01be B86C     		ldr	r0, [r7, #72]
 2225 01c0 FFF7FEFF 		bl	__aeabi_i2d
 2226 01c4 0246     		mov	r2, r0
 2227 01c6 0B46     		mov	r3, r1
 2228 01c8 2046     		mov	r0, r4
 2229 01ca 2946     		mov	r1, r5
 2230 01cc FFF7FEFF 		bl	true_mod
 2231 01d0 0346     		mov	r3, r0
 2232 01d2 0C46     		mov	r4, r1
 2233 01d4 1846     		mov	r0, r3
 2234 01d6 2146     		mov	r1, r4
 2235 01d8 FFF7FEFF 		bl	__aeabi_d2iz
 2236 01dc 0346     		mov	r3, r0
 2237 01de FB66     		str	r3, [r7, #108]
 2238              	.L108:
 365:..\VFH/vfh.c  ****         {
 2239              		.loc 1 365 0
 2240 01e0 3B6F     		ldr	r3, [r7, #112]
 2241 01e2 9B00     		lsls	r3, r3, #2
 2242 01e4 7A68     		ldr	r2, [r7, #4]
 2243 01e6 1344     		add	r3, r3, r2
 2244 01e8 1B68     		ldr	r3, [r3]
 2245 01ea 002B     		cmp	r3, #0
 2246 01ec 0ED1     		bne	.L109
 365:..\VFH/vfh.c  ****         {
 2247              		.loc 1 365 0 is_stmt 0 discriminator 1
 2248 01ee FB6E     		ldr	r3, [r7, #108]
 2249 01f0 9B00     		lsls	r3, r3, #2
 2250 01f2 7A68     		ldr	r2, [r7, #4]
 2251 01f4 1344     		add	r3, r3, r2
 2252 01f6 1B68     		ldr	r3, [r3]
 2253 01f8 002B     		cmp	r3, #0
 2254 01fa 07D1     		bne	.L109
 365:..\VFH/vfh.c  ****         {
 2255              		.loc 1 365 0 discriminator 2
 2256 01fc BB6C     		ldr	r3, [r7, #72]
 2257 01fe DA0F     		lsrs	r2, r3, #31
 2258 0200 1344     		add	r3, r3, r2
 2259 0202 5B10     		asrs	r3, r3, #1
 2260 0204 1A46     		mov	r2, r3
 2261 0206 7B6F     		ldr	r3, [r7, #116]
 2262 0208 9A42     		cmp	r2, r3
 2263 020a B4DC     		bgt	.L110
 2264              	.L109:
 370:..\VFH/vfh.c  ****         }
 371:..\VFH/vfh.c  ****         if( step >= s_max/2 ) { // no obstacles in histogram
 2265              		.loc 1 371 0 is_stmt 1
 2266 020c D7F89030 		ldr	r3, [r7, #144]
 2267 0210 DA0F     		lsrs	r2, r3, #31
 2268 0212 1344     		add	r3, r3, r2
 2269 0214 5B10     		asrs	r3, r3, #1
 2270 0216 1A46     		mov	r2, r3
 2271 0218 7B6F     		ldr	r3, [r7, #116]
 2272 021a 9A42     		cmp	r2, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 48


 2273 021c 02DC     		bgt	.L111
 372:..\VFH/vfh.c  ****             return goal_angle;
 2274              		.loc 1 372 0
 2275 021e D7E90634 		ldrd	r3, [r7, #24]
 2276 0222 FDE1     		b	.L112
 2277              	.L111:
 373:..\VFH/vfh.c  ****         } else if ( candidate_lst[cwise] )  { // nearest edge is cwise from goal sector
 2278              		.loc 1 373 0
 2279 0224 3B6F     		ldr	r3, [r7, #112]
 2280 0226 9B00     		lsls	r3, r3, #2
 2281 0228 7A68     		ldr	r2, [r7, #4]
 2282 022a 1344     		add	r3, r3, r2
 2283 022c 1B68     		ldr	r3, [r3]
 2284 022e 002B     		cmp	r3, #0
 2285 0230 6ED0     		beq	.L117
 374:..\VFH/vfh.c  ****             while( candidate_lst[ccwise]==0 && step < s_max/2) { 
 2286              		.loc 1 374 0
 2287 0232 1BE0     		b	.L114
 2288              	.L116:
 375:..\VFH/vfh.c  ****                 step++;
 2289              		.loc 1 375 0
 2290 0234 7B6F     		ldr	r3, [r7, #116]
 2291 0236 0133     		adds	r3, r3, #1
 2292 0238 7B67     		str	r3, [r7, #116]
 376:..\VFH/vfh.c  ****                 ccwise = true_mod(goal_sector+step, nsectors); 
 2293              		.loc 1 376 0
 2294 023a 7A69     		ldr	r2, [r7, #20]
 2295 023c 7B6F     		ldr	r3, [r7, #116]
 2296 023e 1344     		add	r3, r3, r2
 2297 0240 1846     		mov	r0, r3
 2298 0242 FFF7FEFF 		bl	__aeabi_i2d
 2299 0246 0446     		mov	r4, r0
 2300 0248 0D46     		mov	r5, r1
 2301 024a B86C     		ldr	r0, [r7, #72]
 2302 024c FFF7FEFF 		bl	__aeabi_i2d
 2303 0250 0246     		mov	r2, r0
 2304 0252 0B46     		mov	r3, r1
 2305 0254 2046     		mov	r0, r4
 2306 0256 2946     		mov	r1, r5
 2307 0258 FFF7FEFF 		bl	true_mod
 2308 025c 0346     		mov	r3, r0
 2309 025e 0C46     		mov	r4, r1
 2310 0260 1846     		mov	r0, r3
 2311 0262 2146     		mov	r1, r4
 2312 0264 FFF7FEFF 		bl	__aeabi_d2iz
 2313 0268 0346     		mov	r3, r0
 2314 026a FB66     		str	r3, [r7, #108]
 2315              	.L114:
 374:..\VFH/vfh.c  ****             while( candidate_lst[ccwise]==0 && step < s_max/2) { 
 2316              		.loc 1 374 0
 2317 026c FB6E     		ldr	r3, [r7, #108]
 2318 026e 9B00     		lsls	r3, r3, #2
 2319 0270 7A68     		ldr	r2, [r7, #4]
 2320 0272 1344     		add	r3, r3, r2
 2321 0274 1B68     		ldr	r3, [r3]
 2322 0276 002B     		cmp	r3, #0
 2323 0278 08D1     		bne	.L115
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 49


 374:..\VFH/vfh.c  ****             while( candidate_lst[ccwise]==0 && step < s_max/2) { 
 2324              		.loc 1 374 0 is_stmt 0 discriminator 1
 2325 027a D7F89030 		ldr	r3, [r7, #144]
 2326 027e DA0F     		lsrs	r2, r3, #31
 2327 0280 1344     		add	r3, r3, r2
 2328 0282 5B10     		asrs	r3, r3, #1
 2329 0284 1A46     		mov	r2, r3
 2330 0286 7B6F     		ldr	r3, [r7, #116]
 2331 0288 9A42     		cmp	r2, r3
 2332 028a D3DC     		bgt	.L116
 2333              	.L115:
 377:..\VFH/vfh.c  ****             }
 378:..\VFH/vfh.c  ****             return alpha*true_mod(cwise+step/2, nsectors);
 2334              		.loc 1 378 0 is_stmt 1
 2335 028c 7B6F     		ldr	r3, [r7, #116]
 2336 028e DA0F     		lsrs	r2, r3, #31
 2337 0290 1344     		add	r3, r3, r2
 2338 0292 5B10     		asrs	r3, r3, #1
 2339 0294 1A46     		mov	r2, r3
 2340 0296 3B6F     		ldr	r3, [r7, #112]
 2341 0298 1344     		add	r3, r3, r2
 2342 029a 1846     		mov	r0, r3
 2343 029c FFF7FEFF 		bl	__aeabi_i2d
 2344 02a0 0446     		mov	r4, r0
 2345 02a2 0D46     		mov	r5, r1
 2346 02a4 B86C     		ldr	r0, [r7, #72]
 2347 02a6 FFF7FEFF 		bl	__aeabi_i2d
 2348 02aa 0246     		mov	r2, r0
 2349 02ac 0B46     		mov	r3, r1
 2350 02ae 2046     		mov	r0, r4
 2351 02b0 2946     		mov	r1, r5
 2352 02b2 FFF7FEFF 		bl	true_mod
 2353 02b6 D7E92223 		ldrd	r2, [r7, #136]
 2354 02ba FFF7FEFF 		bl	__aeabi_dmul
 2355 02be 0346     		mov	r3, r0
 2356 02c0 0C46     		mov	r4, r1
 2357 02c2 ADE1     		b	.L112
 2358              	.L132:
 2359 02c4 AFF30080 		.align	3
 2360              	.L131:
 2361 02c8 182D4454 		.word	1413754136
 2362 02cc FB210940 		.word	1074340347
 2363 02d0 00807640 		.word	1081507840
 2364 02d4 00806640 		.word	1080459264
 2365              	.L119:
 379:..\VFH/vfh.c  ****             
 380:..\VFH/vfh.c  ****         } else { // nearest edge is ccwise from goal sector
 381:..\VFH/vfh.c  ****             while( candidate_lst[cwise]==0 && step < s_max/2) { 
 382:..\VFH/vfh.c  ****                 step++;
 2366              		.loc 1 382 0
 2367 02d8 7B6F     		ldr	r3, [r7, #116]
 2368 02da 0133     		adds	r3, r3, #1
 2369 02dc 7B67     		str	r3, [r7, #116]
 383:..\VFH/vfh.c  ****                 cwise = true_mod(goal_sector-step, nsectors); 
 2370              		.loc 1 383 0
 2371 02de 7A69     		ldr	r2, [r7, #20]
 2372 02e0 7B6F     		ldr	r3, [r7, #116]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 50


 2373 02e2 D31A     		subs	r3, r2, r3
 2374 02e4 1846     		mov	r0, r3
 2375 02e6 FFF7FEFF 		bl	__aeabi_i2d
 2376 02ea 0446     		mov	r4, r0
 2377 02ec 0D46     		mov	r5, r1
 2378 02ee B86C     		ldr	r0, [r7, #72]
 2379 02f0 FFF7FEFF 		bl	__aeabi_i2d
 2380 02f4 0246     		mov	r2, r0
 2381 02f6 0B46     		mov	r3, r1
 2382 02f8 2046     		mov	r0, r4
 2383 02fa 2946     		mov	r1, r5
 2384 02fc FFF7FEFF 		bl	true_mod
 2385 0300 0346     		mov	r3, r0
 2386 0302 0C46     		mov	r4, r1
 2387 0304 1846     		mov	r0, r3
 2388 0306 2146     		mov	r1, r4
 2389 0308 FFF7FEFF 		bl	__aeabi_d2iz
 2390 030c 0346     		mov	r3, r0
 2391 030e 3B67     		str	r3, [r7, #112]
 2392              	.L117:
 381:..\VFH/vfh.c  ****                 step++;
 2393              		.loc 1 381 0
 2394 0310 3B6F     		ldr	r3, [r7, #112]
 2395 0312 9B00     		lsls	r3, r3, #2
 2396 0314 7A68     		ldr	r2, [r7, #4]
 2397 0316 1344     		add	r3, r3, r2
 2398 0318 1B68     		ldr	r3, [r3]
 2399 031a 002B     		cmp	r3, #0
 2400 031c 08D1     		bne	.L118
 381:..\VFH/vfh.c  ****                 step++;
 2401              		.loc 1 381 0 is_stmt 0 discriminator 1
 2402 031e D7F89030 		ldr	r3, [r7, #144]
 2403 0322 DA0F     		lsrs	r2, r3, #31
 2404 0324 1344     		add	r3, r3, r2
 2405 0326 5B10     		asrs	r3, r3, #1
 2406 0328 1A46     		mov	r2, r3
 2407 032a 7B6F     		ldr	r3, [r7, #116]
 2408 032c 9A42     		cmp	r2, r3
 2409 032e D3DC     		bgt	.L119
 2410              	.L118:
 384:..\VFH/vfh.c  ****             }
 385:..\VFH/vfh.c  ****             return alpha*true_mod(ccwise-step/2, nsectors);
 2411              		.loc 1 385 0 is_stmt 1
 2412 0330 7B6F     		ldr	r3, [r7, #116]
 2413 0332 DA0F     		lsrs	r2, r3, #31
 2414 0334 1344     		add	r3, r3, r2
 2415 0336 5B10     		asrs	r3, r3, #1
 2416 0338 1A46     		mov	r2, r3
 2417 033a FB6E     		ldr	r3, [r7, #108]
 2418 033c 9B1A     		subs	r3, r3, r2
 2419 033e 1846     		mov	r0, r3
 2420 0340 FFF7FEFF 		bl	__aeabi_i2d
 2421 0344 0446     		mov	r4, r0
 2422 0346 0D46     		mov	r5, r1
 2423 0348 B86C     		ldr	r0, [r7, #72]
 2424 034a FFF7FEFF 		bl	__aeabi_i2d
 2425 034e 0246     		mov	r2, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 51


 2426 0350 0B46     		mov	r3, r1
 2427 0352 2046     		mov	r0, r4
 2428 0354 2946     		mov	r1, r5
 2429 0356 FFF7FEFF 		bl	true_mod
 2430 035a D7E92223 		ldrd	r2, [r7, #136]
 2431 035e FFF7FEFF 		bl	__aeabi_dmul
 2432 0362 0346     		mov	r3, r0
 2433 0364 0C46     		mov	r4, r1
 2434 0366 5BE1     		b	.L112
 2435              	.L107:
 2436              	.LBE23:
 2437              	.LBB24:
 386:..\VFH/vfh.c  ****             
 387:..\VFH/vfh.c  ****         }
 388:..\VFH/vfh.c  ****             
 389:..\VFH/vfh.c  ****     } else { // goal lies behind obstacle
 390:..\VFH/vfh.c  ****         int step = 1;
 2438              		.loc 1 390 0
 2439 0368 0123     		movs	r3, #1
 2440 036a BB66     		str	r3, [r7, #104]
 391:..\VFH/vfh.c  ****         int cwise = true_mod(goal_sector-step, nsectors);
 2441              		.loc 1 391 0
 2442 036c 7A69     		ldr	r2, [r7, #20]
 2443 036e BB6E     		ldr	r3, [r7, #104]
 2444 0370 D31A     		subs	r3, r2, r3
 2445 0372 1846     		mov	r0, r3
 2446 0374 FFF7FEFF 		bl	__aeabi_i2d
 2447 0378 0446     		mov	r4, r0
 2448 037a 0D46     		mov	r5, r1
 2449 037c B86C     		ldr	r0, [r7, #72]
 2450 037e FFF7FEFF 		bl	__aeabi_i2d
 2451 0382 0246     		mov	r2, r0
 2452 0384 0B46     		mov	r3, r1
 2453 0386 2046     		mov	r0, r4
 2454 0388 2946     		mov	r1, r5
 2455 038a FFF7FEFF 		bl	true_mod
 2456 038e 0346     		mov	r3, r0
 2457 0390 0C46     		mov	r4, r1
 2458 0392 1846     		mov	r0, r3
 2459 0394 2146     		mov	r1, r4
 2460 0396 FFF7FEFF 		bl	__aeabi_d2iz
 2461 039a 0346     		mov	r3, r0
 2462 039c 7B66     		str	r3, [r7, #100]
 392:..\VFH/vfh.c  ****         int ccwise = true_mod(goal_sector+step, nsectors);
 2463              		.loc 1 392 0
 2464 039e 7A69     		ldr	r2, [r7, #20]
 2465 03a0 BB6E     		ldr	r3, [r7, #104]
 2466 03a2 1344     		add	r3, r3, r2
 2467 03a4 1846     		mov	r0, r3
 2468 03a6 FFF7FEFF 		bl	__aeabi_i2d
 2469 03aa 0446     		mov	r4, r0
 2470 03ac 0D46     		mov	r5, r1
 2471 03ae B86C     		ldr	r0, [r7, #72]
 2472 03b0 FFF7FEFF 		bl	__aeabi_i2d
 2473 03b4 0246     		mov	r2, r0
 2474 03b6 0B46     		mov	r3, r1
 2475 03b8 2046     		mov	r0, r4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 52


 2476 03ba 2946     		mov	r1, r5
 2477 03bc FFF7FEFF 		bl	true_mod
 2478 03c0 0346     		mov	r3, r0
 2479 03c2 0C46     		mov	r4, r1
 2480 03c4 1846     		mov	r0, r3
 2481 03c6 2146     		mov	r1, r4
 2482 03c8 FFF7FEFF 		bl	__aeabi_d2iz
 2483 03cc 0346     		mov	r3, r0
 2484 03ce 3B66     		str	r3, [r7, #96]
 393:..\VFH/vfh.c  ****         while( candidate_lst[cwise] == 1 && candidate_lst[ccwise]==1 && step<nsectors/2 ) 
 2485              		.loc 1 393 0
 2486 03d0 34E0     		b	.L120
 2487              	.L122:
 394:..\VFH/vfh.c  ****         {
 395:..\VFH/vfh.c  ****             step++;
 2488              		.loc 1 395 0
 2489 03d2 BB6E     		ldr	r3, [r7, #104]
 2490 03d4 0133     		adds	r3, r3, #1
 2491 03d6 BB66     		str	r3, [r7, #104]
 396:..\VFH/vfh.c  ****             cwise = true_mod(goal_sector-step, nsectors);
 2492              		.loc 1 396 0
 2493 03d8 7A69     		ldr	r2, [r7, #20]
 2494 03da BB6E     		ldr	r3, [r7, #104]
 2495 03dc D31A     		subs	r3, r2, r3
 2496 03de 1846     		mov	r0, r3
 2497 03e0 FFF7FEFF 		bl	__aeabi_i2d
 2498 03e4 0446     		mov	r4, r0
 2499 03e6 0D46     		mov	r5, r1
 2500 03e8 B86C     		ldr	r0, [r7, #72]
 2501 03ea FFF7FEFF 		bl	__aeabi_i2d
 2502 03ee 0246     		mov	r2, r0
 2503 03f0 0B46     		mov	r3, r1
 2504 03f2 2046     		mov	r0, r4
 2505 03f4 2946     		mov	r1, r5
 2506 03f6 FFF7FEFF 		bl	true_mod
 2507 03fa 0346     		mov	r3, r0
 2508 03fc 0C46     		mov	r4, r1
 2509 03fe 1846     		mov	r0, r3
 2510 0400 2146     		mov	r1, r4
 2511 0402 FFF7FEFF 		bl	__aeabi_d2iz
 2512 0406 0346     		mov	r3, r0
 2513 0408 7B66     		str	r3, [r7, #100]
 397:..\VFH/vfh.c  ****             ccwise = true_mod(goal_sector+step, nsectors);
 2514              		.loc 1 397 0
 2515 040a 7A69     		ldr	r2, [r7, #20]
 2516 040c BB6E     		ldr	r3, [r7, #104]
 2517 040e 1344     		add	r3, r3, r2
 2518 0410 1846     		mov	r0, r3
 2519 0412 FFF7FEFF 		bl	__aeabi_i2d
 2520 0416 0446     		mov	r4, r0
 2521 0418 0D46     		mov	r5, r1
 2522 041a B86C     		ldr	r0, [r7, #72]
 2523 041c FFF7FEFF 		bl	__aeabi_i2d
 2524 0420 0246     		mov	r2, r0
 2525 0422 0B46     		mov	r3, r1
 2526 0424 2046     		mov	r0, r4
 2527 0426 2946     		mov	r1, r5
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 53


 2528 0428 FFF7FEFF 		bl	true_mod
 2529 042c 0346     		mov	r3, r0
 2530 042e 0C46     		mov	r4, r1
 2531 0430 1846     		mov	r0, r3
 2532 0432 2146     		mov	r1, r4
 2533 0434 FFF7FEFF 		bl	__aeabi_d2iz
 2534 0438 0346     		mov	r3, r0
 2535 043a 3B66     		str	r3, [r7, #96]
 2536              	.L120:
 393:..\VFH/vfh.c  ****         {
 2537              		.loc 1 393 0
 2538 043c 7B6E     		ldr	r3, [r7, #100]
 2539 043e 9B00     		lsls	r3, r3, #2
 2540 0440 7A68     		ldr	r2, [r7, #4]
 2541 0442 1344     		add	r3, r3, r2
 2542 0444 1B68     		ldr	r3, [r3]
 2543 0446 012B     		cmp	r3, #1
 2544 0448 0ED1     		bne	.L121
 393:..\VFH/vfh.c  ****         {
 2545              		.loc 1 393 0 is_stmt 0 discriminator 1
 2546 044a 3B6E     		ldr	r3, [r7, #96]
 2547 044c 9B00     		lsls	r3, r3, #2
 2548 044e 7A68     		ldr	r2, [r7, #4]
 2549 0450 1344     		add	r3, r3, r2
 2550 0452 1B68     		ldr	r3, [r3]
 2551 0454 012B     		cmp	r3, #1
 2552 0456 07D1     		bne	.L121
 393:..\VFH/vfh.c  ****         {
 2553              		.loc 1 393 0 discriminator 2
 2554 0458 BB6C     		ldr	r3, [r7, #72]
 2555 045a DA0F     		lsrs	r2, r3, #31
 2556 045c 1344     		add	r3, r3, r2
 2557 045e 5B10     		asrs	r3, r3, #1
 2558 0460 1A46     		mov	r2, r3
 2559 0462 BB6E     		ldr	r3, [r7, #104]
 2560 0464 9A42     		cmp	r2, r3
 2561 0466 B4DC     		bgt	.L122
 2562              	.L121:
 398:..\VFH/vfh.c  ****         }
 399:..\VFH/vfh.c  ****         if( step == nsectors/2 ) // whole histogram is obstacles
 2563              		.loc 1 399 0 is_stmt 1
 2564 0468 BB6C     		ldr	r3, [r7, #72]
 2565 046a DA0F     		lsrs	r2, r3, #31
 2566 046c 1344     		add	r3, r3, r2
 2567 046e 5B10     		asrs	r3, r3, #1
 2568 0470 1A46     		mov	r2, r3
 2569 0472 BB6E     		ldr	r3, [r7, #104]
 2570 0474 9A42     		cmp	r2, r3
 2571 0476 03D1     		bne	.L123
 400:..\VFH/vfh.c  ****         {
 401:..\VFH/vfh.c  ****             return -1;
 2572              		.loc 1 401 0
 2573 0478 4FF00003 		mov	r3, #0
 2574 047c 6B4C     		ldr	r4, .L133
 2575 047e CFE0     		b	.L112
 2576              	.L123:
 402:..\VFH/vfh.c  ****         } else if (!candidate_lst[cwise])   { // first edge is cwise from goal
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 54


 2577              		.loc 1 402 0
 2578 0480 7B6E     		ldr	r3, [r7, #100]
 2579 0482 9B00     		lsls	r3, r3, #2
 2580 0484 7A68     		ldr	r2, [r7, #4]
 2581 0486 1344     		add	r3, r3, r2
 2582 0488 1B68     		ldr	r3, [r3]
 2583 048a 002B     		cmp	r3, #0
 2584 048c 64D1     		bne	.L124
 2585              	.LBB25:
 403:..\VFH/vfh.c  ****             int edge_step = 1;
 2586              		.loc 1 403 0
 2587 048e 0123     		movs	r3, #1
 2588 0490 FB65     		str	r3, [r7, #92]
 404:..\VFH/vfh.c  ****             int far_edge = true_mod(cwise-edge_step, nsectors);
 2589              		.loc 1 404 0
 2590 0492 7A6E     		ldr	r2, [r7, #100]
 2591 0494 FB6D     		ldr	r3, [r7, #92]
 2592 0496 D31A     		subs	r3, r2, r3
 2593 0498 1846     		mov	r0, r3
 2594 049a FFF7FEFF 		bl	__aeabi_i2d
 2595 049e 0446     		mov	r4, r0
 2596 04a0 0D46     		mov	r5, r1
 2597 04a2 B86C     		ldr	r0, [r7, #72]
 2598 04a4 FFF7FEFF 		bl	__aeabi_i2d
 2599 04a8 0246     		mov	r2, r0
 2600 04aa 0B46     		mov	r3, r1
 2601 04ac 2046     		mov	r0, r4
 2602 04ae 2946     		mov	r1, r5
 2603 04b0 FFF7FEFF 		bl	true_mod
 2604 04b4 0346     		mov	r3, r0
 2605 04b6 0C46     		mov	r4, r1
 2606 04b8 1846     		mov	r0, r3
 2607 04ba 2146     		mov	r1, r4
 2608 04bc FFF7FEFF 		bl	__aeabi_d2iz
 2609 04c0 0346     		mov	r3, r0
 2610 04c2 BB65     		str	r3, [r7, #88]
 405:..\VFH/vfh.c  ****             while( !candidate_lst[far_edge] && edge_step < s_max ) {
 2611              		.loc 1 405 0
 2612 04c4 1BE0     		b	.L125
 2613              	.L127:
 406:..\VFH/vfh.c  ****                 edge_step++;  
 2614              		.loc 1 406 0
 2615 04c6 FB6D     		ldr	r3, [r7, #92]
 2616 04c8 0133     		adds	r3, r3, #1
 2617 04ca FB65     		str	r3, [r7, #92]
 407:..\VFH/vfh.c  ****                 far_edge = true_mod(cwise-edge_step, nsectors); 
 2618              		.loc 1 407 0
 2619 04cc 7A6E     		ldr	r2, [r7, #100]
 2620 04ce FB6D     		ldr	r3, [r7, #92]
 2621 04d0 D31A     		subs	r3, r2, r3
 2622 04d2 1846     		mov	r0, r3
 2623 04d4 FFF7FEFF 		bl	__aeabi_i2d
 2624 04d8 0446     		mov	r4, r0
 2625 04da 0D46     		mov	r5, r1
 2626 04dc B86C     		ldr	r0, [r7, #72]
 2627 04de FFF7FEFF 		bl	__aeabi_i2d
 2628 04e2 0246     		mov	r2, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 55


 2629 04e4 0B46     		mov	r3, r1
 2630 04e6 2046     		mov	r0, r4
 2631 04e8 2946     		mov	r1, r5
 2632 04ea FFF7FEFF 		bl	true_mod
 2633 04ee 0346     		mov	r3, r0
 2634 04f0 0C46     		mov	r4, r1
 2635 04f2 1846     		mov	r0, r3
 2636 04f4 2146     		mov	r1, r4
 2637 04f6 FFF7FEFF 		bl	__aeabi_d2iz
 2638 04fa 0346     		mov	r3, r0
 2639 04fc BB65     		str	r3, [r7, #88]
 2640              	.L125:
 405:..\VFH/vfh.c  ****             while( !candidate_lst[far_edge] && edge_step < s_max ) {
 2641              		.loc 1 405 0
 2642 04fe BB6D     		ldr	r3, [r7, #88]
 2643 0500 9B00     		lsls	r3, r3, #2
 2644 0502 7A68     		ldr	r2, [r7, #4]
 2645 0504 1344     		add	r3, r3, r2
 2646 0506 1B68     		ldr	r3, [r3]
 2647 0508 002B     		cmp	r3, #0
 2648 050a 04D1     		bne	.L126
 405:..\VFH/vfh.c  ****             while( !candidate_lst[far_edge] && edge_step < s_max ) {
 2649              		.loc 1 405 0 is_stmt 0 discriminator 1
 2650 050c FA6D     		ldr	r2, [r7, #92]
 2651 050e D7F89030 		ldr	r3, [r7, #144]
 2652 0512 9A42     		cmp	r2, r3
 2653 0514 D7DB     		blt	.L127
 2654              	.L126:
 408:..\VFH/vfh.c  ****             }
 409:..\VFH/vfh.c  ****             return alpha * true_mod(far_edge + min_sect_dist(far_edge, cwise, nsectors)/2, nsectors
 2655              		.loc 1 409 0 is_stmt 1
 2656 0516 BA6C     		ldr	r2, [r7, #72]
 2657 0518 796E     		ldr	r1, [r7, #100]
 2658 051a B86D     		ldr	r0, [r7, #88]
 2659 051c FFF7FEFF 		bl	min_sect_dist
 2660 0520 0346     		mov	r3, r0
 2661 0522 DA0F     		lsrs	r2, r3, #31
 2662 0524 1344     		add	r3, r3, r2
 2663 0526 5B10     		asrs	r3, r3, #1
 2664 0528 1A46     		mov	r2, r3
 2665 052a BB6D     		ldr	r3, [r7, #88]
 2666 052c 1344     		add	r3, r3, r2
 2667 052e 1846     		mov	r0, r3
 2668 0530 FFF7FEFF 		bl	__aeabi_i2d
 2669 0534 0446     		mov	r4, r0
 2670 0536 0D46     		mov	r5, r1
 2671 0538 B86C     		ldr	r0, [r7, #72]
 2672 053a FFF7FEFF 		bl	__aeabi_i2d
 2673 053e 0246     		mov	r2, r0
 2674 0540 0B46     		mov	r3, r1
 2675 0542 2046     		mov	r0, r4
 2676 0544 2946     		mov	r1, r5
 2677 0546 FFF7FEFF 		bl	true_mod
 2678 054a D7E92223 		ldrd	r2, [r7, #136]
 2679 054e FFF7FEFF 		bl	__aeabi_dmul
 2680 0552 0346     		mov	r3, r0
 2681 0554 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 56


 2682 0556 63E0     		b	.L112
 2683              	.L124:
 2684              	.LBE25:
 2685              	.LBB26:
 410:..\VFH/vfh.c  ****         } else { // first edge is ccwise from goal
 411:..\VFH/vfh.c  ****             int edge_step = 1;
 2686              		.loc 1 411 0
 2687 0558 0123     		movs	r3, #1
 2688 055a 7B65     		str	r3, [r7, #84]
 412:..\VFH/vfh.c  ****             int far_edge = true_mod(ccwise+edge_step, nsectors);
 2689              		.loc 1 412 0
 2690 055c 3A6E     		ldr	r2, [r7, #96]
 2691 055e 7B6D     		ldr	r3, [r7, #84]
 2692 0560 1344     		add	r3, r3, r2
 2693 0562 1846     		mov	r0, r3
 2694 0564 FFF7FEFF 		bl	__aeabi_i2d
 2695 0568 0446     		mov	r4, r0
 2696 056a 0D46     		mov	r5, r1
 2697 056c B86C     		ldr	r0, [r7, #72]
 2698 056e FFF7FEFF 		bl	__aeabi_i2d
 2699 0572 0246     		mov	r2, r0
 2700 0574 0B46     		mov	r3, r1
 2701 0576 2046     		mov	r0, r4
 2702 0578 2946     		mov	r1, r5
 2703 057a FFF7FEFF 		bl	true_mod
 2704 057e 0346     		mov	r3, r0
 2705 0580 0C46     		mov	r4, r1
 2706 0582 1846     		mov	r0, r3
 2707 0584 2146     		mov	r1, r4
 2708 0586 FFF7FEFF 		bl	__aeabi_d2iz
 2709 058a 0346     		mov	r3, r0
 2710 058c 3B65     		str	r3, [r7, #80]
 413:..\VFH/vfh.c  ****             while( !candidate_lst[far_edge] && edge_step < s_max ) {
 2711              		.loc 1 413 0
 2712 058e 1BE0     		b	.L128
 2713              	.L130:
 414:..\VFH/vfh.c  ****                 edge_step++;  
 2714              		.loc 1 414 0
 2715 0590 7B6D     		ldr	r3, [r7, #84]
 2716 0592 0133     		adds	r3, r3, #1
 2717 0594 7B65     		str	r3, [r7, #84]
 415:..\VFH/vfh.c  ****                 far_edge = true_mod(ccwise+edge_step, nsectors); 
 2718              		.loc 1 415 0
 2719 0596 3A6E     		ldr	r2, [r7, #96]
 2720 0598 7B6D     		ldr	r3, [r7, #84]
 2721 059a 1344     		add	r3, r3, r2
 2722 059c 1846     		mov	r0, r3
 2723 059e FFF7FEFF 		bl	__aeabi_i2d
 2724 05a2 0446     		mov	r4, r0
 2725 05a4 0D46     		mov	r5, r1
 2726 05a6 B86C     		ldr	r0, [r7, #72]
 2727 05a8 FFF7FEFF 		bl	__aeabi_i2d
 2728 05ac 0246     		mov	r2, r0
 2729 05ae 0B46     		mov	r3, r1
 2730 05b0 2046     		mov	r0, r4
 2731 05b2 2946     		mov	r1, r5
 2732 05b4 FFF7FEFF 		bl	true_mod
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 57


 2733 05b8 0346     		mov	r3, r0
 2734 05ba 0C46     		mov	r4, r1
 2735 05bc 1846     		mov	r0, r3
 2736 05be 2146     		mov	r1, r4
 2737 05c0 FFF7FEFF 		bl	__aeabi_d2iz
 2738 05c4 0346     		mov	r3, r0
 2739 05c6 3B65     		str	r3, [r7, #80]
 2740              	.L128:
 413:..\VFH/vfh.c  ****             while( !candidate_lst[far_edge] && edge_step < s_max ) {
 2741              		.loc 1 413 0
 2742 05c8 3B6D     		ldr	r3, [r7, #80]
 2743 05ca 9B00     		lsls	r3, r3, #2
 2744 05cc 7A68     		ldr	r2, [r7, #4]
 2745 05ce 1344     		add	r3, r3, r2
 2746 05d0 1B68     		ldr	r3, [r3]
 2747 05d2 002B     		cmp	r3, #0
 2748 05d4 04D1     		bne	.L129
 413:..\VFH/vfh.c  ****             while( !candidate_lst[far_edge] && edge_step < s_max ) {
 2749              		.loc 1 413 0 is_stmt 0 discriminator 1
 2750 05d6 7A6D     		ldr	r2, [r7, #84]
 2751 05d8 D7F89030 		ldr	r3, [r7, #144]
 2752 05dc 9A42     		cmp	r2, r3
 2753 05de D7DB     		blt	.L130
 2754              	.L129:
 416:..\VFH/vfh.c  ****             }
 417:..\VFH/vfh.c  ****             return alpha * true_mod(ccwise + min_sect_dist(far_edge, ccwise, nsectors)/2, nsectors)
 2755              		.loc 1 417 0 is_stmt 1
 2756 05e0 BA6C     		ldr	r2, [r7, #72]
 2757 05e2 396E     		ldr	r1, [r7, #96]
 2758 05e4 386D     		ldr	r0, [r7, #80]
 2759 05e6 FFF7FEFF 		bl	min_sect_dist
 2760 05ea 0346     		mov	r3, r0
 2761 05ec DA0F     		lsrs	r2, r3, #31
 2762 05ee 1344     		add	r3, r3, r2
 2763 05f0 5B10     		asrs	r3, r3, #1
 2764 05f2 1A46     		mov	r2, r3
 2765 05f4 3B6E     		ldr	r3, [r7, #96]
 2766 05f6 1344     		add	r3, r3, r2
 2767 05f8 1846     		mov	r0, r3
 2768 05fa FFF7FEFF 		bl	__aeabi_i2d
 2769 05fe 0446     		mov	r4, r0
 2770 0600 0D46     		mov	r5, r1
 2771 0602 B86C     		ldr	r0, [r7, #72]
 2772 0604 FFF7FEFF 		bl	__aeabi_i2d
 2773 0608 0246     		mov	r2, r0
 2774 060a 0B46     		mov	r3, r1
 2775 060c 2046     		mov	r0, r4
 2776 060e 2946     		mov	r1, r5
 2777 0610 FFF7FEFF 		bl	true_mod
 2778 0614 D7E92223 		ldrd	r2, [r7, #136]
 2779 0618 FFF7FEFF 		bl	__aeabi_dmul
 2780 061c 0346     		mov	r3, r0
 2781 061e 0C46     		mov	r4, r1
 2782              	.L112:
 2783              	.LBE26:
 2784              	.LBE24:
 418:..\VFH/vfh.c  ****         }
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 58


 419:..\VFH/vfh.c  ****     }  
 420:..\VFH/vfh.c  **** }
 2785              		.loc 1 420 0
 2786 0620 1846     		mov	r0, r3
 2787 0622 2146     		mov	r1, r4
 2788 0624 7837     		adds	r7, r7, #120
 2789              		.cfi_def_cfa_offset 16
 2790 0626 BD46     		mov	sp, r7
 2791              		.cfi_def_cfa_register 13
 2792              		@ sp needed
 2793 0628 B0BD     		pop	{r4, r5, r7, pc}
 2794              	.L134:
 2795 062a 00BF     		.align	2
 2796              	.L133:
 2797 062c 0000F0BF 		.word	-1074790400
 2798              		.cfi_endproc
 2799              	.LFE8:
 2800              		.size	calculate_avoidance_angle2, .-calculate_avoidance_angle2
 2801              		.section	.text.velocity_control,"ax",%progbits
 2802              		.align	2
 2803              		.global	velocity_control
 2804              		.thumb
 2805              		.thumb_func
 2806              		.type	velocity_control, %function
 2807              	velocity_control:
 2808              	.LFB9:
 421:..\VFH/vfh.c  **** 
 422:..\VFH/vfh.c  **** 
 423:..\VFH/vfh.c  **** double velocity_control(POD * smoothed_POD, double direction, double alpha, double h_m) {
 2809              		.loc 1 423 0
 2810              		.cfi_startproc
 2811              		@ args = 16, pretend = 0, frame = 56
 2812              		@ frame_needed = 1, uses_anonymous_args = 0
 2813 0000 90B5     		push	{r4, r7, lr}
 2814              		.cfi_def_cfa_offset 12
 2815              		.cfi_offset 4, -12
 2816              		.cfi_offset 7, -8
 2817              		.cfi_offset 14, -4
 2818 0002 8FB0     		sub	sp, sp, #60
 2819              		.cfi_def_cfa_offset 72
 2820 0004 00AF     		add	r7, sp, #0
 2821              		.cfi_def_cfa_register 7
 2822 0006 F860     		str	r0, [r7, #12]
 2823 0008 C7E90023 		strd	r2, [r7]
 424:..\VFH/vfh.c  ****   // Max velocity
 425:..\VFH/vfh.c  ****   double V_MAX = 10;
 2824              		.loc 1 425 0
 2825 000c 4FF00003 		mov	r3, #0
 2826 0010 354C     		ldr	r4, .L142+8
 2827 0012 C7E90A34 		strd	r3, [r7, #40]
 426:..\VFH/vfh.c  **** 
 427:..\VFH/vfh.c  ****   // Convert the direction of travel into sector index
 428:..\VFH/vfh.c  ****   int h_idx = floor((180 * calculate_angle_modulo(direction) / M_PI)  / alpha);
 2828              		.loc 1 428 0
 2829 0016 D7E90001 		ldrd	r0, [r7]
 2830 001a FFF7FEFF 		bl	calculate_angle_modulo
 2831 001e 4FF00002 		mov	r2, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 59


 2832 0022 324B     		ldr	r3, .L142+12
 2833 0024 FFF7FEFF 		bl	__aeabi_dmul
 2834 0028 0346     		mov	r3, r0
 2835 002a 0C46     		mov	r4, r1
 2836 002c 1846     		mov	r0, r3
 2837 002e 2146     		mov	r1, r4
 2838 0030 2BA3     		adr	r3, .L142
 2839 0032 D3E90023 		ldrd	r2, [r3]
 2840 0036 FFF7FEFF 		bl	__aeabi_ddiv
 2841 003a 0346     		mov	r3, r0
 2842 003c 0C46     		mov	r4, r1
 2843 003e 1846     		mov	r0, r3
 2844 0040 2146     		mov	r1, r4
 2845 0042 D7E91223 		ldrd	r2, [r7, #72]
 2846 0046 FFF7FEFF 		bl	__aeabi_ddiv
 2847 004a 0346     		mov	r3, r0
 2848 004c 0C46     		mov	r4, r1
 2849 004e 1846     		mov	r0, r3
 2850 0050 2146     		mov	r1, r4
 2851 0052 FFF7FEFF 		bl	floor
 2852 0056 0346     		mov	r3, r0
 2853 0058 0C46     		mov	r4, r1
 2854 005a 1846     		mov	r0, r3
 2855 005c 2146     		mov	r1, r4
 2856 005e FFF7FEFF 		bl	__aeabi_d2iz
 2857 0062 0346     		mov	r3, r0
 2858 0064 7B62     		str	r3, [r7, #36]
 429:..\VFH/vfh.c  ****   
 430:..\VFH/vfh.c  ****   // Retrieve polar histogram density at this sector
 431:..\VFH/vfh.c  ****   double h_c = smoothed_POD->density[h_idx];
 2859              		.loc 1 431 0
 2860 0066 FB68     		ldr	r3, [r7, #12]
 2861 0068 5A68     		ldr	r2, [r3, #4]
 2862 006a 7B6A     		ldr	r3, [r7, #36]
 2863 006c DB00     		lsls	r3, r3, #3
 2864 006e 1344     		add	r3, r3, r2
 2865 0070 18CB     		ldmia	r3, {r3-r4}
 2866 0072 C7E90634 		strd	r3, [r7, #24]
 432:..\VFH/vfh.c  **** 
 433:..\VFH/vfh.c  ****   // NOTE: If h_c > 0, that indicates that an obstacles lies ahead of the robot
 434:..\VFH/vfh.c  **** 
 435:..\VFH/vfh.c  ****   // Define h_m which is an empirically determined constant. h_cc later must be less than h_m
 436:..\VFH/vfh.c  **** 
 437:..\VFH/vfh.c  ****   double h_cc;
 438:..\VFH/vfh.c  ****   if (h_c > h_m) {
 2867              		.loc 1 438 0
 2868 0076 D7E91423 		ldrd	r2, [r7, #80]
 2869 007a D7E90601 		ldrd	r0, [r7, #24]
 2870 007e FFF7FEFF 		bl	__aeabi_dcmpgt
 2871 0082 0346     		mov	r3, r0
 2872 0084 002B     		cmp	r3, #0
 2873 0086 04D0     		beq	.L141
 439:..\VFH/vfh.c  ****     h_cc = h_m;
 2874              		.loc 1 439 0
 2875 0088 D7E91434 		ldrd	r3, [r7, #80]
 2876 008c C7E90C34 		strd	r3, [r7, #48]
 2877 0090 03E0     		b	.L138
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 60


 2878              	.L141:
 440:..\VFH/vfh.c  ****   } else {
 441:..\VFH/vfh.c  ****     h_cc = h_c;
 2879              		.loc 1 441 0
 2880 0092 D7E90634 		ldrd	r3, [r7, #24]
 2881 0096 C7E90C34 		strd	r3, [r7, #48]
 2882              	.L138:
 442:..\VFH/vfh.c  ****   }
 443:..\VFH/vfh.c  ****   double speed_reduction = V_MAX * (1 - (h_cc / h_m));
 2883              		.loc 1 443 0
 2884 009a D7E91423 		ldrd	r2, [r7, #80]
 2885 009e D7E90C01 		ldrd	r0, [r7, #48]
 2886 00a2 FFF7FEFF 		bl	__aeabi_ddiv
 2887 00a6 0346     		mov	r3, r0
 2888 00a8 0C46     		mov	r4, r1
 2889 00aa 1A46     		mov	r2, r3
 2890 00ac 2346     		mov	r3, r4
 2891 00ae 4FF00000 		mov	r0, #0
 2892 00b2 0F49     		ldr	r1, .L142+16
 2893 00b4 FFF7FEFF 		bl	__aeabi_dsub
 2894 00b8 0346     		mov	r3, r0
 2895 00ba 0C46     		mov	r4, r1
 2896 00bc 1846     		mov	r0, r3
 2897 00be 2146     		mov	r1, r4
 2898 00c0 D7E90A23 		ldrd	r2, [r7, #40]
 2899 00c4 FFF7FEFF 		bl	__aeabi_dmul
 2900 00c8 0346     		mov	r3, r0
 2901 00ca 0C46     		mov	r4, r1
 2902 00cc C7E90434 		strd	r3, [r7, #16]
 444:..\VFH/vfh.c  **** 
 445:..\VFH/vfh.c  ****   // Further reduce speed to anticipate obstacles
 446:..\VFH/vfh.c  ****   
 447:..\VFH/vfh.c  ****   return speed_reduction;
 2903              		.loc 1 447 0
 2904 00d0 D7E90434 		ldrd	r3, [r7, #16]
 448:..\VFH/vfh.c  **** }
 2905              		.loc 1 448 0
 2906 00d4 1846     		mov	r0, r3
 2907 00d6 2146     		mov	r1, r4
 2908 00d8 3C37     		adds	r7, r7, #60
 2909              		.cfi_def_cfa_offset 12
 2910 00da BD46     		mov	sp, r7
 2911              		.cfi_def_cfa_register 13
 2912              		@ sp needed
 2913 00dc 90BD     		pop	{r4, r7, pc}
 2914              	.L143:
 2915 00de 00BF     		.align	3
 2916              	.L142:
 2917 00e0 182D4454 		.word	1413754136
 2918 00e4 FB210940 		.word	1074340347
 2919 00e8 00002440 		.word	1076101120
 2920 00ec 00806640 		.word	1080459264
 2921 00f0 0000F03F 		.word	1072693248
 2922              		.cfi_endproc
 2923              	.LFE9:
 2924              		.size	velocity_control, .-velocity_control
 2925              		.text
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 61


 2926              	.Letext0:
 2927              		.file 2 "..\\VFH\\..\\Helper\\helper.h"
 2928              		.file 3 "..\\VFH\\..\\Robot\\robot.h"
 2929              		.file 4 "..\\VFH\\vfh.h"
 2930              		.section	.debug_info,"",%progbits
 2931              	.Ldebug_info0:
 2932 0000 F40A0000 		.4byte	0xaf4
 2933 0004 0400     		.2byte	0x4
 2934 0006 00000000 		.4byte	.Ldebug_abbrev0
 2935 000a 04       		.byte	0x4
 2936 000b 01       		.uleb128 0x1
 2937 000c 3E000000 		.4byte	.LASF89
 2938 0010 0C       		.byte	0xc
 2939 0011 F5030000 		.4byte	.LASF90
 2940 0015 AB030000 		.4byte	.LASF91
 2941 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2942 001d 00000000 		.4byte	0
 2943 0021 00000000 		.4byte	.Ldebug_line0
 2944 0025 02       		.uleb128 0x2
 2945 0026 04       		.byte	0x4
 2946 0027 07       		.byte	0x7
 2947 0028 E2010000 		.4byte	.LASF0
 2948 002c 03       		.uleb128 0x3
 2949 002d 04       		.byte	0x4
 2950 002e 05       		.byte	0x5
 2951 002f 696E7400 		.ascii	"int\000"
 2952 0033 02       		.uleb128 0x2
 2953 0034 08       		.byte	0x8
 2954 0035 05       		.byte	0x5
 2955 0036 3B010000 		.4byte	.LASF1
 2956 003a 02       		.uleb128 0x2
 2957 003b 08       		.byte	0x8
 2958 003c 04       		.byte	0x4
 2959 003d 7E020000 		.4byte	.LASF2
 2960 0041 02       		.uleb128 0x2
 2961 0042 01       		.byte	0x1
 2962 0043 06       		.byte	0x6
 2963 0044 49010000 		.4byte	.LASF3
 2964 0048 02       		.uleb128 0x2
 2965 0049 01       		.byte	0x1
 2966 004a 08       		.byte	0x8
 2967 004b F7020000 		.4byte	.LASF4
 2968 004f 02       		.uleb128 0x2
 2969 0050 02       		.byte	0x2
 2970 0051 05       		.byte	0x5
 2971 0052 0A030000 		.4byte	.LASF5
 2972 0056 02       		.uleb128 0x2
 2973 0057 02       		.byte	0x2
 2974 0058 07       		.byte	0x7
 2975 0059 37020000 		.4byte	.LASF6
 2976 005d 02       		.uleb128 0x2
 2977 005e 04       		.byte	0x4
 2978 005f 05       		.byte	0x5
 2979 0060 72010000 		.4byte	.LASF7
 2980 0064 02       		.uleb128 0x2
 2981 0065 04       		.byte	0x4
 2982 0066 07       		.byte	0x7
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 62


 2983 0067 F8010000 		.4byte	.LASF8
 2984 006b 02       		.uleb128 0x2
 2985 006c 08       		.byte	0x8
 2986 006d 07       		.byte	0x7
 2987 006e D4000000 		.4byte	.LASF9
 2988 0072 02       		.uleb128 0x2
 2989 0073 04       		.byte	0x4
 2990 0074 07       		.byte	0x7
 2991 0075 75020000 		.4byte	.LASF10
 2992 0079 02       		.uleb128 0x2
 2993 007a 01       		.byte	0x1
 2994 007b 08       		.byte	0x8
 2995 007c 84030000 		.4byte	.LASF11
 2996 0080 02       		.uleb128 0x2
 2997 0081 08       		.byte	0x8
 2998 0082 04       		.byte	0x4
 2999 0083 89010000 		.4byte	.LASF12
 3000 0087 02       		.uleb128 0x2
 3001 0088 04       		.byte	0x4
 3002 0089 04       		.byte	0x4
 3003 008a DB020000 		.4byte	.LASF13
 3004 008e 04       		.uleb128 0x4
 3005 008f 28       		.byte	0x28
 3006 0090 02       		.byte	0x2
 3007 0091 22       		.byte	0x22
 3008 0092 AF000000 		.4byte	0xaf
 3009 0096 05       		.uleb128 0x5
 3010 0097 34000000 		.4byte	.LASF14
 3011 009b 02       		.byte	0x2
 3012 009c 23       		.byte	0x23
 3013 009d AF000000 		.4byte	0xaf
 3014 00a1 00       		.byte	0
 3015 00a2 05       		.uleb128 0x5
 3016 00a3 97030000 		.4byte	.LASF15
 3017 00a7 02       		.byte	0x2
 3018 00a8 24       		.byte	0x24
 3019 00a9 AF000000 		.4byte	0xaf
 3020 00ad 14       		.byte	0x14
 3021 00ae 00       		.byte	0
 3022 00af 06       		.uleb128 0x6
 3023 00b0 2C000000 		.4byte	0x2c
 3024 00b4 BF000000 		.4byte	0xbf
 3025 00b8 07       		.uleb128 0x7
 3026 00b9 72000000 		.4byte	0x72
 3027 00bd 04       		.byte	0x4
 3028 00be 00       		.byte	0
 3029 00bf 08       		.uleb128 0x8
 3030 00c0 6E020000 		.4byte	.LASF24
 3031 00c4 02       		.byte	0x2
 3032 00c5 25       		.byte	0x25
 3033 00c6 8E000000 		.4byte	0x8e
 3034 00ca 04       		.uleb128 0x4
 3035 00cb 70       		.byte	0x70
 3036 00cc 03       		.byte	0x3
 3037 00cd 1A       		.byte	0x1a
 3038 00ce 71010000 		.4byte	0x171
 3039 00d2 05       		.uleb128 0x5
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 63


 3040 00d3 1C030000 		.4byte	.LASF16
 3041 00d7 03       		.byte	0x3
 3042 00d8 1C       		.byte	0x1c
 3043 00d9 3A000000 		.4byte	0x3a
 3044 00dd 00       		.byte	0
 3045 00de 05       		.uleb128 0x5
 3046 00df 4A020000 		.4byte	.LASF17
 3047 00e3 03       		.byte	0x3
 3048 00e4 1F       		.byte	0x1f
 3049 00e5 3A000000 		.4byte	0x3a
 3050 00e9 08       		.byte	0x8
 3051 00ea 09       		.uleb128 0x9
 3052 00eb 7800     		.ascii	"x\000"
 3053 00ed 03       		.byte	0x3
 3054 00ee 20       		.byte	0x20
 3055 00ef 3A000000 		.4byte	0x3a
 3056 00f3 10       		.byte	0x10
 3057 00f4 09       		.uleb128 0x9
 3058 00f5 7900     		.ascii	"y\000"
 3059 00f7 03       		.byte	0x3
 3060 00f8 21       		.byte	0x21
 3061 00f9 3A000000 		.4byte	0x3a
 3062 00fd 18       		.byte	0x18
 3063 00fe 09       		.uleb128 0x9
 3064 00ff 7600     		.ascii	"v\000"
 3065 0101 03       		.byte	0x3
 3066 0102 24       		.byte	0x24
 3067 0103 3A000000 		.4byte	0x3a
 3068 0107 20       		.byte	0x20
 3069 0108 09       		.uleb128 0x9
 3070 0109 7700     		.ascii	"w\000"
 3071 010b 03       		.byte	0x3
 3072 010c 25       		.byte	0x25
 3073 010d 3A000000 		.4byte	0x3a
 3074 0111 28       		.byte	0x28
 3075 0112 05       		.uleb128 0x5
 3076 0113 64020000 		.4byte	.LASF18
 3077 0117 03       		.byte	0x3
 3078 0118 28       		.byte	0x28
 3079 0119 3A000000 		.4byte	0x3a
 3080 011d 30       		.byte	0x30
 3081 011e 05       		.uleb128 0x5
 3082 011f 02040000 		.4byte	.LASF19
 3083 0123 03       		.byte	0x3
 3084 0124 29       		.byte	0x29
 3085 0125 3A000000 		.4byte	0x3a
 3086 0129 38       		.byte	0x38
 3087 012a 09       		.uleb128 0x9
 3088 012b 4B6900   		.ascii	"Ki\000"
 3089 012e 03       		.byte	0x3
 3090 012f 2C       		.byte	0x2c
 3091 0130 3A000000 		.4byte	0x3a
 3092 0134 40       		.byte	0x40
 3093 0135 09       		.uleb128 0x9
 3094 0136 4B7000   		.ascii	"Kp\000"
 3095 0139 03       		.byte	0x3
 3096 013a 2D       		.byte	0x2d
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 64


 3097 013b 3A000000 		.4byte	0x3a
 3098 013f 48       		.byte	0x48
 3099 0140 05       		.uleb128 0x5
 3100 0141 55010000 		.4byte	.LASF20
 3101 0145 03       		.byte	0x3
 3102 0146 2E       		.byte	0x2e
 3103 0147 3A000000 		.4byte	0x3a
 3104 014b 50       		.byte	0x50
 3105 014c 05       		.uleb128 0x5
 3106 014d E1020000 		.4byte	.LASF21
 3107 0151 03       		.byte	0x3
 3108 0152 31       		.byte	0x31
 3109 0153 3A000000 		.4byte	0x3a
 3110 0157 58       		.byte	0x58
 3111 0158 05       		.uleb128 0x5
 3112 0159 E8020000 		.4byte	.LASF22
 3113 015d 03       		.byte	0x3
 3114 015e 32       		.byte	0x32
 3115 015f 3A000000 		.4byte	0x3a
 3116 0163 60       		.byte	0x60
 3117 0164 05       		.uleb128 0x5
 3118 0165 50020000 		.4byte	.LASF23
 3119 0169 03       		.byte	0x3
 3120 016a 33       		.byte	0x33
 3121 016b 3A000000 		.4byte	0x3a
 3122 016f 68       		.byte	0x68
 3123 0170 00       		.byte	0
 3124 0171 08       		.uleb128 0x8
 3125 0172 3A040000 		.4byte	.LASF25
 3126 0176 03       		.byte	0x3
 3127 0177 35       		.byte	0x35
 3128 0178 CA000000 		.4byte	0xca
 3129 017c 04       		.uleb128 0x4
 3130 017d 10       		.byte	0x10
 3131 017e 04       		.byte	0x4
 3132 017f 13       		.byte	0x13
 3133 0180 B5010000 		.4byte	0x1b5
 3134 0184 05       		.uleb128 0x5
 3135 0185 31020000 		.4byte	.LASF26
 3136 0189 04       		.byte	0x4
 3137 018a 14       		.byte	0x14
 3138 018b 2C000000 		.4byte	0x2c
 3139 018f 00       		.byte	0
 3140 0190 05       		.uleb128 0x5
 3141 0191 5F040000 		.4byte	.LASF27
 3142 0195 04       		.byte	0x4
 3143 0196 15       		.byte	0x15
 3144 0197 2C000000 		.4byte	0x2c
 3145 019b 04       		.byte	0x4
 3146 019c 05       		.uleb128 0x5
 3147 019d 45030000 		.4byte	.LASF28
 3148 01a1 04       		.byte	0x4
 3149 01a2 16       		.byte	0x16
 3150 01a3 2C000000 		.4byte	0x2c
 3151 01a7 08       		.byte	0x8
 3152 01a8 05       		.uleb128 0x5
 3153 01a9 5E020000 		.4byte	.LASF29
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 65


 3154 01ad 04       		.byte	0x4
 3155 01ae 17       		.byte	0x17
 3156 01af B5010000 		.4byte	0x1b5
 3157 01b3 0C       		.byte	0xc
 3158 01b4 00       		.byte	0
 3159 01b5 0A       		.uleb128 0xa
 3160 01b6 04       		.byte	0x4
 3161 01b7 25000000 		.4byte	0x25
 3162 01bb 08       		.uleb128 0x8
 3163 01bc AD020000 		.4byte	.LASF30
 3164 01c0 04       		.byte	0x4
 3165 01c1 18       		.byte	0x18
 3166 01c2 7C010000 		.4byte	0x17c
 3167 01c6 04       		.uleb128 0x4
 3168 01c7 08       		.byte	0x8
 3169 01c8 04       		.byte	0x4
 3170 01c9 2E       		.byte	0x2e
 3171 01ca E7010000 		.4byte	0x1e7
 3172 01ce 05       		.uleb128 0x5
 3173 01cf EF010000 		.4byte	.LASF31
 3174 01d3 04       		.byte	0x4
 3175 01d4 2F       		.byte	0x2f
 3176 01d5 2C000000 		.4byte	0x2c
 3177 01d9 00       		.byte	0
 3178 01da 05       		.uleb128 0x5
 3179 01db CC000000 		.4byte	.LASF32
 3180 01df 04       		.byte	0x4
 3181 01e0 30       		.byte	0x30
 3182 01e1 E7010000 		.4byte	0x1e7
 3183 01e5 04       		.byte	0x4
 3184 01e6 00       		.byte	0
 3185 01e7 0A       		.uleb128 0xa
 3186 01e8 04       		.byte	0x4
 3187 01e9 80000000 		.4byte	0x80
 3188 01ed 0B       		.uleb128 0xb
 3189 01ee 504F4400 		.ascii	"POD\000"
 3190 01f2 04       		.byte	0x4
 3191 01f3 31       		.byte	0x31
 3192 01f4 C6010000 		.4byte	0x1c6
 3193 01f8 0C       		.uleb128 0xc
 3194 01f9 90010000 		.4byte	.LASF33
 3195 01fd 01       		.byte	0x1
 3196 01fe 0E       		.byte	0xe
 3197 01ff 80000000 		.4byte	0x80
 3198 0203 00000000 		.4byte	.LFB0
 3199 0207 4C000000 		.4byte	.LFE0-.LFB0
 3200 020b 01       		.uleb128 0x1
 3201 020c 9C       		.byte	0x9c
 3202 020d 2A020000 		.4byte	0x22a
 3203 0211 0D       		.uleb128 0xd
 3204 0212 6100     		.ascii	"a\000"
 3205 0214 01       		.byte	0x1
 3206 0215 0E       		.byte	0xe
 3207 0216 80000000 		.4byte	0x80
 3208 021a 02       		.uleb128 0x2
 3209 021b 91       		.byte	0x91
 3210 021c 68       		.sleb128 -24
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 66


 3211 021d 0D       		.uleb128 0xd
 3212 021e 6200     		.ascii	"b\000"
 3213 0220 01       		.byte	0x1
 3214 0221 0E       		.byte	0xe
 3215 0222 80000000 		.4byte	0x80
 3216 0226 02       		.uleb128 0x2
 3217 0227 91       		.byte	0x91
 3218 0228 60       		.sleb128 -32
 3219 0229 00       		.byte	0
 3220 022a 0E       		.uleb128 0xe
 3221 022b A3010000 		.4byte	.LASF34
 3222 022f 01       		.byte	0x1
 3223 0230 12       		.byte	0x12
 3224 0231 2C000000 		.4byte	0x2c
 3225 0235 00000000 		.4byte	.LFB1
 3226 0239 3E000000 		.4byte	.LFE1-.LFB1
 3227 023d 01       		.uleb128 0x1
 3228 023e 9C       		.byte	0x9c
 3229 023f 7C020000 		.4byte	0x27c
 3230 0243 0F       		.uleb128 0xf
 3231 0244 C3010000 		.4byte	.LASF35
 3232 0248 01       		.byte	0x1
 3233 0249 12       		.byte	0x12
 3234 024a 2C000000 		.4byte	0x2c
 3235 024e 02       		.uleb128 0x2
 3236 024f 91       		.byte	0x91
 3237 0250 6C       		.sleb128 -20
 3238 0251 0F       		.uleb128 0xf
 3239 0252 CA010000 		.4byte	.LASF36
 3240 0256 01       		.byte	0x1
 3241 0257 12       		.byte	0x12
 3242 0258 2C000000 		.4byte	0x2c
 3243 025c 02       		.uleb128 0x2
 3244 025d 91       		.byte	0x91
 3245 025e 68       		.sleb128 -24
 3246 025f 0F       		.uleb128 0xf
 3247 0260 EF010000 		.4byte	.LASF31
 3248 0264 01       		.byte	0x1
 3249 0265 12       		.byte	0x12
 3250 0266 2C000000 		.4byte	0x2c
 3251 026a 02       		.uleb128 0x2
 3252 026b 91       		.byte	0x91
 3253 026c 64       		.sleb128 -28
 3254 026d 10       		.uleb128 0x10
 3255 026e 7B010000 		.4byte	.LASF38
 3256 0272 01       		.byte	0x1
 3257 0273 13       		.byte	0x13
 3258 0274 2C000000 		.4byte	0x2c
 3259 0278 02       		.uleb128 0x2
 3260 0279 91       		.byte	0x91
 3261 027a 74       		.sleb128 -12
 3262 027b 00       		.byte	0
 3263 027c 0C       		.uleb128 0xc
 3264 027d 5F010000 		.4byte	.LASF37
 3265 0281 01       		.byte	0x1
 3266 0282 1A       		.byte	0x1a
 3267 0283 FA020000 		.4byte	0x2fa
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 67


 3268 0287 00000000 		.4byte	.LFB2
 3269 028b B6000000 		.4byte	.LFE2-.LFB2
 3270 028f 01       		.uleb128 0x1
 3271 0290 9C       		.byte	0x9c
 3272 0291 FA020000 		.4byte	0x2fa
 3273 0295 0F       		.uleb128 0xf
 3274 0296 31020000 		.4byte	.LASF26
 3275 029a 01       		.byte	0x1
 3276 029b 1A       		.byte	0x1a
 3277 029c 2C000000 		.4byte	0x2c
 3278 02a0 02       		.uleb128 0x2
 3279 02a1 91       		.byte	0x91
 3280 02a2 64       		.sleb128 -28
 3281 02a3 0F       		.uleb128 0xf
 3282 02a4 5F040000 		.4byte	.LASF27
 3283 02a8 01       		.byte	0x1
 3284 02a9 1A       		.byte	0x1a
 3285 02aa 2C000000 		.4byte	0x2c
 3286 02ae 02       		.uleb128 0x2
 3287 02af 91       		.byte	0x91
 3288 02b0 60       		.sleb128 -32
 3289 02b1 0F       		.uleb128 0xf
 3290 02b2 45030000 		.4byte	.LASF28
 3291 02b6 01       		.byte	0x1
 3292 02b7 1A       		.byte	0x1a
 3293 02b8 2C000000 		.4byte	0x2c
 3294 02bc 02       		.uleb128 0x2
 3295 02bd 91       		.byte	0x91
 3296 02be 5C       		.sleb128 -36
 3297 02bf 11       		.uleb128 0x11
 3298 02c0 6D617000 		.ascii	"map\000"
 3299 02c4 01       		.byte	0x1
 3300 02c5 1D       		.byte	0x1d
 3301 02c6 FA020000 		.4byte	0x2fa
 3302 02ca 02       		.uleb128 0x2
 3303 02cb 91       		.byte	0x91
 3304 02cc 6C       		.sleb128 -20
 3305 02cd 12       		.uleb128 0x12
 3306 02ce 6C000000 		.4byte	.LBB2
 3307 02d2 40000000 		.4byte	.LBE2-.LBB2
 3308 02d6 11       		.uleb128 0x11
 3309 02d7 6900     		.ascii	"i\000"
 3310 02d9 01       		.byte	0x1
 3311 02da 33       		.byte	0x33
 3312 02db 2C000000 		.4byte	0x2c
 3313 02df 02       		.uleb128 0x2
 3314 02e0 91       		.byte	0x91
 3315 02e1 74       		.sleb128 -12
 3316 02e2 12       		.uleb128 0x12
 3317 02e3 72000000 		.4byte	.LBB3
 3318 02e7 2C000000 		.4byte	.LBE3-.LBB3
 3319 02eb 11       		.uleb128 0x11
 3320 02ec 6A00     		.ascii	"j\000"
 3321 02ee 01       		.byte	0x1
 3322 02ef 34       		.byte	0x34
 3323 02f0 2C000000 		.4byte	0x2c
 3324 02f4 02       		.uleb128 0x2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 68


 3325 02f5 91       		.byte	0x91
 3326 02f6 70       		.sleb128 -16
 3327 02f7 00       		.byte	0
 3328 02f8 00       		.byte	0
 3329 02f9 00       		.byte	0
 3330 02fa 0A       		.uleb128 0xa
 3331 02fb 04       		.byte	0x4
 3332 02fc BB010000 		.4byte	0x1bb
 3333 0300 0C       		.uleb128 0xc
 3334 0301 14000000 		.4byte	.LASF39
 3335 0305 01       		.byte	0x1
 3336 0306 3C       		.byte	0x3c
 3337 0307 2C000000 		.4byte	0x2c
 3338 030b 00000000 		.4byte	.LFB3
 3339 030f 50030000 		.4byte	.LFE3-.LFB3
 3340 0313 01       		.uleb128 0x1
 3341 0314 9C       		.byte	0x9c
 3342 0315 F7030000 		.4byte	0x3f7
 3343 0319 0D       		.uleb128 0xd
 3344 031a 6D617000 		.ascii	"map\000"
 3345 031e 01       		.byte	0x1
 3346 031f 3C       		.byte	0x3c
 3347 0320 FA020000 		.4byte	0x2fa
 3348 0324 03       		.uleb128 0x3
 3349 0325 91       		.byte	0x91
 3350 0326 EC7E     		.sleb128 -148
 3351 0328 0F       		.uleb128 0xf
 3352 0329 65030000 		.4byte	.LASF40
 3353 032d 01       		.byte	0x1
 3354 032e 3C       		.byte	0x3c
 3355 032f F7030000 		.4byte	0x3f7
 3356 0333 03       		.uleb128 0x3
 3357 0334 91       		.byte	0x91
 3358 0335 E87E     		.sleb128 -152
 3359 0337 0F       		.uleb128 0xf
 3360 0338 D1010000 		.4byte	.LASF41
 3361 033c 01       		.byte	0x1
 3362 033d 3C       		.byte	0x3c
 3363 033e FD030000 		.4byte	0x3fd
 3364 0342 03       		.uleb128 0x3
 3365 0343 91       		.byte	0x91
 3366 0344 E47E     		.sleb128 -156
 3367 0346 10       		.uleb128 0x10
 3368 0347 CF020000 		.4byte	.LASF42
 3369 034b 01       		.byte	0x1
 3370 034c 49       		.byte	0x49
 3371 034d 80000000 		.4byte	0x80
 3372 0351 02       		.uleb128 0x2
 3373 0352 91       		.byte	0x91
 3374 0353 40       		.sleb128 -64
 3375 0354 10       		.uleb128 0x10
 3376 0355 D5020000 		.4byte	.LASF43
 3377 0359 01       		.byte	0x1
 3378 035a 4A       		.byte	0x4a
 3379 035b 80000000 		.4byte	0x80
 3380 035f 03       		.uleb128 0x3
 3381 0360 91       		.byte	0x91
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 69


 3382 0361 B87F     		.sleb128 -72
 3383 0363 11       		.uleb128 0x11
 3384 0364 79617700 		.ascii	"yaw\000"
 3385 0368 01       		.byte	0x1
 3386 0369 4B       		.byte	0x4b
 3387 036a 80000000 		.4byte	0x80
 3388 036e 03       		.uleb128 0x3
 3389 036f 91       		.byte	0x91
 3390 0370 B07F     		.sleb128 -80
 3391 0372 10       		.uleb128 0x10
 3392 0373 89030000 		.4byte	.LASF44
 3393 0377 01       		.byte	0x1
 3394 0378 4E       		.byte	0x4e
 3395 0379 03040000 		.4byte	0x403
 3396 037d 03       		.uleb128 0x3
 3397 037e 91       		.byte	0x91
 3398 037f F07E     		.sleb128 -144
 3399 0381 10       		.uleb128 0x10
 3400 0382 4A020000 		.4byte	.LASF17
 3401 0386 01       		.byte	0x1
 3402 0387 54       		.byte	0x54
 3403 0388 80000000 		.4byte	0x80
 3404 038c 02       		.uleb128 0x2
 3405 038d 91       		.byte	0x91
 3406 038e 50       		.sleb128 -48
 3407 038f 10       		.uleb128 0x10
 3408 0390 B2020000 		.4byte	.LASF45
 3409 0394 01       		.byte	0x1
 3410 0395 55       		.byte	0x55
 3411 0396 80000000 		.4byte	0x80
 3412 039a 03       		.uleb128 0x3
 3413 039b 91       		.byte	0x91
 3414 039c A87F     		.sleb128 -88
 3415 039e 13       		.uleb128 0x13
 3416 039f 4E000000 		.4byte	.LBB4
 3417 03a3 40000000 		.4byte	.LBE4-.LBB4
 3418 03a7 B8030000 		.4byte	0x3b8
 3419 03ab 11       		.uleb128 0x11
 3420 03ac 6900     		.ascii	"i\000"
 3421 03ae 01       		.byte	0x1
 3422 03af 4F       		.byte	0x4f
 3423 03b0 2C000000 		.4byte	0x2c
 3424 03b4 02       		.uleb128 0x2
 3425 03b5 91       		.byte	0x91
 3426 03b6 5C       		.sleb128 -36
 3427 03b7 00       		.byte	0
 3428 03b8 12       		.uleb128 0x12
 3429 03b9 8E000000 		.4byte	.LBB5
 3430 03bd 9A020000 		.4byte	.LBE5-.LBB5
 3431 03c1 11       		.uleb128 0x11
 3432 03c2 6900     		.ascii	"i\000"
 3433 03c4 01       		.byte	0x1
 3434 03c5 57       		.byte	0x57
 3435 03c6 2C000000 		.4byte	0x2c
 3436 03ca 02       		.uleb128 0x2
 3437 03cb 91       		.byte	0x91
 3438 03cc 4C       		.sleb128 -52
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 70


 3439 03cd 12       		.uleb128 0x12
 3440 03ce 94000000 		.4byte	.LBB6
 3441 03d2 86020000 		.4byte	.LBE6-.LBB6
 3442 03d6 10       		.uleb128 0x10
 3443 03d7 27030000 		.4byte	.LASF46
 3444 03db 01       		.byte	0x1
 3445 03dc 62       		.byte	0x62
 3446 03dd 80000000 		.4byte	0x80
 3447 03e1 03       		.uleb128 0x3
 3448 03e2 91       		.byte	0x91
 3449 03e3 A07F     		.sleb128 -96
 3450 03e5 10       		.uleb128 0x10
 3451 03e6 B1010000 		.4byte	.LASF47
 3452 03ea 01       		.byte	0x1
 3453 03eb 63       		.byte	0x63
 3454 03ec 80000000 		.4byte	0x80
 3455 03f0 03       		.uleb128 0x3
 3456 03f1 91       		.byte	0x91
 3457 03f2 987F     		.sleb128 -104
 3458 03f4 00       		.byte	0
 3459 03f5 00       		.byte	0
 3460 03f6 00       		.byte	0
 3461 03f7 0A       		.uleb128 0xa
 3462 03f8 04       		.byte	0x4
 3463 03f9 BF000000 		.4byte	0xbf
 3464 03fd 0A       		.uleb128 0xa
 3465 03fe 04       		.byte	0x4
 3466 03ff 71010000 		.4byte	0x171
 3467 0403 06       		.uleb128 0x6
 3468 0404 80000000 		.4byte	0x80
 3469 0408 13040000 		.4byte	0x413
 3470 040c 07       		.uleb128 0x7
 3471 040d 72000000 		.4byte	0x72
 3472 0411 04       		.byte	0x4
 3473 0412 00       		.byte	0
 3474 0413 14       		.uleb128 0x14
 3475 0414 27040000 		.4byte	.LASF53
 3476 0418 01       		.byte	0x1
 3477 0419 72       		.byte	0x72
 3478 041a 00000000 		.4byte	.LFB4
 3479 041e F8000000 		.4byte	.LFE4-.LFB4
 3480 0422 01       		.uleb128 0x1
 3481 0423 9C       		.byte	0x9c
 3482 0424 BD040000 		.4byte	0x4bd
 3483 0428 0D       		.uleb128 0xd
 3484 0429 6D617000 		.ascii	"map\000"
 3485 042d 01       		.byte	0x1
 3486 042e 72       		.byte	0x72
 3487 042f FA020000 		.4byte	0x2fa
 3488 0433 02       		.uleb128 0x2
 3489 0434 91       		.byte	0x91
 3490 0435 54       		.sleb128 -44
 3491 0436 0F       		.uleb128 0xf
 3492 0437 6B010000 		.4byte	.LASF48
 3493 043b 01       		.byte	0x1
 3494 043c 72       		.byte	0x72
 3495 043d FA020000 		.4byte	0x2fa
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 71


 3496 0441 02       		.uleb128 0x2
 3497 0442 91       		.byte	0x91
 3498 0443 50       		.sleb128 -48
 3499 0444 0F       		.uleb128 0xf
 3500 0445 D1010000 		.4byte	.LASF41
 3501 0449 01       		.byte	0x1
 3502 044a 72       		.byte	0x72
 3503 044b FD030000 		.4byte	0x3fd
 3504 044f 02       		.uleb128 0x2
 3505 0450 91       		.byte	0x91
 3506 0451 4C       		.sleb128 -52
 3507 0452 11       		.uleb128 0x11
 3508 0453 7800     		.ascii	"x\000"
 3509 0455 01       		.byte	0x1
 3510 0456 78       		.byte	0x78
 3511 0457 2C000000 		.4byte	0x2c
 3512 045b 02       		.uleb128 0x2
 3513 045c 91       		.byte	0x91
 3514 045d 64       		.sleb128 -28
 3515 045e 11       		.uleb128 0x11
 3516 045f 7900     		.ascii	"y\000"
 3517 0461 01       		.byte	0x1
 3518 0462 79       		.byte	0x79
 3519 0463 2C000000 		.4byte	0x2c
 3520 0467 02       		.uleb128 0x2
 3521 0468 91       		.byte	0x91
 3522 0469 60       		.sleb128 -32
 3523 046a 12       		.uleb128 0x12
 3524 046b 38000000 		.4byte	.LBB7
 3525 046f B8000000 		.4byte	.LBE7-.LBB7
 3526 0473 11       		.uleb128 0x11
 3527 0474 6900     		.ascii	"i\000"
 3528 0476 01       		.byte	0x1
 3529 0477 7C       		.byte	0x7c
 3530 0478 2C000000 		.4byte	0x2c
 3531 047c 02       		.uleb128 0x2
 3532 047d 91       		.byte	0x91
 3533 047e 6C       		.sleb128 -20
 3534 047f 12       		.uleb128 0x12
 3535 0480 3E000000 		.4byte	.LBB8
 3536 0484 A2000000 		.4byte	.LBE8-.LBB8
 3537 0488 11       		.uleb128 0x11
 3538 0489 6A00     		.ascii	"j\000"
 3539 048b 01       		.byte	0x1
 3540 048c 7D       		.byte	0x7d
 3541 048d 2C000000 		.4byte	0x2c
 3542 0491 02       		.uleb128 0x2
 3543 0492 91       		.byte	0x91
 3544 0493 68       		.sleb128 -24
 3545 0494 12       		.uleb128 0x12
 3546 0495 44000000 		.4byte	.LBB9
 3547 0499 8C000000 		.4byte	.LBE9-.LBB9
 3548 049d 10       		.uleb128 0x10
 3549 049e 20000000 		.4byte	.LASF49
 3550 04a2 01       		.byte	0x1
 3551 04a3 80       		.byte	0x80
 3552 04a4 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 72


 3553 04a8 02       		.uleb128 0x2
 3554 04a9 91       		.byte	0x91
 3555 04aa 5C       		.sleb128 -36
 3556 04ab 10       		.uleb128 0x10
 3557 04ac 27000000 		.4byte	.LASF50
 3558 04b0 01       		.byte	0x1
 3559 04b1 81       		.byte	0x81
 3560 04b2 2C000000 		.4byte	0x2c
 3561 04b6 02       		.uleb128 0x2
 3562 04b7 91       		.byte	0x91
 3563 04b8 58       		.sleb128 -40
 3564 04b9 00       		.byte	0
 3565 04ba 00       		.byte	0
 3566 04bb 00       		.byte	0
 3567 04bc 00       		.byte	0
 3568 04bd 0C       		.uleb128 0xc
 3569 04be D7010000 		.4byte	.LASF51
 3570 04c2 01       		.byte	0x1
 3571 04c3 90       		.byte	0x90
 3572 04c4 09050000 		.4byte	0x509
 3573 04c8 00000000 		.4byte	.LFB5
 3574 04cc DC000000 		.4byte	.LFE5-.LFB5
 3575 04d0 01       		.uleb128 0x1
 3576 04d1 9C       		.byte	0x9c
 3577 04d2 09050000 		.4byte	0x509
 3578 04d6 0F       		.uleb128 0xf
 3579 04d7 2E000000 		.4byte	.LASF52
 3580 04db 01       		.byte	0x1
 3581 04dc 90       		.byte	0x90
 3582 04dd 80000000 		.4byte	0x80
 3583 04e1 02       		.uleb128 0x2
 3584 04e2 91       		.byte	0x91
 3585 04e3 60       		.sleb128 -32
 3586 04e4 11       		.uleb128 0x11
 3587 04e5 706F6400 		.ascii	"pod\000"
 3588 04e9 01       		.byte	0x1
 3589 04ea 91       		.byte	0x91
 3590 04eb 09050000 		.4byte	0x509
 3591 04ef 02       		.uleb128 0x2
 3592 04f0 91       		.byte	0x91
 3593 04f1 68       		.sleb128 -24
 3594 04f2 12       		.uleb128 0x12
 3595 04f3 9C000000 		.4byte	.LBB10
 3596 04f7 2C000000 		.4byte	.LBE10-.LBB10
 3597 04fb 11       		.uleb128 0x11
 3598 04fc 6900     		.ascii	"i\000"
 3599 04fe 01       		.byte	0x1
 3600 04ff A5       		.byte	0xa5
 3601 0500 2C000000 		.4byte	0x2c
 3602 0504 02       		.uleb128 0x2
 3603 0505 91       		.byte	0x91
 3604 0506 6C       		.sleb128 -20
 3605 0507 00       		.byte	0
 3606 0508 00       		.byte	0
 3607 0509 0A       		.uleb128 0xa
 3608 050a 04       		.byte	0x4
 3609 050b ED010000 		.4byte	0x1ed
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 73


 3610 050f 14       		.uleb128 0x14
 3611 0510 0A020000 		.4byte	.LASF54
 3612 0514 01       		.byte	0x1
 3613 0515 AB       		.byte	0xab
 3614 0516 00000000 		.4byte	.LFB6
 3615 051a 0C040000 		.4byte	.LFE6-.LFB6
 3616 051e 01       		.uleb128 0x1
 3617 051f 9C       		.byte	0x9c
 3618 0520 77060000 		.4byte	0x677
 3619 0524 0F       		.uleb128 0xf
 3620 0525 07000000 		.4byte	.LASF55
 3621 0529 01       		.byte	0x1
 3622 052a AB       		.byte	0xab
 3623 052b 09050000 		.4byte	0x509
 3624 052f 03       		.uleb128 0x3
 3625 0530 91       		.byte	0x91
 3626 0531 947F     		.sleb128 -108
 3627 0533 0F       		.uleb128 0xf
 3628 0534 6B010000 		.4byte	.LASF48
 3629 0538 01       		.byte	0x1
 3630 0539 AB       		.byte	0xab
 3631 053a FA020000 		.4byte	0x2fa
 3632 053e 03       		.uleb128 0x3
 3633 053f 91       		.byte	0x91
 3634 0540 907F     		.sleb128 -112
 3635 0542 0F       		.uleb128 0xf
 3636 0543 2E000000 		.4byte	.LASF52
 3637 0547 01       		.byte	0x1
 3638 0548 AB       		.byte	0xab
 3639 0549 80000000 		.4byte	0x80
 3640 054d 03       		.uleb128 0x3
 3641 054e 91       		.byte	0x91
 3642 054f 887F     		.sleb128 -120
 3643 0551 0D       		.uleb128 0xd
 3644 0552 6C00     		.ascii	"l\000"
 3645 0554 01       		.byte	0x1
 3646 0555 AB       		.byte	0xab
 3647 0556 80000000 		.4byte	0x80
 3648 055a 02       		.uleb128 0x2
 3649 055b 91       		.byte	0x91
 3650 055c 00       		.sleb128 0
 3651 055d 0D       		.uleb128 0xd
 3652 055e 6100     		.ascii	"a\000"
 3653 0560 01       		.byte	0x1
 3654 0561 AB       		.byte	0xab
 3655 0562 80000000 		.4byte	0x80
 3656 0566 02       		.uleb128 0x2
 3657 0567 91       		.byte	0x91
 3658 0568 08       		.sleb128 8
 3659 0569 0D       		.uleb128 0xd
 3660 056a 6200     		.ascii	"b\000"
 3661 056c 01       		.byte	0x1
 3662 056d AB       		.byte	0xab
 3663 056e 80000000 		.4byte	0x80
 3664 0572 02       		.uleb128 0x2
 3665 0573 91       		.byte	0x91
 3666 0574 10       		.sleb128 16
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 74


 3667 0575 10       		.uleb128 0x10
 3668 0576 3D030000 		.4byte	.LASF56
 3669 057a 01       		.byte	0x1
 3670 057b AC       		.byte	0xac
 3671 057c 2C000000 		.4byte	0x2c
 3672 0580 02       		.uleb128 0x2
 3673 0581 91       		.byte	0x91
 3674 0582 40       		.sleb128 -64
 3675 0583 10       		.uleb128 0x10
 3676 0584 31020000 		.4byte	.LASF26
 3677 0588 01       		.byte	0x1
 3678 0589 AD       		.byte	0xad
 3679 058a 2C000000 		.4byte	0x2c
 3680 058e 03       		.uleb128 0x3
 3681 058f 91       		.byte	0x91
 3682 0590 BC7F     		.sleb128 -68
 3683 0592 10       		.uleb128 0x10
 3684 0593 5F040000 		.4byte	.LASF27
 3685 0597 01       		.byte	0x1
 3686 0598 AE       		.byte	0xae
 3687 0599 2C000000 		.4byte	0x2c
 3688 059d 03       		.uleb128 0x3
 3689 059e 91       		.byte	0x91
 3690 059f B87F     		.sleb128 -72
 3691 05a1 10       		.uleb128 0x10
 3692 05a2 A4020000 		.4byte	.LASF57
 3693 05a6 01       		.byte	0x1
 3694 05a7 AF       		.byte	0xaf
 3695 05a8 77060000 		.4byte	0x677
 3696 05ac 04       		.uleb128 0x4
 3697 05ad 91       		.byte	0x91
 3698 05ae B07F     		.sleb128 -80
 3699 05b0 06       		.byte	0x6
 3700 05b1 13       		.uleb128 0x13
 3701 05b2 6A000000 		.4byte	.LBB11
 3702 05b6 28000000 		.4byte	.LBE11-.LBB11
 3703 05ba CB050000 		.4byte	0x5cb
 3704 05be 11       		.uleb128 0x11
 3705 05bf 6900     		.ascii	"i\000"
 3706 05c1 01       		.byte	0x1
 3707 05c2 B2       		.byte	0xb2
 3708 05c3 2C000000 		.4byte	0x2c
 3709 05c7 02       		.uleb128 0x2
 3710 05c8 91       		.byte	0x91
 3711 05c9 5C       		.sleb128 -36
 3712 05ca 00       		.byte	0
 3713 05cb 13       		.uleb128 0x13
 3714 05cc 92000000 		.4byte	.LBB12
 3715 05d0 BA010000 		.4byte	.LBE12-.LBB12
 3716 05d4 23060000 		.4byte	0x623
 3717 05d8 11       		.uleb128 0x11
 3718 05d9 6900     		.ascii	"i\000"
 3719 05db 01       		.byte	0x1
 3720 05dc B6       		.byte	0xb6
 3721 05dd 2C000000 		.4byte	0x2c
 3722 05e1 02       		.uleb128 0x2
 3723 05e2 91       		.byte	0x91
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 75


 3724 05e3 58       		.sleb128 -40
 3725 05e4 12       		.uleb128 0x12
 3726 05e5 98000000 		.4byte	.LBB13
 3727 05e9 A4010000 		.4byte	.LBE13-.LBB13
 3728 05ed 11       		.uleb128 0x11
 3729 05ee 6A00     		.ascii	"j\000"
 3730 05f0 01       		.byte	0x1
 3731 05f1 B7       		.byte	0xb7
 3732 05f2 2C000000 		.4byte	0x2c
 3733 05f6 02       		.uleb128 0x2
 3734 05f7 91       		.byte	0x91
 3735 05f8 54       		.sleb128 -44
 3736 05f9 12       		.uleb128 0x12
 3737 05fa 9E000000 		.4byte	.LBB14
 3738 05fe 8E010000 		.4byte	.LBE14-.LBB14
 3739 0602 10       		.uleb128 0x10
 3740 0603 35040000 		.4byte	.LASF58
 3741 0607 01       		.byte	0x1
 3742 0608 B9       		.byte	0xb9
 3743 0609 80000000 		.4byte	0x80
 3744 060d 03       		.uleb128 0x3
 3745 060e 91       		.byte	0x91
 3746 060f A87F     		.sleb128 -88
 3747 0611 10       		.uleb128 0x10
 3748 0612 CC000000 		.4byte	.LASF32
 3749 0616 01       		.byte	0x1
 3750 0617 BC       		.byte	0xbc
 3751 0618 80000000 		.4byte	0x80
 3752 061c 03       		.uleb128 0x3
 3753 061d 91       		.byte	0x91
 3754 061e A07F     		.sleb128 -96
 3755 0620 00       		.byte	0
 3756 0621 00       		.byte	0
 3757 0622 00       		.byte	0
 3758 0623 12       		.uleb128 0x12
 3759 0624 4C020000 		.4byte	.LBB15
 3760 0628 AE010000 		.4byte	.LBE15-.LBB15
 3761 062c 11       		.uleb128 0x11
 3762 062d 6900     		.ascii	"i\000"
 3763 062f 01       		.byte	0x1
 3764 0630 C8       		.byte	0xc8
 3765 0631 2C000000 		.4byte	0x2c
 3766 0635 02       		.uleb128 0x2
 3767 0636 91       		.byte	0x91
 3768 0637 50       		.sleb128 -48
 3769 0638 12       		.uleb128 0x12
 3770 0639 52020000 		.4byte	.LBB16
 3771 063d 98010000 		.4byte	.LBE16-.LBB16
 3772 0641 10       		.uleb128 0x10
 3773 0642 20010000 		.4byte	.LASF59
 3774 0646 01       		.byte	0x1
 3775 0647 C9       		.byte	0xc9
 3776 0648 80000000 		.4byte	0x80
 3777 064c 02       		.uleb128 0x2
 3778 064d 91       		.byte	0x91
 3779 064e 48       		.sleb128 -56
 3780 064f 10       		.uleb128 0x10
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 76


 3781 0650 73030000 		.4byte	.LASF60
 3782 0654 01       		.byte	0x1
 3783 0655 D3       		.byte	0xd3
 3784 0656 80000000 		.4byte	0x80
 3785 065a 03       		.uleb128 0x3
 3786 065b 91       		.byte	0x91
 3787 065c 987F     		.sleb128 -104
 3788 065e 12       		.uleb128 0x12
 3789 065f 6E020000 		.4byte	.LBB17
 3790 0663 34010000 		.4byte	.LBE17-.LBB17
 3791 0667 11       		.uleb128 0x11
 3792 0668 6A00     		.ascii	"j\000"
 3793 066a 01       		.byte	0x1
 3794 066b CB       		.byte	0xcb
 3795 066c 2C000000 		.4byte	0x2c
 3796 0670 02       		.uleb128 0x2
 3797 0671 91       		.byte	0x91
 3798 0672 44       		.sleb128 -60
 3799 0673 00       		.byte	0
 3800 0674 00       		.byte	0
 3801 0675 00       		.byte	0
 3802 0676 00       		.byte	0
 3803 0677 06       		.uleb128 0x6
 3804 0678 80000000 		.4byte	0x80
 3805 067c 8B060000 		.4byte	0x68b
 3806 0680 15       		.uleb128 0x15
 3807 0681 72000000 		.4byte	0x72
 3808 0685 04       		.uleb128 0x4
 3809 0686 91       		.byte	0x91
 3810 0687 B47F     		.sleb128 -76
 3811 0689 06       		.byte	0x6
 3812 068a 00       		.byte	0
 3813 068b 0C       		.uleb128 0xc
 3814 068c 8A020000 		.4byte	.LASF61
 3815 0690 01       		.byte	0x1
 3816 0691 DD       		.byte	0xdd
 3817 0692 80000000 		.4byte	0x80
 3818 0696 00000000 		.4byte	.LFB7
 3819 069a 44040000 		.4byte	.LFE7-.LFB7
 3820 069e 01       		.uleb128 0x1
 3821 069f 9C       		.byte	0x9c
 3822 06a0 95080000 		.4byte	0x895
 3823 06a4 0F       		.uleb128 0xf
 3824 06a5 07000000 		.4byte	.LASF55
 3825 06a9 01       		.byte	0x1
 3826 06aa DD       		.byte	0xdd
 3827 06ab 09050000 		.4byte	0x509
 3828 06af 03       		.uleb128 0x3
 3829 06b0 91       		.byte	0x91
 3830 06b1 E47E     		.sleb128 -156
 3831 06b3 0F       		.uleb128 0xf
 3832 06b4 D1010000 		.4byte	.LASF41
 3833 06b8 01       		.byte	0x1
 3834 06b9 DD       		.byte	0xdd
 3835 06ba FD030000 		.4byte	0x3fd
 3836 06be 03       		.uleb128 0x3
 3837 06bf 91       		.byte	0x91
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 77


 3838 06c0 E07E     		.sleb128 -160
 3839 06c2 0F       		.uleb128 0xf
 3840 06c3 C1020000 		.4byte	.LASF62
 3841 06c7 01       		.byte	0x1
 3842 06c8 DD       		.byte	0xdd
 3843 06c9 95080000 		.4byte	0x895
 3844 06cd 03       		.uleb128 0x3
 3845 06ce 91       		.byte	0x91
 3846 06cf DC7E     		.sleb128 -164
 3847 06d1 0F       		.uleb128 0xf
 3848 06d2 2E000000 		.4byte	.LASF52
 3849 06d6 01       		.byte	0x1
 3850 06d7 DD       		.byte	0xdd
 3851 06d8 80000000 		.4byte	0x80
 3852 06dc 02       		.uleb128 0x2
 3853 06dd 91       		.byte	0x91
 3854 06de 00       		.sleb128 0
 3855 06df 0F       		.uleb128 0xf
 3856 06e0 21040000 		.4byte	.LASF63
 3857 06e4 01       		.byte	0x1
 3858 06e5 DD       		.byte	0xdd
 3859 06e6 2C000000 		.4byte	0x2c
 3860 06ea 02       		.uleb128 0x2
 3861 06eb 91       		.byte	0x91
 3862 06ec 08       		.sleb128 8
 3863 06ed 10       		.uleb128 0x10
 3864 06ee 2C010000 		.4byte	.LASF64
 3865 06f2 01       		.byte	0x1
 3866 06f3 DF       		.byte	0xdf
 3867 06f4 2C000000 		.4byte	0x2c
 3868 06f8 03       		.uleb128 0x3
 3869 06f9 91       		.byte	0x91
 3870 06fa BC7F     		.sleb128 -68
 3871 06fc 10       		.uleb128 0x10
 3872 06fd EF010000 		.4byte	.LASF31
 3873 0701 01       		.byte	0x1
 3874 0702 E0       		.byte	0xe0
 3875 0703 2C000000 		.4byte	0x2c
 3876 0707 03       		.uleb128 0x3
 3877 0708 91       		.byte	0x91
 3878 0709 B87F     		.sleb128 -72
 3879 070b 10       		.uleb128 0x10
 3880 070c CF020000 		.4byte	.LASF42
 3881 0710 01       		.byte	0x1
 3882 0711 E3       		.byte	0xe3
 3883 0712 80000000 		.4byte	0x80
 3884 0716 03       		.uleb128 0x3
 3885 0717 91       		.byte	0x91
 3886 0718 B07F     		.sleb128 -80
 3887 071a 10       		.uleb128 0x10
 3888 071b D5020000 		.4byte	.LASF43
 3889 071f 01       		.byte	0x1
 3890 0720 E4       		.byte	0xe4
 3891 0721 80000000 		.4byte	0x80
 3892 0725 03       		.uleb128 0x3
 3893 0726 91       		.byte	0x91
 3894 0727 A87F     		.sleb128 -88
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 78


 3895 0729 10       		.uleb128 0x10
 3896 072a EF020000 		.4byte	.LASF65
 3897 072e 01       		.byte	0x1
 3898 072f E5       		.byte	0xe5
 3899 0730 80000000 		.4byte	0x80
 3900 0734 03       		.uleb128 0x3
 3901 0735 91       		.byte	0x91
 3902 0736 A07F     		.sleb128 -96
 3903 0738 10       		.uleb128 0x10
 3904 0739 E1020000 		.4byte	.LASF21
 3905 073d 01       		.byte	0x1
 3906 073e E6       		.byte	0xe6
 3907 073f 80000000 		.4byte	0x80
 3908 0743 03       		.uleb128 0x3
 3909 0744 91       		.byte	0x91
 3910 0745 987F     		.sleb128 -104
 3911 0747 10       		.uleb128 0x10
 3912 0748 E8020000 		.4byte	.LASF22
 3913 074c 01       		.byte	0x1
 3914 074d E7       		.byte	0xe7
 3915 074e 80000000 		.4byte	0x80
 3916 0752 03       		.uleb128 0x3
 3917 0753 91       		.byte	0x91
 3918 0754 907F     		.sleb128 -112
 3919 0756 10       		.uleb128 0x10
 3920 0757 2D030000 		.4byte	.LASF66
 3921 075b 01       		.byte	0x1
 3922 075c E9       		.byte	0xe9
 3923 075d 80000000 		.4byte	0x80
 3924 0761 03       		.uleb128 0x3
 3925 0762 91       		.byte	0x91
 3926 0763 887F     		.sleb128 -120
 3927 0765 10       		.uleb128 0x10
 3928 0766 B7010000 		.4byte	.LASF67
 3929 076a 01       		.byte	0x1
 3930 076b EA       		.byte	0xea
 3931 076c 2C000000 		.4byte	0x2c
 3932 0770 03       		.uleb128 0x3
 3933 0771 91       		.byte	0x91
 3934 0772 847F     		.sleb128 -124
 3935 0774 10       		.uleb128 0x10
 3936 0775 5D030000 		.4byte	.LASF68
 3937 0779 01       		.byte	0x1
 3938 077a EB       		.byte	0xeb
 3939 077b 2C000000 		.4byte	0x2c
 3940 077f 02       		.uleb128 0x2
 3941 0780 91       		.byte	0x91
 3942 0781 6C       		.sleb128 -20
 3943 0782 11       		.uleb128 0x11
 3944 0783 6B5F6E00 		.ascii	"k_n\000"
 3945 0787 01       		.byte	0x1
 3946 0788 EC       		.byte	0xec
 3947 0789 2C000000 		.4byte	0x2c
 3948 078d 02       		.uleb128 0x2
 3949 078e 91       		.byte	0x91
 3950 078f 68       		.sleb128 -24
 3951 0790 11       		.uleb128 0x11
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 79


 3952 0791 6B5F6600 		.ascii	"k_f\000"
 3953 0795 01       		.byte	0x1
 3954 0796 EC       		.byte	0xec
 3955 0797 2C000000 		.4byte	0x2c
 3956 079b 02       		.uleb128 0x2
 3957 079c 91       		.byte	0x91
 3958 079d 64       		.sleb128 -28
 3959 079e 10       		.uleb128 0x10
 3960 079f 14010000 		.4byte	.LASF69
 3961 07a3 01       		.byte	0x1
 3962 07a4 ED       		.byte	0xed
 3963 07a5 2C000000 		.4byte	0x2c
 3964 07a9 02       		.uleb128 0x2
 3965 07aa 91       		.byte	0x91
 3966 07ab 60       		.sleb128 -32
 3967 07ac 10       		.uleb128 0x10
 3968 07ad 14030000 		.4byte	.LASF70
 3969 07b1 01       		.byte	0x1
 3970 07b2 EE       		.byte	0xee
 3971 07b3 2C000000 		.4byte	0x2c
 3972 07b7 02       		.uleb128 0x2
 3973 07b8 91       		.byte	0x91
 3974 07b9 5C       		.sleb128 -36
 3975 07ba 10       		.uleb128 0x10
 3976 07bb 0C010000 		.4byte	.LASF71
 3977 07bf 01       		.byte	0x1
 3978 07c0 EF       		.byte	0xef
 3979 07c1 2C000000 		.4byte	0x2c
 3980 07c5 02       		.uleb128 0x2
 3981 07c6 91       		.byte	0x91
 3982 07c7 58       		.sleb128 -40
 3983 07c8 10       		.uleb128 0x10
 3984 07c9 A0030000 		.4byte	.LASF72
 3985 07cd 01       		.byte	0x1
 3986 07ce F0       		.byte	0xf0
 3987 07cf 80000000 		.4byte	0x80
 3988 07d3 02       		.uleb128 0x2
 3989 07d4 91       		.byte	0x91
 3990 07d5 50       		.sleb128 -48
 3991 07d6 13       		.uleb128 0x13
 3992 07d7 FA000000 		.4byte	.LBB18
 3993 07db 40020000 		.4byte	.LBE18-.LBB18
 3994 07df 6A080000 		.4byte	0x86a
 3995 07e3 11       		.uleb128 0x11
 3996 07e4 6900     		.ascii	"i\000"
 3997 07e6 01       		.byte	0x1
 3998 07e7 F3       		.byte	0xf3
 3999 07e8 2C000000 		.4byte	0x2c
 4000 07ec 02       		.uleb128 0x2
 4001 07ed 91       		.byte	0x91
 4002 07ee 4C       		.sleb128 -52
 4003 07ef 12       		.uleb128 0x12
 4004 07f0 00010000 		.4byte	.LBB19
 4005 07f4 2A020000 		.4byte	.LBE19-.LBB19
 4006 07f8 11       		.uleb128 0x11
 4007 07f9 69647800 		.ascii	"idx\000"
 4008 07fd 01       		.byte	0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 80


 4009 07fe F4       		.byte	0xf4
 4010 07ff 2C000000 		.4byte	0x2c
 4011 0803 03       		.uleb128 0x3
 4012 0804 91       		.byte	0x91
 4013 0805 807F     		.sleb128 -128
 4014 0807 10       		.uleb128 0x10
 4015 0808 50030000 		.4byte	.LASF73
 4016 080c 01       		.byte	0x1
 4017 080d F7       		.byte	0xf7
 4018 080e 2C000000 		.4byte	0x2c
 4019 0812 03       		.uleb128 0x3
 4020 0813 91       		.byte	0x91
 4021 0814 FC7E     		.sleb128 -132
 4022 0816 10       		.uleb128 0x10
 4023 0817 EB000000 		.4byte	.LASF74
 4024 081b 01       		.byte	0x1
 4025 081c F9       		.byte	0xf9
 4026 081d 80000000 		.4byte	0x80
 4027 0821 02       		.uleb128 0x2
 4028 0822 91       		.byte	0x91
 4029 0823 40       		.sleb128 -64
 4030 0824 12       		.uleb128 0x12
 4031 0825 9A010000 		.4byte	.LBB20
 4032 0829 64010000 		.4byte	.LBE20-.LBB20
 4033 082d 16       		.uleb128 0x16
 4034 082e 40040000 		.4byte	.LASF75
 4035 0832 01       		.byte	0x1
 4036 0833 3B01     		.2byte	0x13b
 4037 0835 2C000000 		.4byte	0x2c
 4038 0839 03       		.uleb128 0x3
 4039 083a 91       		.byte	0x91
 4040 083b F07E     		.sleb128 -144
 4041 083d 12       		.uleb128 0x12
 4042 083e F0010000 		.4byte	.LBB21
 4043 0842 9E000000 		.4byte	.LBE21-.LBB21
 4044 0846 16       		.uleb128 0x16
 4045 0847 6D030000 		.4byte	.LASF76
 4046 084b 01       		.byte	0x1
 4047 084c 3001     		.2byte	0x130
 4048 084e 2C000000 		.4byte	0x2c
 4049 0852 03       		.uleb128 0x3
 4050 0853 91       		.byte	0x91
 4051 0854 F87E     		.sleb128 -136
 4052 0856 16       		.uleb128 0x16
 4053 0857 F0030000 		.4byte	.LASF77
 4054 085b 01       		.byte	0x1
 4055 085c 3101     		.2byte	0x131
 4056 085e 2C000000 		.4byte	0x2c
 4057 0862 03       		.uleb128 0x3
 4058 0863 91       		.byte	0x91
 4059 0864 F47E     		.sleb128 -140
 4060 0866 00       		.byte	0
 4061 0867 00       		.byte	0
 4062 0868 00       		.byte	0
 4063 0869 00       		.byte	0
 4064 086a 12       		.uleb128 0x12
 4065 086b 4E030000 		.4byte	.LBB22
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 81


 4066 086f E4000000 		.4byte	.LBE22-.LBB22
 4067 0873 16       		.uleb128 0x16
 4068 0874 6D030000 		.4byte	.LASF76
 4069 0878 01       		.byte	0x1
 4070 0879 4901     		.2byte	0x149
 4071 087b 2C000000 		.4byte	0x2c
 4072 087f 03       		.uleb128 0x3
 4073 0880 91       		.byte	0x91
 4074 0881 EC7E     		.sleb128 -148
 4075 0883 16       		.uleb128 0x16
 4076 0884 F0030000 		.4byte	.LASF77
 4077 0888 01       		.byte	0x1
 4078 0889 4A01     		.2byte	0x14a
 4079 088b 2C000000 		.4byte	0x2c
 4080 088f 03       		.uleb128 0x3
 4081 0890 91       		.byte	0x91
 4082 0891 E87E     		.sleb128 -152
 4083 0893 00       		.byte	0
 4084 0894 00       		.byte	0
 4085 0895 0A       		.uleb128 0xa
 4086 0896 04       		.byte	0x4
 4087 0897 2C000000 		.4byte	0x2c
 4088 089b 17       		.uleb128 0x17
 4089 089c F1000000 		.4byte	.LASF78
 4090 08a0 01       		.byte	0x1
 4091 08a1 5901     		.2byte	0x159
 4092 08a3 80000000 		.4byte	0x80
 4093 08a7 00000000 		.4byte	.LFB8
 4094 08ab 30060000 		.4byte	.LFE8-.LFB8
 4095 08af 01       		.uleb128 0x1
 4096 08b0 9C       		.byte	0x9c
 4097 08b1 580A0000 		.4byte	0xa58
 4098 08b5 18       		.uleb128 0x18
 4099 08b6 07000000 		.4byte	.LASF55
 4100 08ba 01       		.byte	0x1
 4101 08bb 5901     		.2byte	0x159
 4102 08bd 09050000 		.4byte	0x509
 4103 08c1 03       		.uleb128 0x3
 4104 08c2 91       		.byte	0x91
 4105 08c3 847F     		.sleb128 -124
 4106 08c5 18       		.uleb128 0x18
 4107 08c6 D1010000 		.4byte	.LASF41
 4108 08ca 01       		.byte	0x1
 4109 08cb 5901     		.2byte	0x159
 4110 08cd FD030000 		.4byte	0x3fd
 4111 08d1 03       		.uleb128 0x3
 4112 08d2 91       		.byte	0x91
 4113 08d3 807F     		.sleb128 -128
 4114 08d5 18       		.uleb128 0x18
 4115 08d6 C1020000 		.4byte	.LASF62
 4116 08da 01       		.byte	0x1
 4117 08db 5901     		.2byte	0x159
 4118 08dd 95080000 		.4byte	0x895
 4119 08e1 03       		.uleb128 0x3
 4120 08e2 91       		.byte	0x91
 4121 08e3 FC7E     		.sleb128 -132
 4122 08e5 18       		.uleb128 0x18
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 82


 4123 08e6 2E000000 		.4byte	.LASF52
 4124 08ea 01       		.byte	0x1
 4125 08eb 5901     		.2byte	0x159
 4126 08ed 80000000 		.4byte	0x80
 4127 08f1 02       		.uleb128 0x2
 4128 08f2 91       		.byte	0x91
 4129 08f3 00       		.sleb128 0
 4130 08f4 18       		.uleb128 0x18
 4131 08f5 21040000 		.4byte	.LASF63
 4132 08f9 01       		.byte	0x1
 4133 08fa 5901     		.2byte	0x159
 4134 08fc 2C000000 		.4byte	0x2c
 4135 0900 02       		.uleb128 0x2
 4136 0901 91       		.byte	0x91
 4137 0902 08       		.sleb128 8
 4138 0903 16       		.uleb128 0x16
 4139 0904 2C010000 		.4byte	.LASF64
 4140 0908 01       		.byte	0x1
 4141 0909 5B01     		.2byte	0x15b
 4142 090b 2C000000 		.4byte	0x2c
 4143 090f 02       		.uleb128 0x2
 4144 0910 91       		.byte	0x91
 4145 0911 44       		.sleb128 -60
 4146 0912 16       		.uleb128 0x16
 4147 0913 EF010000 		.4byte	.LASF31
 4148 0917 01       		.byte	0x1
 4149 0918 5C01     		.2byte	0x15c
 4150 091a 2C000000 		.4byte	0x2c
 4151 091e 02       		.uleb128 0x2
 4152 091f 91       		.byte	0x91
 4153 0920 40       		.sleb128 -64
 4154 0921 16       		.uleb128 0x16
 4155 0922 CF020000 		.4byte	.LASF42
 4156 0926 01       		.byte	0x1
 4157 0927 5F01     		.2byte	0x15f
 4158 0929 80000000 		.4byte	0x80
 4159 092d 03       		.uleb128 0x3
 4160 092e 91       		.byte	0x91
 4161 092f B87F     		.sleb128 -72
 4162 0931 16       		.uleb128 0x16
 4163 0932 D5020000 		.4byte	.LASF43
 4164 0936 01       		.byte	0x1
 4165 0937 6001     		.2byte	0x160
 4166 0939 80000000 		.4byte	0x80
 4167 093d 03       		.uleb128 0x3
 4168 093e 91       		.byte	0x91
 4169 093f B07F     		.sleb128 -80
 4170 0941 16       		.uleb128 0x16
 4171 0942 EF020000 		.4byte	.LASF65
 4172 0946 01       		.byte	0x1
 4173 0947 6101     		.2byte	0x161
 4174 0949 80000000 		.4byte	0x80
 4175 094d 03       		.uleb128 0x3
 4176 094e 91       		.byte	0x91
 4177 094f A87F     		.sleb128 -88
 4178 0951 16       		.uleb128 0x16
 4179 0952 E1020000 		.4byte	.LASF21
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 83


 4180 0956 01       		.byte	0x1
 4181 0957 6201     		.2byte	0x162
 4182 0959 80000000 		.4byte	0x80
 4183 095d 03       		.uleb128 0x3
 4184 095e 91       		.byte	0x91
 4185 095f A07F     		.sleb128 -96
 4186 0961 16       		.uleb128 0x16
 4187 0962 E8020000 		.4byte	.LASF22
 4188 0966 01       		.byte	0x1
 4189 0967 6301     		.2byte	0x163
 4190 0969 80000000 		.4byte	0x80
 4191 096d 03       		.uleb128 0x3
 4192 096e 91       		.byte	0x91
 4193 096f 987F     		.sleb128 -104
 4194 0971 16       		.uleb128 0x16
 4195 0972 2D030000 		.4byte	.LASF66
 4196 0976 01       		.byte	0x1
 4197 0977 6501     		.2byte	0x165
 4198 0979 80000000 		.4byte	0x80
 4199 097d 03       		.uleb128 0x3
 4200 097e 91       		.byte	0x91
 4201 097f 907F     		.sleb128 -112
 4202 0981 16       		.uleb128 0x16
 4203 0982 B7010000 		.4byte	.LASF67
 4204 0986 01       		.byte	0x1
 4205 0987 6601     		.2byte	0x166
 4206 0989 2C000000 		.4byte	0x2c
 4207 098d 03       		.uleb128 0x3
 4208 098e 91       		.byte	0x91
 4209 098f 8C7F     		.sleb128 -116
 4210 0991 13       		.uleb128 0x13
 4211 0992 0C010000 		.4byte	.LBB23
 4212 0996 5C020000 		.4byte	.LBE23-.LBB23
 4213 099a CC090000 		.4byte	0x9cc
 4214 099e 16       		.uleb128 0x16
 4215 099f 05030000 		.4byte	.LASF79
 4216 09a3 01       		.byte	0x1
 4217 09a4 6A01     		.2byte	0x16a
 4218 09a6 2C000000 		.4byte	0x2c
 4219 09aa 02       		.uleb128 0x2
 4220 09ab 91       		.byte	0x91
 4221 09ac 6C       		.sleb128 -20
 4222 09ad 16       		.uleb128 0x16
 4223 09ae 53040000 		.4byte	.LASF80
 4224 09b2 01       		.byte	0x1
 4225 09b3 6B01     		.2byte	0x16b
 4226 09b5 2C000000 		.4byte	0x2c
 4227 09b9 02       		.uleb128 0x2
 4228 09ba 91       		.byte	0x91
 4229 09bb 68       		.sleb128 -24
 4230 09bc 16       		.uleb128 0x16
 4231 09bd 00000000 		.4byte	.LASF81
 4232 09c1 01       		.byte	0x1
 4233 09c2 6C01     		.2byte	0x16c
 4234 09c4 2C000000 		.4byte	0x2c
 4235 09c8 02       		.uleb128 0x2
 4236 09c9 91       		.byte	0x91
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 84


 4237 09ca 64       		.sleb128 -28
 4238 09cb 00       		.byte	0
 4239 09cc 12       		.uleb128 0x12
 4240 09cd 68030000 		.4byte	.LBB24
 4241 09d1 B8020000 		.4byte	.LBE24-.LBB24
 4242 09d5 16       		.uleb128 0x16
 4243 09d6 05030000 		.4byte	.LASF79
 4244 09da 01       		.byte	0x1
 4245 09db 8601     		.2byte	0x186
 4246 09dd 2C000000 		.4byte	0x2c
 4247 09e1 02       		.uleb128 0x2
 4248 09e2 91       		.byte	0x91
 4249 09e3 60       		.sleb128 -32
 4250 09e4 16       		.uleb128 0x16
 4251 09e5 53040000 		.4byte	.LASF80
 4252 09e9 01       		.byte	0x1
 4253 09ea 8701     		.2byte	0x187
 4254 09ec 2C000000 		.4byte	0x2c
 4255 09f0 02       		.uleb128 0x2
 4256 09f1 91       		.byte	0x91
 4257 09f2 5C       		.sleb128 -36
 4258 09f3 16       		.uleb128 0x16
 4259 09f4 00000000 		.4byte	.LASF81
 4260 09f8 01       		.byte	0x1
 4261 09f9 8801     		.2byte	0x188
 4262 09fb 2C000000 		.4byte	0x2c
 4263 09ff 02       		.uleb128 0x2
 4264 0a00 91       		.byte	0x91
 4265 0a01 58       		.sleb128 -40
 4266 0a02 13       		.uleb128 0x13
 4267 0a03 8E040000 		.4byte	.LBB25
 4268 0a07 CA000000 		.4byte	.LBE25-.LBB25
 4269 0a0b 2E0A0000 		.4byte	0xa2e
 4270 0a0f 16       		.uleb128 0x16
 4271 0a10 99010000 		.4byte	.LASF82
 4272 0a14 01       		.byte	0x1
 4273 0a15 9301     		.2byte	0x193
 4274 0a17 2C000000 		.4byte	0x2c
 4275 0a1b 02       		.uleb128 0x2
 4276 0a1c 91       		.byte	0x91
 4277 0a1d 54       		.sleb128 -44
 4278 0a1e 16       		.uleb128 0x16
 4279 0a1f 80010000 		.4byte	.LASF83
 4280 0a23 01       		.byte	0x1
 4281 0a24 9401     		.2byte	0x194
 4282 0a26 2C000000 		.4byte	0x2c
 4283 0a2a 02       		.uleb128 0x2
 4284 0a2b 91       		.byte	0x91
 4285 0a2c 50       		.sleb128 -48
 4286 0a2d 00       		.byte	0
 4287 0a2e 12       		.uleb128 0x12
 4288 0a2f 58050000 		.4byte	.LBB26
 4289 0a33 C8000000 		.4byte	.LBE26-.LBB26
 4290 0a37 16       		.uleb128 0x16
 4291 0a38 99010000 		.4byte	.LASF82
 4292 0a3c 01       		.byte	0x1
 4293 0a3d 9B01     		.2byte	0x19b
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 85


 4294 0a3f 2C000000 		.4byte	0x2c
 4295 0a43 02       		.uleb128 0x2
 4296 0a44 91       		.byte	0x91
 4297 0a45 4C       		.sleb128 -52
 4298 0a46 16       		.uleb128 0x16
 4299 0a47 80010000 		.4byte	.LASF83
 4300 0a4b 01       		.byte	0x1
 4301 0a4c 9C01     		.2byte	0x19c
 4302 0a4e 2C000000 		.4byte	0x2c
 4303 0a52 02       		.uleb128 0x2
 4304 0a53 91       		.byte	0x91
 4305 0a54 48       		.sleb128 -56
 4306 0a55 00       		.byte	0
 4307 0a56 00       		.byte	0
 4308 0a57 00       		.byte	0
 4309 0a58 19       		.uleb128 0x19
 4310 0a59 10040000 		.4byte	.LASF84
 4311 0a5d 01       		.byte	0x1
 4312 0a5e A701     		.2byte	0x1a7
 4313 0a60 80000000 		.4byte	0x80
 4314 0a64 00000000 		.4byte	.LFB9
 4315 0a68 F4000000 		.4byte	.LFE9-.LFB9
 4316 0a6c 01       		.uleb128 0x1
 4317 0a6d 9C       		.byte	0x9c
 4318 0a6e 18       		.uleb128 0x18
 4319 0a6f 07000000 		.4byte	.LASF55
 4320 0a73 01       		.byte	0x1
 4321 0a74 A701     		.2byte	0x1a7
 4322 0a76 09050000 		.4byte	0x509
 4323 0a7a 02       		.uleb128 0x2
 4324 0a7b 91       		.byte	0x91
 4325 0a7c 44       		.sleb128 -60
 4326 0a7d 18       		.uleb128 0x18
 4327 0a7e 34000000 		.4byte	.LASF14
 4328 0a82 01       		.byte	0x1
 4329 0a83 A701     		.2byte	0x1a7
 4330 0a85 80000000 		.4byte	0x80
 4331 0a89 03       		.uleb128 0x3
 4332 0a8a 91       		.byte	0x91
 4333 0a8b B87F     		.sleb128 -72
 4334 0a8d 18       		.uleb128 0x18
 4335 0a8e 2E000000 		.4byte	.LASF52
 4336 0a92 01       		.byte	0x1
 4337 0a93 A701     		.2byte	0x1a7
 4338 0a95 80000000 		.4byte	0x80
 4339 0a99 02       		.uleb128 0x2
 4340 0a9a 91       		.byte	0x91
 4341 0a9b 00       		.sleb128 0
 4342 0a9c 1A       		.uleb128 0x1a
 4343 0a9d 685F6D00 		.ascii	"h_m\000"
 4344 0aa1 01       		.byte	0x1
 4345 0aa2 A701     		.2byte	0x1a7
 4346 0aa4 80000000 		.4byte	0x80
 4347 0aa8 02       		.uleb128 0x2
 4348 0aa9 91       		.byte	0x91
 4349 0aaa 08       		.sleb128 8
 4350 0aab 16       		.uleb128 0x16
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 86


 4351 0aac 66040000 		.4byte	.LASF85
 4352 0ab0 01       		.byte	0x1
 4353 0ab1 A901     		.2byte	0x1a9
 4354 0ab3 80000000 		.4byte	0x80
 4355 0ab7 02       		.uleb128 0x2
 4356 0ab8 91       		.byte	0x91
 4357 0ab9 60       		.sleb128 -32
 4358 0aba 16       		.uleb128 0x16
 4359 0abb 59040000 		.4byte	.LASF86
 4360 0abf 01       		.byte	0x1
 4361 0ac0 AC01     		.2byte	0x1ac
 4362 0ac2 2C000000 		.4byte	0x2c
 4363 0ac6 02       		.uleb128 0x2
 4364 0ac7 91       		.byte	0x91
 4365 0ac8 5C       		.sleb128 -36
 4366 0ac9 1B       		.uleb128 0x1b
 4367 0aca 685F6300 		.ascii	"h_c\000"
 4368 0ace 01       		.byte	0x1
 4369 0acf AF01     		.2byte	0x1af
 4370 0ad1 80000000 		.4byte	0x80
 4371 0ad5 02       		.uleb128 0x2
 4372 0ad6 91       		.byte	0x91
 4373 0ad7 50       		.sleb128 -48
 4374 0ad8 16       		.uleb128 0x16
 4375 0ad9 38030000 		.4byte	.LASF87
 4376 0add 01       		.byte	0x1
 4377 0ade B501     		.2byte	0x1b5
 4378 0ae0 80000000 		.4byte	0x80
 4379 0ae4 02       		.uleb128 0x2
 4380 0ae5 91       		.byte	0x91
 4381 0ae6 68       		.sleb128 -24
 4382 0ae7 16       		.uleb128 0x16
 4383 0ae8 21020000 		.4byte	.LASF88
 4384 0aec 01       		.byte	0x1
 4385 0aed BB01     		.2byte	0x1bb
 4386 0aef 80000000 		.4byte	0x80
 4387 0af3 02       		.uleb128 0x2
 4388 0af4 91       		.byte	0x91
 4389 0af5 48       		.sleb128 -56
 4390 0af6 00       		.byte	0
 4391 0af7 00       		.byte	0
 4392              		.section	.debug_abbrev,"",%progbits
 4393              	.Ldebug_abbrev0:
 4394 0000 01       		.uleb128 0x1
 4395 0001 11       		.uleb128 0x11
 4396 0002 01       		.byte	0x1
 4397 0003 25       		.uleb128 0x25
 4398 0004 0E       		.uleb128 0xe
 4399 0005 13       		.uleb128 0x13
 4400 0006 0B       		.uleb128 0xb
 4401 0007 03       		.uleb128 0x3
 4402 0008 0E       		.uleb128 0xe
 4403 0009 1B       		.uleb128 0x1b
 4404 000a 0E       		.uleb128 0xe
 4405 000b 55       		.uleb128 0x55
 4406 000c 17       		.uleb128 0x17
 4407 000d 11       		.uleb128 0x11
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 87


 4408 000e 01       		.uleb128 0x1
 4409 000f 10       		.uleb128 0x10
 4410 0010 17       		.uleb128 0x17
 4411 0011 00       		.byte	0
 4412 0012 00       		.byte	0
 4413 0013 02       		.uleb128 0x2
 4414 0014 24       		.uleb128 0x24
 4415 0015 00       		.byte	0
 4416 0016 0B       		.uleb128 0xb
 4417 0017 0B       		.uleb128 0xb
 4418 0018 3E       		.uleb128 0x3e
 4419 0019 0B       		.uleb128 0xb
 4420 001a 03       		.uleb128 0x3
 4421 001b 0E       		.uleb128 0xe
 4422 001c 00       		.byte	0
 4423 001d 00       		.byte	0
 4424 001e 03       		.uleb128 0x3
 4425 001f 24       		.uleb128 0x24
 4426 0020 00       		.byte	0
 4427 0021 0B       		.uleb128 0xb
 4428 0022 0B       		.uleb128 0xb
 4429 0023 3E       		.uleb128 0x3e
 4430 0024 0B       		.uleb128 0xb
 4431 0025 03       		.uleb128 0x3
 4432 0026 08       		.uleb128 0x8
 4433 0027 00       		.byte	0
 4434 0028 00       		.byte	0
 4435 0029 04       		.uleb128 0x4
 4436 002a 13       		.uleb128 0x13
 4437 002b 01       		.byte	0x1
 4438 002c 0B       		.uleb128 0xb
 4439 002d 0B       		.uleb128 0xb
 4440 002e 3A       		.uleb128 0x3a
 4441 002f 0B       		.uleb128 0xb
 4442 0030 3B       		.uleb128 0x3b
 4443 0031 0B       		.uleb128 0xb
 4444 0032 01       		.uleb128 0x1
 4445 0033 13       		.uleb128 0x13
 4446 0034 00       		.byte	0
 4447 0035 00       		.byte	0
 4448 0036 05       		.uleb128 0x5
 4449 0037 0D       		.uleb128 0xd
 4450 0038 00       		.byte	0
 4451 0039 03       		.uleb128 0x3
 4452 003a 0E       		.uleb128 0xe
 4453 003b 3A       		.uleb128 0x3a
 4454 003c 0B       		.uleb128 0xb
 4455 003d 3B       		.uleb128 0x3b
 4456 003e 0B       		.uleb128 0xb
 4457 003f 49       		.uleb128 0x49
 4458 0040 13       		.uleb128 0x13
 4459 0041 38       		.uleb128 0x38
 4460 0042 0B       		.uleb128 0xb
 4461 0043 00       		.byte	0
 4462 0044 00       		.byte	0
 4463 0045 06       		.uleb128 0x6
 4464 0046 01       		.uleb128 0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 88


 4465 0047 01       		.byte	0x1
 4466 0048 49       		.uleb128 0x49
 4467 0049 13       		.uleb128 0x13
 4468 004a 01       		.uleb128 0x1
 4469 004b 13       		.uleb128 0x13
 4470 004c 00       		.byte	0
 4471 004d 00       		.byte	0
 4472 004e 07       		.uleb128 0x7
 4473 004f 21       		.uleb128 0x21
 4474 0050 00       		.byte	0
 4475 0051 49       		.uleb128 0x49
 4476 0052 13       		.uleb128 0x13
 4477 0053 2F       		.uleb128 0x2f
 4478 0054 0B       		.uleb128 0xb
 4479 0055 00       		.byte	0
 4480 0056 00       		.byte	0
 4481 0057 08       		.uleb128 0x8
 4482 0058 16       		.uleb128 0x16
 4483 0059 00       		.byte	0
 4484 005a 03       		.uleb128 0x3
 4485 005b 0E       		.uleb128 0xe
 4486 005c 3A       		.uleb128 0x3a
 4487 005d 0B       		.uleb128 0xb
 4488 005e 3B       		.uleb128 0x3b
 4489 005f 0B       		.uleb128 0xb
 4490 0060 49       		.uleb128 0x49
 4491 0061 13       		.uleb128 0x13
 4492 0062 00       		.byte	0
 4493 0063 00       		.byte	0
 4494 0064 09       		.uleb128 0x9
 4495 0065 0D       		.uleb128 0xd
 4496 0066 00       		.byte	0
 4497 0067 03       		.uleb128 0x3
 4498 0068 08       		.uleb128 0x8
 4499 0069 3A       		.uleb128 0x3a
 4500 006a 0B       		.uleb128 0xb
 4501 006b 3B       		.uleb128 0x3b
 4502 006c 0B       		.uleb128 0xb
 4503 006d 49       		.uleb128 0x49
 4504 006e 13       		.uleb128 0x13
 4505 006f 38       		.uleb128 0x38
 4506 0070 0B       		.uleb128 0xb
 4507 0071 00       		.byte	0
 4508 0072 00       		.byte	0
 4509 0073 0A       		.uleb128 0xa
 4510 0074 0F       		.uleb128 0xf
 4511 0075 00       		.byte	0
 4512 0076 0B       		.uleb128 0xb
 4513 0077 0B       		.uleb128 0xb
 4514 0078 49       		.uleb128 0x49
 4515 0079 13       		.uleb128 0x13
 4516 007a 00       		.byte	0
 4517 007b 00       		.byte	0
 4518 007c 0B       		.uleb128 0xb
 4519 007d 16       		.uleb128 0x16
 4520 007e 00       		.byte	0
 4521 007f 03       		.uleb128 0x3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 89


 4522 0080 08       		.uleb128 0x8
 4523 0081 3A       		.uleb128 0x3a
 4524 0082 0B       		.uleb128 0xb
 4525 0083 3B       		.uleb128 0x3b
 4526 0084 0B       		.uleb128 0xb
 4527 0085 49       		.uleb128 0x49
 4528 0086 13       		.uleb128 0x13
 4529 0087 00       		.byte	0
 4530 0088 00       		.byte	0
 4531 0089 0C       		.uleb128 0xc
 4532 008a 2E       		.uleb128 0x2e
 4533 008b 01       		.byte	0x1
 4534 008c 3F       		.uleb128 0x3f
 4535 008d 19       		.uleb128 0x19
 4536 008e 03       		.uleb128 0x3
 4537 008f 0E       		.uleb128 0xe
 4538 0090 3A       		.uleb128 0x3a
 4539 0091 0B       		.uleb128 0xb
 4540 0092 3B       		.uleb128 0x3b
 4541 0093 0B       		.uleb128 0xb
 4542 0094 27       		.uleb128 0x27
 4543 0095 19       		.uleb128 0x19
 4544 0096 49       		.uleb128 0x49
 4545 0097 13       		.uleb128 0x13
 4546 0098 11       		.uleb128 0x11
 4547 0099 01       		.uleb128 0x1
 4548 009a 12       		.uleb128 0x12
 4549 009b 06       		.uleb128 0x6
 4550 009c 40       		.uleb128 0x40
 4551 009d 18       		.uleb128 0x18
 4552 009e 9642     		.uleb128 0x2116
 4553 00a0 19       		.uleb128 0x19
 4554 00a1 01       		.uleb128 0x1
 4555 00a2 13       		.uleb128 0x13
 4556 00a3 00       		.byte	0
 4557 00a4 00       		.byte	0
 4558 00a5 0D       		.uleb128 0xd
 4559 00a6 05       		.uleb128 0x5
 4560 00a7 00       		.byte	0
 4561 00a8 03       		.uleb128 0x3
 4562 00a9 08       		.uleb128 0x8
 4563 00aa 3A       		.uleb128 0x3a
 4564 00ab 0B       		.uleb128 0xb
 4565 00ac 3B       		.uleb128 0x3b
 4566 00ad 0B       		.uleb128 0xb
 4567 00ae 49       		.uleb128 0x49
 4568 00af 13       		.uleb128 0x13
 4569 00b0 02       		.uleb128 0x2
 4570 00b1 18       		.uleb128 0x18
 4571 00b2 00       		.byte	0
 4572 00b3 00       		.byte	0
 4573 00b4 0E       		.uleb128 0xe
 4574 00b5 2E       		.uleb128 0x2e
 4575 00b6 01       		.byte	0x1
 4576 00b7 3F       		.uleb128 0x3f
 4577 00b8 19       		.uleb128 0x19
 4578 00b9 03       		.uleb128 0x3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 90


 4579 00ba 0E       		.uleb128 0xe
 4580 00bb 3A       		.uleb128 0x3a
 4581 00bc 0B       		.uleb128 0xb
 4582 00bd 3B       		.uleb128 0x3b
 4583 00be 0B       		.uleb128 0xb
 4584 00bf 27       		.uleb128 0x27
 4585 00c0 19       		.uleb128 0x19
 4586 00c1 49       		.uleb128 0x49
 4587 00c2 13       		.uleb128 0x13
 4588 00c3 11       		.uleb128 0x11
 4589 00c4 01       		.uleb128 0x1
 4590 00c5 12       		.uleb128 0x12
 4591 00c6 06       		.uleb128 0x6
 4592 00c7 40       		.uleb128 0x40
 4593 00c8 18       		.uleb128 0x18
 4594 00c9 9742     		.uleb128 0x2117
 4595 00cb 19       		.uleb128 0x19
 4596 00cc 01       		.uleb128 0x1
 4597 00cd 13       		.uleb128 0x13
 4598 00ce 00       		.byte	0
 4599 00cf 00       		.byte	0
 4600 00d0 0F       		.uleb128 0xf
 4601 00d1 05       		.uleb128 0x5
 4602 00d2 00       		.byte	0
 4603 00d3 03       		.uleb128 0x3
 4604 00d4 0E       		.uleb128 0xe
 4605 00d5 3A       		.uleb128 0x3a
 4606 00d6 0B       		.uleb128 0xb
 4607 00d7 3B       		.uleb128 0x3b
 4608 00d8 0B       		.uleb128 0xb
 4609 00d9 49       		.uleb128 0x49
 4610 00da 13       		.uleb128 0x13
 4611 00db 02       		.uleb128 0x2
 4612 00dc 18       		.uleb128 0x18
 4613 00dd 00       		.byte	0
 4614 00de 00       		.byte	0
 4615 00df 10       		.uleb128 0x10
 4616 00e0 34       		.uleb128 0x34
 4617 00e1 00       		.byte	0
 4618 00e2 03       		.uleb128 0x3
 4619 00e3 0E       		.uleb128 0xe
 4620 00e4 3A       		.uleb128 0x3a
 4621 00e5 0B       		.uleb128 0xb
 4622 00e6 3B       		.uleb128 0x3b
 4623 00e7 0B       		.uleb128 0xb
 4624 00e8 49       		.uleb128 0x49
 4625 00e9 13       		.uleb128 0x13
 4626 00ea 02       		.uleb128 0x2
 4627 00eb 18       		.uleb128 0x18
 4628 00ec 00       		.byte	0
 4629 00ed 00       		.byte	0
 4630 00ee 11       		.uleb128 0x11
 4631 00ef 34       		.uleb128 0x34
 4632 00f0 00       		.byte	0
 4633 00f1 03       		.uleb128 0x3
 4634 00f2 08       		.uleb128 0x8
 4635 00f3 3A       		.uleb128 0x3a
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 91


 4636 00f4 0B       		.uleb128 0xb
 4637 00f5 3B       		.uleb128 0x3b
 4638 00f6 0B       		.uleb128 0xb
 4639 00f7 49       		.uleb128 0x49
 4640 00f8 13       		.uleb128 0x13
 4641 00f9 02       		.uleb128 0x2
 4642 00fa 18       		.uleb128 0x18
 4643 00fb 00       		.byte	0
 4644 00fc 00       		.byte	0
 4645 00fd 12       		.uleb128 0x12
 4646 00fe 0B       		.uleb128 0xb
 4647 00ff 01       		.byte	0x1
 4648 0100 11       		.uleb128 0x11
 4649 0101 01       		.uleb128 0x1
 4650 0102 12       		.uleb128 0x12
 4651 0103 06       		.uleb128 0x6
 4652 0104 00       		.byte	0
 4653 0105 00       		.byte	0
 4654 0106 13       		.uleb128 0x13
 4655 0107 0B       		.uleb128 0xb
 4656 0108 01       		.byte	0x1
 4657 0109 11       		.uleb128 0x11
 4658 010a 01       		.uleb128 0x1
 4659 010b 12       		.uleb128 0x12
 4660 010c 06       		.uleb128 0x6
 4661 010d 01       		.uleb128 0x1
 4662 010e 13       		.uleb128 0x13
 4663 010f 00       		.byte	0
 4664 0110 00       		.byte	0
 4665 0111 14       		.uleb128 0x14
 4666 0112 2E       		.uleb128 0x2e
 4667 0113 01       		.byte	0x1
 4668 0114 3F       		.uleb128 0x3f
 4669 0115 19       		.uleb128 0x19
 4670 0116 03       		.uleb128 0x3
 4671 0117 0E       		.uleb128 0xe
 4672 0118 3A       		.uleb128 0x3a
 4673 0119 0B       		.uleb128 0xb
 4674 011a 3B       		.uleb128 0x3b
 4675 011b 0B       		.uleb128 0xb
 4676 011c 27       		.uleb128 0x27
 4677 011d 19       		.uleb128 0x19
 4678 011e 11       		.uleb128 0x11
 4679 011f 01       		.uleb128 0x1
 4680 0120 12       		.uleb128 0x12
 4681 0121 06       		.uleb128 0x6
 4682 0122 40       		.uleb128 0x40
 4683 0123 18       		.uleb128 0x18
 4684 0124 9642     		.uleb128 0x2116
 4685 0126 19       		.uleb128 0x19
 4686 0127 01       		.uleb128 0x1
 4687 0128 13       		.uleb128 0x13
 4688 0129 00       		.byte	0
 4689 012a 00       		.byte	0
 4690 012b 15       		.uleb128 0x15
 4691 012c 21       		.uleb128 0x21
 4692 012d 00       		.byte	0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 92


 4693 012e 49       		.uleb128 0x49
 4694 012f 13       		.uleb128 0x13
 4695 0130 2F       		.uleb128 0x2f
 4696 0131 18       		.uleb128 0x18
 4697 0132 00       		.byte	0
 4698 0133 00       		.byte	0
 4699 0134 16       		.uleb128 0x16
 4700 0135 34       		.uleb128 0x34
 4701 0136 00       		.byte	0
 4702 0137 03       		.uleb128 0x3
 4703 0138 0E       		.uleb128 0xe
 4704 0139 3A       		.uleb128 0x3a
 4705 013a 0B       		.uleb128 0xb
 4706 013b 3B       		.uleb128 0x3b
 4707 013c 05       		.uleb128 0x5
 4708 013d 49       		.uleb128 0x49
 4709 013e 13       		.uleb128 0x13
 4710 013f 02       		.uleb128 0x2
 4711 0140 18       		.uleb128 0x18
 4712 0141 00       		.byte	0
 4713 0142 00       		.byte	0
 4714 0143 17       		.uleb128 0x17
 4715 0144 2E       		.uleb128 0x2e
 4716 0145 01       		.byte	0x1
 4717 0146 3F       		.uleb128 0x3f
 4718 0147 19       		.uleb128 0x19
 4719 0148 03       		.uleb128 0x3
 4720 0149 0E       		.uleb128 0xe
 4721 014a 3A       		.uleb128 0x3a
 4722 014b 0B       		.uleb128 0xb
 4723 014c 3B       		.uleb128 0x3b
 4724 014d 05       		.uleb128 0x5
 4725 014e 27       		.uleb128 0x27
 4726 014f 19       		.uleb128 0x19
 4727 0150 49       		.uleb128 0x49
 4728 0151 13       		.uleb128 0x13
 4729 0152 11       		.uleb128 0x11
 4730 0153 01       		.uleb128 0x1
 4731 0154 12       		.uleb128 0x12
 4732 0155 06       		.uleb128 0x6
 4733 0156 40       		.uleb128 0x40
 4734 0157 18       		.uleb128 0x18
 4735 0158 9642     		.uleb128 0x2116
 4736 015a 19       		.uleb128 0x19
 4737 015b 01       		.uleb128 0x1
 4738 015c 13       		.uleb128 0x13
 4739 015d 00       		.byte	0
 4740 015e 00       		.byte	0
 4741 015f 18       		.uleb128 0x18
 4742 0160 05       		.uleb128 0x5
 4743 0161 00       		.byte	0
 4744 0162 03       		.uleb128 0x3
 4745 0163 0E       		.uleb128 0xe
 4746 0164 3A       		.uleb128 0x3a
 4747 0165 0B       		.uleb128 0xb
 4748 0166 3B       		.uleb128 0x3b
 4749 0167 05       		.uleb128 0x5
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 93


 4750 0168 49       		.uleb128 0x49
 4751 0169 13       		.uleb128 0x13
 4752 016a 02       		.uleb128 0x2
 4753 016b 18       		.uleb128 0x18
 4754 016c 00       		.byte	0
 4755 016d 00       		.byte	0
 4756 016e 19       		.uleb128 0x19
 4757 016f 2E       		.uleb128 0x2e
 4758 0170 01       		.byte	0x1
 4759 0171 3F       		.uleb128 0x3f
 4760 0172 19       		.uleb128 0x19
 4761 0173 03       		.uleb128 0x3
 4762 0174 0E       		.uleb128 0xe
 4763 0175 3A       		.uleb128 0x3a
 4764 0176 0B       		.uleb128 0xb
 4765 0177 3B       		.uleb128 0x3b
 4766 0178 05       		.uleb128 0x5
 4767 0179 27       		.uleb128 0x27
 4768 017a 19       		.uleb128 0x19
 4769 017b 49       		.uleb128 0x49
 4770 017c 13       		.uleb128 0x13
 4771 017d 11       		.uleb128 0x11
 4772 017e 01       		.uleb128 0x1
 4773 017f 12       		.uleb128 0x12
 4774 0180 06       		.uleb128 0x6
 4775 0181 40       		.uleb128 0x40
 4776 0182 18       		.uleb128 0x18
 4777 0183 9642     		.uleb128 0x2116
 4778 0185 19       		.uleb128 0x19
 4779 0186 00       		.byte	0
 4780 0187 00       		.byte	0
 4781 0188 1A       		.uleb128 0x1a
 4782 0189 05       		.uleb128 0x5
 4783 018a 00       		.byte	0
 4784 018b 03       		.uleb128 0x3
 4785 018c 08       		.uleb128 0x8
 4786 018d 3A       		.uleb128 0x3a
 4787 018e 0B       		.uleb128 0xb
 4788 018f 3B       		.uleb128 0x3b
 4789 0190 05       		.uleb128 0x5
 4790 0191 49       		.uleb128 0x49
 4791 0192 13       		.uleb128 0x13
 4792 0193 02       		.uleb128 0x2
 4793 0194 18       		.uleb128 0x18
 4794 0195 00       		.byte	0
 4795 0196 00       		.byte	0
 4796 0197 1B       		.uleb128 0x1b
 4797 0198 34       		.uleb128 0x34
 4798 0199 00       		.byte	0
 4799 019a 03       		.uleb128 0x3
 4800 019b 08       		.uleb128 0x8
 4801 019c 3A       		.uleb128 0x3a
 4802 019d 0B       		.uleb128 0xb
 4803 019e 3B       		.uleb128 0x3b
 4804 019f 05       		.uleb128 0x5
 4805 01a0 49       		.uleb128 0x49
 4806 01a1 13       		.uleb128 0x13
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 94


 4807 01a2 02       		.uleb128 0x2
 4808 01a3 18       		.uleb128 0x18
 4809 01a4 00       		.byte	0
 4810 01a5 00       		.byte	0
 4811 01a6 00       		.byte	0
 4812              		.section	.debug_aranges,"",%progbits
 4813 0000 64000000 		.4byte	0x64
 4814 0004 0200     		.2byte	0x2
 4815 0006 00000000 		.4byte	.Ldebug_info0
 4816 000a 04       		.byte	0x4
 4817 000b 00       		.byte	0
 4818 000c 0000     		.2byte	0
 4819 000e 0000     		.2byte	0
 4820 0010 00000000 		.4byte	.LFB0
 4821 0014 4C000000 		.4byte	.LFE0-.LFB0
 4822 0018 00000000 		.4byte	.LFB1
 4823 001c 3E000000 		.4byte	.LFE1-.LFB1
 4824 0020 00000000 		.4byte	.LFB2
 4825 0024 B6000000 		.4byte	.LFE2-.LFB2
 4826 0028 00000000 		.4byte	.LFB3
 4827 002c 50030000 		.4byte	.LFE3-.LFB3
 4828 0030 00000000 		.4byte	.LFB4
 4829 0034 F8000000 		.4byte	.LFE4-.LFB4
 4830 0038 00000000 		.4byte	.LFB5
 4831 003c DC000000 		.4byte	.LFE5-.LFB5
 4832 0040 00000000 		.4byte	.LFB6
 4833 0044 0C040000 		.4byte	.LFE6-.LFB6
 4834 0048 00000000 		.4byte	.LFB7
 4835 004c 44040000 		.4byte	.LFE7-.LFB7
 4836 0050 00000000 		.4byte	.LFB8
 4837 0054 30060000 		.4byte	.LFE8-.LFB8
 4838 0058 00000000 		.4byte	.LFB9
 4839 005c F4000000 		.4byte	.LFE9-.LFB9
 4840 0060 00000000 		.4byte	0
 4841 0064 00000000 		.4byte	0
 4842              		.section	.debug_ranges,"",%progbits
 4843              	.Ldebug_ranges0:
 4844 0000 00000000 		.4byte	.LFB0
 4845 0004 4C000000 		.4byte	.LFE0
 4846 0008 00000000 		.4byte	.LFB1
 4847 000c 3E000000 		.4byte	.LFE1
 4848 0010 00000000 		.4byte	.LFB2
 4849 0014 B6000000 		.4byte	.LFE2
 4850 0018 00000000 		.4byte	.LFB3
 4851 001c 50030000 		.4byte	.LFE3
 4852 0020 00000000 		.4byte	.LFB4
 4853 0024 F8000000 		.4byte	.LFE4
 4854 0028 00000000 		.4byte	.LFB5
 4855 002c DC000000 		.4byte	.LFE5
 4856 0030 00000000 		.4byte	.LFB6
 4857 0034 0C040000 		.4byte	.LFE6
 4858 0038 00000000 		.4byte	.LFB7
 4859 003c 44040000 		.4byte	.LFE7
 4860 0040 00000000 		.4byte	.LFB8
 4861 0044 30060000 		.4byte	.LFE8
 4862 0048 00000000 		.4byte	.LFB9
 4863 004c F4000000 		.4byte	.LFE9
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 95


 4864 0050 00000000 		.4byte	0
 4865 0054 00000000 		.4byte	0
 4866              		.section	.debug_line,"",%progbits
 4867              	.Ldebug_line0:
 4868 0000 A1030000 		.section	.debug_str,"MS",%progbits,1
 4868      02006400 
 4868      00000201 
 4868      FB0E0D00 
 4868      01010101 
 4869              	.LASF81:
 4870 0000 63637769 		.ascii	"ccwise\000"
 4870      736500
 4871              	.LASF55:
 4872 0007 736D6F6F 		.ascii	"smoothed_POD\000"
 4872      74686564 
 4872      5F504F44 
 4872      00
 4873              	.LASF39:
 4874 0014 67726964 		.ascii	"grid_update\000"
 4874      5F757064 
 4874      61746500 
 4875              	.LASF49:
 4876 0020 67726964 		.ascii	"grid_i\000"
 4876      5F6900
 4877              	.LASF50:
 4878 0027 67726964 		.ascii	"grid_j\000"
 4878      5F6A00
 4879              	.LASF52:
 4880 002e 616C7068 		.ascii	"alpha\000"
 4880      6100
 4881              	.LASF14:
 4882 0034 64697265 		.ascii	"direction\000"
 4882      6374696F 
 4882      6E00
 4883              	.LASF89:
 4884 003e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4884      43313120 
 4884      352E342E 
 4884      31203230 
 4884      31363036 
 4885 0071 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4885      20726576 
 4885      6973696F 
 4885      6E203233 
 4885      37373135 
 4886 00a4 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4886      66756E63 
 4886      74696F6E 
 4886      2D736563 
 4886      74696F6E 
 4887              	.LASF32:
 4888 00cc 64656E73 		.ascii	"density\000"
 4888      69747900 
 4889              	.LASF9:
 4890 00d4 6C6F6E67 		.ascii	"long long unsigned int\000"
 4890      206C6F6E 
 4890      6720756E 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 96


 4890      7369676E 
 4890      65642069 
 4891              	.LASF74:
 4892 00eb 616E676C 		.ascii	"angle\000"
 4892      6500
 4893              	.LASF78:
 4894 00f1 63616C63 		.ascii	"calculate_avoidance_angle2\000"
 4894      756C6174 
 4894      655F6176 
 4894      6F696461 
 4894      6E63655F 
 4895              	.LASF71:
 4896 010c 6D696E5F 		.ascii	"min_val\000"
 4896      76616C00 
 4897              	.LASF69:
 4898 0114 76616C6C 		.ascii	"valley_flag\000"
 4898      65795F66 
 4898      6C616700 
 4899              	.LASF59:
 4900 0120 73756D5F 		.ascii	"sum_element\000"
 4900      656C656D 
 4900      656E7400 
 4901              	.LASF64:
 4902 012c 63616E64 		.ascii	"candidates_len\000"
 4902      69646174 
 4902      65735F6C 
 4902      656E00
 4903              	.LASF1:
 4904 013b 6C6F6E67 		.ascii	"long long int\000"
 4904      206C6F6E 
 4904      6720696E 
 4904      7400
 4905              	.LASF3:
 4906 0149 7369676E 		.ascii	"signed char\000"
 4906      65642063 
 4906      68617200 
 4907              	.LASF20:
 4908 0155 696E745F 		.ascii	"int_error\000"
 4908      6572726F 
 4908      7200
 4909              	.LASF37:
 4910 015f 67726964 		.ascii	"grid_create\000"
 4910      5F637265 
 4910      61746500 
 4911              	.LASF48:
 4912 016b 61637469 		.ascii	"active\000"
 4912      766500
 4913              	.LASF7:
 4914 0172 6C6F6E67 		.ascii	"long int\000"
 4914      20696E74 
 4914      00
 4915              	.LASF38:
 4916 017b 64697374 		.ascii	"dist\000"
 4916      00
 4917              	.LASF83:
 4918 0180 6661725F 		.ascii	"far_edge\000"
 4918      65646765 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 97


 4918      00
 4919              	.LASF12:
 4920 0189 646F7562 		.ascii	"double\000"
 4920      6C6500
 4921              	.LASF33:
 4922 0190 74727565 		.ascii	"true_mod\000"
 4922      5F6D6F64 
 4922      00
 4923              	.LASF82:
 4924 0199 65646765 		.ascii	"edge_step\000"
 4924      5F737465 
 4924      7000
 4925              	.LASF34:
 4926 01a3 6D696E5F 		.ascii	"min_sect_dist\000"
 4926      73656374 
 4926      5F646973 
 4926      7400
 4927              	.LASF47:
 4928 01b1 6E65775F 		.ascii	"new_y\000"
 4928      7900
 4929              	.LASF67:
 4930 01b7 676F616C 		.ascii	"goal_sector\000"
 4930      5F736563 
 4930      746F7200 
 4931              	.LASF35:
 4932 01c3 73656374 		.ascii	"sect_a\000"
 4932      5F6100
 4933              	.LASF36:
 4934 01ca 73656374 		.ascii	"sect_b\000"
 4934      5F6200
 4935              	.LASF41:
 4936 01d1 726F626F 		.ascii	"robot\000"
 4936      7400
 4937              	.LASF51:
 4938 01d7 706F645F 		.ascii	"pod_create\000"
 4938      63726561 
 4938      746500
 4939              	.LASF0:
 4940 01e2 756E7369 		.ascii	"unsigned int\000"
 4940      676E6564 
 4940      20696E74 
 4940      00
 4941              	.LASF31:
 4942 01ef 6E736563 		.ascii	"nsectors\000"
 4942      746F7273 
 4942      00
 4943              	.LASF8:
 4944 01f8 6C6F6E67 		.ascii	"long unsigned int\000"
 4944      20756E73 
 4944      69676E65 
 4944      6420696E 
 4944      7400
 4945              	.LASF54:
 4946 020a 736D6F6F 		.ascii	"smoothed_POD_histogram\000"
 4946      74686564 
 4946      5F504F44 
 4946      5F686973 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 98


 4946      746F6772 
 4947              	.LASF88:
 4948 0221 73706565 		.ascii	"speed_reduction\000"
 4948      645F7265 
 4948      64756374 
 4948      696F6E00 
 4949              	.LASF26:
 4950 0231 77696474 		.ascii	"width\000"
 4950      6800
 4951              	.LASF6:
 4952 0237 73686F72 		.ascii	"short unsigned int\000"
 4952      7420756E 
 4952      7369676E 
 4952      65642069 
 4952      6E7400
 4953              	.LASF17:
 4954 024a 74686574 		.ascii	"theta\000"
 4954      6100
 4955              	.LASF23:
 4956 0250 676F616C 		.ascii	"goal_min_dist\000"
 4956      5F6D696E 
 4956      5F646973 
 4956      7400
 4957              	.LASF29:
 4958 025e 63656C6C 		.ascii	"cells\000"
 4958      7300
 4959              	.LASF18:
 4960 0264 64657369 		.ascii	"desired_v\000"
 4960      7265645F 
 4960      7600
 4961              	.LASF24:
 4962 026e 53656E73 		.ascii	"Sensor\000"
 4962      6F7200
 4963              	.LASF10:
 4964 0275 73697A65 		.ascii	"sizetype\000"
 4964      74797065 
 4964      00
 4965              	.LASF2:
 4966 027e 6C6F6E67 		.ascii	"long double\000"
 4966      20646F75 
 4966      626C6500 
 4967              	.LASF61:
 4968 028a 63616C63 		.ascii	"calculate_avoidance_angle\000"
 4968      756C6174 
 4968      655F6176 
 4968      6F696461 
 4968      6E63655F 
 4969              	.LASF57:
 4970 02a4 504F445F 		.ascii	"POD_hist\000"
 4970      68697374 
 4970      00
 4971              	.LASF30:
 4972 02ad 67726964 		.ascii	"grid\000"
 4972      00
 4973              	.LASF45:
 4974 02b2 73656E73 		.ascii	"sensor_radians\000"
 4974      6F725F72 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 99


 4974      61646961 
 4974      6E7300
 4975              	.LASF62:
 4976 02c1 63616E64 		.ascii	"candidate_lst\000"
 4976      69646174 
 4976      655F6C73 
 4976      7400
 4977              	.LASF42:
 4978 02cf 706F735F 		.ascii	"pos_x\000"
 4978      7800
 4979              	.LASF43:
 4980 02d5 706F735F 		.ascii	"pos_y\000"
 4980      7900
 4981              	.LASF13:
 4982 02db 666C6F61 		.ascii	"float\000"
 4982      7400
 4983              	.LASF21:
 4984 02e1 676F616C 		.ascii	"goal_x\000"
 4984      5F7800
 4985              	.LASF22:
 4986 02e8 676F616C 		.ascii	"goal_y\000"
 4986      5F7900
 4987              	.LASF65:
 4988 02ef 706F735F 		.ascii	"pos_yaw\000"
 4988      79617700 
 4989              	.LASF4:
 4990 02f7 756E7369 		.ascii	"unsigned char\000"
 4990      676E6564 
 4990      20636861 
 4990      7200
 4991              	.LASF79:
 4992 0305 73746570 		.ascii	"step\000"
 4992      00
 4993              	.LASF5:
 4994 030a 73686F72 		.ascii	"short int\000"
 4994      7420696E 
 4994      7400
 4995              	.LASF70:
 4996 0314 6162735F 		.ascii	"abs_sec\000"
 4996      73656300 
 4997              	.LASF16:
 4998 031c 61786C65 		.ascii	"axle_width\000"
 4998      5F776964 
 4998      746800
 4999              	.LASF46:
 5000 0327 6E65775F 		.ascii	"new_x\000"
 5000      7800
 5001              	.LASF66:
 5002 032d 676F616C 		.ascii	"goal_angle\000"
 5002      5F616E67 
 5002      6C6500
 5003              	.LASF87:
 5004 0338 685F6363 		.ascii	"h_cc\000"
 5004      00
 5005              	.LASF56:
 5006 033d 73656374 		.ascii	"sectors\000"
 5006      6F727300 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 100


 5007              	.LASF28:
 5008 0345 7265736F 		.ascii	"resolution\000"
 5008      6C757469 
 5008      6F6E00
 5009              	.LASF73:
 5010 0350 6D696E5F 		.ascii	"min_distance\000"
 5010      64697374 
 5010      616E6365 
 5010      00
 5011              	.LASF68:
 5012 035d 6162735F 		.ascii	"abs_min\000"
 5012      6D696E00 
 5013              	.LASF40:
 5014 0365 73656E73 		.ascii	"sensors\000"
 5014      6F727300 
 5015              	.LASF76:
 5016 036d 66697273 		.ascii	"first\000"
 5016      7400
 5017              	.LASF60:
 5018 0373 736D6F6F 		.ascii	"smoothed_element\000"
 5018      74686564 
 5018      5F656C65 
 5018      6D656E74 
 5018      00
 5019              	.LASF11:
 5020 0384 63686172 		.ascii	"char\000"
 5020      00
 5021              	.LASF44:
 5022 0389 63656C6C 		.ascii	"cell_distance\000"
 5022      5F646973 
 5022      74616E63 
 5022      6500
 5023              	.LASF15:
 5024 0397 64697374 		.ascii	"distance\000"
 5024      616E6365 
 5024      00
 5025              	.LASF72:
 5026 03a0 62657374 		.ascii	"best_angle\000"
 5026      5F616E67 
 5026      6C6500
 5027              	.LASF91:
 5028 03ab 433A5C55 		.ascii	"C:\\Users\\jmspi\\OneDrive\\Documents\\GitHub\\ECE4"
 5028      73657273 
 5028      5C6A6D73 
 5028      70695C4F 
 5028      6E654472 
 5029 03d8 3139315C 		.ascii	"191\\DeliveryRobot.cydsn\000"
 5029      44656C69 
 5029      76657279 
 5029      526F626F 
 5029      742E6379 
 5030              	.LASF77:
 5031 03f0 6C617374 		.ascii	"last\000"
 5031      00
 5032              	.LASF90:
 5033 03f5 2E2E5C56 		.ascii	"..\\VFH\\vfh.c\000"
 5033      46485C76 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccrRGYfD.s 			page 101


 5033      66682E63 
 5033      00
 5034              	.LASF19:
 5035 0402 64657369 		.ascii	"desired_theta\000"
 5035      7265645F 
 5035      74686574 
 5035      6100
 5036              	.LASF84:
 5037 0410 76656C6F 		.ascii	"velocity_control\000"
 5037      63697479 
 5037      5F636F6E 
 5037      74726F6C 
 5037      00
 5038              	.LASF63:
 5039 0421 735F6D61 		.ascii	"s_max\000"
 5039      7800
 5040              	.LASF53:
 5041 0427 61637469 		.ascii	"active_window\000"
 5041      76655F77 
 5041      696E646F 
 5041      7700
 5042              	.LASF58:
 5043 0435 62657461 		.ascii	"beta\000"
 5043      00
 5044              	.LASF25:
 5045 043a 526F626F 		.ascii	"Robot\000"
 5045      7400
 5046              	.LASF75:
 5047 0440 64697374 		.ascii	"dist_angle_to_goal\000"
 5047      5F616E67 
 5047      6C655F74 
 5047      6F5F676F 
 5047      616C00
 5048              	.LASF80:
 5049 0453 63776973 		.ascii	"cwise\000"
 5049      6500
 5050              	.LASF86:
 5051 0459 685F6964 		.ascii	"h_idx\000"
 5051      7800
 5052              	.LASF27:
 5053 045f 68656967 		.ascii	"height\000"
 5053      687400
 5054              	.LASF85:
 5055 0466 565F4D41 		.ascii	"V_MAX\000"
 5055      5800
 5056              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
