ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"vfh.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	__aeabi_ddiv
  20              		.global	__aeabi_dmul
  21              		.global	__aeabi_dsub
  22              		.section	.text.true_mod,"ax",%progbits
  23              		.align	2
  24              		.global	true_mod
  25              		.thumb
  26              		.thumb_func
  27              		.type	true_mod, %function
  28              	true_mod:
  29              	.LFB0:
  30              		.file 1 "..\\VFH\\vfh.c"
   1:..\VFH/vfh.c  **** /*
   2:..\VFH/vfh.c  **** ** Vector Field Histogram Implementation
   3:..\VFH/vfh.c  **** **  
   4:..\VFH/vfh.c  **** **
   5:..\VFH/vfh.c  **** */
   6:..\VFH/vfh.c  **** 
   7:..\VFH/vfh.c  **** #include <stdlib.h>
   8:..\VFH/vfh.c  **** #include <math.h>
   9:..\VFH/vfh.c  **** #include <assert.h>
  10:..\VFH/vfh.c  **** 
  11:..\VFH/vfh.c  **** #include "vfh.h"
  12:..\VFH/vfh.c  **** 
  13:..\VFH/vfh.c  **** // helper functions added by Jacob
  14:..\VFH/vfh.c  **** double true_mod(double a, double b) {
  31              		.loc 1 14 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 16
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35 0000 90B5     		push	{r4, r7, lr}
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 85B0     		sub	sp, sp, #20
  41              		.cfi_def_cfa_offset 32
  42 0004 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 2


  44 0006 C7E90201 		strd	r0, [r7, #8]
  45 000a C7E90023 		strd	r2, [r7]
  15:..\VFH/vfh.c  ****     return a - b * floor(a / b);  
  46              		.loc 1 15 0
  47 000e D7E90023 		ldrd	r2, [r7]
  48 0012 D7E90201 		ldrd	r0, [r7, #8]
  49 0016 FFF7FEFF 		bl	__aeabi_ddiv
  50 001a 0346     		mov	r3, r0
  51 001c 0C46     		mov	r4, r1
  52 001e 1846     		mov	r0, r3
  53 0020 2146     		mov	r1, r4
  54 0022 FFF7FEFF 		bl	floor
  55 0026 D7E90023 		ldrd	r2, [r7]
  56 002a FFF7FEFF 		bl	__aeabi_dmul
  57 002e 0346     		mov	r3, r0
  58 0030 0C46     		mov	r4, r1
  59 0032 1A46     		mov	r2, r3
  60 0034 2346     		mov	r3, r4
  61 0036 D7E90201 		ldrd	r0, [r7, #8]
  62 003a FFF7FEFF 		bl	__aeabi_dsub
  63 003e 0346     		mov	r3, r0
  64 0040 0C46     		mov	r4, r1
  16:..\VFH/vfh.c  **** }
  65              		.loc 1 16 0
  66 0042 1846     		mov	r0, r3
  67 0044 2146     		mov	r1, r4
  68 0046 1437     		adds	r7, r7, #20
  69              		.cfi_def_cfa_offset 12
  70 0048 BD46     		mov	sp, r7
  71              		.cfi_def_cfa_register 13
  72              		@ sp needed
  73 004a 90BD     		pop	{r4, r7, pc}
  74              		.cfi_endproc
  75              	.LFE0:
  76              		.size	true_mod, .-true_mod
  77              		.section	.text.min_sect_dist,"ax",%progbits
  78              		.align	2
  79              		.global	min_sect_dist
  80              		.thumb
  81              		.thumb_func
  82              		.type	min_sect_dist, %function
  83              	min_sect_dist:
  84              	.LFB1:
  17:..\VFH/vfh.c  **** 
  18:..\VFH/vfh.c  **** int min_sect_dist(int sect_a, int sect_b, int nsectors) {
  85              		.loc 1 18 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 24
  88              		@ frame_needed = 1, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90 0000 80B4     		push	{r7}
  91              		.cfi_def_cfa_offset 4
  92              		.cfi_offset 7, -4
  93 0002 87B0     		sub	sp, sp, #28
  94              		.cfi_def_cfa_offset 32
  95 0004 00AF     		add	r7, sp, #0
  96              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 3


  97 0006 F860     		str	r0, [r7, #12]
  98 0008 B960     		str	r1, [r7, #8]
  99 000a 7A60     		str	r2, [r7, #4]
  19:..\VFH/vfh.c  ****     int dist = abs(sect_a-sect_b);
 100              		.loc 1 19 0
 101 000c FA68     		ldr	r2, [r7, #12]
 102 000e BB68     		ldr	r3, [r7, #8]
 103 0010 D31A     		subs	r3, r2, r3
 104 0012 002B     		cmp	r3, #0
 105 0014 B8BF     		it	lt
 106 0016 5B42     		rsblt	r3, r3, #0
 107 0018 7B61     		str	r3, [r7, #20]
  20:..\VFH/vfh.c  ****     return dist>nsectors/2? nsectors-dist: dist;
 108              		.loc 1 20 0
 109 001a 7B68     		ldr	r3, [r7, #4]
 110 001c DA0F     		lsrs	r2, r3, #31
 111 001e 1344     		add	r3, r3, r2
 112 0020 5B10     		asrs	r3, r3, #1
 113 0022 1A46     		mov	r2, r3
 114 0024 7B69     		ldr	r3, [r7, #20]
 115 0026 9A42     		cmp	r2, r3
 116 0028 03DA     		bge	.L4
 117              		.loc 1 20 0 is_stmt 0 discriminator 1
 118 002a 7A68     		ldr	r2, [r7, #4]
 119 002c 7B69     		ldr	r3, [r7, #20]
 120 002e D31A     		subs	r3, r2, r3
 121 0030 00E0     		b	.L6
 122              	.L4:
 123              		.loc 1 20 0 discriminator 2
 124 0032 7B69     		ldr	r3, [r7, #20]
 125              	.L6:
  21:..\VFH/vfh.c  **** }
 126              		.loc 1 21 0 is_stmt 1 discriminator 5
 127 0034 1846     		mov	r0, r3
 128 0036 1C37     		adds	r7, r7, #28
 129              		.cfi_def_cfa_offset 4
 130 0038 BD46     		mov	sp, r7
 131              		.cfi_def_cfa_register 13
 132              		@ sp needed
 133 003a 80BC     		pop	{r7}
 134              		.cfi_restore 7
 135              		.cfi_def_cfa_offset 0
 136 003c 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE1:
 139              		.size	min_sect_dist, .-min_sect_dist
 140 003e 00BF     		.section	.text.grid_create,"ax",%progbits
 141              		.align	2
 142              		.global	grid_create
 143              		.thumb
 144              		.thumb_func
 145              		.type	grid_create, %function
 146              	grid_create:
 147              	.LFB2:
  22:..\VFH/vfh.c  **** 
  23:..\VFH/vfh.c  **** /*=======================================================================*/    
  24:..\VFH/vfh.c  **** // Histogram Grid Creation Code
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 4


  25:..\VFH/vfh.c  **** 
  26:..\VFH/vfh.c  **** grid * grid_create(int width, int height, int resolution) {
 148              		.loc 1 26 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 32
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152 0000 80B5     		push	{r7, lr}
 153              		.cfi_def_cfa_offset 8
 154              		.cfi_offset 7, -8
 155              		.cfi_offset 14, -4
 156 0002 88B0     		sub	sp, sp, #32
 157              		.cfi_def_cfa_offset 40
 158 0004 00AF     		add	r7, sp, #0
 159              		.cfi_def_cfa_register 7
 160 0006 F860     		str	r0, [r7, #12]
 161 0008 B960     		str	r1, [r7, #8]
 162 000a 7A60     		str	r2, [r7, #4]
  27:..\VFH/vfh.c  ****   /* Creates a map of our arena. */
  28:..\VFH/vfh.c  **** 
  29:..\VFH/vfh.c  ****   grid * map = malloc(sizeof(grid));  // Allocate memory for grid map
 163              		.loc 1 29 0
 164 000c 1020     		movs	r0, #16
 165 000e FFF7FEFF 		bl	malloc
 166 0012 0346     		mov	r3, r0
 167 0014 7B61     		str	r3, [r7, #20]
  30:..\VFH/vfh.c  **** 
  31:..\VFH/vfh.c  ****   // Return NULL if not enough memory
  32:..\VFH/vfh.c  ****   if (map == NULL) {
 168              		.loc 1 32 0
 169 0016 7B69     		ldr	r3, [r7, #20]
 170 0018 002B     		cmp	r3, #0
 171 001a 04D1     		bne	.L8
  33:..\VFH/vfh.c  ****     free(map);
 172              		.loc 1 33 0
 173 001c 7869     		ldr	r0, [r7, #20]
 174 001e FFF7FEFF 		bl	free
  34:..\VFH/vfh.c  ****     return NULL;
 175              		.loc 1 34 0
 176 0022 0023     		movs	r3, #0
 177 0024 43E0     		b	.L9
 178              	.L8:
  35:..\VFH/vfh.c  ****   }
  36:..\VFH/vfh.c  **** 
  37:..\VFH/vfh.c  ****   // Define variables
  38:..\VFH/vfh.c  ****   map->width = width;
 179              		.loc 1 38 0
 180 0026 7B69     		ldr	r3, [r7, #20]
 181 0028 FA68     		ldr	r2, [r7, #12]
 182 002a 1A60     		str	r2, [r3]
  39:..\VFH/vfh.c  ****   map->height = height;
 183              		.loc 1 39 0
 184 002c 7B69     		ldr	r3, [r7, #20]
 185 002e BA68     		ldr	r2, [r7, #8]
 186 0030 5A60     		str	r2, [r3, #4]
  40:..\VFH/vfh.c  ****   map->resolution = resolution;
 187              		.loc 1 40 0
 188 0032 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 5


 189 0034 7A68     		ldr	r2, [r7, #4]
 190 0036 9A60     		str	r2, [r3, #8]
  41:..\VFH/vfh.c  ****   map->cells = malloc(width * height * sizeof(int));
 191              		.loc 1 41 0
 192 0038 FB68     		ldr	r3, [r7, #12]
 193 003a BA68     		ldr	r2, [r7, #8]
 194 003c 02FB03F3 		mul	r3, r2, r3
 195 0040 9B00     		lsls	r3, r3, #2
 196 0042 1846     		mov	r0, r3
 197 0044 FFF7FEFF 		bl	malloc
 198 0048 0346     		mov	r3, r0
 199 004a 1A46     		mov	r2, r3
 200 004c 7B69     		ldr	r3, [r7, #20]
 201 004e DA60     		str	r2, [r3, #12]
  42:..\VFH/vfh.c  **** 
  43:..\VFH/vfh.c  ****   // Return NULL if not enough memory
  44:..\VFH/vfh.c  ****   if (map->cells == NULL) {
 202              		.loc 1 44 0
 203 0050 7B69     		ldr	r3, [r7, #20]
 204 0052 DB68     		ldr	r3, [r3, #12]
 205 0054 002B     		cmp	r3, #0
 206 0056 09D1     		bne	.L10
  45:..\VFH/vfh.c  ****     free(map);
 207              		.loc 1 45 0
 208 0058 7869     		ldr	r0, [r7, #20]
 209 005a FFF7FEFF 		bl	free
  46:..\VFH/vfh.c  ****     free(map->cells);
 210              		.loc 1 46 0
 211 005e 7B69     		ldr	r3, [r7, #20]
 212 0060 DB68     		ldr	r3, [r3, #12]
 213 0062 1846     		mov	r0, r3
 214 0064 FFF7FEFF 		bl	free
  47:..\VFH/vfh.c  ****     return NULL;
 215              		.loc 1 47 0
 216 0068 0023     		movs	r3, #0
 217 006a 20E0     		b	.L9
 218              	.L10:
 219              	.LBB2:
  48:..\VFH/vfh.c  ****   }
  49:..\VFH/vfh.c  **** 
  50:..\VFH/vfh.c  ****   // Define all initial grid values to be 0 as there are no obstacles
  51:..\VFH/vfh.c  ****   for (int i = 0; i < width; ++i) {
 220              		.loc 1 51 0
 221 006c 0023     		movs	r3, #0
 222 006e FB61     		str	r3, [r7, #28]
 223 0070 18E0     		b	.L11
 224              	.L14:
 225              	.LBB3:
  52:..\VFH/vfh.c  ****     for (int j = 0; j < height; ++j) {
 226              		.loc 1 52 0
 227 0072 0023     		movs	r3, #0
 228 0074 BB61     		str	r3, [r7, #24]
 229 0076 0EE0     		b	.L12
 230              	.L13:
  53:..\VFH/vfh.c  ****       map->cells[i * width + j] = 0;    // Map grid is defined as a 1D array
 231              		.loc 1 53 0 discriminator 3
 232 0078 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 6


 233 007a DA68     		ldr	r2, [r3, #12]
 234 007c FB69     		ldr	r3, [r7, #28]
 235 007e F968     		ldr	r1, [r7, #12]
 236 0080 01FB03F1 		mul	r1, r1, r3
 237 0084 BB69     		ldr	r3, [r7, #24]
 238 0086 0B44     		add	r3, r3, r1
 239 0088 9B00     		lsls	r3, r3, #2
 240 008a 1344     		add	r3, r3, r2
 241 008c 0022     		movs	r2, #0
 242 008e 1A60     		str	r2, [r3]
  52:..\VFH/vfh.c  ****     for (int j = 0; j < height; ++j) {
 243              		.loc 1 52 0 discriminator 3
 244 0090 BB69     		ldr	r3, [r7, #24]
 245 0092 0133     		adds	r3, r3, #1
 246 0094 BB61     		str	r3, [r7, #24]
 247              	.L12:
  52:..\VFH/vfh.c  ****     for (int j = 0; j < height; ++j) {
 248              		.loc 1 52 0 is_stmt 0 discriminator 1
 249 0096 BA69     		ldr	r2, [r7, #24]
 250 0098 BB68     		ldr	r3, [r7, #8]
 251 009a 9A42     		cmp	r2, r3
 252 009c ECDB     		blt	.L13
 253              	.LBE3:
  51:..\VFH/vfh.c  ****     for (int j = 0; j < height; ++j) {
 254              		.loc 1 51 0 is_stmt 1 discriminator 2
 255 009e FB69     		ldr	r3, [r7, #28]
 256 00a0 0133     		adds	r3, r3, #1
 257 00a2 FB61     		str	r3, [r7, #28]
 258              	.L11:
  51:..\VFH/vfh.c  ****     for (int j = 0; j < height; ++j) {
 259              		.loc 1 51 0 is_stmt 0 discriminator 1
 260 00a4 FA69     		ldr	r2, [r7, #28]
 261 00a6 FB68     		ldr	r3, [r7, #12]
 262 00a8 9A42     		cmp	r2, r3
 263 00aa E2DB     		blt	.L14
 264              	.LBE2:
  54:..\VFH/vfh.c  ****     }
  55:..\VFH/vfh.c  ****   }
  56:..\VFH/vfh.c  **** 
  57:..\VFH/vfh.c  ****   return map;
 265              		.loc 1 57 0 is_stmt 1
 266 00ac 7B69     		ldr	r3, [r7, #20]
 267              	.L9:
  58:..\VFH/vfh.c  **** }
 268              		.loc 1 58 0
 269 00ae 1846     		mov	r0, r3
 270 00b0 2037     		adds	r7, r7, #32
 271              		.cfi_def_cfa_offset 8
 272 00b2 BD46     		mov	sp, r7
 273              		.cfi_def_cfa_register 13
 274              		@ sp needed
 275 00b4 80BD     		pop	{r7, pc}
 276              		.cfi_endproc
 277              	.LFE2:
 278              		.size	grid_create, .-grid_create
 279              		.global	__aeabi_i2d
 280              		.global	__aeabi_dadd
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 7


 281              		.global	__aeabi_dcmplt
 282              		.global	__aeabi_dcmpge
 283              		.global	__aeabi_dcmpgt
 284              		.global	__aeabi_d2iz
 285 00b6 00BF     		.section	.text.grid_update,"ax",%progbits
 286              		.align	2
 287              		.global	grid_update
 288              		.thumb
 289              		.thumb_func
 290              		.type	grid_update, %function
 291              	grid_update:
 292              	.LFB3:
  59:..\VFH/vfh.c  **** 
  60:..\VFH/vfh.c  **** int grid_update(grid * map, Sensor * sensors, Robot * robot) {
 293              		.loc 1 60 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 128
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 298              		.cfi_def_cfa_offset 28
 299              		.cfi_offset 4, -28
 300              		.cfi_offset 5, -24
 301              		.cfi_offset 6, -20
 302              		.cfi_offset 7, -16
 303              		.cfi_offset 8, -12
 304              		.cfi_offset 9, -8
 305              		.cfi_offset 14, -4
 306 0004 A1B0     		sub	sp, sp, #132
 307              		.cfi_def_cfa_offset 160
 308 0006 00AF     		add	r7, sp, #0
 309              		.cfi_def_cfa_register 7
 310 0008 F860     		str	r0, [r7, #12]
 311 000a B960     		str	r1, [r7, #8]
 312 000c 7A60     		str	r2, [r7, #4]
  61:..\VFH/vfh.c  ****   /*
  62:..\VFH/vfh.c  ****    * Updates Histogram with detected obstacles.
  63:..\VFH/vfh.c  ****    * Takes robot positioning and sensor measurements to determine obstacles location.
  64:..\VFH/vfh.c  ****    *
  65:..\VFH/vfh.c  ****    * Remember that cos() and sin() expect angles in RADIANS, not DEGREES.
  66:..\VFH/vfh.c  ****   */
  67:..\VFH/vfh.c  **** 
  68:..\VFH/vfh.c  ****   // Check if grid map exists
  69:..\VFH/vfh.c  ****   if (map == NULL) return 0;
 313              		.loc 1 69 0
 314 000e FB68     		ldr	r3, [r7, #12]
 315 0010 002B     		cmp	r3, #0
 316 0012 01D1     		bne	.L16
 317              		.loc 1 69 0 is_stmt 0 discriminator 1
 318 0014 0023     		movs	r3, #0
 319 0016 88E1     		b	.L33
 320              	.L16:
  70:..\VFH/vfh.c  ****   if (map->cells == NULL) return 0;
 321              		.loc 1 70 0 is_stmt 1
 322 0018 FB68     		ldr	r3, [r7, #12]
 323 001a DB68     		ldr	r3, [r3, #12]
 324 001c 002B     		cmp	r3, #0
 325 001e 01D1     		bne	.L18
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 8


 326              		.loc 1 70 0 is_stmt 0 discriminator 1
 327 0020 0023     		movs	r3, #0
 328 0022 82E1     		b	.L33
 329              	.L18:
  71:..\VFH/vfh.c  **** 
  72:..\VFH/vfh.c  ****   // Extract needed variables from structure
  73:..\VFH/vfh.c  ****   double pos_x = robot->x;    // cm
 330              		.loc 1 73 0 is_stmt 1
 331 0024 7B68     		ldr	r3, [r7, #4]
 332 0026 03F11004 		add	r4, r3, #16
 333 002a D4E90034 		ldrd	r3, [r4]
 334 002e C7E91834 		strd	r3, [r7, #96]
  74:..\VFH/vfh.c  ****   double pos_y = robot->y;    // cm
 335              		.loc 1 74 0
 336 0032 7B68     		ldr	r3, [r7, #4]
 337 0034 03F11804 		add	r4, r3, #24
 338 0038 D4E90034 		ldrd	r3, [r4]
 339 003c C7E91634 		strd	r3, [r7, #88]
  75:..\VFH/vfh.c  ****   double yaw = robot->theta;  // radians
 340              		.loc 1 75 0
 341 0040 7B68     		ldr	r3, [r7, #4]
 342 0042 03F10804 		add	r4, r3, #8
 343 0046 D4E90034 		ldrd	r3, [r4]
 344 004a C7E91434 		strd	r3, [r7, #80]
 345              	.LBB4:
  76:..\VFH/vfh.c  **** 
  77:..\VFH/vfh.c  ****   // Determine distance of returned ultrasonic signal and convert into grid 
  78:..\VFH/vfh.c  ****   double cell_distance[N_SENSORS];
  79:..\VFH/vfh.c  ****   for (int i = 0; i < N_SENSORS; ++i) {
 346              		.loc 1 79 0
 347 004e 0023     		movs	r3, #0
 348 0050 FB67     		str	r3, [r7, #124]
 349 0052 19E0     		b	.L19
 350              	.L20:
  80:..\VFH/vfh.c  ****     cell_distance[i] = sensors->distance[i] / map->resolution;
 351              		.loc 1 80 0 discriminator 3
 352 0054 BA68     		ldr	r2, [r7, #8]
 353 0056 FB6F     		ldr	r3, [r7, #124]
 354 0058 0433     		adds	r3, r3, #4
 355 005a 9B00     		lsls	r3, r3, #2
 356 005c 1344     		add	r3, r3, r2
 357 005e 5A68     		ldr	r2, [r3, #4]
 358 0060 FB68     		ldr	r3, [r7, #12]
 359 0062 9B68     		ldr	r3, [r3, #8]
 360 0064 92FBF3F3 		sdiv	r3, r2, r3
 361 0068 1846     		mov	r0, r3
 362 006a FFF7FEFF 		bl	__aeabi_i2d
 363 006e 0346     		mov	r3, r0
 364 0070 0C46     		mov	r4, r1
 365 0072 FA6F     		ldr	r2, [r7, #124]
 366 0074 D200     		lsls	r2, r2, #3
 367 0076 07F18001 		add	r1, r7, #128
 368 007a 0A44     		add	r2, r2, r1
 369 007c 703A     		subs	r2, r2, #112
 370 007e C2E90034 		strd	r3, [r2]
  79:..\VFH/vfh.c  ****     cell_distance[i] = sensors->distance[i] / map->resolution;
 371              		.loc 1 79 0 discriminator 3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 9


 372 0082 FB6F     		ldr	r3, [r7, #124]
 373 0084 0133     		adds	r3, r3, #1
 374 0086 FB67     		str	r3, [r7, #124]
 375              	.L19:
  79:..\VFH/vfh.c  ****     cell_distance[i] = sensors->distance[i] / map->resolution;
 376              		.loc 1 79 0 is_stmt 0 discriminator 1
 377 0088 FB6F     		ldr	r3, [r7, #124]
 378 008a 042B     		cmp	r3, #4
 379 008c E2DD     		ble	.L20
 380              	.LBE4:
 381              	.LBB5:
  81:..\VFH/vfh.c  ****   }
  82:..\VFH/vfh.c  **** 
  83:..\VFH/vfh.c  ****   // Determine cell location of obstacles
  84:..\VFH/vfh.c  ****   double theta; 
  85:..\VFH/vfh.c  ****   double sensor_radians;
  86:..\VFH/vfh.c  **** 
  87:..\VFH/vfh.c  ****   for (int i = 0; i < N_SENSORS; ++i){
 382              		.loc 1 87 0 is_stmt 1
 383 008e 0023     		movs	r3, #0
 384 0090 FB66     		str	r3, [r7, #108]
 385 0092 45E1     		b	.L21
 386              	.L32:
 387              	.LBB6:
  88:..\VFH/vfh.c  ****     // Convert sensor angle into radians
  89:..\VFH/vfh.c  ****     sensor_radians = M_PI * sensors->direction[i] / 180;
 388              		.loc 1 89 0
 389 0094 BB68     		ldr	r3, [r7, #8]
 390 0096 FA6E     		ldr	r2, [r7, #108]
 391 0098 53F82230 		ldr	r3, [r3, r2, lsl #2]
 392 009c 1846     		mov	r0, r3
 393 009e FFF7FEFF 		bl	__aeabi_i2d
 394 00a2 A5A3     		adr	r3, .L42
 395 00a4 D3E90023 		ldrd	r2, [r3]
 396 00a8 FFF7FEFF 		bl	__aeabi_dmul
 397 00ac 0346     		mov	r3, r0
 398 00ae 0C46     		mov	r4, r1
 399 00b0 1846     		mov	r0, r3
 400 00b2 2146     		mov	r1, r4
 401 00b4 4FF00002 		mov	r2, #0
 402 00b8 A34B     		ldr	r3, .L42+16
 403 00ba FFF7FEFF 		bl	__aeabi_ddiv
 404 00be 0346     		mov	r3, r0
 405 00c0 0C46     		mov	r4, r1
 406 00c2 C7E91234 		strd	r3, [r7, #72]
  90:..\VFH/vfh.c  ****     if (yaw + sensor_radians < 0) {
 407              		.loc 1 90 0
 408 00c6 D7E91223 		ldrd	r2, [r7, #72]
 409 00ca D7E91401 		ldrd	r0, [r7, #80]
 410 00ce FFF7FEFF 		bl	__aeabi_dadd
 411 00d2 0346     		mov	r3, r0
 412 00d4 0C46     		mov	r4, r1
 413 00d6 1846     		mov	r0, r3
 414 00d8 2146     		mov	r1, r4
 415 00da 4FF00002 		mov	r2, #0
 416 00de 4FF00003 		mov	r3, #0
 417 00e2 FFF7FEFF 		bl	__aeabi_dcmplt
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 10


 418 00e6 0346     		mov	r3, r0
 419 00e8 002B     		cmp	r3, #0
 420 00ea 13D0     		beq	.L40
  91:..\VFH/vfh.c  ****       theta = yaw + sensor_radians + M_TWOPI;
 421              		.loc 1 91 0
 422 00ec D7E91223 		ldrd	r2, [r7, #72]
 423 00f0 D7E91401 		ldrd	r0, [r7, #80]
 424 00f4 FFF7FEFF 		bl	__aeabi_dadd
 425 00f8 0346     		mov	r3, r0
 426 00fa 0C46     		mov	r4, r1
 427 00fc 1846     		mov	r0, r3
 428 00fe 2146     		mov	r1, r4
 429 0100 8FA3     		adr	r3, .L42+8
 430 0102 D3E90023 		ldrd	r2, [r3]
 431 0106 FFF7FEFF 		bl	__aeabi_dadd
 432 010a 0346     		mov	r3, r0
 433 010c 0C46     		mov	r4, r1
 434 010e C7E91C34 		strd	r3, [r7, #112]
 435 0112 2FE0     		b	.L24
 436              	.L40:
  92:..\VFH/vfh.c  ****     } else if (yaw + sensor_radians >= M_TWOPI) {
 437              		.loc 1 92 0
 438 0114 D7E91223 		ldrd	r2, [r7, #72]
 439 0118 D7E91401 		ldrd	r0, [r7, #80]
 440 011c FFF7FEFF 		bl	__aeabi_dadd
 441 0120 0346     		mov	r3, r0
 442 0122 0C46     		mov	r4, r1
 443 0124 1846     		mov	r0, r3
 444 0126 2146     		mov	r1, r4
 445 0128 85A3     		adr	r3, .L42+8
 446 012a D3E90023 		ldrd	r2, [r3]
 447 012e FFF7FEFF 		bl	__aeabi_dcmpge
 448 0132 0346     		mov	r3, r0
 449 0134 002B     		cmp	r3, #0
 450 0136 13D0     		beq	.L41
  93:..\VFH/vfh.c  ****       theta = yaw + sensor_radians - M_TWOPI;
 451              		.loc 1 93 0
 452 0138 D7E91223 		ldrd	r2, [r7, #72]
 453 013c D7E91401 		ldrd	r0, [r7, #80]
 454 0140 FFF7FEFF 		bl	__aeabi_dadd
 455 0144 0346     		mov	r3, r0
 456 0146 0C46     		mov	r4, r1
 457 0148 1846     		mov	r0, r3
 458 014a 2146     		mov	r1, r4
 459 014c 7CA3     		adr	r3, .L42+8
 460 014e D3E90023 		ldrd	r2, [r3]
 461 0152 FFF7FEFF 		bl	__aeabi_dsub
 462 0156 0346     		mov	r3, r0
 463 0158 0C46     		mov	r4, r1
 464 015a C7E91C34 		strd	r3, [r7, #112]
 465 015e 09E0     		b	.L24
 466              	.L41:
  94:..\VFH/vfh.c  ****     } else {
  95:..\VFH/vfh.c  ****       theta = yaw + sensor_radians;
 467              		.loc 1 95 0
 468 0160 D7E91223 		ldrd	r2, [r7, #72]
 469 0164 D7E91401 		ldrd	r0, [r7, #80]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 11


 470 0168 FFF7FEFF 		bl	__aeabi_dadd
 471 016c 0346     		mov	r3, r0
 472 016e 0C46     		mov	r4, r1
 473 0170 C7E91C34 		strd	r3, [r7, #112]
 474              	.L24:
  96:..\VFH/vfh.c  ****     }
  97:..\VFH/vfh.c  ****     
  98:..\VFH/vfh.c  ****     double new_x = (pos_x/map->resolution - 1) + floor(cell_distance[i] * cos(theta));
 475              		.loc 1 98 0
 476 0174 FB68     		ldr	r3, [r7, #12]
 477 0176 9B68     		ldr	r3, [r3, #8]
 478 0178 1846     		mov	r0, r3
 479 017a FFF7FEFF 		bl	__aeabi_i2d
 480 017e 0346     		mov	r3, r0
 481 0180 0C46     		mov	r4, r1
 482 0182 1A46     		mov	r2, r3
 483 0184 2346     		mov	r3, r4
 484 0186 D7E91801 		ldrd	r0, [r7, #96]
 485 018a FFF7FEFF 		bl	__aeabi_ddiv
 486 018e 0346     		mov	r3, r0
 487 0190 0C46     		mov	r4, r1
 488 0192 1846     		mov	r0, r3
 489 0194 2146     		mov	r1, r4
 490 0196 4FF00002 		mov	r2, #0
 491 019a 6C4B     		ldr	r3, .L42+20
 492 019c FFF7FEFF 		bl	__aeabi_dsub
 493 01a0 0346     		mov	r3, r0
 494 01a2 0C46     		mov	r4, r1
 495 01a4 9846     		mov	r8, r3
 496 01a6 A146     		mov	r9, r4
 497 01a8 FB6E     		ldr	r3, [r7, #108]
 498 01aa DB00     		lsls	r3, r3, #3
 499 01ac 07F18002 		add	r2, r7, #128
 500 01b0 1344     		add	r3, r3, r2
 501 01b2 703B     		subs	r3, r3, #112
 502 01b4 D3E90045 		ldrd	r4, [r3]
 503 01b8 D7E91C01 		ldrd	r0, [r7, #112]
 504 01bc FFF7FEFF 		bl	cos
 505 01c0 0246     		mov	r2, r0
 506 01c2 0B46     		mov	r3, r1
 507 01c4 2046     		mov	r0, r4
 508 01c6 2946     		mov	r1, r5
 509 01c8 FFF7FEFF 		bl	__aeabi_dmul
 510 01cc 0346     		mov	r3, r0
 511 01ce 0C46     		mov	r4, r1
 512 01d0 1846     		mov	r0, r3
 513 01d2 2146     		mov	r1, r4
 514 01d4 FFF7FEFF 		bl	floor
 515 01d8 0346     		mov	r3, r0
 516 01da 0C46     		mov	r4, r1
 517 01dc 1A46     		mov	r2, r3
 518 01de 2346     		mov	r3, r4
 519 01e0 4046     		mov	r0, r8
 520 01e2 4946     		mov	r1, r9
 521 01e4 FFF7FEFF 		bl	__aeabi_dadd
 522 01e8 0346     		mov	r3, r0
 523 01ea 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 12


 524 01ec C7E91034 		strd	r3, [r7, #64]
  99:..\VFH/vfh.c  ****     double new_y = (pos_y/map->resolution - 1) + floor(cell_distance[i] * sin(theta));
 525              		.loc 1 99 0
 526 01f0 FB68     		ldr	r3, [r7, #12]
 527 01f2 9B68     		ldr	r3, [r3, #8]
 528 01f4 1846     		mov	r0, r3
 529 01f6 FFF7FEFF 		bl	__aeabi_i2d
 530 01fa 0346     		mov	r3, r0
 531 01fc 0C46     		mov	r4, r1
 532 01fe 1A46     		mov	r2, r3
 533 0200 2346     		mov	r3, r4
 534 0202 D7E91601 		ldrd	r0, [r7, #88]
 535 0206 FFF7FEFF 		bl	__aeabi_ddiv
 536 020a 0346     		mov	r3, r0
 537 020c 0C46     		mov	r4, r1
 538 020e 1846     		mov	r0, r3
 539 0210 2146     		mov	r1, r4
 540 0212 4FF00002 		mov	r2, #0
 541 0216 4D4B     		ldr	r3, .L42+20
 542 0218 FFF7FEFF 		bl	__aeabi_dsub
 543 021c 0346     		mov	r3, r0
 544 021e 0C46     		mov	r4, r1
 545 0220 9846     		mov	r8, r3
 546 0222 A146     		mov	r9, r4
 547 0224 FB6E     		ldr	r3, [r7, #108]
 548 0226 DB00     		lsls	r3, r3, #3
 549 0228 07F18002 		add	r2, r7, #128
 550 022c 1344     		add	r3, r3, r2
 551 022e 703B     		subs	r3, r3, #112
 552 0230 D3E90045 		ldrd	r4, [r3]
 553 0234 D7E91C01 		ldrd	r0, [r7, #112]
 554 0238 FFF7FEFF 		bl	sin
 555 023c 0246     		mov	r2, r0
 556 023e 0B46     		mov	r3, r1
 557 0240 2046     		mov	r0, r4
 558 0242 2946     		mov	r1, r5
 559 0244 FFF7FEFF 		bl	__aeabi_dmul
 560 0248 0346     		mov	r3, r0
 561 024a 0C46     		mov	r4, r1
 562 024c 1846     		mov	r0, r3
 563 024e 2146     		mov	r1, r4
 564 0250 FFF7FEFF 		bl	floor
 565 0254 0346     		mov	r3, r0
 566 0256 0C46     		mov	r4, r1
 567 0258 1A46     		mov	r2, r3
 568 025a 2346     		mov	r3, r4
 569 025c 4046     		mov	r0, r8
 570 025e 4946     		mov	r1, r9
 571 0260 FFF7FEFF 		bl	__aeabi_dadd
 572 0264 0346     		mov	r3, r0
 573 0266 0C46     		mov	r4, r1
 574 0268 C7E90E34 		strd	r3, [r7, #56]
 100:..\VFH/vfh.c  ****     
 101:..\VFH/vfh.c  ****     //char out[60];
 102:..\VFH/vfh.c  ****     //sprintf(out, "new x: %lf, new y: %lf\n\n", new_x, new_y);
 103:..\VFH/vfh.c  ****     //UART_PutString(out);
 104:..\VFH/vfh.c  ****     
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 13


 105:..\VFH/vfh.c  ****     // Check if point is within grid to avoid overflow
 106:..\VFH/vfh.c  ****     if (new_x < map->width && new_y < map->height && new_x >= 0 && new_y >= 0) {
 575              		.loc 1 106 0
 576 026c FB68     		ldr	r3, [r7, #12]
 577 026e 1B68     		ldr	r3, [r3]
 578 0270 1846     		mov	r0, r3
 579 0272 FFF7FEFF 		bl	__aeabi_i2d
 580 0276 D7E91023 		ldrd	r2, [r7, #64]
 581 027a FFF7FEFF 		bl	__aeabi_dcmpgt
 582 027e 0346     		mov	r3, r0
 583 0280 002B     		cmp	r3, #0
 584 0282 4AD0     		beq	.L27
 585              		.loc 1 106 0 is_stmt 0 discriminator 1
 586 0284 FB68     		ldr	r3, [r7, #12]
 587 0286 5B68     		ldr	r3, [r3, #4]
 588 0288 1846     		mov	r0, r3
 589 028a FFF7FEFF 		bl	__aeabi_i2d
 590 028e D7E90E23 		ldrd	r2, [r7, #56]
 591 0292 FFF7FEFF 		bl	__aeabi_dcmpgt
 592 0296 0346     		mov	r3, r0
 593 0298 002B     		cmp	r3, #0
 594 029a 3ED0     		beq	.L27
 595              		.loc 1 106 0 discriminator 2
 596 029c 4FF00002 		mov	r2, #0
 597 02a0 4FF00003 		mov	r3, #0
 598 02a4 D7E91001 		ldrd	r0, [r7, #64]
 599 02a8 FFF7FEFF 		bl	__aeabi_dcmpge
 600 02ac 0346     		mov	r3, r0
 601 02ae 002B     		cmp	r3, #0
 602 02b0 33D0     		beq	.L27
 603              		.loc 1 106 0 discriminator 3
 604 02b2 4FF00002 		mov	r2, #0
 605 02b6 4FF00003 		mov	r3, #0
 606 02ba D7E90E01 		ldrd	r0, [r7, #56]
 607 02be FFF7FEFF 		bl	__aeabi_dcmpge
 608 02c2 0346     		mov	r3, r0
 609 02c4 002B     		cmp	r3, #0
 610 02c6 28D0     		beq	.L27
 107:..\VFH/vfh.c  ****       map->cells[(int) new_x * map->width + (int) new_y] += 1;
 611              		.loc 1 107 0 is_stmt 1
 612 02c8 FB68     		ldr	r3, [r7, #12]
 613 02ca DC68     		ldr	r4, [r3, #12]
 614 02cc D7E91001 		ldrd	r0, [r7, #64]
 615 02d0 FFF7FEFF 		bl	__aeabi_d2iz
 616 02d4 0246     		mov	r2, r0
 617 02d6 FB68     		ldr	r3, [r7, #12]
 618 02d8 1B68     		ldr	r3, [r3]
 619 02da 03FB02F5 		mul	r5, r3, r2
 620 02de D7E90E01 		ldrd	r0, [r7, #56]
 621 02e2 FFF7FEFF 		bl	__aeabi_d2iz
 622 02e6 0346     		mov	r3, r0
 623 02e8 2B44     		add	r3, r3, r5
 624 02ea 9B00     		lsls	r3, r3, #2
 625 02ec 1C44     		add	r4, r4, r3
 626 02ee FB68     		ldr	r3, [r7, #12]
 627 02f0 DD68     		ldr	r5, [r3, #12]
 628 02f2 D7E91001 		ldrd	r0, [r7, #64]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 14


 629 02f6 FFF7FEFF 		bl	__aeabi_d2iz
 630 02fa 0246     		mov	r2, r0
 631 02fc FB68     		ldr	r3, [r7, #12]
 632 02fe 1B68     		ldr	r3, [r3]
 633 0300 03FB02F6 		mul	r6, r3, r2
 634 0304 D7E90E01 		ldrd	r0, [r7, #56]
 635 0308 FFF7FEFF 		bl	__aeabi_d2iz
 636 030c 0346     		mov	r3, r0
 637 030e 3344     		add	r3, r3, r6
 638 0310 9B00     		lsls	r3, r3, #2
 639 0312 2B44     		add	r3, r3, r5
 640 0314 1B68     		ldr	r3, [r3]
 641 0316 0133     		adds	r3, r3, #1
 642 0318 2360     		str	r3, [r4]
 643              	.L27:
 644              	.LBE6:
  87:..\VFH/vfh.c  ****     // Convert sensor angle into radians
 645              		.loc 1 87 0 discriminator 2
 646 031a FB6E     		ldr	r3, [r7, #108]
 647 031c 0133     		adds	r3, r3, #1
 648 031e FB66     		str	r3, [r7, #108]
 649              	.L21:
  87:..\VFH/vfh.c  ****     // Convert sensor angle into radians
 650              		.loc 1 87 0 is_stmt 0 discriminator 1
 651 0320 FB6E     		ldr	r3, [r7, #108]
 652 0322 042B     		cmp	r3, #4
 653 0324 7FF7B6AE 		ble	.L32
 654              	.LBE5:
 108:..\VFH/vfh.c  ****     } 
 109:..\VFH/vfh.c  ****   }
 110:..\VFH/vfh.c  **** 
 111:..\VFH/vfh.c  ****   return 1;
 655              		.loc 1 111 0 is_stmt 1
 656 0328 0123     		movs	r3, #1
 657              	.L33:
 112:..\VFH/vfh.c  **** }
 658              		.loc 1 112 0 discriminator 1
 659 032a 1846     		mov	r0, r3
 660 032c 8437     		adds	r7, r7, #132
 661              		.cfi_def_cfa_offset 28
 662 032e BD46     		mov	sp, r7
 663              		.cfi_def_cfa_register 13
 664              		@ sp needed
 665 0330 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 666              	.L43:
 667 0334 AFF30080 		.align	3
 668              	.L42:
 669 0338 182D4454 		.word	1413754136
 670 033c FB210940 		.word	1074340347
 671 0340 182D4454 		.word	1413754136
 672 0344 FB211940 		.word	1075388923
 673 0348 00806640 		.word	1080459264
 674 034c 0000F03F 		.word	1072693248
 675              		.cfi_endproc
 676              	.LFE3:
 677              		.size	grid_update, .-grid_update
 678              		.section	.text.active_window,"ax",%progbits
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 15


 679              		.align	2
 680              		.global	active_window
 681              		.thumb
 682              		.thumb_func
 683              		.type	active_window, %function
 684              	active_window:
 685              	.LFB4:
 113:..\VFH/vfh.c  **** 
 114:..\VFH/vfh.c  **** void active_window(grid * map, grid * active, Robot * robot) {
 686              		.loc 1 114 0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 40
 689              		@ frame_needed = 1, uses_anonymous_args = 0
 690 0000 90B5     		push	{r4, r7, lr}
 691              		.cfi_def_cfa_offset 12
 692              		.cfi_offset 4, -12
 693              		.cfi_offset 7, -8
 694              		.cfi_offset 14, -4
 695 0002 8BB0     		sub	sp, sp, #44
 696              		.cfi_def_cfa_offset 56
 697 0004 00AF     		add	r7, sp, #0
 698              		.cfi_def_cfa_register 7
 699 0006 F860     		str	r0, [r7, #12]
 700 0008 B960     		str	r1, [r7, #8]
 701 000a 7A60     		str	r2, [r7, #4]
 115:..\VFH/vfh.c  ****   /*
 116:..\VFH/vfh.c  ****   * Creates an active window surrounding robot.
 117:..\VFH/vfh.c  ****   */
 118:..\VFH/vfh.c  **** 
 119:..\VFH/vfh.c  ****   // Robot variables
 120:..\VFH/vfh.c  ****   int x = robot->x;
 702              		.loc 1 120 0
 703 000c 7B68     		ldr	r3, [r7, #4]
 704 000e 03F11004 		add	r4, r3, #16
 705 0012 D4E90034 		ldrd	r3, [r4]
 706 0016 1846     		mov	r0, r3
 707 0018 2146     		mov	r1, r4
 708 001a FFF7FEFF 		bl	__aeabi_d2iz
 709 001e 0346     		mov	r3, r0
 710 0020 FB61     		str	r3, [r7, #28]
 121:..\VFH/vfh.c  ****   int y = robot->y;
 711              		.loc 1 121 0
 712 0022 7B68     		ldr	r3, [r7, #4]
 713 0024 03F11804 		add	r4, r3, #24
 714 0028 D4E90034 		ldrd	r3, [r4]
 715 002c 1846     		mov	r0, r3
 716 002e 2146     		mov	r1, r4
 717 0030 FFF7FEFF 		bl	__aeabi_d2iz
 718 0034 0346     		mov	r3, r0
 719 0036 BB61     		str	r3, [r7, #24]
 720              	.LBB7:
 122:..\VFH/vfh.c  **** 
 123:..\VFH/vfh.c  ****   // Create active window based on generated map
 124:..\VFH/vfh.c  ****   for (int i = 0; i < active->width; ++i) {
 721              		.loc 1 124 0
 722 0038 0023     		movs	r3, #0
 723 003a 7B62     		str	r3, [r7, #36]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 16


 724 003c 53E0     		b	.L45
 725              	.L49:
 726              	.LBB8:
 125:..\VFH/vfh.c  ****       for (int j = 0; j < active->height; ++j) {
 727              		.loc 1 125 0
 728 003e 0023     		movs	r3, #0
 729 0040 3B62     		str	r3, [r7, #32]
 730 0042 48E0     		b	.L46
 731              	.L48:
 732              	.LBB9:
 126:..\VFH/vfh.c  **** 
 127:..\VFH/vfh.c  ****         /* x and y are the center coordinates of the body with sensors. */
 128:..\VFH/vfh.c  ****         int grid_i = i + x/map->resolution - (active->width - 1) / 2;
 733              		.loc 1 128 0
 734 0044 FB68     		ldr	r3, [r7, #12]
 735 0046 9B68     		ldr	r3, [r3, #8]
 736 0048 FA69     		ldr	r2, [r7, #28]
 737 004a 92FBF3F2 		sdiv	r2, r2, r3
 738 004e 7B6A     		ldr	r3, [r7, #36]
 739 0050 1A44     		add	r2, r2, r3
 740 0052 BB68     		ldr	r3, [r7, #8]
 741 0054 1B68     		ldr	r3, [r3]
 742 0056 013B     		subs	r3, r3, #1
 743 0058 D90F     		lsrs	r1, r3, #31
 744 005a 0B44     		add	r3, r3, r1
 745 005c 5B10     		asrs	r3, r3, #1
 746 005e D31A     		subs	r3, r2, r3
 747 0060 7B61     		str	r3, [r7, #20]
 129:..\VFH/vfh.c  ****         int grid_j = j + y/map->resolution - (active->height - 1) / 2;
 748              		.loc 1 129 0
 749 0062 FB68     		ldr	r3, [r7, #12]
 750 0064 9B68     		ldr	r3, [r3, #8]
 751 0066 BA69     		ldr	r2, [r7, #24]
 752 0068 92FBF3F2 		sdiv	r2, r2, r3
 753 006c 3B6A     		ldr	r3, [r7, #32]
 754 006e 1A44     		add	r2, r2, r3
 755 0070 BB68     		ldr	r3, [r7, #8]
 756 0072 5B68     		ldr	r3, [r3, #4]
 757 0074 013B     		subs	r3, r3, #1
 758 0076 D90F     		lsrs	r1, r3, #31
 759 0078 0B44     		add	r3, r3, r1
 760 007a 5B10     		asrs	r3, r3, #1
 761 007c D31A     		subs	r3, r2, r3
 762 007e 3B61     		str	r3, [r7, #16]
 130:..\VFH/vfh.c  **** 
 131:..\VFH/vfh.c  ****         /* Copy the information from the grid to the moving window. */
 132:..\VFH/vfh.c  ****         if (grid_i < map->width && grid_j < map->height && grid_i >= 0 && grid_j >= 0) {
 763              		.loc 1 132 0
 764 0080 FB68     		ldr	r3, [r7, #12]
 765 0082 1A68     		ldr	r2, [r3]
 766 0084 7B69     		ldr	r3, [r7, #20]
 767 0086 9A42     		cmp	r2, r3
 768 0088 22DD     		ble	.L47
 769              		.loc 1 132 0 is_stmt 0 discriminator 1
 770 008a FB68     		ldr	r3, [r7, #12]
 771 008c 5A68     		ldr	r2, [r3, #4]
 772 008e 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 17


 773 0090 9A42     		cmp	r2, r3
 774 0092 1DDD     		ble	.L47
 775              		.loc 1 132 0 discriminator 2
 776 0094 7B69     		ldr	r3, [r7, #20]
 777 0096 002B     		cmp	r3, #0
 778 0098 1ADB     		blt	.L47
 779              		.loc 1 132 0 discriminator 3
 780 009a 3B69     		ldr	r3, [r7, #16]
 781 009c 002B     		cmp	r3, #0
 782 009e 17DB     		blt	.L47
 133:..\VFH/vfh.c  ****           active->cells[i * active->width + j] = map->cells[grid_i * map->width + grid_j];
 783              		.loc 1 133 0 is_stmt 1
 784 00a0 BB68     		ldr	r3, [r7, #8]
 785 00a2 DA68     		ldr	r2, [r3, #12]
 786 00a4 BB68     		ldr	r3, [r7, #8]
 787 00a6 1B68     		ldr	r3, [r3]
 788 00a8 796A     		ldr	r1, [r7, #36]
 789 00aa 01FB03F1 		mul	r1, r1, r3
 790 00ae 3B6A     		ldr	r3, [r7, #32]
 791 00b0 0B44     		add	r3, r3, r1
 792 00b2 9B00     		lsls	r3, r3, #2
 793 00b4 1344     		add	r3, r3, r2
 794 00b6 FA68     		ldr	r2, [r7, #12]
 795 00b8 D168     		ldr	r1, [r2, #12]
 796 00ba FA68     		ldr	r2, [r7, #12]
 797 00bc 1268     		ldr	r2, [r2]
 798 00be 7869     		ldr	r0, [r7, #20]
 799 00c0 00FB02F0 		mul	r0, r0, r2
 800 00c4 3A69     		ldr	r2, [r7, #16]
 801 00c6 0244     		add	r2, r2, r0
 802 00c8 9200     		lsls	r2, r2, #2
 803 00ca 0A44     		add	r2, r2, r1
 804 00cc 1268     		ldr	r2, [r2]
 805 00ce 1A60     		str	r2, [r3]
 806              	.L47:
 807              	.LBE9:
 125:..\VFH/vfh.c  **** 
 808              		.loc 1 125 0 discriminator 2
 809 00d0 3B6A     		ldr	r3, [r7, #32]
 810 00d2 0133     		adds	r3, r3, #1
 811 00d4 3B62     		str	r3, [r7, #32]
 812              	.L46:
 125:..\VFH/vfh.c  **** 
 813              		.loc 1 125 0 is_stmt 0 discriminator 1
 814 00d6 BB68     		ldr	r3, [r7, #8]
 815 00d8 5A68     		ldr	r2, [r3, #4]
 816 00da 3B6A     		ldr	r3, [r7, #32]
 817 00dc 9A42     		cmp	r2, r3
 818 00de B1DC     		bgt	.L48
 819              	.LBE8:
 124:..\VFH/vfh.c  ****       for (int j = 0; j < active->height; ++j) {
 820              		.loc 1 124 0 is_stmt 1 discriminator 2
 821 00e0 7B6A     		ldr	r3, [r7, #36]
 822 00e2 0133     		adds	r3, r3, #1
 823 00e4 7B62     		str	r3, [r7, #36]
 824              	.L45:
 124:..\VFH/vfh.c  ****       for (int j = 0; j < active->height; ++j) {
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 18


 825              		.loc 1 124 0 is_stmt 0 discriminator 1
 826 00e6 BB68     		ldr	r3, [r7, #8]
 827 00e8 1A68     		ldr	r2, [r3]
 828 00ea 7B6A     		ldr	r3, [r7, #36]
 829 00ec 9A42     		cmp	r2, r3
 830 00ee A6DC     		bgt	.L49
 831              	.LBE7:
 134:..\VFH/vfh.c  ****         }
 135:..\VFH/vfh.c  ****       }
 136:..\VFH/vfh.c  ****     }
 137:..\VFH/vfh.c  **** }
 832              		.loc 1 137 0 is_stmt 1
 833 00f0 00BF     		nop
 834 00f2 2C37     		adds	r7, r7, #44
 835              		.cfi_def_cfa_offset 12
 836 00f4 BD46     		mov	sp, r7
 837              		.cfi_def_cfa_register 13
 838              		@ sp needed
 839 00f6 90BD     		pop	{r4, r7, pc}
 840              		.cfi_endproc
 841              	.LFE4:
 842              		.size	active_window, .-active_window
 843              		.global	__aeabi_d2uiz
 844              		.section	.text.pod_create,"ax",%progbits
 845              		.align	2
 846              		.global	pod_create
 847              		.thumb
 848              		.thumb_func
 849              		.type	pod_create, %function
 850              	pod_create:
 851              	.LFB5:
 138:..\VFH/vfh.c  **** 
 139:..\VFH/vfh.c  **** /*=======================================================================*/
 140:..\VFH/vfh.c  **** /*                             END OF GRID                               */
 141:..\VFH/vfh.c  **** /*=======================================================================*/
 142:..\VFH/vfh.c  **** // Polar Histogram
 143:..\VFH/vfh.c  **** 
 144:..\VFH/vfh.c  **** POD * pod_create(double alpha) {
 852              		.loc 1 144 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 16
 855              		@ frame_needed = 1, uses_anonymous_args = 0
 856 0000 90B5     		push	{r4, r7, lr}
 857              		.cfi_def_cfa_offset 12
 858              		.cfi_offset 4, -12
 859              		.cfi_offset 7, -8
 860              		.cfi_offset 14, -4
 861 0002 85B0     		sub	sp, sp, #20
 862              		.cfi_def_cfa_offset 32
 863 0004 00AF     		add	r7, sp, #0
 864              		.cfi_def_cfa_register 7
 865 0006 C7E90001 		strd	r0, [r7]
 145:..\VFH/vfh.c  ****   POD * pod = malloc(sizeof(POD));  // Allocate memory for grid map
 866              		.loc 1 145 0
 867 000a 0820     		movs	r0, #8
 868 000c FFF7FEFF 		bl	malloc
 869 0010 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 19


 870 0012 BB60     		str	r3, [r7, #8]
 146:..\VFH/vfh.c  **** 
 147:..\VFH/vfh.c  ****   // Return NULL if not enough memory
 148:..\VFH/vfh.c  ****   if (pod == NULL) {
 871              		.loc 1 148 0
 872 0014 BB68     		ldr	r3, [r7, #8]
 873 0016 002B     		cmp	r3, #0
 874 0018 04D1     		bne	.L51
 149:..\VFH/vfh.c  ****     free(pod);
 875              		.loc 1 149 0
 876 001a B868     		ldr	r0, [r7, #8]
 877 001c FFF7FEFF 		bl	free
 150:..\VFH/vfh.c  ****     return NULL;
 878              		.loc 1 150 0
 879 0020 0023     		movs	r3, #0
 880 0022 52E0     		b	.L52
 881              	.L51:
 151:..\VFH/vfh.c  ****   }
 152:..\VFH/vfh.c  **** 
 153:..\VFH/vfh.c  ****   // Define variables
 154:..\VFH/vfh.c  ****   pod->nsectors = 360 / alpha;
 882              		.loc 1 154 0
 883 0024 D7E90023 		ldrd	r2, [r7]
 884 0028 4FF00000 		mov	r0, #0
 885 002c 2949     		ldr	r1, .L56
 886 002e FFF7FEFF 		bl	__aeabi_ddiv
 887 0032 0346     		mov	r3, r0
 888 0034 0C46     		mov	r4, r1
 889 0036 1846     		mov	r0, r3
 890 0038 2146     		mov	r1, r4
 891 003a FFF7FEFF 		bl	__aeabi_d2iz
 892 003e 0246     		mov	r2, r0
 893 0040 BB68     		ldr	r3, [r7, #8]
 894 0042 1A60     		str	r2, [r3]
 155:..\VFH/vfh.c  ****   pod->density = malloc((360 / alpha) * sizeof(double));
 895              		.loc 1 155 0
 896 0044 D7E90023 		ldrd	r2, [r7]
 897 0048 4FF00000 		mov	r0, #0
 898 004c 2149     		ldr	r1, .L56
 899 004e FFF7FEFF 		bl	__aeabi_ddiv
 900 0052 0346     		mov	r3, r0
 901 0054 0C46     		mov	r4, r1
 902 0056 1846     		mov	r0, r3
 903 0058 2146     		mov	r1, r4
 904 005a 4FF00002 		mov	r2, #0
 905 005e 1E4B     		ldr	r3, .L56+4
 906 0060 FFF7FEFF 		bl	__aeabi_dmul
 907 0064 0346     		mov	r3, r0
 908 0066 0C46     		mov	r4, r1
 909 0068 1846     		mov	r0, r3
 910 006a 2146     		mov	r1, r4
 911 006c FFF7FEFF 		bl	__aeabi_d2uiz
 912 0070 0346     		mov	r3, r0
 913 0072 1846     		mov	r0, r3
 914 0074 FFF7FEFF 		bl	malloc
 915 0078 0346     		mov	r3, r0
 916 007a 1A46     		mov	r2, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 20


 917 007c BB68     		ldr	r3, [r7, #8]
 918 007e 5A60     		str	r2, [r3, #4]
 156:..\VFH/vfh.c  **** 
 157:..\VFH/vfh.c  ****   // Return NULL if not enough memory
 158:..\VFH/vfh.c  ****   if (pod->density == NULL) {
 919              		.loc 1 158 0
 920 0080 BB68     		ldr	r3, [r7, #8]
 921 0082 5B68     		ldr	r3, [r3, #4]
 922 0084 002B     		cmp	r3, #0
 923 0086 09D1     		bne	.L53
 159:..\VFH/vfh.c  ****     free(pod);
 924              		.loc 1 159 0
 925 0088 B868     		ldr	r0, [r7, #8]
 926 008a FFF7FEFF 		bl	free
 160:..\VFH/vfh.c  ****     free(pod->density);
 927              		.loc 1 160 0
 928 008e BB68     		ldr	r3, [r7, #8]
 929 0090 5B68     		ldr	r3, [r3, #4]
 930 0092 1846     		mov	r0, r3
 931 0094 FFF7FEFF 		bl	free
 161:..\VFH/vfh.c  ****     return NULL;
 932              		.loc 1 161 0
 933 0098 0023     		movs	r3, #0
 934 009a 16E0     		b	.L52
 935              	.L53:
 936              	.LBB10:
 162:..\VFH/vfh.c  ****   }
 163:..\VFH/vfh.c  **** 
 164:..\VFH/vfh.c  ****   // Define all initial grid values to be 0 as there are no obstacles
 165:..\VFH/vfh.c  ****   for (int i = 0; i < pod->nsectors; ++i) {
 937              		.loc 1 165 0
 938 009c 0023     		movs	r3, #0
 939 009e FB60     		str	r3, [r7, #12]
 940 00a0 0DE0     		b	.L54
 941              	.L55:
 166:..\VFH/vfh.c  ****     pod->density[i] = 0;    // Map grid is defined as a 1D array
 942              		.loc 1 166 0 discriminator 3
 943 00a2 BB68     		ldr	r3, [r7, #8]
 944 00a4 5A68     		ldr	r2, [r3, #4]
 945 00a6 FB68     		ldr	r3, [r7, #12]
 946 00a8 DB00     		lsls	r3, r3, #3
 947 00aa 1A44     		add	r2, r2, r3
 948 00ac 4FF00003 		mov	r3, #0
 949 00b0 4FF00004 		mov	r4, #0
 950 00b4 C2E90034 		strd	r3, [r2]
 165:..\VFH/vfh.c  ****     pod->density[i] = 0;    // Map grid is defined as a 1D array
 951              		.loc 1 165 0 discriminator 3
 952 00b8 FB68     		ldr	r3, [r7, #12]
 953 00ba 0133     		adds	r3, r3, #1
 954 00bc FB60     		str	r3, [r7, #12]
 955              	.L54:
 165:..\VFH/vfh.c  ****     pod->density[i] = 0;    // Map grid is defined as a 1D array
 956              		.loc 1 165 0 is_stmt 0 discriminator 1
 957 00be BB68     		ldr	r3, [r7, #8]
 958 00c0 1A68     		ldr	r2, [r3]
 959 00c2 FB68     		ldr	r3, [r7, #12]
 960 00c4 9A42     		cmp	r2, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 21


 961 00c6 ECDC     		bgt	.L55
 962              	.LBE10:
 167:..\VFH/vfh.c  ****   }
 168:..\VFH/vfh.c  **** 
 169:..\VFH/vfh.c  ****   return pod;
 963              		.loc 1 169 0 is_stmt 1
 964 00c8 BB68     		ldr	r3, [r7, #8]
 965              	.L52:
 170:..\VFH/vfh.c  **** }
 966              		.loc 1 170 0
 967 00ca 1846     		mov	r0, r3
 968 00cc 1437     		adds	r7, r7, #20
 969              		.cfi_def_cfa_offset 12
 970 00ce BD46     		mov	sp, r7
 971              		.cfi_def_cfa_register 13
 972              		@ sp needed
 973 00d0 90BD     		pop	{r4, r7, pc}
 974              	.L57:
 975 00d2 00BF     		.align	2
 976              	.L56:
 977 00d4 00807640 		.word	1081507840
 978 00d8 00002040 		.word	1075838976
 979              		.cfi_endproc
 980              	.LFE5:
 981              		.size	pod_create, .-pod_create
 982              		.global	__aeabi_ui2d
 983              		.section	.text.smoothed_POD_histogram,"ax",%progbits
 984              		.align	2
 985              		.global	smoothed_POD_histogram
 986              		.thumb
 987              		.thumb_func
 988              		.type	smoothed_POD_histogram, %function
 989              	smoothed_POD_histogram:
 990              	.LFB6:
 171:..\VFH/vfh.c  **** void smoothed_POD_histogram(POD * smoothed_POD, grid *active, double alpha, double l, double a, dou
 991              		.loc 1 171 0
 992              		.cfi_startproc
 993              		@ args = 24, pretend = 0, frame = 88
 994              		@ frame_needed = 1, uses_anonymous_args = 0
 995 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 996              		.cfi_def_cfa_offset 28
 997              		.cfi_offset 4, -28
 998              		.cfi_offset 5, -24
 999              		.cfi_offset 6, -20
 1000              		.cfi_offset 7, -16
 1001              		.cfi_offset 8, -12
 1002              		.cfi_offset 9, -8
 1003              		.cfi_offset 14, -4
 1004 0004 97B0     		sub	sp, sp, #92
 1005              		.cfi_def_cfa_offset 120
 1006 0006 00AF     		add	r7, sp, #0
 1007              		.cfi_def_cfa_register 7
 1008 0008 F860     		str	r0, [r7, #12]
 1009 000a B960     		str	r1, [r7, #8]
 1010 000c C7E90023 		strd	r2, [r7]
 1011              		.loc 1 171 0
 1012 0010 6B46     		mov	r3, sp
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 22


 1013 0012 1E46     		mov	r6, r3
 172:..\VFH/vfh.c  ****   int sectors = smoothed_POD->nsectors;
 1014              		.loc 1 172 0
 1015 0014 FB68     		ldr	r3, [r7, #12]
 1016 0016 1B68     		ldr	r3, [r3]
 1017 0018 BB63     		str	r3, [r7, #56]
 173:..\VFH/vfh.c  ****   int width = active->width;
 1018              		.loc 1 173 0
 1019 001a BB68     		ldr	r3, [r7, #8]
 1020 001c 1B68     		ldr	r3, [r3]
 1021 001e 7B63     		str	r3, [r7, #52]
 174:..\VFH/vfh.c  ****   int height = active->height;
 1022              		.loc 1 174 0
 1023 0020 BB68     		ldr	r3, [r7, #8]
 1024 0022 5B68     		ldr	r3, [r3, #4]
 1025 0024 3B63     		str	r3, [r7, #48]
 175:..\VFH/vfh.c  ****   double POD_hist[sectors];
 1026              		.loc 1 175 0
 1027 0026 B96B     		ldr	r1, [r7, #56]
 1028 0028 4B1E     		subs	r3, r1, #1
 1029 002a FB62     		str	r3, [r7, #44]
 1030 002c 0B46     		mov	r3, r1
 1031 002e 1A46     		mov	r2, r3
 1032 0030 4FF00003 		mov	r3, #0
 1033 0034 4FEA8319 		lsl	r9, r3, #6
 1034 0038 49EA9269 		orr	r9, r9, r2, lsr #26
 1035 003c 4FEA8218 		lsl	r8, r2, #6
 1036 0040 0B46     		mov	r3, r1
 1037 0042 1A46     		mov	r2, r3
 1038 0044 4FF00003 		mov	r3, #0
 1039 0048 9D01     		lsls	r5, r3, #6
 1040 004a 45EA9265 		orr	r5, r5, r2, lsr #26
 1041 004e 9401     		lsls	r4, r2, #6
 1042 0050 0B46     		mov	r3, r1
 1043 0052 DB00     		lsls	r3, r3, #3
 1044 0054 0733     		adds	r3, r3, #7
 1045 0056 0733     		adds	r3, r3, #7
 1046 0058 DB08     		lsrs	r3, r3, #3
 1047 005a DB00     		lsls	r3, r3, #3
 1048 005c ADEB030D 		sub	sp, sp, r3
 1049 0060 6B46     		mov	r3, sp
 1050 0062 0733     		adds	r3, r3, #7
 1051 0064 DB08     		lsrs	r3, r3, #3
 1052 0066 DB00     		lsls	r3, r3, #3
 1053 0068 BB62     		str	r3, [r7, #40]
 1054              	.LBB11:
 176:..\VFH/vfh.c  **** 
 177:..\VFH/vfh.c  ****   // Create POD histogram
 178:..\VFH/vfh.c  ****   for (int i=0; i< sectors; i++) {
 1055              		.loc 1 178 0
 1056 006a 0023     		movs	r3, #0
 1057 006c 7B65     		str	r3, [r7, #84]
 1058 006e 0CE0     		b	.L59
 1059              	.L60:
 179:..\VFH/vfh.c  ****     POD_hist[i] = 0;
 1060              		.loc 1 179 0 discriminator 3
 1061 0070 BA6A     		ldr	r2, [r7, #40]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 23


 1062 0072 7B6D     		ldr	r3, [r7, #84]
 1063 0074 DB00     		lsls	r3, r3, #3
 1064 0076 1A44     		add	r2, r2, r3
 1065 0078 4FF00003 		mov	r3, #0
 1066 007c 4FF00004 		mov	r4, #0
 1067 0080 C2E90034 		strd	r3, [r2]
 178:..\VFH/vfh.c  ****     POD_hist[i] = 0;
 1068              		.loc 1 178 0 discriminator 3
 1069 0084 7B6D     		ldr	r3, [r7, #84]
 1070 0086 0133     		adds	r3, r3, #1
 1071 0088 7B65     		str	r3, [r7, #84]
 1072              	.L59:
 178:..\VFH/vfh.c  ****     POD_hist[i] = 0;
 1073              		.loc 1 178 0 is_stmt 0 discriminator 1
 1074 008a 7A6D     		ldr	r2, [r7, #84]
 1075 008c BB6B     		ldr	r3, [r7, #56]
 1076 008e 9A42     		cmp	r2, r3
 1077 0090 EEDB     		blt	.L60
 1078              	.LBE11:
 1079              	.LBB12:
 180:..\VFH/vfh.c  **** }
 181:..\VFH/vfh.c  **** 
 182:..\VFH/vfh.c  ****   for (int i=0; i < width; i++) {
 1080              		.loc 1 182 0 is_stmt 1
 1081 0092 0023     		movs	r3, #0
 1082 0094 3B65     		str	r3, [r7, #80]
 1083 0096 D4E0     		b	.L61
 1084              	.L64:
 1085              	.LBB13:
 183:..\VFH/vfh.c  ****     for (int j=0; j < height; j++) {
 1086              		.loc 1 183 0
 1087 0098 0023     		movs	r3, #0
 1088 009a FB64     		str	r3, [r7, #76]
 1089 009c C9E0     		b	.L62
 1090              	.L63:
 1091              	.LBB14:
 184:..\VFH/vfh.c  ****         /* Calculate the angular position (beta) of this cell. */
 185:..\VFH/vfh.c  ****         double beta = true_mod(180 * atan2((double)(j - height/2), (double)(i - width/2))/M_PI, 360
 1092              		.loc 1 185 0 discriminator 3
 1093 009e 3B6B     		ldr	r3, [r7, #48]
 1094 00a0 DA0F     		lsrs	r2, r3, #31
 1095 00a2 1344     		add	r3, r3, r2
 1096 00a4 5B10     		asrs	r3, r3, #1
 1097 00a6 1A46     		mov	r2, r3
 1098 00a8 FB6C     		ldr	r3, [r7, #76]
 1099 00aa 9B1A     		subs	r3, r3, r2
 1100 00ac 1846     		mov	r0, r3
 1101 00ae FFF7FEFF 		bl	__aeabi_i2d
 1102 00b2 0446     		mov	r4, r0
 1103 00b4 0D46     		mov	r5, r1
 1104 00b6 7B6B     		ldr	r3, [r7, #52]
 1105 00b8 DA0F     		lsrs	r2, r3, #31
 1106 00ba 1344     		add	r3, r3, r2
 1107 00bc 5B10     		asrs	r3, r3, #1
 1108 00be 1A46     		mov	r2, r3
 1109 00c0 3B6D     		ldr	r3, [r7, #80]
 1110 00c2 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 24


 1111 00c4 1846     		mov	r0, r3
 1112 00c6 FFF7FEFF 		bl	__aeabi_i2d
 1113 00ca 0246     		mov	r2, r0
 1114 00cc 0B46     		mov	r3, r1
 1115 00ce 2046     		mov	r0, r4
 1116 00d0 2946     		mov	r1, r5
 1117 00d2 FFF7FEFF 		bl	atan2
 1118 00d6 4FF00002 		mov	r2, #0
 1119 00da 8B4B     		ldr	r3, .L71+8
 1120 00dc FFF7FEFF 		bl	__aeabi_dmul
 1121 00e0 0346     		mov	r3, r0
 1122 00e2 0C46     		mov	r4, r1
 1123 00e4 1846     		mov	r0, r3
 1124 00e6 2146     		mov	r1, r4
 1125 00e8 85A3     		adr	r3, .L71
 1126 00ea D3E90023 		ldrd	r2, [r3]
 1127 00ee FFF7FEFF 		bl	__aeabi_ddiv
 1128 00f2 0346     		mov	r3, r0
 1129 00f4 0C46     		mov	r4, r1
 1130 00f6 1846     		mov	r0, r3
 1131 00f8 2146     		mov	r1, r4
 1132 00fa 4FF00002 		mov	r2, #0
 1133 00fe 834B     		ldr	r3, .L71+12
 1134 0100 FFF7FEFF 		bl	true_mod
 1135 0104 C7E90801 		strd	r0, [r7, #32]
 186:..\VFH/vfh.c  **** 
 187:..\VFH/vfh.c  ****       /* Calculate the obstacle density of this cell. */
 188:..\VFH/vfh.c  ****       double density = pow(active->cells[i * width + j], 2);
 1136              		.loc 1 188 0 discriminator 3
 1137 0108 BB68     		ldr	r3, [r7, #8]
 1138 010a DA68     		ldr	r2, [r3, #12]
 1139 010c 3B6D     		ldr	r3, [r7, #80]
 1140 010e 796B     		ldr	r1, [r7, #52]
 1141 0110 01FB03F1 		mul	r1, r1, r3
 1142 0114 FB6C     		ldr	r3, [r7, #76]
 1143 0116 0B44     		add	r3, r3, r1
 1144 0118 9B00     		lsls	r3, r3, #2
 1145 011a 1344     		add	r3, r3, r2
 1146 011c 1B68     		ldr	r3, [r3]
 1147 011e 1846     		mov	r0, r3
 1148 0120 FFF7FEFF 		bl	__aeabi_ui2d
 1149 0124 4FF00002 		mov	r2, #0
 1150 0128 4FF08043 		mov	r3, #1073741824
 1151 012c FFF7FEFF 		bl	pow
 1152 0130 C7E90601 		strd	r0, [r7, #24]
 189:..\VFH/vfh.c  ****       density *= a - b * sqrt(pow(i - width/2, 2) + pow(j - height/2, 2));
 1153              		.loc 1 189 0 discriminator 3
 1154 0134 7B6B     		ldr	r3, [r7, #52]
 1155 0136 DA0F     		lsrs	r2, r3, #31
 1156 0138 1344     		add	r3, r3, r2
 1157 013a 5B10     		asrs	r3, r3, #1
 1158 013c 1A46     		mov	r2, r3
 1159 013e 3B6D     		ldr	r3, [r7, #80]
 1160 0140 9B1A     		subs	r3, r3, r2
 1161 0142 1846     		mov	r0, r3
 1162 0144 FFF7FEFF 		bl	__aeabi_i2d
 1163 0148 4FF00002 		mov	r2, #0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 25


 1164 014c 4FF08043 		mov	r3, #1073741824
 1165 0150 FFF7FEFF 		bl	pow
 1166 0154 0446     		mov	r4, r0
 1167 0156 0D46     		mov	r5, r1
 1168 0158 3B6B     		ldr	r3, [r7, #48]
 1169 015a DA0F     		lsrs	r2, r3, #31
 1170 015c 1344     		add	r3, r3, r2
 1171 015e 5B10     		asrs	r3, r3, #1
 1172 0160 1A46     		mov	r2, r3
 1173 0162 FB6C     		ldr	r3, [r7, #76]
 1174 0164 9B1A     		subs	r3, r3, r2
 1175 0166 1846     		mov	r0, r3
 1176 0168 FFF7FEFF 		bl	__aeabi_i2d
 1177 016c 4FF00002 		mov	r2, #0
 1178 0170 4FF08043 		mov	r3, #1073741824
 1179 0174 FFF7FEFF 		bl	pow
 1180 0178 0246     		mov	r2, r0
 1181 017a 0B46     		mov	r3, r1
 1182 017c 2046     		mov	r0, r4
 1183 017e 2946     		mov	r1, r5
 1184 0180 FFF7FEFF 		bl	__aeabi_dadd
 1185 0184 0346     		mov	r3, r0
 1186 0186 0C46     		mov	r4, r1
 1187 0188 1846     		mov	r0, r3
 1188 018a 2146     		mov	r1, r4
 1189 018c FFF7FEFF 		bl	sqrt
 1190 0190 D7E92223 		ldrd	r2, [r7, #136]
 1191 0194 FFF7FEFF 		bl	__aeabi_dmul
 1192 0198 0346     		mov	r3, r0
 1193 019a 0C46     		mov	r4, r1
 1194 019c 1A46     		mov	r2, r3
 1195 019e 2346     		mov	r3, r4
 1196 01a0 D7E92001 		ldrd	r0, [r7, #128]
 1197 01a4 FFF7FEFF 		bl	__aeabi_dsub
 1198 01a8 0346     		mov	r3, r0
 1199 01aa 0C46     		mov	r4, r1
 1200 01ac 1A46     		mov	r2, r3
 1201 01ae 2346     		mov	r3, r4
 1202 01b0 D7E90601 		ldrd	r0, [r7, #24]
 1203 01b4 FFF7FEFF 		bl	__aeabi_dmul
 1204 01b8 0346     		mov	r3, r0
 1205 01ba 0C46     		mov	r4, r1
 1206 01bc C7E90634 		strd	r3, [r7, #24]
 190:..\VFH/vfh.c  **** 
 191:..\VFH/vfh.c  ****       /* Add density to respective point in the histogram. */
 192:..\VFH/vfh.c  ****       POD_hist[(int) floor(beta / alpha)] += density;
 1207              		.loc 1 192 0 discriminator 3
 1208 01c0 D7E90023 		ldrd	r2, [r7]
 1209 01c4 D7E90801 		ldrd	r0, [r7, #32]
 1210 01c8 FFF7FEFF 		bl	__aeabi_ddiv
 1211 01cc 0346     		mov	r3, r0
 1212 01ce 0C46     		mov	r4, r1
 1213 01d0 1846     		mov	r0, r3
 1214 01d2 2146     		mov	r1, r4
 1215 01d4 FFF7FEFF 		bl	floor
 1216 01d8 0346     		mov	r3, r0
 1217 01da 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 26


 1218 01dc 1846     		mov	r0, r3
 1219 01de 2146     		mov	r1, r4
 1220 01e0 FFF7FEFF 		bl	__aeabi_d2iz
 1221 01e4 0546     		mov	r5, r0
 1222 01e6 D7E90023 		ldrd	r2, [r7]
 1223 01ea D7E90801 		ldrd	r0, [r7, #32]
 1224 01ee FFF7FEFF 		bl	__aeabi_ddiv
 1225 01f2 0346     		mov	r3, r0
 1226 01f4 0C46     		mov	r4, r1
 1227 01f6 1846     		mov	r0, r3
 1228 01f8 2146     		mov	r1, r4
 1229 01fa FFF7FEFF 		bl	floor
 1230 01fe 0346     		mov	r3, r0
 1231 0200 0C46     		mov	r4, r1
 1232 0202 1846     		mov	r0, r3
 1233 0204 2146     		mov	r1, r4
 1234 0206 FFF7FEFF 		bl	__aeabi_d2iz
 1235 020a 0346     		mov	r3, r0
 1236 020c BA6A     		ldr	r2, [r7, #40]
 1237 020e DB00     		lsls	r3, r3, #3
 1238 0210 1344     		add	r3, r3, r2
 1239 0212 D3E90001 		ldrd	r0, [r3]
 1240 0216 D7E90623 		ldrd	r2, [r7, #24]
 1241 021a FFF7FEFF 		bl	__aeabi_dadd
 1242 021e 0346     		mov	r3, r0
 1243 0220 0C46     		mov	r4, r1
 1244 0222 B96A     		ldr	r1, [r7, #40]
 1245 0224 EA00     		lsls	r2, r5, #3
 1246 0226 0A44     		add	r2, r2, r1
 1247 0228 C2E90034 		strd	r3, [r2]
 1248              	.LBE14:
 183:..\VFH/vfh.c  ****         /* Calculate the angular position (beta) of this cell. */
 1249              		.loc 1 183 0 discriminator 3
 1250 022c FB6C     		ldr	r3, [r7, #76]
 1251 022e 0133     		adds	r3, r3, #1
 1252 0230 FB64     		str	r3, [r7, #76]
 1253              	.L62:
 183:..\VFH/vfh.c  ****         /* Calculate the angular position (beta) of this cell. */
 1254              		.loc 1 183 0 is_stmt 0 discriminator 1
 1255 0232 FA6C     		ldr	r2, [r7, #76]
 1256 0234 3B6B     		ldr	r3, [r7, #48]
 1257 0236 9A42     		cmp	r2, r3
 1258 0238 FFF631AF 		blt	.L63
 1259              	.LBE13:
 182:..\VFH/vfh.c  ****     for (int j=0; j < height; j++) {
 1260              		.loc 1 182 0 is_stmt 1 discriminator 2
 1261 023c 3B6D     		ldr	r3, [r7, #80]
 1262 023e 0133     		adds	r3, r3, #1
 1263 0240 3B65     		str	r3, [r7, #80]
 1264              	.L61:
 182:..\VFH/vfh.c  ****     for (int j=0; j < height; j++) {
 1265              		.loc 1 182 0 is_stmt 0 discriminator 1
 1266 0242 3A6D     		ldr	r2, [r7, #80]
 1267 0244 7B6B     		ldr	r3, [r7, #52]
 1268 0246 9A42     		cmp	r2, r3
 1269 0248 FFF626AF 		blt	.L64
 1270              	.LBE12:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 27


 1271              	.LBB15:
 193:..\VFH/vfh.c  ****     }
 194:..\VFH/vfh.c  ****     
 195:..\VFH/vfh.c  ****   }
 196:..\VFH/vfh.c  ****   
 197:..\VFH/vfh.c  ****   
 198:..\VFH/vfh.c  **** 
 199:..\VFH/vfh.c  ****   // Smoothing POD histogram
 200:..\VFH/vfh.c  ****   for (int i=0; i < sectors; i++) {
 1272              		.loc 1 200 0 is_stmt 1
 1273 024c 0023     		movs	r3, #0
 1274 024e BB64     		str	r3, [r7, #72]
 1275 0250 CEE0     		b	.L65
 1276              	.L70:
 1277              	.LBB16:
 201:..\VFH/vfh.c  ****     double sum_element = POD_hist[i] * l;
 1278              		.loc 1 201 0
 1279 0252 BA6A     		ldr	r2, [r7, #40]
 1280 0254 BB6C     		ldr	r3, [r7, #72]
 1281 0256 DB00     		lsls	r3, r3, #3
 1282 0258 1344     		add	r3, r3, r2
 1283 025a D3E90001 		ldrd	r0, [r3]
 1284 025e D7E91E23 		ldrd	r2, [r7, #120]
 1285 0262 FFF7FEFF 		bl	__aeabi_dmul
 1286 0266 0346     		mov	r3, r0
 1287 0268 0C46     		mov	r4, r1
 1288 026a C7E91034 		strd	r3, [r7, #64]
 1289              	.LBB17:
 202:..\VFH/vfh.c  **** 
 203:..\VFH/vfh.c  ****     for (int j=0; j < l; j++) {
 1290              		.loc 1 203 0
 1291 026e 0023     		movs	r3, #0
 1292 0270 FB63     		str	r3, [r7, #60]
 1293 0272 8BE0     		b	.L66
 1294              	.L69:
 204:..\VFH/vfh.c  ****         if (i - (j+1) < 0) {
 1295              		.loc 1 204 0
 1296 0274 FB6B     		ldr	r3, [r7, #60]
 1297 0276 0133     		adds	r3, r3, #1
 1298 0278 BA6C     		ldr	r2, [r7, #72]
 1299 027a D31A     		subs	r3, r2, r3
 1300 027c 002B     		cmp	r3, #0
 1301 027e 47DA     		bge	.L67
 205:..\VFH/vfh.c  ****             sum_element += (POD_hist[i-(j+1)+sectors] + POD_hist[(i+(j+1)) % sectors]) * (l - j);
 1302              		.loc 1 205 0
 1303 0280 FB6B     		ldr	r3, [r7, #60]
 1304 0282 0133     		adds	r3, r3, #1
 1305 0284 BA6C     		ldr	r2, [r7, #72]
 1306 0286 D21A     		subs	r2, r2, r3
 1307 0288 BB6B     		ldr	r3, [r7, #56]
 1308 028a 1344     		add	r3, r3, r2
 1309 028c BA6A     		ldr	r2, [r7, #40]
 1310 028e DB00     		lsls	r3, r3, #3
 1311 0290 1344     		add	r3, r3, r2
 1312 0292 D3E90001 		ldrd	r0, [r3]
 1313 0296 FB6B     		ldr	r3, [r7, #60]
 1314 0298 5A1C     		adds	r2, r3, #1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 28


 1315 029a BB6C     		ldr	r3, [r7, #72]
 1316 029c 1344     		add	r3, r3, r2
 1317 029e BA6B     		ldr	r2, [r7, #56]
 1318 02a0 93FBF2F2 		sdiv	r2, r3, r2
 1319 02a4 BC6B     		ldr	r4, [r7, #56]
 1320 02a6 04FB02F2 		mul	r2, r4, r2
 1321 02aa 9B1A     		subs	r3, r3, r2
 1322 02ac BA6A     		ldr	r2, [r7, #40]
 1323 02ae DB00     		lsls	r3, r3, #3
 1324 02b0 1344     		add	r3, r3, r2
 1325 02b2 18CB     		ldmia	r3, {r3-r4}
 1326 02b4 1A46     		mov	r2, r3
 1327 02b6 2346     		mov	r3, r4
 1328 02b8 FFF7FEFF 		bl	__aeabi_dadd
 1329 02bc 0346     		mov	r3, r0
 1330 02be 0C46     		mov	r4, r1
 1331 02c0 2546     		mov	r5, r4
 1332 02c2 1C46     		mov	r4, r3
 1333 02c4 F86B     		ldr	r0, [r7, #60]
 1334 02c6 FFF7FEFF 		bl	__aeabi_i2d
 1335 02ca 0246     		mov	r2, r0
 1336 02cc 0B46     		mov	r3, r1
 1337 02ce D7E91E01 		ldrd	r0, [r7, #120]
 1338 02d2 FFF7FEFF 		bl	__aeabi_dsub
 1339 02d6 0246     		mov	r2, r0
 1340 02d8 0B46     		mov	r3, r1
 1341 02da 2046     		mov	r0, r4
 1342 02dc 2946     		mov	r1, r5
 1343 02de FFF7FEFF 		bl	__aeabi_dmul
 1344 02e2 0346     		mov	r3, r0
 1345 02e4 0C46     		mov	r4, r1
 1346 02e6 1A46     		mov	r2, r3
 1347 02e8 2346     		mov	r3, r4
 1348 02ea D7E91001 		ldrd	r0, [r7, #64]
 1349 02ee FFF7FEFF 		bl	__aeabi_dadd
 1350 02f2 0346     		mov	r3, r0
 1351 02f4 0C46     		mov	r4, r1
 1352 02f6 C7E91034 		strd	r3, [r7, #64]
 1353 02fa 44E0     		b	.L68
 1354              	.L72:
 1355 02fc AFF30080 		.align	3
 1356              	.L71:
 1357 0300 182D4454 		.word	1413754136
 1358 0304 FB210940 		.word	1074340347
 1359 0308 00806640 		.word	1080459264
 1360 030c 00807640 		.word	1081507840
 1361              	.L67:
 206:..\VFH/vfh.c  ****         } else {
 207:..\VFH/vfh.c  ****             sum_element += (POD_hist[i-(j+1)] + POD_hist[(i+(j+1)) % sectors]) * (l - j);
 1362              		.loc 1 207 0
 1363 0310 FB6B     		ldr	r3, [r7, #60]
 1364 0312 0133     		adds	r3, r3, #1
 1365 0314 BA6C     		ldr	r2, [r7, #72]
 1366 0316 D31A     		subs	r3, r2, r3
 1367 0318 BA6A     		ldr	r2, [r7, #40]
 1368 031a DB00     		lsls	r3, r3, #3
 1369 031c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 29


 1370 031e D3E90001 		ldrd	r0, [r3]
 1371 0322 FB6B     		ldr	r3, [r7, #60]
 1372 0324 5A1C     		adds	r2, r3, #1
 1373 0326 BB6C     		ldr	r3, [r7, #72]
 1374 0328 1344     		add	r3, r3, r2
 1375 032a BA6B     		ldr	r2, [r7, #56]
 1376 032c 93FBF2F2 		sdiv	r2, r3, r2
 1377 0330 BC6B     		ldr	r4, [r7, #56]
 1378 0332 04FB02F2 		mul	r2, r4, r2
 1379 0336 9B1A     		subs	r3, r3, r2
 1380 0338 BA6A     		ldr	r2, [r7, #40]
 1381 033a DB00     		lsls	r3, r3, #3
 1382 033c 1344     		add	r3, r3, r2
 1383 033e 18CB     		ldmia	r3, {r3-r4}
 1384 0340 1A46     		mov	r2, r3
 1385 0342 2346     		mov	r3, r4
 1386 0344 FFF7FEFF 		bl	__aeabi_dadd
 1387 0348 0346     		mov	r3, r0
 1388 034a 0C46     		mov	r4, r1
 1389 034c 2546     		mov	r5, r4
 1390 034e 1C46     		mov	r4, r3
 1391 0350 F86B     		ldr	r0, [r7, #60]
 1392 0352 FFF7FEFF 		bl	__aeabi_i2d
 1393 0356 0246     		mov	r2, r0
 1394 0358 0B46     		mov	r3, r1
 1395 035a D7E91E01 		ldrd	r0, [r7, #120]
 1396 035e FFF7FEFF 		bl	__aeabi_dsub
 1397 0362 0246     		mov	r2, r0
 1398 0364 0B46     		mov	r3, r1
 1399 0366 2046     		mov	r0, r4
 1400 0368 2946     		mov	r1, r5
 1401 036a FFF7FEFF 		bl	__aeabi_dmul
 1402 036e 0346     		mov	r3, r0
 1403 0370 0C46     		mov	r4, r1
 1404 0372 1A46     		mov	r2, r3
 1405 0374 2346     		mov	r3, r4
 1406 0376 D7E91001 		ldrd	r0, [r7, #64]
 1407 037a FFF7FEFF 		bl	__aeabi_dadd
 1408 037e 0346     		mov	r3, r0
 1409 0380 0C46     		mov	r4, r1
 1410 0382 C7E91034 		strd	r3, [r7, #64]
 1411              	.L68:
 203:..\VFH/vfh.c  ****         if (i - (j+1) < 0) {
 1412              		.loc 1 203 0 discriminator 2
 1413 0386 FB6B     		ldr	r3, [r7, #60]
 1414 0388 0133     		adds	r3, r3, #1
 1415 038a FB63     		str	r3, [r7, #60]
 1416              	.L66:
 203:..\VFH/vfh.c  ****         if (i - (j+1) < 0) {
 1417              		.loc 1 203 0 is_stmt 0 discriminator 1
 1418 038c F86B     		ldr	r0, [r7, #60]
 1419 038e FFF7FEFF 		bl	__aeabi_i2d
 1420 0392 D7E91E23 		ldrd	r2, [r7, #120]
 1421 0396 FFF7FEFF 		bl	__aeabi_dcmplt
 1422 039a 0346     		mov	r3, r0
 1423 039c 002B     		cmp	r3, #0
 1424 039e 7FF469AF 		bne	.L69
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 30


 1425              	.LBE17:
 208:..\VFH/vfh.c  ****         }
 209:..\VFH/vfh.c  ****     }
 210:..\VFH/vfh.c  **** 
 211:..\VFH/vfh.c  ****     double smoothed_element = sum_element / ((2 * l) + 1);
 1426              		.loc 1 211 0 is_stmt 1 discriminator 2
 1427 03a2 D7E91E01 		ldrd	r0, [r7, #120]
 1428 03a6 0246     		mov	r2, r0
 1429 03a8 0B46     		mov	r3, r1
 1430 03aa FFF7FEFF 		bl	__aeabi_dadd
 1431 03ae 0346     		mov	r3, r0
 1432 03b0 0C46     		mov	r4, r1
 1433 03b2 1846     		mov	r0, r3
 1434 03b4 2146     		mov	r1, r4
 1435 03b6 4FF00002 		mov	r2, #0
 1436 03ba 134B     		ldr	r3, .L73
 1437 03bc FFF7FEFF 		bl	__aeabi_dadd
 1438 03c0 0346     		mov	r3, r0
 1439 03c2 0C46     		mov	r4, r1
 1440 03c4 1A46     		mov	r2, r3
 1441 03c6 2346     		mov	r3, r4
 1442 03c8 D7E91001 		ldrd	r0, [r7, #64]
 1443 03cc FFF7FEFF 		bl	__aeabi_ddiv
 1444 03d0 0346     		mov	r3, r0
 1445 03d2 0C46     		mov	r4, r1
 1446 03d4 C7E90434 		strd	r3, [r7, #16]
 212:..\VFH/vfh.c  ****     smoothed_POD->density[i] = smoothed_element;
 1447              		.loc 1 212 0 discriminator 2
 1448 03d8 FB68     		ldr	r3, [r7, #12]
 1449 03da 5A68     		ldr	r2, [r3, #4]
 1450 03dc BB6C     		ldr	r3, [r7, #72]
 1451 03de DB00     		lsls	r3, r3, #3
 1452 03e0 1A44     		add	r2, r2, r3
 1453 03e2 D7E90434 		ldrd	r3, [r7, #16]
 1454 03e6 C2E90034 		strd	r3, [r2]
 1455              	.LBE16:
 200:..\VFH/vfh.c  ****     double sum_element = POD_hist[i] * l;
 1456              		.loc 1 200 0 discriminator 2
 1457 03ea BB6C     		ldr	r3, [r7, #72]
 1458 03ec 0133     		adds	r3, r3, #1
 1459 03ee BB64     		str	r3, [r7, #72]
 1460              	.L65:
 200:..\VFH/vfh.c  ****     double sum_element = POD_hist[i] * l;
 1461              		.loc 1 200 0 is_stmt 0 discriminator 1
 1462 03f0 BA6C     		ldr	r2, [r7, #72]
 1463 03f2 BB6B     		ldr	r3, [r7, #56]
 1464 03f4 9A42     		cmp	r2, r3
 1465 03f6 FFF62CAF 		blt	.L70
 1466              	.LBE15:
 1467 03fa B546     		mov	sp, r6
 213:..\VFH/vfh.c  ****   }
 214:..\VFH/vfh.c  **** 
 215:..\VFH/vfh.c  **** }
 1468              		.loc 1 215 0 is_stmt 1
 1469 03fc 00BF     		nop
 1470 03fe 5C37     		adds	r7, r7, #92
 1471              		.cfi_def_cfa_offset 28
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 31


 1472 0400 BD46     		mov	sp, r7
 1473              		.cfi_def_cfa_register 13
 1474              		@ sp needed
 1475 0402 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1476              	.L74:
 1477 0406 00BF     		.align	2
 1478              	.L73:
 1479 0408 0000F03F 		.word	1072693248
 1480              		.cfi_endproc
 1481              	.LFE6:
 1482              		.size	smoothed_POD_histogram, .-smoothed_POD_histogram
 1483              		.global	__aeabi_dcmpeq
 1484              		.section	.text.calculate_avoidance_angle,"ax",%progbits
 1485              		.align	2
 1486              		.global	calculate_avoidance_angle
 1487              		.thumb
 1488              		.thumb_func
 1489              		.type	calculate_avoidance_angle, %function
 1490              	calculate_avoidance_angle:
 1491              	.LFB7:
 216:..\VFH/vfh.c  **** 
 217:..\VFH/vfh.c  **** 
 218:..\VFH/vfh.c  **** /*=======================================================================*/
 219:..\VFH/vfh.c  **** 
 220:..\VFH/vfh.c  **** 
 221:..\VFH/vfh.c  **** double calculate_avoidance_angle(POD *smoothed_POD, Robot * robot, int * candidate_lst, double alph
 1492              		.loc 1 221 0
 1493              		.cfi_startproc
 1494              		@ args = 12, pretend = 0, frame = 152
 1495              		@ frame_needed = 1, uses_anonymous_args = 0
 1496 0000 B0B5     		push	{r4, r5, r7, lr}
 1497              		.cfi_def_cfa_offset 16
 1498              		.cfi_offset 4, -16
 1499              		.cfi_offset 5, -12
 1500              		.cfi_offset 7, -8
 1501              		.cfi_offset 14, -4
 1502 0002 ACB0     		sub	sp, sp, #176
 1503              		.cfi_def_cfa_offset 192
 1504 0004 06AF     		add	r7, sp, #24
 1505              		.cfi_def_cfa 7, 168
 1506 0006 F860     		str	r0, [r7, #12]
 1507 0008 B960     		str	r1, [r7, #8]
 1508 000a 7A60     		str	r2, [r7, #4]
 222:..\VFH/vfh.c  ****   /* Retrieves the angle that the robot must drive towards. */
 223:..\VFH/vfh.c  ****   int candidates_len = 72;
 1509              		.loc 1 223 0
 1510 000c 4823     		movs	r3, #72
 1511 000e 7B66     		str	r3, [r7, #100]
 224:..\VFH/vfh.c  ****   int nsectors = smoothed_POD->nsectors;
 1512              		.loc 1 224 0
 1513 0010 FB68     		ldr	r3, [r7, #12]
 1514 0012 1B68     		ldr	r3, [r3]
 1515 0014 3B66     		str	r3, [r7, #96]
 225:..\VFH/vfh.c  **** 
 226:..\VFH/vfh.c  ****   // Retrive useful variables
 227:..\VFH/vfh.c  ****   double pos_x = robot->x;
 1516              		.loc 1 227 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 32


 1517 0016 BB68     		ldr	r3, [r7, #8]
 1518 0018 03F11004 		add	r4, r3, #16
 1519 001c D4E90034 		ldrd	r3, [r4]
 1520 0020 C7E91634 		strd	r3, [r7, #88]
 228:..\VFH/vfh.c  ****   double pos_y = robot->y;
 1521              		.loc 1 228 0
 1522 0024 BB68     		ldr	r3, [r7, #8]
 1523 0026 03F11804 		add	r4, r3, #24
 1524 002a D4E90034 		ldrd	r3, [r4]
 1525 002e C7E91434 		strd	r3, [r7, #80]
 229:..\VFH/vfh.c  ****   double pos_yaw = robot->theta;
 1526              		.loc 1 229 0
 1527 0032 BB68     		ldr	r3, [r7, #8]
 1528 0034 03F10804 		add	r4, r3, #8
 1529 0038 D4E90034 		ldrd	r3, [r4]
 1530 003c C7E91234 		strd	r3, [r7, #72]
 230:..\VFH/vfh.c  ****   double goal_x = robot->goal_x;
 1531              		.loc 1 230 0
 1532 0040 BB68     		ldr	r3, [r7, #8]
 1533 0042 03F15804 		add	r4, r3, #88
 1534 0046 D4E90034 		ldrd	r3, [r4]
 1535 004a C7E91034 		strd	r3, [r7, #64]
 231:..\VFH/vfh.c  ****   double goal_y = robot->goal_y;
 1536              		.loc 1 231 0
 1537 004e BB68     		ldr	r3, [r7, #8]
 1538 0050 03F16004 		add	r4, r3, #96
 1539 0054 D4E90034 		ldrd	r3, [r4]
 1540 0058 C7E90E34 		strd	r3, [r7, #56]
 232:..\VFH/vfh.c  **** 
 233:..\VFH/vfh.c  ****   double goal_angle = calculate_goal_angle(pos_x, pos_y, pos_yaw, goal_x, goal_y);
 1541              		.loc 1 233 0
 1542 005c D7E90E34 		ldrd	r3, [r7, #56]
 1543 0060 CDE90434 		strd	r3, [sp, #16]
 1544 0064 D7E91034 		ldrd	r3, [r7, #64]
 1545 0068 CDE90234 		strd	r3, [sp, #8]
 1546 006c D7E91234 		ldrd	r3, [r7, #72]
 1547 0070 CDE90034 		strd	r3, [sp]
 1548 0074 D7E91423 		ldrd	r2, [r7, #80]
 1549 0078 D7E91601 		ldrd	r0, [r7, #88]
 1550 007c FFF7FEFF 		bl	calculate_goal_angle
 1551 0080 C7E90C01 		strd	r0, [r7, #48]
 234:..\VFH/vfh.c  ****   int goal_sector = round((180 * calculate_angle_modulo(goal_angle) / M_PI) / alpha);
 1552              		.loc 1 234 0
 1553 0084 D7E90C01 		ldrd	r0, [r7, #48]
 1554 0088 FFF7FEFF 		bl	calculate_angle_modulo
 1555 008c 4FF00002 		mov	r2, #0
 1556 0090 A34B     		ldr	r3, .L102+16
 1557 0092 FFF7FEFF 		bl	__aeabi_dmul
 1558 0096 0346     		mov	r3, r0
 1559 0098 0C46     		mov	r4, r1
 1560 009a 1846     		mov	r0, r3
 1561 009c 2146     		mov	r1, r4
 1562 009e 9CA3     		adr	r3, .L102
 1563 00a0 D3E90023 		ldrd	r2, [r3]
 1564 00a4 FFF7FEFF 		bl	__aeabi_ddiv
 1565 00a8 0346     		mov	r3, r0
 1566 00aa 0C46     		mov	r4, r1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 33


 1567 00ac 1846     		mov	r0, r3
 1568 00ae 2146     		mov	r1, r4
 1569 00b0 D7E92A23 		ldrd	r2, [r7, #168]
 1570 00b4 FFF7FEFF 		bl	__aeabi_ddiv
 1571 00b8 0346     		mov	r3, r0
 1572 00ba 0C46     		mov	r4, r1
 1573 00bc 1846     		mov	r0, r3
 1574 00be 2146     		mov	r1, r4
 1575 00c0 FFF7FEFF 		bl	round
 1576 00c4 0346     		mov	r3, r0
 1577 00c6 0C46     		mov	r4, r1
 1578 00c8 1846     		mov	r0, r3
 1579 00ca 2146     		mov	r1, r4
 1580 00cc FFF7FEFF 		bl	__aeabi_d2iz
 1581 00d0 0346     		mov	r3, r0
 1582 00d2 FB62     		str	r3, [r7, #44]
 235:..\VFH/vfh.c  ****   int abs_min = 1000;
 1583              		.loc 1 235 0
 1584 00d4 4FF47A73 		mov	r3, #1000
 1585 00d8 C7F89430 		str	r3, [r7, #148]
 236:..\VFH/vfh.c  ****   int k_n, k_f;
 237:..\VFH/vfh.c  ****   int valley_flag = 0;
 1586              		.loc 1 237 0
 1587 00dc 0023     		movs	r3, #0
 1588 00de C7F88830 		str	r3, [r7, #136]
 238:..\VFH/vfh.c  ****   int abs_sec = 0;      // Sector where the absolute minimum distance is
 1589              		.loc 1 238 0
 1590 00e2 0023     		movs	r3, #0
 1591 00e4 C7F88430 		str	r3, [r7, #132]
 239:..\VFH/vfh.c  ****   int min_val = 1000;
 1592              		.loc 1 239 0
 1593 00e8 4FF47A73 		mov	r3, #1000
 1594 00ec C7F88030 		str	r3, [r7, #128]
 240:..\VFH/vfh.c  ****   double best_angle = 1000;  // Degrees
 1595              		.loc 1 240 0
 1596 00f0 4FF00003 		mov	r3, #0
 1597 00f4 8B4C     		ldr	r4, .L102+20
 1598 00f6 C7E91E34 		strd	r3, [r7, #120]
 1599              	.LBB18:
 241:..\VFH/vfh.c  **** 
 242:..\VFH/vfh.c  ****   // Find angle, note we are working in degrees here
 243:..\VFH/vfh.c  ****   for (int i = 0; i < candidates_len; i++) {
 1600              		.loc 1 243 0
 1601 00fa 0023     		movs	r3, #0
 1602 00fc 7B67     		str	r3, [r7, #116]
 1603 00fe 17E1     		b	.L76
 1604              	.L93:
 1605              	.LBB19:
 244:..\VFH/vfh.c  ****     int idx = candidate_lst[i];
 1606              		.loc 1 244 0
 1607 0100 7B6F     		ldr	r3, [r7, #116]
 1608 0102 9B00     		lsls	r3, r3, #2
 1609 0104 7A68     		ldr	r2, [r7, #4]
 1610 0106 1344     		add	r3, r3, r2
 1611 0108 1B68     		ldr	r3, [r3]
 1612 010a BB62     		str	r3, [r7, #40]
 245:..\VFH/vfh.c  ****   
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 34


 246:..\VFH/vfh.c  ****     // Calculating the minimum distance between the goal sector and the candidate valley
 247:..\VFH/vfh.c  ****     int min_distance;
 248:..\VFH/vfh.c  ****     //int knf_flag;       // Check if min distance is from the nearest or farthest edge
 249:..\VFH/vfh.c  ****     double angle;       // Degrees
 250:..\VFH/vfh.c  ****     
 251:..\VFH/vfh.c  ****     switch(idx) {
 1613              		.loc 1 251 0
 1614 010c BB6A     		ldr	r3, [r7, #40]
 1615 010e 002B     		cmp	r3, #0
 1616 0110 02D0     		beq	.L78
 1617 0112 012B     		cmp	r3, #1
 1618 0114 3CD0     		beq	.L79
 1619 0116 F3E0     		b	.L99
 1620              	.L78:
 252:..\VFH/vfh.c  ****         case 0:
 253:..\VFH/vfh.c  ****             // Early exit case if goal sector is clear
 254:..\VFH/vfh.c  ****             if (i == goal_sector) {
 255:..\VFH/vfh.c  ****                 //return goal_sector * alpha;
 256:..\VFH/vfh.c  ****             }
 257:..\VFH/vfh.c  ****             
 258:..\VFH/vfh.c  ****             // Calculate the 'distance' between current sector and the goal sector
 259:..\VFH/vfh.c  ****             /*
 260:..\VFH/vfh.c  ****             if (abs(i - goal_sector) < abs(abs(i - goal_sector) - nsectors)) {
 261:..\VFH/vfh.c  ****                 min_distance = abs(i - goal_sector);
 262:..\VFH/vfh.c  ****             } else {
 263:..\VFH/vfh.c  ****                 min_distance = abs(abs(i - goal_sector) - nsectors);
 264:..\VFH/vfh.c  ****             }
 265:..\VFH/vfh.c  ****             */
 266:..\VFH/vfh.c  ****             min_distance = abs(i-goal_sector);
 1621              		.loc 1 266 0
 1622 0118 7A6F     		ldr	r2, [r7, #116]
 1623 011a FB6A     		ldr	r3, [r7, #44]
 1624 011c D31A     		subs	r3, r2, r3
 1625 011e 002B     		cmp	r3, #0
 1626 0120 B8BF     		it	lt
 1627 0122 5B42     		rsblt	r3, r3, #0
 1628 0124 7B62     		str	r3, [r7, #36]
 267:..\VFH/vfh.c  ****             min_distance = min_distance > nsectors/2? nsectors-min_distance: min_distance;
 1629              		.loc 1 267 0
 1630 0126 3B6E     		ldr	r3, [r7, #96]
 1631 0128 DA0F     		lsrs	r2, r3, #31
 1632 012a 1344     		add	r3, r3, r2
 1633 012c 5B10     		asrs	r3, r3, #1
 1634 012e 1A46     		mov	r2, r3
 1635 0130 7B6A     		ldr	r3, [r7, #36]
 1636 0132 9A42     		cmp	r2, r3
 1637 0134 03DA     		bge	.L80
 1638              		.loc 1 267 0 is_stmt 0 discriminator 1
 1639 0136 3A6E     		ldr	r2, [r7, #96]
 1640 0138 7B6A     		ldr	r3, [r7, #36]
 1641 013a D31A     		subs	r3, r2, r3
 1642 013c 00E0     		b	.L81
 1643              	.L80:
 1644              		.loc 1 267 0 discriminator 2
 1645 013e 7B6A     		ldr	r3, [r7, #36]
 1646              	.L81:
 1647              		.loc 1 267 0 discriminator 4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 35


 1648 0140 7B62     		str	r3, [r7, #36]
 268:..\VFH/vfh.c  ****             
 269:..\VFH/vfh.c  ****                 
 270:..\VFH/vfh.c  ****             // Start entering a valley
 271:..\VFH/vfh.c  ****             if (valley_flag) {
 1649              		.loc 1 271 0 is_stmt 1 discriminator 4
 1650 0142 D7F88830 		ldr	r3, [r7, #136]
 1651 0146 002B     		cmp	r3, #0
 1652 0148 11D0     		beq	.L82
 272:..\VFH/vfh.c  ****                 k_f++;
 1653              		.loc 1 272 0
 1654 014a D7F88C30 		ldr	r3, [r7, #140]
 1655 014e 0133     		adds	r3, r3, #1
 1656 0150 C7F88C30 		str	r3, [r7, #140]
 273:..\VFH/vfh.c  ****                 // Check if new sector is closer to the goal 
 274:..\VFH/vfh.c  ****                 if (min_distance < abs_min){
 1657              		.loc 1 274 0
 1658 0154 7A6A     		ldr	r2, [r7, #36]
 1659 0156 D7F89430 		ldr	r3, [r7, #148]
 1660 015a 9A42     		cmp	r2, r3
 1661 015c 80F2D480 		bge	.L100
 275:..\VFH/vfh.c  ****                     abs_min = min_distance;
 1662              		.loc 1 275 0
 1663 0160 7B6A     		ldr	r3, [r7, #36]
 1664 0162 C7F89430 		str	r3, [r7, #148]
 276:..\VFH/vfh.c  ****                     abs_sec = i;
 1665              		.loc 1 276 0
 1666 0166 7B6F     		ldr	r3, [r7, #116]
 1667 0168 C7F88430 		str	r3, [r7, #132]
 277:..\VFH/vfh.c  ****                     //knf_flag = k_f;
 278:..\VFH/vfh.c  ****                 }
 279:..\VFH/vfh.c  ****                 
 280:..\VFH/vfh.c  ****             } else { 
 281:..\VFH/vfh.c  ****                 // Always select closest to goal sector
 282:..\VFH/vfh.c  ****                 abs_min = min_distance;
 283:..\VFH/vfh.c  ****                 abs_sec = i;
 284:..\VFH/vfh.c  ****                 k_n = i;
 285:..\VFH/vfh.c  ****                 k_f = k_n;
 286:..\VFH/vfh.c  ****                 
 287:..\VFH/vfh.c  ****                 // Start valley
 288:..\VFH/vfh.c  ****                 valley_flag = 1;
 289:..\VFH/vfh.c  ****                 //knf_flag = 0;
 290:..\VFH/vfh.c  ****             }
 291:..\VFH/vfh.c  ****             break;
 1668              		.loc 1 291 0
 1669 016c CCE0     		b	.L100
 1670              	.L82:
 282:..\VFH/vfh.c  ****                 abs_sec = i;
 1671              		.loc 1 282 0
 1672 016e 7B6A     		ldr	r3, [r7, #36]
 1673 0170 C7F89430 		str	r3, [r7, #148]
 283:..\VFH/vfh.c  ****                 k_n = i;
 1674              		.loc 1 283 0
 1675 0174 7B6F     		ldr	r3, [r7, #116]
 1676 0176 C7F88430 		str	r3, [r7, #132]
 284:..\VFH/vfh.c  ****                 k_f = k_n;
 1677              		.loc 1 284 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 36


 1678 017a 7B6F     		ldr	r3, [r7, #116]
 1679 017c C7F89030 		str	r3, [r7, #144]
 285:..\VFH/vfh.c  ****                 
 1680              		.loc 1 285 0
 1681 0180 D7F89030 		ldr	r3, [r7, #144]
 1682 0184 C7F88C30 		str	r3, [r7, #140]
 288:..\VFH/vfh.c  ****                 //knf_flag = 0;
 1683              		.loc 1 288 0
 1684 0188 0123     		movs	r3, #1
 1685 018a C7F88830 		str	r3, [r7, #136]
 1686              		.loc 1 291 0
 1687 018e BBE0     		b	.L100
 1688              	.L79:
 292:..\VFH/vfh.c  ****         
 293:..\VFH/vfh.c  ****         case 1:
 294:..\VFH/vfh.c  ****             // Exiting a valley
 295:..\VFH/vfh.c  ****             if (valley_flag) {
 1689              		.loc 1 295 0
 1690 0190 D7F88830 		ldr	r3, [r7, #136]
 1691 0194 002B     		cmp	r3, #0
 1692 0196 00F0C780 		beq	.L101
 1693              	.LBB20:
 296:..\VFH/vfh.c  ****                 // Update Valley flag
 297:..\VFH/vfh.c  ****                 valley_flag = 0;
 1694              		.loc 1 297 0
 1695 019a 0023     		movs	r3, #0
 1696 019c C7F88830 		str	r3, [r7, #136]
 298:..\VFH/vfh.c  ****                 
 299:..\VFH/vfh.c  ****                 // Check for wide and narrow valleys
 300:..\VFH/vfh.c  ****                 if (abs(k_n - k_f) < s_max) {   // Narrow Valley
 1697              		.loc 1 300 0
 1698 01a0 D7F89020 		ldr	r2, [r7, #144]
 1699 01a4 D7F88C30 		ldr	r3, [r7, #140]
 1700 01a8 D31A     		subs	r3, r2, r3
 1701 01aa 83EAE372 		eor	r2, r3, r3, asr #31
 1702 01ae A2EBE372 		sub	r2, r2, r3, asr #31
 1703 01b2 D7F8B030 		ldr	r3, [r7, #176]
 1704 01b6 9A42     		cmp	r2, r3
 1705 01b8 1ADA     		bge	.L87
 301:..\VFH/vfh.c  ****                     angle = ((k_n + k_f) / 2 % nsectors) * alpha; // Degrees
 1706              		.loc 1 301 0
 1707 01ba D7F89020 		ldr	r2, [r7, #144]
 1708 01be D7F88C30 		ldr	r3, [r7, #140]
 1709 01c2 1344     		add	r3, r3, r2
 1710 01c4 DA0F     		lsrs	r2, r3, #31
 1711 01c6 1344     		add	r3, r3, r2
 1712 01c8 5B10     		asrs	r3, r3, #1
 1713 01ca 3A6E     		ldr	r2, [r7, #96]
 1714 01cc 93FBF2F2 		sdiv	r2, r3, r2
 1715 01d0 396E     		ldr	r1, [r7, #96]
 1716 01d2 01FB02F2 		mul	r2, r1, r2
 1717 01d6 9B1A     		subs	r3, r3, r2
 1718 01d8 1846     		mov	r0, r3
 1719 01da FFF7FEFF 		bl	__aeabi_i2d
 1720 01de D7E92A23 		ldrd	r2, [r7, #168]
 1721 01e2 FFF7FEFF 		bl	__aeabi_dmul
 1722 01e6 0346     		mov	r3, r0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 37


 1723 01e8 0C46     		mov	r4, r1
 1724 01ea C7E91A34 		strd	r3, [r7, #104]
 1725 01ee 4EE0     		b	.L88
 1726              	.L87:
 1727              	.LBB21:
 302:..\VFH/vfh.c  ****                         
 303:..\VFH/vfh.c  ****                 } else {                        // Wide Valley
 304:..\VFH/vfh.c  ****                     int first = abs(k_n - goal_sector);
 1728              		.loc 1 304 0
 1729 01f0 D7F89020 		ldr	r2, [r7, #144]
 1730 01f4 FB6A     		ldr	r3, [r7, #44]
 1731 01f6 D31A     		subs	r3, r2, r3
 1732 01f8 002B     		cmp	r3, #0
 1733 01fa B8BF     		it	lt
 1734 01fc 5B42     		rsblt	r3, r3, #0
 1735 01fe 3B62     		str	r3, [r7, #32]
 305:..\VFH/vfh.c  ****                     int last = abs(k_f - goal_sector);
 1736              		.loc 1 305 0
 1737 0200 D7F88C20 		ldr	r2, [r7, #140]
 1738 0204 FB6A     		ldr	r3, [r7, #44]
 1739 0206 D31A     		subs	r3, r2, r3
 1740 0208 002B     		cmp	r3, #0
 1741 020a B8BF     		it	lt
 1742 020c 5B42     		rsblt	r3, r3, #0
 1743 020e FB61     		str	r3, [r7, #28]
 306:..\VFH/vfh.c  ****                     if (first <= abs_min) {
 1744              		.loc 1 306 0
 1745 0210 3A6A     		ldr	r2, [r7, #32]
 1746 0212 D7F89430 		ldr	r3, [r7, #148]
 1747 0216 9A42     		cmp	r2, r3
 1748 0218 1ADC     		bgt	.L89
 307:..\VFH/vfh.c  ****                         angle = ((k_n + s_max) / 2 % nsectors) * alpha;
 1749              		.loc 1 307 0
 1750 021a D7F89020 		ldr	r2, [r7, #144]
 1751 021e D7F8B030 		ldr	r3, [r7, #176]
 1752 0222 1344     		add	r3, r3, r2
 1753 0224 DA0F     		lsrs	r2, r3, #31
 1754 0226 1344     		add	r3, r3, r2
 1755 0228 5B10     		asrs	r3, r3, #1
 1756 022a 3A6E     		ldr	r2, [r7, #96]
 1757 022c 93FBF2F2 		sdiv	r2, r3, r2
 1758 0230 396E     		ldr	r1, [r7, #96]
 1759 0232 01FB02F2 		mul	r2, r1, r2
 1760 0236 9B1A     		subs	r3, r3, r2
 1761 0238 1846     		mov	r0, r3
 1762 023a FFF7FEFF 		bl	__aeabi_i2d
 1763 023e D7E92A23 		ldrd	r2, [r7, #168]
 1764 0242 FFF7FEFF 		bl	__aeabi_dmul
 1765 0246 0346     		mov	r3, r0
 1766 0248 0C46     		mov	r4, r1
 1767 024a C7E91A34 		strd	r3, [r7, #104]
 1768 024e 1EE0     		b	.L88
 1769              	.L89:
 308:..\VFH/vfh.c  ****                     } else if (last < abs_min) {
 1770              		.loc 1 308 0
 1771 0250 FA69     		ldr	r2, [r7, #28]
 1772 0252 D7F89430 		ldr	r3, [r7, #148]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 38


 1773 0256 9A42     		cmp	r2, r3
 1774 0258 19DA     		bge	.L88
 309:..\VFH/vfh.c  ****                         angle = ((k_f - s_max ) / 2 % nsectors) * alpha;
 1775              		.loc 1 309 0
 1776 025a D7F88C20 		ldr	r2, [r7, #140]
 1777 025e D7F8B030 		ldr	r3, [r7, #176]
 1778 0262 D31A     		subs	r3, r2, r3
 1779 0264 DA0F     		lsrs	r2, r3, #31
 1780 0266 1344     		add	r3, r3, r2
 1781 0268 5B10     		asrs	r3, r3, #1
 1782 026a 3A6E     		ldr	r2, [r7, #96]
 1783 026c 93FBF2F2 		sdiv	r2, r3, r2
 1784 0270 396E     		ldr	r1, [r7, #96]
 1785 0272 01FB02F2 		mul	r2, r1, r2
 1786 0276 9B1A     		subs	r3, r3, r2
 1787 0278 1846     		mov	r0, r3
 1788 027a FFF7FEFF 		bl	__aeabi_i2d
 1789 027e D7E92A23 		ldrd	r2, [r7, #168]
 1790 0282 FFF7FEFF 		bl	__aeabi_dmul
 1791 0286 0346     		mov	r3, r0
 1792 0288 0C46     		mov	r4, r1
 1793 028a C7E91A34 		strd	r3, [r7, #104]
 1794              	.L88:
 1795              	.LBE21:
 310:..\VFH/vfh.c  ****                     }
 311:..\VFH/vfh.c  **** 
 312:..\VFH/vfh.c  ****                 }
 313:..\VFH/vfh.c  ****                     
 314:..\VFH/vfh.c  ****                 // Check if this angle is closer to goal sector than current best
 315:..\VFH/vfh.c  ****                 int dist_angle_to_goal = abs(angle/alpha - goal_sector); // in sectors
 1796              		.loc 1 315 0
 1797 028e D7E92A23 		ldrd	r2, [r7, #168]
 1798 0292 D7E91A01 		ldrd	r0, [r7, #104]
 1799 0296 FFF7FEFF 		bl	__aeabi_ddiv
 1800 029a 0346     		mov	r3, r0
 1801 029c 0C46     		mov	r4, r1
 1802 029e 2546     		mov	r5, r4
 1803 02a0 1C46     		mov	r4, r3
 1804 02a2 F86A     		ldr	r0, [r7, #44]
 1805 02a4 FFF7FEFF 		bl	__aeabi_i2d
 1806 02a8 0246     		mov	r2, r0
 1807 02aa 0B46     		mov	r3, r1
 1808 02ac 2046     		mov	r0, r4
 1809 02ae 2946     		mov	r1, r5
 1810 02b0 FFF7FEFF 		bl	__aeabi_dsub
 1811 02b4 0346     		mov	r3, r0
 1812 02b6 0C46     		mov	r4, r1
 1813 02b8 1846     		mov	r0, r3
 1814 02ba 2146     		mov	r1, r4
 1815 02bc FFF7FEFF 		bl	__aeabi_d2iz
 1816 02c0 0346     		mov	r3, r0
 1817 02c2 002B     		cmp	r3, #0
 1818 02c4 B8BF     		it	lt
 1819 02c6 5B42     		rsblt	r3, r3, #0
 1820 02c8 BB61     		str	r3, [r7, #24]
 316:..\VFH/vfh.c  ****                 dist_angle_to_goal = dist_angle_to_goal > nsectors/2? nsectors - dist_angle_to_goal
 1821              		.loc 1 316 0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 39


 1822 02ca 3B6E     		ldr	r3, [r7, #96]
 1823 02cc DA0F     		lsrs	r2, r3, #31
 1824 02ce 1344     		add	r3, r3, r2
 1825 02d0 5B10     		asrs	r3, r3, #1
 1826 02d2 1A46     		mov	r2, r3
 1827 02d4 BB69     		ldr	r3, [r7, #24]
 1828 02d6 9A42     		cmp	r2, r3
 1829 02d8 03DA     		bge	.L90
 1830              		.loc 1 316 0 is_stmt 0 discriminator 1
 1831 02da 3A6E     		ldr	r2, [r7, #96]
 1832 02dc BB69     		ldr	r3, [r7, #24]
 1833 02de D31A     		subs	r3, r2, r3
 1834 02e0 00E0     		b	.L91
 1835              	.L90:
 1836              		.loc 1 316 0 discriminator 2
 1837 02e2 BB69     		ldr	r3, [r7, #24]
 1838              	.L91:
 1839              		.loc 1 316 0 discriminator 4
 1840 02e4 BB61     		str	r3, [r7, #24]
 317:..\VFH/vfh.c  ****                 if (dist_angle_to_goal < min_val) {
 1841              		.loc 1 317 0 is_stmt 1 discriminator 4
 1842 02e6 BA69     		ldr	r2, [r7, #24]
 1843 02e8 D7F88030 		ldr	r3, [r7, #128]
 1844 02ec 9A42     		cmp	r2, r3
 1845 02ee 1BDA     		bge	.L101
 318:..\VFH/vfh.c  ****                     best_angle = angle;
 1846              		.loc 1 318 0
 1847 02f0 D7E91A34 		ldrd	r3, [r7, #104]
 1848 02f4 C7E91E34 		strd	r3, [r7, #120]
 319:..\VFH/vfh.c  ****                     min_val = dist_angle_to_goal;
 1849              		.loc 1 319 0
 1850 02f8 BB69     		ldr	r3, [r7, #24]
 1851 02fa C7F88030 		str	r3, [r7, #128]
 1852              	.LBE20:
 320:..\VFH/vfh.c  ****                 }
 321:..\VFH/vfh.c  ****             } 
 322:..\VFH/vfh.c  ****             break;
 1853              		.loc 1 322 0
 1854 02fe 13E0     		b	.L101
 1855              	.L99:
 323:..\VFH/vfh.c  ****         
 324:..\VFH/vfh.c  ****         default:
 325:..\VFH/vfh.c  ****             return 9000;
 1856              		.loc 1 325 0
 1857 0300 05A4     		adr	r4, .L102+8
 1858 0302 D4E90034 		ldrd	r3, [r4]
 1859 0306 96E0     		b	.L92
 1860              	.L100:
 291:..\VFH/vfh.c  ****         
 1861              		.loc 1 291 0
 1862 0308 00BF     		nop
 1863 030a 0EE0     		b	.L85
 1864              	.L103:
 1865 030c AFF30080 		.align	3
 1866              	.L102:
 1867 0310 182D4454 		.word	1413754136
 1868 0314 FB210940 		.word	1074340347
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 40


 1869 0318 00000000 		.word	0
 1870 031c 0094C140 		.word	1086428160
 1871 0320 00806640 		.word	1080459264
 1872 0324 00408F40 		.word	1083129856
 1873              	.L101:
 322:..\VFH/vfh.c  ****         
 1874              		.loc 1 322 0
 1875 0328 00BF     		nop
 1876              	.L85:
 1877              	.LBE19:
 243:..\VFH/vfh.c  ****     int idx = candidate_lst[i];
 1878              		.loc 1 243 0 discriminator 2
 1879 032a 7B6F     		ldr	r3, [r7, #116]
 1880 032c 0133     		adds	r3, r3, #1
 1881 032e 7B67     		str	r3, [r7, #116]
 1882              	.L76:
 243:..\VFH/vfh.c  ****     int idx = candidate_lst[i];
 1883              		.loc 1 243 0 is_stmt 0 discriminator 1
 1884 0330 7A6F     		ldr	r2, [r7, #116]
 1885 0332 7B6E     		ldr	r3, [r7, #100]
 1886 0334 9A42     		cmp	r2, r3
 1887 0336 FFF6E3AE 		blt	.L93
 1888              	.LBE18:
 326:..\VFH/vfh.c  ****     }
 327:..\VFH/vfh.c  ****   }    
 328:..\VFH/vfh.c  ****     if (best_angle == 1000) {
 1889              		.loc 1 328 0 is_stmt 1
 1890 033a 4FF00002 		mov	r2, #0
 1891 033e 404B     		ldr	r3, .L104
 1892 0340 D7E91E01 		ldrd	r0, [r7, #120]
 1893 0344 FFF7FEFF 		bl	__aeabi_dcmpeq
 1894 0348 0346     		mov	r3, r0
 1895 034a 002B     		cmp	r3, #0
 1896 034c 71D0     		beq	.L94
 1897              	.LBB22:
 329:..\VFH/vfh.c  ****         int first = abs((k_n + (s_max / 2)) - goal_sector);
 1898              		.loc 1 329 0
 1899 034e D7F8B030 		ldr	r3, [r7, #176]
 1900 0352 DA0F     		lsrs	r2, r3, #31
 1901 0354 1344     		add	r3, r3, r2
 1902 0356 5B10     		asrs	r3, r3, #1
 1903 0358 1A46     		mov	r2, r3
 1904 035a D7F89030 		ldr	r3, [r7, #144]
 1905 035e 1A44     		add	r2, r2, r3
 1906 0360 FB6A     		ldr	r3, [r7, #44]
 1907 0362 D31A     		subs	r3, r2, r3
 1908 0364 002B     		cmp	r3, #0
 1909 0366 B8BF     		it	lt
 1910 0368 5B42     		rsblt	r3, r3, #0
 1911 036a 7B61     		str	r3, [r7, #20]
 330:..\VFH/vfh.c  ****         int last = abs((k_f - (s_max / 2)) - goal_sector);
 1912              		.loc 1 330 0
 1913 036c D7F8B030 		ldr	r3, [r7, #176]
 1914 0370 DA0F     		lsrs	r2, r3, #31
 1915 0372 1344     		add	r3, r3, r2
 1916 0374 5B10     		asrs	r3, r3, #1
 1917 0376 1A46     		mov	r2, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 41


 1918 0378 D7F88C30 		ldr	r3, [r7, #140]
 1919 037c 9A1A     		subs	r2, r3, r2
 1920 037e FB6A     		ldr	r3, [r7, #44]
 1921 0380 D31A     		subs	r3, r2, r3
 1922 0382 002B     		cmp	r3, #0
 1923 0384 B8BF     		it	lt
 1924 0386 5B42     		rsblt	r3, r3, #0
 1925 0388 3B61     		str	r3, [r7, #16]
 331:..\VFH/vfh.c  ****         if (first < abs_min) {
 1926              		.loc 1 331 0
 1927 038a 7A69     		ldr	r2, [r7, #20]
 1928 038c D7F89430 		ldr	r3, [r7, #148]
 1929 0390 9A42     		cmp	r2, r3
 1930 0392 1EDA     		bge	.L96
 332:..\VFH/vfh.c  ****             best_angle = ((k_n + (s_max / 2)) / 2 % nsectors) * alpha;
 1931              		.loc 1 332 0
 1932 0394 D7F8B030 		ldr	r3, [r7, #176]
 1933 0398 DA0F     		lsrs	r2, r3, #31
 1934 039a 1344     		add	r3, r3, r2
 1935 039c 5B10     		asrs	r3, r3, #1
 1936 039e 1A46     		mov	r2, r3
 1937 03a0 D7F89030 		ldr	r3, [r7, #144]
 1938 03a4 1344     		add	r3, r3, r2
 1939 03a6 DA0F     		lsrs	r2, r3, #31
 1940 03a8 1344     		add	r3, r3, r2
 1941 03aa 5B10     		asrs	r3, r3, #1
 1942 03ac 3A6E     		ldr	r2, [r7, #96]
 1943 03ae 93FBF2F2 		sdiv	r2, r3, r2
 1944 03b2 396E     		ldr	r1, [r7, #96]
 1945 03b4 01FB02F2 		mul	r2, r1, r2
 1946 03b8 9B1A     		subs	r3, r3, r2
 1947 03ba 1846     		mov	r0, r3
 1948 03bc FFF7FEFF 		bl	__aeabi_i2d
 1949 03c0 D7E92A23 		ldrd	r2, [r7, #168]
 1950 03c4 FFF7FEFF 		bl	__aeabi_dmul
 1951 03c8 0346     		mov	r3, r0
 1952 03ca 0C46     		mov	r4, r1
 1953 03cc C7E91E34 		strd	r3, [r7, #120]
 1954 03d0 2FE0     		b	.L94
 1955              	.L96:
 333:..\VFH/vfh.c  ****         } else if (last < abs_min) {
 1956              		.loc 1 333 0
 1957 03d2 3A69     		ldr	r2, [r7, #16]
 1958 03d4 D7F89430 		ldr	r3, [r7, #148]
 1959 03d8 9A42     		cmp	r2, r3
 1960 03da 1EDA     		bge	.L97
 334:..\VFH/vfh.c  ****             best_angle = ((k_f - (s_max / 2)) / 2 % nsectors) * alpha;
 1961              		.loc 1 334 0
 1962 03dc D7F8B030 		ldr	r3, [r7, #176]
 1963 03e0 DA0F     		lsrs	r2, r3, #31
 1964 03e2 1344     		add	r3, r3, r2
 1965 03e4 5B10     		asrs	r3, r3, #1
 1966 03e6 1A46     		mov	r2, r3
 1967 03e8 D7F88C30 		ldr	r3, [r7, #140]
 1968 03ec 9B1A     		subs	r3, r3, r2
 1969 03ee DA0F     		lsrs	r2, r3, #31
 1970 03f0 1344     		add	r3, r3, r2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 42


 1971 03f2 5B10     		asrs	r3, r3, #1
 1972 03f4 3A6E     		ldr	r2, [r7, #96]
 1973 03f6 93FBF2F2 		sdiv	r2, r3, r2
 1974 03fa 396E     		ldr	r1, [r7, #96]
 1975 03fc 01FB02F2 		mul	r2, r1, r2
 1976 0400 9B1A     		subs	r3, r3, r2
 1977 0402 1846     		mov	r0, r3
 1978 0404 FFF7FEFF 		bl	__aeabi_i2d
 1979 0408 D7E92A23 		ldrd	r2, [r7, #168]
 1980 040c FFF7FEFF 		bl	__aeabi_dmul
 1981 0410 0346     		mov	r3, r0
 1982 0412 0C46     		mov	r4, r1
 1983 0414 C7E91E34 		strd	r3, [r7, #120]
 1984 0418 0BE0     		b	.L94
 1985              	.L97:
 335:..\VFH/vfh.c  ****         }
 336:..\VFH/vfh.c  ****         else {
 337:..\VFH/vfh.c  ****             best_angle = abs_sec * alpha;
 1986              		.loc 1 337 0
 1987 041a D7F88400 		ldr	r0, [r7, #132]
 1988 041e FFF7FEFF 		bl	__aeabi_i2d
 1989 0422 D7E92A23 		ldrd	r2, [r7, #168]
 1990 0426 FFF7FEFF 		bl	__aeabi_dmul
 1991 042a 0346     		mov	r3, r0
 1992 042c 0C46     		mov	r4, r1
 1993 042e C7E91E34 		strd	r3, [r7, #120]
 1994              	.L94:
 1995              	.LBE22:
 338:..\VFH/vfh.c  ****         }
 339:..\VFH/vfh.c  ****     }
 340:..\VFH/vfh.c  ****     return best_angle;
 1996              		.loc 1 340 0
 1997 0432 D7E91E34 		ldrd	r3, [r7, #120]
 1998              	.L92:
 341:..\VFH/vfh.c  ****   
 342:..\VFH/vfh.c  **** }
 1999              		.loc 1 342 0
 2000 0436 1846     		mov	r0, r3
 2001 0438 2146     		mov	r1, r4
 2002 043a 9837     		adds	r7, r7, #152
 2003              		.cfi_def_cfa_offset 16
 2004 043c BD46     		mov	sp, r7
 2005              		.cfi_def_cfa_register 13
 2006              		@ sp needed
 2007 043e B0BD     		pop	{r4, r5, r7, pc}
 2008              	.L105:
 2009              		.align	2
 2010              	.L104:
 2011 0440 00408F40 		.word	1083129856
 2012              		.cfi_endproc
 2013              	.LFE7:
 2014              		.size	calculate_avoidance_angle, .-calculate_avoidance_angle
 2015              		.section	.text.calculate_avoidance_angle2,"ax",%progbits
 2016              		.align	2
 2017              		.global	calculate_avoidance_angle2
 2018              		.thumb
 2019              		.thumb_func
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 43


 2020              		.type	calculate_avoidance_angle2, %function
 2021              	calculate_avoidance_angle2:
 2022              	.LFB8:
 343:..\VFH/vfh.c  **** 
 344:..\VFH/vfh.c  **** /*=======================================================================*/
 345:..\VFH/vfh.c  **** double calculate_avoidance_angle2(POD *smoothed_POD, Robot * robot, int * candidate_lst, double alp
 2023              		.loc 1 345 0
 2024              		.cfi_startproc
 2025              		@ args = 12, pretend = 0, frame = 112
 2026              		@ frame_needed = 1, uses_anonymous_args = 0
 2027 0000 B0B5     		push	{r4, r5, r7, lr}
 2028              		.cfi_def_cfa_offset 16
 2029              		.cfi_offset 4, -16
 2030              		.cfi_offset 5, -12
 2031              		.cfi_offset 7, -8
 2032              		.cfi_offset 14, -4
 2033 0002 9CB0     		sub	sp, sp, #112
 2034              		.cfi_def_cfa_offset 128
 2035 0004 00AF     		add	r7, sp, #0
 2036              		.cfi_def_cfa_register 7
 2037 0006 F860     		str	r0, [r7, #12]
 2038 0008 B960     		str	r1, [r7, #8]
 2039 000a 7A60     		str	r2, [r7, #4]
 346:..\VFH/vfh.c  ****     /* Retrieves the angle that the robot must drive towards. */
 347:..\VFH/vfh.c  ****     int candidates_len = 360/alpha;;
 2040              		.loc 1 347 0
 2041 000c D7E92023 		ldrd	r2, [r7, #128]
 2042 0010 4FF00000 		mov	r0, #0
 2043 0014 BC49     		ldr	r1, .L120+8
 2044 0016 FFF7FEFF 		bl	__aeabi_ddiv
 2045 001a 0346     		mov	r3, r0
 2046 001c 0C46     		mov	r4, r1
 2047 001e 1846     		mov	r0, r3
 2048 0020 2146     		mov	r1, r4
 2049 0022 FFF7FEFF 		bl	__aeabi_d2iz
 2050 0026 0346     		mov	r3, r0
 2051 0028 3B65     		str	r3, [r7, #80]
 348:..\VFH/vfh.c  ****     int nsectors = smoothed_POD->nsectors;
 2052              		.loc 1 348 0
 2053 002a FB68     		ldr	r3, [r7, #12]
 2054 002c 1B68     		ldr	r3, [r3]
 2055 002e FB64     		str	r3, [r7, #76]
 349:..\VFH/vfh.c  **** 
 350:..\VFH/vfh.c  ****     // Retrive useful variables
 351:..\VFH/vfh.c  ****     double pos_x = robot->x;
 2056              		.loc 1 351 0
 2057 0030 BB68     		ldr	r3, [r7, #8]
 2058 0032 03F11004 		add	r4, r3, #16
 2059 0036 D4E90034 		ldrd	r3, [r4]
 2060 003a C7E91034 		strd	r3, [r7, #64]
 352:..\VFH/vfh.c  ****     double pos_y = robot->y;
 2061              		.loc 1 352 0
 2062 003e BB68     		ldr	r3, [r7, #8]
 2063 0040 03F11804 		add	r4, r3, #24
 2064 0044 D4E90034 		ldrd	r3, [r4]
 2065 0048 C7E90E34 		strd	r3, [r7, #56]
 353:..\VFH/vfh.c  ****     double pos_yaw = robot->theta;
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 44


 2066              		.loc 1 353 0
 2067 004c BB68     		ldr	r3, [r7, #8]
 2068 004e 03F10804 		add	r4, r3, #8
 2069 0052 D4E90034 		ldrd	r3, [r4]
 2070 0056 C7E90C34 		strd	r3, [r7, #48]
 354:..\VFH/vfh.c  ****     double goal_x = robot->goal_x;
 2071              		.loc 1 354 0
 2072 005a BB68     		ldr	r3, [r7, #8]
 2073 005c 03F15804 		add	r4, r3, #88
 2074 0060 D4E90034 		ldrd	r3, [r4]
 2075 0064 C7E90A34 		strd	r3, [r7, #40]
 355:..\VFH/vfh.c  ****     double goal_y = robot->goal_y;
 2076              		.loc 1 355 0
 2077 0068 BB68     		ldr	r3, [r7, #8]
 2078 006a 03F16004 		add	r4, r3, #96
 2079 006e D4E90034 		ldrd	r3, [r4]
 2080 0072 C7E90834 		strd	r3, [r7, #32]
 356:..\VFH/vfh.c  **** 
 357:..\VFH/vfh.c  ****     double goal_angle = true_mod(180*atan2( goal_y-pos_y, goal_x - pos_x)/M_PI, 360);
 2081              		.loc 1 357 0
 2082 0076 D7E90E23 		ldrd	r2, [r7, #56]
 2083 007a D7E90801 		ldrd	r0, [r7, #32]
 2084 007e FFF7FEFF 		bl	__aeabi_dsub
 2085 0082 0346     		mov	r3, r0
 2086 0084 0C46     		mov	r4, r1
 2087 0086 2546     		mov	r5, r4
 2088 0088 1C46     		mov	r4, r3
 2089 008a D7E91023 		ldrd	r2, [r7, #64]
 2090 008e D7E90A01 		ldrd	r0, [r7, #40]
 2091 0092 FFF7FEFF 		bl	__aeabi_dsub
 2092 0096 0246     		mov	r2, r0
 2093 0098 0B46     		mov	r3, r1
 2094 009a 2046     		mov	r0, r4
 2095 009c 2946     		mov	r1, r5
 2096 009e FFF7FEFF 		bl	atan2
 2097 00a2 4FF00002 		mov	r2, #0
 2098 00a6 994B     		ldr	r3, .L120+12
 2099 00a8 FFF7FEFF 		bl	__aeabi_dmul
 2100 00ac 0346     		mov	r3, r0
 2101 00ae 0C46     		mov	r4, r1
 2102 00b0 1846     		mov	r0, r3
 2103 00b2 2146     		mov	r1, r4
 2104 00b4 92A3     		adr	r3, .L120
 2105 00b6 D3E90023 		ldrd	r2, [r3]
 2106 00ba FFF7FEFF 		bl	__aeabi_ddiv
 2107 00be 0346     		mov	r3, r0
 2108 00c0 0C46     		mov	r4, r1
 2109 00c2 1846     		mov	r0, r3
 2110 00c4 2146     		mov	r1, r4
 2111 00c6 4FF00002 		mov	r2, #0
 2112 00ca 8F4B     		ldr	r3, .L120+8
 2113 00cc FFF7FEFF 		bl	true_mod
 2114 00d0 C7E90601 		strd	r0, [r7, #24]
 358:..\VFH/vfh.c  ****     int goal_sector = floor(goal_angle/alpha);
 2115              		.loc 1 358 0
 2116 00d4 D7E92023 		ldrd	r2, [r7, #128]
 2117 00d8 D7E90601 		ldrd	r0, [r7, #24]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 45


 2118 00dc FFF7FEFF 		bl	__aeabi_ddiv
 2119 00e0 0346     		mov	r3, r0
 2120 00e2 0C46     		mov	r4, r1
 2121 00e4 1846     		mov	r0, r3
 2122 00e6 2146     		mov	r1, r4
 2123 00e8 FFF7FEFF 		bl	floor
 2124 00ec 0346     		mov	r3, r0
 2125 00ee 0C46     		mov	r4, r1
 2126 00f0 1846     		mov	r0, r3
 2127 00f2 2146     		mov	r1, r4
 2128 00f4 FFF7FEFF 		bl	__aeabi_d2iz
 2129 00f8 0346     		mov	r3, r0
 2130 00fa 7B61     		str	r3, [r7, #20]
 359:..\VFH/vfh.c  ****   
 360:..\VFH/vfh.c  ****     if( candidate_lst[goal_sector] == 0 ) // goal lies in a valley
 2131              		.loc 1 360 0
 2132 00fc 7B69     		ldr	r3, [r7, #20]
 2133 00fe 9B00     		lsls	r3, r3, #2
 2134 0100 7A68     		ldr	r2, [r7, #4]
 2135 0102 1344     		add	r3, r3, r2
 2136 0104 1B68     		ldr	r3, [r3]
 2137 0106 002B     		cmp	r3, #0
 2138 0108 02D1     		bne	.L107
 2139              	.LBB23:
 361:..\VFH/vfh.c  ****     {
 362:..\VFH/vfh.c  ****         return goal_angle;
 2140              		.loc 1 362 0
 2141 010a D7E90634 		ldrd	r3, [r7, #24]
 2142 010e 65E1     		b	.L108
 2143              	.L107:
 2144              	.LBE23:
 2145              	.LBB24:
 363:..\VFH/vfh.c  ****         int step = 1;
 364:..\VFH/vfh.c  ****         int cwise = true_mod(goal_sector-step, nsectors);
 365:..\VFH/vfh.c  ****         int ccwise = true_mod(goal_sector+step, nsectors);
 366:..\VFH/vfh.c  ****         while( candidate_lst[cwise] == 0 && candidate_lst[ccwise]==0 && step<nsectors/2 ) 
 367:..\VFH/vfh.c  ****         {
 368:..\VFH/vfh.c  ****             step++;
 369:..\VFH/vfh.c  ****             cwise = true_mod(goal_sector-step, nsectors);
 370:..\VFH/vfh.c  ****             ccwise = true_mod(goal_sector+step, nsectors);
 371:..\VFH/vfh.c  ****         }
 372:..\VFH/vfh.c  ****         if( step == nsectors/2 ) { // no obstacles in histogram
 373:..\VFH/vfh.c  ****             return goal_angle;
 374:..\VFH/vfh.c  ****         } else if ( candidate_lst[cwise] )  { // nearest edge is cwise from goal sector
 375:..\VFH/vfh.c  ****             return alpha*true_mod(cwise+s_max/2, nsectors);
 376:..\VFH/vfh.c  ****         } else { // nearest edge is ccwise from goal sector
 377:..\VFH/vfh.c  ****             return alpha*true_mod(ccwise-s_max/2, nsectors);
 378:..\VFH/vfh.c  ****         }
 379:..\VFH/vfh.c  ****             
 380:..\VFH/vfh.c  ****     } else { // goal lies behind obstacle
 381:..\VFH/vfh.c  ****         int step = 1;
 2146              		.loc 1 381 0
 2147 0110 0123     		movs	r3, #1
 2148 0112 FB66     		str	r3, [r7, #108]
 382:..\VFH/vfh.c  ****         int cwise = true_mod(goal_sector-step, nsectors);
 2149              		.loc 1 382 0
 2150 0114 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 46


 2151 0116 FB6E     		ldr	r3, [r7, #108]
 2152 0118 D31A     		subs	r3, r2, r3
 2153 011a 1846     		mov	r0, r3
 2154 011c FFF7FEFF 		bl	__aeabi_i2d
 2155 0120 0446     		mov	r4, r0
 2156 0122 0D46     		mov	r5, r1
 2157 0124 F86C     		ldr	r0, [r7, #76]
 2158 0126 FFF7FEFF 		bl	__aeabi_i2d
 2159 012a 0246     		mov	r2, r0
 2160 012c 0B46     		mov	r3, r1
 2161 012e 2046     		mov	r0, r4
 2162 0130 2946     		mov	r1, r5
 2163 0132 FFF7FEFF 		bl	true_mod
 2164 0136 0346     		mov	r3, r0
 2165 0138 0C46     		mov	r4, r1
 2166 013a 1846     		mov	r0, r3
 2167 013c 2146     		mov	r1, r4
 2168 013e FFF7FEFF 		bl	__aeabi_d2iz
 2169 0142 0346     		mov	r3, r0
 2170 0144 BB66     		str	r3, [r7, #104]
 383:..\VFH/vfh.c  ****         int ccwise = true_mod(goal_sector+step, nsectors);
 2171              		.loc 1 383 0
 2172 0146 7A69     		ldr	r2, [r7, #20]
 2173 0148 FB6E     		ldr	r3, [r7, #108]
 2174 014a 1344     		add	r3, r3, r2
 2175 014c 1846     		mov	r0, r3
 2176 014e FFF7FEFF 		bl	__aeabi_i2d
 2177 0152 0446     		mov	r4, r0
 2178 0154 0D46     		mov	r5, r1
 2179 0156 F86C     		ldr	r0, [r7, #76]
 2180 0158 FFF7FEFF 		bl	__aeabi_i2d
 2181 015c 0246     		mov	r2, r0
 2182 015e 0B46     		mov	r3, r1
 2183 0160 2046     		mov	r0, r4
 2184 0162 2946     		mov	r1, r5
 2185 0164 FFF7FEFF 		bl	true_mod
 2186 0168 0346     		mov	r3, r0
 2187 016a 0C46     		mov	r4, r1
 2188 016c 1846     		mov	r0, r3
 2189 016e 2146     		mov	r1, r4
 2190 0170 FFF7FEFF 		bl	__aeabi_d2iz
 2191 0174 0346     		mov	r3, r0
 2192 0176 7B66     		str	r3, [r7, #100]
 384:..\VFH/vfh.c  ****         while( candidate_lst[cwise] == 1 && candidate_lst[ccwise]==1 && step<nsectors/2 ) 
 2193              		.loc 1 384 0
 2194 0178 34E0     		b	.L109
 2195              	.L111:
 385:..\VFH/vfh.c  ****         {
 386:..\VFH/vfh.c  ****             step++;
 2196              		.loc 1 386 0
 2197 017a FB6E     		ldr	r3, [r7, #108]
 2198 017c 0133     		adds	r3, r3, #1
 2199 017e FB66     		str	r3, [r7, #108]
 387:..\VFH/vfh.c  ****             cwise = true_mod(goal_sector-step, nsectors);
 2200              		.loc 1 387 0
 2201 0180 7A69     		ldr	r2, [r7, #20]
 2202 0182 FB6E     		ldr	r3, [r7, #108]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 47


 2203 0184 D31A     		subs	r3, r2, r3
 2204 0186 1846     		mov	r0, r3
 2205 0188 FFF7FEFF 		bl	__aeabi_i2d
 2206 018c 0446     		mov	r4, r0
 2207 018e 0D46     		mov	r5, r1
 2208 0190 F86C     		ldr	r0, [r7, #76]
 2209 0192 FFF7FEFF 		bl	__aeabi_i2d
 2210 0196 0246     		mov	r2, r0
 2211 0198 0B46     		mov	r3, r1
 2212 019a 2046     		mov	r0, r4
 2213 019c 2946     		mov	r1, r5
 2214 019e FFF7FEFF 		bl	true_mod
 2215 01a2 0346     		mov	r3, r0
 2216 01a4 0C46     		mov	r4, r1
 2217 01a6 1846     		mov	r0, r3
 2218 01a8 2146     		mov	r1, r4
 2219 01aa FFF7FEFF 		bl	__aeabi_d2iz
 2220 01ae 0346     		mov	r3, r0
 2221 01b0 BB66     		str	r3, [r7, #104]
 388:..\VFH/vfh.c  ****             ccwise = true_mod(goal_sector+step, nsectors);
 2222              		.loc 1 388 0
 2223 01b2 7A69     		ldr	r2, [r7, #20]
 2224 01b4 FB6E     		ldr	r3, [r7, #108]
 2225 01b6 1344     		add	r3, r3, r2
 2226 01b8 1846     		mov	r0, r3
 2227 01ba FFF7FEFF 		bl	__aeabi_i2d
 2228 01be 0446     		mov	r4, r0
 2229 01c0 0D46     		mov	r5, r1
 2230 01c2 F86C     		ldr	r0, [r7, #76]
 2231 01c4 FFF7FEFF 		bl	__aeabi_i2d
 2232 01c8 0246     		mov	r2, r0
 2233 01ca 0B46     		mov	r3, r1
 2234 01cc 2046     		mov	r0, r4
 2235 01ce 2946     		mov	r1, r5
 2236 01d0 FFF7FEFF 		bl	true_mod
 2237 01d4 0346     		mov	r3, r0
 2238 01d6 0C46     		mov	r4, r1
 2239 01d8 1846     		mov	r0, r3
 2240 01da 2146     		mov	r1, r4
 2241 01dc FFF7FEFF 		bl	__aeabi_d2iz
 2242 01e0 0346     		mov	r3, r0
 2243 01e2 7B66     		str	r3, [r7, #100]
 2244              	.L109:
 384:..\VFH/vfh.c  ****         {
 2245              		.loc 1 384 0
 2246 01e4 BB6E     		ldr	r3, [r7, #104]
 2247 01e6 9B00     		lsls	r3, r3, #2
 2248 01e8 7A68     		ldr	r2, [r7, #4]
 2249 01ea 1344     		add	r3, r3, r2
 2250 01ec 1B68     		ldr	r3, [r3]
 2251 01ee 012B     		cmp	r3, #1
 2252 01f0 0ED1     		bne	.L110
 384:..\VFH/vfh.c  ****         {
 2253              		.loc 1 384 0 is_stmt 0 discriminator 1
 2254 01f2 7B6E     		ldr	r3, [r7, #100]
 2255 01f4 9B00     		lsls	r3, r3, #2
 2256 01f6 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 48


 2257 01f8 1344     		add	r3, r3, r2
 2258 01fa 1B68     		ldr	r3, [r3]
 2259 01fc 012B     		cmp	r3, #1
 2260 01fe 07D1     		bne	.L110
 384:..\VFH/vfh.c  ****         {
 2261              		.loc 1 384 0 discriminator 2
 2262 0200 FB6C     		ldr	r3, [r7, #76]
 2263 0202 DA0F     		lsrs	r2, r3, #31
 2264 0204 1344     		add	r3, r3, r2
 2265 0206 5B10     		asrs	r3, r3, #1
 2266 0208 1A46     		mov	r2, r3
 2267 020a FB6E     		ldr	r3, [r7, #108]
 2268 020c 9A42     		cmp	r2, r3
 2269 020e B4DC     		bgt	.L111
 2270              	.L110:
 389:..\VFH/vfh.c  ****         }
 390:..\VFH/vfh.c  ****         if( step == nsectors/2 ) // whole histogram is obstacles
 2271              		.loc 1 390 0 is_stmt 1
 2272 0210 FB6C     		ldr	r3, [r7, #76]
 2273 0212 DA0F     		lsrs	r2, r3, #31
 2274 0214 1344     		add	r3, r3, r2
 2275 0216 5B10     		asrs	r3, r3, #1
 2276 0218 1A46     		mov	r2, r3
 2277 021a FB6E     		ldr	r3, [r7, #108]
 2278 021c 9A42     		cmp	r2, r3
 2279 021e 03D1     		bne	.L112
 391:..\VFH/vfh.c  ****         {
 392:..\VFH/vfh.c  ****             return -1;
 2280              		.loc 1 392 0
 2281 0220 4FF00003 		mov	r3, #0
 2282 0224 3A4C     		ldr	r4, .L120+16
 2283 0226 D9E0     		b	.L108
 2284              	.L112:
 393:..\VFH/vfh.c  ****         } else if (!candidate_lst[cwise])   { // first edge is cwise from goal
 2285              		.loc 1 393 0
 2286 0228 BB6E     		ldr	r3, [r7, #104]
 2287 022a 9B00     		lsls	r3, r3, #2
 2288 022c 7A68     		ldr	r2, [r7, #4]
 2289 022e 1344     		add	r3, r3, r2
 2290 0230 1B68     		ldr	r3, [r3]
 2291 0232 002B     		cmp	r3, #0
 2292 0234 6ED1     		bne	.L113
 2293              	.LBB25:
 394:..\VFH/vfh.c  ****             int edge_step = 1;
 2294              		.loc 1 394 0
 2295 0236 0123     		movs	r3, #1
 2296 0238 3B66     		str	r3, [r7, #96]
 395:..\VFH/vfh.c  ****             int far_edge = true_mod(cwise-edge_step, nsectors);
 2297              		.loc 1 395 0
 2298 023a BA6E     		ldr	r2, [r7, #104]
 2299 023c 3B6E     		ldr	r3, [r7, #96]
 2300 023e D31A     		subs	r3, r2, r3
 2301 0240 1846     		mov	r0, r3
 2302 0242 FFF7FEFF 		bl	__aeabi_i2d
 2303 0246 0446     		mov	r4, r0
 2304 0248 0D46     		mov	r5, r1
 2305 024a F86C     		ldr	r0, [r7, #76]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 49


 2306 024c FFF7FEFF 		bl	__aeabi_i2d
 2307 0250 0246     		mov	r2, r0
 2308 0252 0B46     		mov	r3, r1
 2309 0254 2046     		mov	r0, r4
 2310 0256 2946     		mov	r1, r5
 2311 0258 FFF7FEFF 		bl	true_mod
 2312 025c 0346     		mov	r3, r0
 2313 025e 0C46     		mov	r4, r1
 2314 0260 1846     		mov	r0, r3
 2315 0262 2146     		mov	r1, r4
 2316 0264 FFF7FEFF 		bl	__aeabi_d2iz
 2317 0268 0346     		mov	r3, r0
 2318 026a FB65     		str	r3, [r7, #92]
 396:..\VFH/vfh.c  ****             while( !candidate_lst[far_edge] && edge_step < s_max ) {
 2319              		.loc 1 396 0
 2320 026c 1BE0     		b	.L114
 2321              	.L116:
 397:..\VFH/vfh.c  ****                 edge_step++;  
 2322              		.loc 1 397 0
 2323 026e 3B6E     		ldr	r3, [r7, #96]
 2324 0270 0133     		adds	r3, r3, #1
 2325 0272 3B66     		str	r3, [r7, #96]
 398:..\VFH/vfh.c  ****                 far_edge = true_mod(cwise-edge_step, nsectors); 
 2326              		.loc 1 398 0
 2327 0274 BA6E     		ldr	r2, [r7, #104]
 2328 0276 3B6E     		ldr	r3, [r7, #96]
 2329 0278 D31A     		subs	r3, r2, r3
 2330 027a 1846     		mov	r0, r3
 2331 027c FFF7FEFF 		bl	__aeabi_i2d
 2332 0280 0446     		mov	r4, r0
 2333 0282 0D46     		mov	r5, r1
 2334 0284 F86C     		ldr	r0, [r7, #76]
 2335 0286 FFF7FEFF 		bl	__aeabi_i2d
 2336 028a 0246     		mov	r2, r0
 2337 028c 0B46     		mov	r3, r1
 2338 028e 2046     		mov	r0, r4
 2339 0290 2946     		mov	r1, r5
 2340 0292 FFF7FEFF 		bl	true_mod
 2341 0296 0346     		mov	r3, r0
 2342 0298 0C46     		mov	r4, r1
 2343 029a 1846     		mov	r0, r3
 2344 029c 2146     		mov	r1, r4
 2345 029e FFF7FEFF 		bl	__aeabi_d2iz
 2346 02a2 0346     		mov	r3, r0
 2347 02a4 FB65     		str	r3, [r7, #92]
 2348              	.L114:
 396:..\VFH/vfh.c  ****             while( !candidate_lst[far_edge] && edge_step < s_max ) {
 2349              		.loc 1 396 0
 2350 02a6 FB6D     		ldr	r3, [r7, #92]
 2351 02a8 9B00     		lsls	r3, r3, #2
 2352 02aa 7A68     		ldr	r2, [r7, #4]
 2353 02ac 1344     		add	r3, r3, r2
 2354 02ae 1B68     		ldr	r3, [r3]
 2355 02b0 002B     		cmp	r3, #0
 2356 02b2 04D1     		bne	.L115
 396:..\VFH/vfh.c  ****             while( !candidate_lst[far_edge] && edge_step < s_max ) {
 2357              		.loc 1 396 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 50


 2358 02b4 3A6E     		ldr	r2, [r7, #96]
 2359 02b6 D7F88830 		ldr	r3, [r7, #136]
 2360 02ba 9A42     		cmp	r2, r3
 2361 02bc D7DB     		blt	.L116
 2362              	.L115:
 399:..\VFH/vfh.c  ****             }
 400:..\VFH/vfh.c  ****             return alpha * true_mod(far_edge + min_sect_dist(far_edge, cwise, nsectors)/2, nsectors
 2363              		.loc 1 400 0 is_stmt 1
 2364 02be FA6C     		ldr	r2, [r7, #76]
 2365 02c0 B96E     		ldr	r1, [r7, #104]
 2366 02c2 F86D     		ldr	r0, [r7, #92]
 2367 02c4 FFF7FEFF 		bl	min_sect_dist
 2368 02c8 0346     		mov	r3, r0
 2369 02ca DA0F     		lsrs	r2, r3, #31
 2370 02cc 1344     		add	r3, r3, r2
 2371 02ce 5B10     		asrs	r3, r3, #1
 2372 02d0 1A46     		mov	r2, r3
 2373 02d2 FB6D     		ldr	r3, [r7, #92]
 2374 02d4 1344     		add	r3, r3, r2
 2375 02d6 1846     		mov	r0, r3
 2376 02d8 FFF7FEFF 		bl	__aeabi_i2d
 2377 02dc 0446     		mov	r4, r0
 2378 02de 0D46     		mov	r5, r1
 2379 02e0 F86C     		ldr	r0, [r7, #76]
 2380 02e2 FFF7FEFF 		bl	__aeabi_i2d
 2381 02e6 0246     		mov	r2, r0
 2382 02e8 0B46     		mov	r3, r1
 2383 02ea 2046     		mov	r0, r4
 2384 02ec 2946     		mov	r1, r5
 2385 02ee FFF7FEFF 		bl	true_mod
 2386 02f2 D7E92023 		ldrd	r2, [r7, #128]
 2387 02f6 FFF7FEFF 		bl	__aeabi_dmul
 2388 02fa 0346     		mov	r3, r0
 2389 02fc 0C46     		mov	r4, r1
 2390 02fe 6DE0     		b	.L108
 2391              	.L121:
 2392              		.align	3
 2393              	.L120:
 2394 0300 182D4454 		.word	1413754136
 2395 0304 FB210940 		.word	1074340347
 2396 0308 00807640 		.word	1081507840
 2397 030c 00806640 		.word	1080459264
 2398 0310 0000F0BF 		.word	-1074790400
 2399              	.L113:
 2400              	.LBE25:
 2401              	.LBB26:
 401:..\VFH/vfh.c  ****         } else { // first edge is ccwise from goal
 402:..\VFH/vfh.c  ****             int edge_step = 1;
 2402              		.loc 1 402 0
 2403 0314 0123     		movs	r3, #1
 2404 0316 BB65     		str	r3, [r7, #88]
 403:..\VFH/vfh.c  ****             int far_edge = true_mod(ccwise+edge_step, nsectors);
 2405              		.loc 1 403 0
 2406 0318 7A6E     		ldr	r2, [r7, #100]
 2407 031a BB6D     		ldr	r3, [r7, #88]
 2408 031c 1344     		add	r3, r3, r2
 2409 031e 1846     		mov	r0, r3
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 51


 2410 0320 FFF7FEFF 		bl	__aeabi_i2d
 2411 0324 0446     		mov	r4, r0
 2412 0326 0D46     		mov	r5, r1
 2413 0328 F86C     		ldr	r0, [r7, #76]
 2414 032a FFF7FEFF 		bl	__aeabi_i2d
 2415 032e 0246     		mov	r2, r0
 2416 0330 0B46     		mov	r3, r1
 2417 0332 2046     		mov	r0, r4
 2418 0334 2946     		mov	r1, r5
 2419 0336 FFF7FEFF 		bl	true_mod
 2420 033a 0346     		mov	r3, r0
 2421 033c 0C46     		mov	r4, r1
 2422 033e 1846     		mov	r0, r3
 2423 0340 2146     		mov	r1, r4
 2424 0342 FFF7FEFF 		bl	__aeabi_d2iz
 2425 0346 0346     		mov	r3, r0
 2426 0348 7B65     		str	r3, [r7, #84]
 404:..\VFH/vfh.c  ****             while( !candidate_lst[far_edge] && edge_step < s_max ) {
 2427              		.loc 1 404 0
 2428 034a 1BE0     		b	.L117
 2429              	.L119:
 405:..\VFH/vfh.c  ****                 edge_step++;  
 2430              		.loc 1 405 0
 2431 034c BB6D     		ldr	r3, [r7, #88]
 2432 034e 0133     		adds	r3, r3, #1
 2433 0350 BB65     		str	r3, [r7, #88]
 406:..\VFH/vfh.c  ****                 far_edge = true_mod(ccwise+edge_step, nsectors); 
 2434              		.loc 1 406 0
 2435 0352 7A6E     		ldr	r2, [r7, #100]
 2436 0354 BB6D     		ldr	r3, [r7, #88]
 2437 0356 1344     		add	r3, r3, r2
 2438 0358 1846     		mov	r0, r3
 2439 035a FFF7FEFF 		bl	__aeabi_i2d
 2440 035e 0446     		mov	r4, r0
 2441 0360 0D46     		mov	r5, r1
 2442 0362 F86C     		ldr	r0, [r7, #76]
 2443 0364 FFF7FEFF 		bl	__aeabi_i2d
 2444 0368 0246     		mov	r2, r0
 2445 036a 0B46     		mov	r3, r1
 2446 036c 2046     		mov	r0, r4
 2447 036e 2946     		mov	r1, r5
 2448 0370 FFF7FEFF 		bl	true_mod
 2449 0374 0346     		mov	r3, r0
 2450 0376 0C46     		mov	r4, r1
 2451 0378 1846     		mov	r0, r3
 2452 037a 2146     		mov	r1, r4
 2453 037c FFF7FEFF 		bl	__aeabi_d2iz
 2454 0380 0346     		mov	r3, r0
 2455 0382 7B65     		str	r3, [r7, #84]
 2456              	.L117:
 404:..\VFH/vfh.c  ****             while( !candidate_lst[far_edge] && edge_step < s_max ) {
 2457              		.loc 1 404 0
 2458 0384 7B6D     		ldr	r3, [r7, #84]
 2459 0386 9B00     		lsls	r3, r3, #2
 2460 0388 7A68     		ldr	r2, [r7, #4]
 2461 038a 1344     		add	r3, r3, r2
 2462 038c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 52


 2463 038e 002B     		cmp	r3, #0
 2464 0390 04D1     		bne	.L118
 404:..\VFH/vfh.c  ****             while( !candidate_lst[far_edge] && edge_step < s_max ) {
 2465              		.loc 1 404 0 is_stmt 0 discriminator 1
 2466 0392 BA6D     		ldr	r2, [r7, #88]
 2467 0394 D7F88830 		ldr	r3, [r7, #136]
 2468 0398 9A42     		cmp	r2, r3
 2469 039a D7DB     		blt	.L119
 2470              	.L118:
 407:..\VFH/vfh.c  ****             }
 408:..\VFH/vfh.c  ****             return alpha * true_mod(ccwise + min_sect_dist(far_edge, ccwise, nsectors)/2, nsectors)
 2471              		.loc 1 408 0 is_stmt 1
 2472 039c FA6C     		ldr	r2, [r7, #76]
 2473 039e 796E     		ldr	r1, [r7, #100]
 2474 03a0 786D     		ldr	r0, [r7, #84]
 2475 03a2 FFF7FEFF 		bl	min_sect_dist
 2476 03a6 0346     		mov	r3, r0
 2477 03a8 DA0F     		lsrs	r2, r3, #31
 2478 03aa 1344     		add	r3, r3, r2
 2479 03ac 5B10     		asrs	r3, r3, #1
 2480 03ae 1A46     		mov	r2, r3
 2481 03b0 7B6E     		ldr	r3, [r7, #100]
 2482 03b2 1344     		add	r3, r3, r2
 2483 03b4 1846     		mov	r0, r3
 2484 03b6 FFF7FEFF 		bl	__aeabi_i2d
 2485 03ba 0446     		mov	r4, r0
 2486 03bc 0D46     		mov	r5, r1
 2487 03be F86C     		ldr	r0, [r7, #76]
 2488 03c0 FFF7FEFF 		bl	__aeabi_i2d
 2489 03c4 0246     		mov	r2, r0
 2490 03c6 0B46     		mov	r3, r1
 2491 03c8 2046     		mov	r0, r4
 2492 03ca 2946     		mov	r1, r5
 2493 03cc FFF7FEFF 		bl	true_mod
 2494 03d0 D7E92023 		ldrd	r2, [r7, #128]
 2495 03d4 FFF7FEFF 		bl	__aeabi_dmul
 2496 03d8 0346     		mov	r3, r0
 2497 03da 0C46     		mov	r4, r1
 2498              	.L108:
 2499              	.LBE26:
 2500              	.LBE24:
 409:..\VFH/vfh.c  ****         }
 410:..\VFH/vfh.c  ****     }  
 411:..\VFH/vfh.c  **** }
 2501              		.loc 1 411 0
 2502 03dc 1846     		mov	r0, r3
 2503 03de 2146     		mov	r1, r4
 2504 03e0 7037     		adds	r7, r7, #112
 2505              		.cfi_def_cfa_offset 16
 2506 03e2 BD46     		mov	sp, r7
 2507              		.cfi_def_cfa_register 13
 2508              		@ sp needed
 2509 03e4 B0BD     		pop	{r4, r5, r7, pc}
 2510              		.cfi_endproc
 2511              	.LFE8:
 2512              		.size	calculate_avoidance_angle2, .-calculate_avoidance_angle2
 2513 03e6 00BF     		.section	.text.velocity_control,"ax",%progbits
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 53


 2514              		.align	2
 2515              		.global	velocity_control
 2516              		.thumb
 2517              		.thumb_func
 2518              		.type	velocity_control, %function
 2519              	velocity_control:
 2520              	.LFB9:
 412:..\VFH/vfh.c  **** 
 413:..\VFH/vfh.c  **** 
 414:..\VFH/vfh.c  **** double velocity_control(POD * smoothed_POD, double direction, double alpha, double h_m) {
 2521              		.loc 1 414 0
 2522              		.cfi_startproc
 2523              		@ args = 16, pretend = 0, frame = 56
 2524              		@ frame_needed = 1, uses_anonymous_args = 0
 2525 0000 90B5     		push	{r4, r7, lr}
 2526              		.cfi_def_cfa_offset 12
 2527              		.cfi_offset 4, -12
 2528              		.cfi_offset 7, -8
 2529              		.cfi_offset 14, -4
 2530 0002 8FB0     		sub	sp, sp, #60
 2531              		.cfi_def_cfa_offset 72
 2532 0004 00AF     		add	r7, sp, #0
 2533              		.cfi_def_cfa_register 7
 2534 0006 F860     		str	r0, [r7, #12]
 2535 0008 C7E90023 		strd	r2, [r7]
 415:..\VFH/vfh.c  ****   // Max velocity
 416:..\VFH/vfh.c  ****   double V_MAX = 10;
 2536              		.loc 1 416 0
 2537 000c 4FF00003 		mov	r3, #0
 2538 0010 354C     		ldr	r4, .L129+8
 2539 0012 C7E90A34 		strd	r3, [r7, #40]
 417:..\VFH/vfh.c  **** 
 418:..\VFH/vfh.c  ****   // Convert the direction of travel into sector index
 419:..\VFH/vfh.c  ****   int h_idx = floor((180 * calculate_angle_modulo(direction) / M_PI)  / alpha);
 2540              		.loc 1 419 0
 2541 0016 D7E90001 		ldrd	r0, [r7]
 2542 001a FFF7FEFF 		bl	calculate_angle_modulo
 2543 001e 4FF00002 		mov	r2, #0
 2544 0022 324B     		ldr	r3, .L129+12
 2545 0024 FFF7FEFF 		bl	__aeabi_dmul
 2546 0028 0346     		mov	r3, r0
 2547 002a 0C46     		mov	r4, r1
 2548 002c 1846     		mov	r0, r3
 2549 002e 2146     		mov	r1, r4
 2550 0030 2BA3     		adr	r3, .L129
 2551 0032 D3E90023 		ldrd	r2, [r3]
 2552 0036 FFF7FEFF 		bl	__aeabi_ddiv
 2553 003a 0346     		mov	r3, r0
 2554 003c 0C46     		mov	r4, r1
 2555 003e 1846     		mov	r0, r3
 2556 0040 2146     		mov	r1, r4
 2557 0042 D7E91223 		ldrd	r2, [r7, #72]
 2558 0046 FFF7FEFF 		bl	__aeabi_ddiv
 2559 004a 0346     		mov	r3, r0
 2560 004c 0C46     		mov	r4, r1
 2561 004e 1846     		mov	r0, r3
 2562 0050 2146     		mov	r1, r4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 54


 2563 0052 FFF7FEFF 		bl	floor
 2564 0056 0346     		mov	r3, r0
 2565 0058 0C46     		mov	r4, r1
 2566 005a 1846     		mov	r0, r3
 2567 005c 2146     		mov	r1, r4
 2568 005e FFF7FEFF 		bl	__aeabi_d2iz
 2569 0062 0346     		mov	r3, r0
 2570 0064 7B62     		str	r3, [r7, #36]
 420:..\VFH/vfh.c  ****   
 421:..\VFH/vfh.c  ****   // Retrieve polar histogram density at this sector
 422:..\VFH/vfh.c  ****   double h_c = smoothed_POD->density[h_idx];
 2571              		.loc 1 422 0
 2572 0066 FB68     		ldr	r3, [r7, #12]
 2573 0068 5A68     		ldr	r2, [r3, #4]
 2574 006a 7B6A     		ldr	r3, [r7, #36]
 2575 006c DB00     		lsls	r3, r3, #3
 2576 006e 1344     		add	r3, r3, r2
 2577 0070 18CB     		ldmia	r3, {r3-r4}
 2578 0072 C7E90634 		strd	r3, [r7, #24]
 423:..\VFH/vfh.c  **** 
 424:..\VFH/vfh.c  ****   // NOTE: If h_c > 0, that indicates that an obstacles lies ahead of the robot
 425:..\VFH/vfh.c  **** 
 426:..\VFH/vfh.c  ****   // Define h_m which is an empirically determined constant. h_cc later must be less than h_m
 427:..\VFH/vfh.c  **** 
 428:..\VFH/vfh.c  ****   double h_cc;
 429:..\VFH/vfh.c  ****   if (h_c > h_m) {
 2579              		.loc 1 429 0
 2580 0076 D7E91423 		ldrd	r2, [r7, #80]
 2581 007a D7E90601 		ldrd	r0, [r7, #24]
 2582 007e FFF7FEFF 		bl	__aeabi_dcmpgt
 2583 0082 0346     		mov	r3, r0
 2584 0084 002B     		cmp	r3, #0
 2585 0086 04D0     		beq	.L128
 430:..\VFH/vfh.c  ****     h_cc = h_m;
 2586              		.loc 1 430 0
 2587 0088 D7E91434 		ldrd	r3, [r7, #80]
 2588 008c C7E90C34 		strd	r3, [r7, #48]
 2589 0090 03E0     		b	.L125
 2590              	.L128:
 431:..\VFH/vfh.c  ****   } else {
 432:..\VFH/vfh.c  ****     h_cc = h_c;
 2591              		.loc 1 432 0
 2592 0092 D7E90634 		ldrd	r3, [r7, #24]
 2593 0096 C7E90C34 		strd	r3, [r7, #48]
 2594              	.L125:
 433:..\VFH/vfh.c  ****   }
 434:..\VFH/vfh.c  ****   double speed_reduction = V_MAX * (1 - (h_cc / h_m));
 2595              		.loc 1 434 0
 2596 009a D7E91423 		ldrd	r2, [r7, #80]
 2597 009e D7E90C01 		ldrd	r0, [r7, #48]
 2598 00a2 FFF7FEFF 		bl	__aeabi_ddiv
 2599 00a6 0346     		mov	r3, r0
 2600 00a8 0C46     		mov	r4, r1
 2601 00aa 1A46     		mov	r2, r3
 2602 00ac 2346     		mov	r3, r4
 2603 00ae 4FF00000 		mov	r0, #0
 2604 00b2 0F49     		ldr	r1, .L129+16
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 55


 2605 00b4 FFF7FEFF 		bl	__aeabi_dsub
 2606 00b8 0346     		mov	r3, r0
 2607 00ba 0C46     		mov	r4, r1
 2608 00bc 1846     		mov	r0, r3
 2609 00be 2146     		mov	r1, r4
 2610 00c0 D7E90A23 		ldrd	r2, [r7, #40]
 2611 00c4 FFF7FEFF 		bl	__aeabi_dmul
 2612 00c8 0346     		mov	r3, r0
 2613 00ca 0C46     		mov	r4, r1
 2614 00cc C7E90434 		strd	r3, [r7, #16]
 435:..\VFH/vfh.c  **** 
 436:..\VFH/vfh.c  ****   // Further reduce speed to anticipate obstacles
 437:..\VFH/vfh.c  ****   
 438:..\VFH/vfh.c  ****   return speed_reduction;
 2615              		.loc 1 438 0
 2616 00d0 D7E90434 		ldrd	r3, [r7, #16]
 439:..\VFH/vfh.c  **** }
 2617              		.loc 1 439 0
 2618 00d4 1846     		mov	r0, r3
 2619 00d6 2146     		mov	r1, r4
 2620 00d8 3C37     		adds	r7, r7, #60
 2621              		.cfi_def_cfa_offset 12
 2622 00da BD46     		mov	sp, r7
 2623              		.cfi_def_cfa_register 13
 2624              		@ sp needed
 2625 00dc 90BD     		pop	{r4, r7, pc}
 2626              	.L130:
 2627 00de 00BF     		.align	3
 2628              	.L129:
 2629 00e0 182D4454 		.word	1413754136
 2630 00e4 FB210940 		.word	1074340347
 2631 00e8 00002440 		.word	1076101120
 2632 00ec 00806640 		.word	1080459264
 2633 00f0 0000F03F 		.word	1072693248
 2634              		.cfi_endproc
 2635              	.LFE9:
 2636              		.size	velocity_control, .-velocity_control
 2637              		.text
 2638              	.Letext0:
 2639              		.file 2 "..\\VFH\\..\\Helper\\helper.h"
 2640              		.file 3 "..\\VFH\\..\\Robot\\robot.h"
 2641              		.file 4 "..\\VFH\\vfh.h"
 2642              		.section	.debug_info,"",%progbits
 2643              	.Ldebug_info0:
 2644 0000 EA0A0000 		.4byte	0xaea
 2645 0004 0400     		.2byte	0x4
 2646 0006 00000000 		.4byte	.Ldebug_abbrev0
 2647 000a 04       		.byte	0x4
 2648 000b 01       		.uleb128 0x1
 2649 000c 3E000000 		.4byte	.LASF89
 2650 0010 0C       		.byte	0xc
 2651 0011 F5030000 		.4byte	.LASF90
 2652 0015 AB030000 		.4byte	.LASF91
 2653 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2654 001d 00000000 		.4byte	0
 2655 0021 00000000 		.4byte	.Ldebug_line0
 2656 0025 02       		.uleb128 0x2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 56


 2657 0026 04       		.byte	0x4
 2658 0027 07       		.byte	0x7
 2659 0028 E2010000 		.4byte	.LASF0
 2660 002c 03       		.uleb128 0x3
 2661 002d 04       		.byte	0x4
 2662 002e 05       		.byte	0x5
 2663 002f 696E7400 		.ascii	"int\000"
 2664 0033 02       		.uleb128 0x2
 2665 0034 08       		.byte	0x8
 2666 0035 05       		.byte	0x5
 2667 0036 3B010000 		.4byte	.LASF1
 2668 003a 02       		.uleb128 0x2
 2669 003b 08       		.byte	0x8
 2670 003c 04       		.byte	0x4
 2671 003d 7E020000 		.4byte	.LASF2
 2672 0041 02       		.uleb128 0x2
 2673 0042 01       		.byte	0x1
 2674 0043 06       		.byte	0x6
 2675 0044 49010000 		.4byte	.LASF3
 2676 0048 02       		.uleb128 0x2
 2677 0049 01       		.byte	0x1
 2678 004a 08       		.byte	0x8
 2679 004b F7020000 		.4byte	.LASF4
 2680 004f 02       		.uleb128 0x2
 2681 0050 02       		.byte	0x2
 2682 0051 05       		.byte	0x5
 2683 0052 0A030000 		.4byte	.LASF5
 2684 0056 02       		.uleb128 0x2
 2685 0057 02       		.byte	0x2
 2686 0058 07       		.byte	0x7
 2687 0059 37020000 		.4byte	.LASF6
 2688 005d 02       		.uleb128 0x2
 2689 005e 04       		.byte	0x4
 2690 005f 05       		.byte	0x5
 2691 0060 72010000 		.4byte	.LASF7
 2692 0064 02       		.uleb128 0x2
 2693 0065 04       		.byte	0x4
 2694 0066 07       		.byte	0x7
 2695 0067 F8010000 		.4byte	.LASF8
 2696 006b 02       		.uleb128 0x2
 2697 006c 08       		.byte	0x8
 2698 006d 07       		.byte	0x7
 2699 006e D4000000 		.4byte	.LASF9
 2700 0072 02       		.uleb128 0x2
 2701 0073 04       		.byte	0x4
 2702 0074 07       		.byte	0x7
 2703 0075 75020000 		.4byte	.LASF10
 2704 0079 02       		.uleb128 0x2
 2705 007a 01       		.byte	0x1
 2706 007b 08       		.byte	0x8
 2707 007c 84030000 		.4byte	.LASF11
 2708 0080 02       		.uleb128 0x2
 2709 0081 08       		.byte	0x8
 2710 0082 04       		.byte	0x4
 2711 0083 89010000 		.4byte	.LASF12
 2712 0087 02       		.uleb128 0x2
 2713 0088 04       		.byte	0x4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 57


 2714 0089 04       		.byte	0x4
 2715 008a DB020000 		.4byte	.LASF13
 2716 008e 04       		.uleb128 0x4
 2717 008f 28       		.byte	0x28
 2718 0090 02       		.byte	0x2
 2719 0091 22       		.byte	0x22
 2720 0092 AF000000 		.4byte	0xaf
 2721 0096 05       		.uleb128 0x5
 2722 0097 34000000 		.4byte	.LASF14
 2723 009b 02       		.byte	0x2
 2724 009c 23       		.byte	0x23
 2725 009d AF000000 		.4byte	0xaf
 2726 00a1 00       		.byte	0
 2727 00a2 05       		.uleb128 0x5
 2728 00a3 97030000 		.4byte	.LASF15
 2729 00a7 02       		.byte	0x2
 2730 00a8 24       		.byte	0x24
 2731 00a9 AF000000 		.4byte	0xaf
 2732 00ad 14       		.byte	0x14
 2733 00ae 00       		.byte	0
 2734 00af 06       		.uleb128 0x6
 2735 00b0 2C000000 		.4byte	0x2c
 2736 00b4 BF000000 		.4byte	0xbf
 2737 00b8 07       		.uleb128 0x7
 2738 00b9 72000000 		.4byte	0x72
 2739 00bd 04       		.byte	0x4
 2740 00be 00       		.byte	0
 2741 00bf 08       		.uleb128 0x8
 2742 00c0 6E020000 		.4byte	.LASF24
 2743 00c4 02       		.byte	0x2
 2744 00c5 25       		.byte	0x25
 2745 00c6 8E000000 		.4byte	0x8e
 2746 00ca 04       		.uleb128 0x4
 2747 00cb 70       		.byte	0x70
 2748 00cc 03       		.byte	0x3
 2749 00cd 1A       		.byte	0x1a
 2750 00ce 71010000 		.4byte	0x171
 2751 00d2 05       		.uleb128 0x5
 2752 00d3 1C030000 		.4byte	.LASF16
 2753 00d7 03       		.byte	0x3
 2754 00d8 1C       		.byte	0x1c
 2755 00d9 3A000000 		.4byte	0x3a
 2756 00dd 00       		.byte	0
 2757 00de 05       		.uleb128 0x5
 2758 00df 4A020000 		.4byte	.LASF17
 2759 00e3 03       		.byte	0x3
 2760 00e4 1F       		.byte	0x1f
 2761 00e5 3A000000 		.4byte	0x3a
 2762 00e9 08       		.byte	0x8
 2763 00ea 09       		.uleb128 0x9
 2764 00eb 7800     		.ascii	"x\000"
 2765 00ed 03       		.byte	0x3
 2766 00ee 20       		.byte	0x20
 2767 00ef 3A000000 		.4byte	0x3a
 2768 00f3 10       		.byte	0x10
 2769 00f4 09       		.uleb128 0x9
 2770 00f5 7900     		.ascii	"y\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 58


 2771 00f7 03       		.byte	0x3
 2772 00f8 21       		.byte	0x21
 2773 00f9 3A000000 		.4byte	0x3a
 2774 00fd 18       		.byte	0x18
 2775 00fe 09       		.uleb128 0x9
 2776 00ff 7600     		.ascii	"v\000"
 2777 0101 03       		.byte	0x3
 2778 0102 24       		.byte	0x24
 2779 0103 3A000000 		.4byte	0x3a
 2780 0107 20       		.byte	0x20
 2781 0108 09       		.uleb128 0x9
 2782 0109 7700     		.ascii	"w\000"
 2783 010b 03       		.byte	0x3
 2784 010c 25       		.byte	0x25
 2785 010d 3A000000 		.4byte	0x3a
 2786 0111 28       		.byte	0x28
 2787 0112 05       		.uleb128 0x5
 2788 0113 64020000 		.4byte	.LASF18
 2789 0117 03       		.byte	0x3
 2790 0118 28       		.byte	0x28
 2791 0119 3A000000 		.4byte	0x3a
 2792 011d 30       		.byte	0x30
 2793 011e 05       		.uleb128 0x5
 2794 011f 02040000 		.4byte	.LASF19
 2795 0123 03       		.byte	0x3
 2796 0124 29       		.byte	0x29
 2797 0125 3A000000 		.4byte	0x3a
 2798 0129 38       		.byte	0x38
 2799 012a 09       		.uleb128 0x9
 2800 012b 4B6900   		.ascii	"Ki\000"
 2801 012e 03       		.byte	0x3
 2802 012f 2C       		.byte	0x2c
 2803 0130 3A000000 		.4byte	0x3a
 2804 0134 40       		.byte	0x40
 2805 0135 09       		.uleb128 0x9
 2806 0136 4B7000   		.ascii	"Kp\000"
 2807 0139 03       		.byte	0x3
 2808 013a 2D       		.byte	0x2d
 2809 013b 3A000000 		.4byte	0x3a
 2810 013f 48       		.byte	0x48
 2811 0140 05       		.uleb128 0x5
 2812 0141 55010000 		.4byte	.LASF20
 2813 0145 03       		.byte	0x3
 2814 0146 2E       		.byte	0x2e
 2815 0147 3A000000 		.4byte	0x3a
 2816 014b 50       		.byte	0x50
 2817 014c 05       		.uleb128 0x5
 2818 014d E1020000 		.4byte	.LASF21
 2819 0151 03       		.byte	0x3
 2820 0152 31       		.byte	0x31
 2821 0153 3A000000 		.4byte	0x3a
 2822 0157 58       		.byte	0x58
 2823 0158 05       		.uleb128 0x5
 2824 0159 E8020000 		.4byte	.LASF22
 2825 015d 03       		.byte	0x3
 2826 015e 32       		.byte	0x32
 2827 015f 3A000000 		.4byte	0x3a
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 59


 2828 0163 60       		.byte	0x60
 2829 0164 05       		.uleb128 0x5
 2830 0165 50020000 		.4byte	.LASF23
 2831 0169 03       		.byte	0x3
 2832 016a 33       		.byte	0x33
 2833 016b 3A000000 		.4byte	0x3a
 2834 016f 68       		.byte	0x68
 2835 0170 00       		.byte	0
 2836 0171 08       		.uleb128 0x8
 2837 0172 3A040000 		.4byte	.LASF25
 2838 0176 03       		.byte	0x3
 2839 0177 35       		.byte	0x35
 2840 0178 CA000000 		.4byte	0xca
 2841 017c 04       		.uleb128 0x4
 2842 017d 10       		.byte	0x10
 2843 017e 04       		.byte	0x4
 2844 017f 13       		.byte	0x13
 2845 0180 B5010000 		.4byte	0x1b5
 2846 0184 05       		.uleb128 0x5
 2847 0185 31020000 		.4byte	.LASF26
 2848 0189 04       		.byte	0x4
 2849 018a 14       		.byte	0x14
 2850 018b 2C000000 		.4byte	0x2c
 2851 018f 00       		.byte	0
 2852 0190 05       		.uleb128 0x5
 2853 0191 5F040000 		.4byte	.LASF27
 2854 0195 04       		.byte	0x4
 2855 0196 15       		.byte	0x15
 2856 0197 2C000000 		.4byte	0x2c
 2857 019b 04       		.byte	0x4
 2858 019c 05       		.uleb128 0x5
 2859 019d 45030000 		.4byte	.LASF28
 2860 01a1 04       		.byte	0x4
 2861 01a2 16       		.byte	0x16
 2862 01a3 2C000000 		.4byte	0x2c
 2863 01a7 08       		.byte	0x8
 2864 01a8 05       		.uleb128 0x5
 2865 01a9 5E020000 		.4byte	.LASF29
 2866 01ad 04       		.byte	0x4
 2867 01ae 17       		.byte	0x17
 2868 01af B5010000 		.4byte	0x1b5
 2869 01b3 0C       		.byte	0xc
 2870 01b4 00       		.byte	0
 2871 01b5 0A       		.uleb128 0xa
 2872 01b6 04       		.byte	0x4
 2873 01b7 25000000 		.4byte	0x25
 2874 01bb 08       		.uleb128 0x8
 2875 01bc AD020000 		.4byte	.LASF30
 2876 01c0 04       		.byte	0x4
 2877 01c1 18       		.byte	0x18
 2878 01c2 7C010000 		.4byte	0x17c
 2879 01c6 04       		.uleb128 0x4
 2880 01c7 08       		.byte	0x8
 2881 01c8 04       		.byte	0x4
 2882 01c9 2E       		.byte	0x2e
 2883 01ca E7010000 		.4byte	0x1e7
 2884 01ce 05       		.uleb128 0x5
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 60


 2885 01cf EF010000 		.4byte	.LASF31
 2886 01d3 04       		.byte	0x4
 2887 01d4 2F       		.byte	0x2f
 2888 01d5 2C000000 		.4byte	0x2c
 2889 01d9 00       		.byte	0
 2890 01da 05       		.uleb128 0x5
 2891 01db CC000000 		.4byte	.LASF32
 2892 01df 04       		.byte	0x4
 2893 01e0 30       		.byte	0x30
 2894 01e1 E7010000 		.4byte	0x1e7
 2895 01e5 04       		.byte	0x4
 2896 01e6 00       		.byte	0
 2897 01e7 0A       		.uleb128 0xa
 2898 01e8 04       		.byte	0x4
 2899 01e9 80000000 		.4byte	0x80
 2900 01ed 0B       		.uleb128 0xb
 2901 01ee 504F4400 		.ascii	"POD\000"
 2902 01f2 04       		.byte	0x4
 2903 01f3 31       		.byte	0x31
 2904 01f4 C6010000 		.4byte	0x1c6
 2905 01f8 0C       		.uleb128 0xc
 2906 01f9 90010000 		.4byte	.LASF33
 2907 01fd 01       		.byte	0x1
 2908 01fe 0E       		.byte	0xe
 2909 01ff 80000000 		.4byte	0x80
 2910 0203 00000000 		.4byte	.LFB0
 2911 0207 4C000000 		.4byte	.LFE0-.LFB0
 2912 020b 01       		.uleb128 0x1
 2913 020c 9C       		.byte	0x9c
 2914 020d 2A020000 		.4byte	0x22a
 2915 0211 0D       		.uleb128 0xd
 2916 0212 6100     		.ascii	"a\000"
 2917 0214 01       		.byte	0x1
 2918 0215 0E       		.byte	0xe
 2919 0216 80000000 		.4byte	0x80
 2920 021a 02       		.uleb128 0x2
 2921 021b 91       		.byte	0x91
 2922 021c 68       		.sleb128 -24
 2923 021d 0D       		.uleb128 0xd
 2924 021e 6200     		.ascii	"b\000"
 2925 0220 01       		.byte	0x1
 2926 0221 0E       		.byte	0xe
 2927 0222 80000000 		.4byte	0x80
 2928 0226 02       		.uleb128 0x2
 2929 0227 91       		.byte	0x91
 2930 0228 60       		.sleb128 -32
 2931 0229 00       		.byte	0
 2932 022a 0E       		.uleb128 0xe
 2933 022b A3010000 		.4byte	.LASF34
 2934 022f 01       		.byte	0x1
 2935 0230 12       		.byte	0x12
 2936 0231 2C000000 		.4byte	0x2c
 2937 0235 00000000 		.4byte	.LFB1
 2938 0239 3E000000 		.4byte	.LFE1-.LFB1
 2939 023d 01       		.uleb128 0x1
 2940 023e 9C       		.byte	0x9c
 2941 023f 7C020000 		.4byte	0x27c
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 61


 2942 0243 0F       		.uleb128 0xf
 2943 0244 C3010000 		.4byte	.LASF35
 2944 0248 01       		.byte	0x1
 2945 0249 12       		.byte	0x12
 2946 024a 2C000000 		.4byte	0x2c
 2947 024e 02       		.uleb128 0x2
 2948 024f 91       		.byte	0x91
 2949 0250 6C       		.sleb128 -20
 2950 0251 0F       		.uleb128 0xf
 2951 0252 CA010000 		.4byte	.LASF36
 2952 0256 01       		.byte	0x1
 2953 0257 12       		.byte	0x12
 2954 0258 2C000000 		.4byte	0x2c
 2955 025c 02       		.uleb128 0x2
 2956 025d 91       		.byte	0x91
 2957 025e 68       		.sleb128 -24
 2958 025f 0F       		.uleb128 0xf
 2959 0260 EF010000 		.4byte	.LASF31
 2960 0264 01       		.byte	0x1
 2961 0265 12       		.byte	0x12
 2962 0266 2C000000 		.4byte	0x2c
 2963 026a 02       		.uleb128 0x2
 2964 026b 91       		.byte	0x91
 2965 026c 64       		.sleb128 -28
 2966 026d 10       		.uleb128 0x10
 2967 026e 7B010000 		.4byte	.LASF38
 2968 0272 01       		.byte	0x1
 2969 0273 13       		.byte	0x13
 2970 0274 2C000000 		.4byte	0x2c
 2971 0278 02       		.uleb128 0x2
 2972 0279 91       		.byte	0x91
 2973 027a 74       		.sleb128 -12
 2974 027b 00       		.byte	0
 2975 027c 0C       		.uleb128 0xc
 2976 027d 5F010000 		.4byte	.LASF37
 2977 0281 01       		.byte	0x1
 2978 0282 1A       		.byte	0x1a
 2979 0283 FA020000 		.4byte	0x2fa
 2980 0287 00000000 		.4byte	.LFB2
 2981 028b B6000000 		.4byte	.LFE2-.LFB2
 2982 028f 01       		.uleb128 0x1
 2983 0290 9C       		.byte	0x9c
 2984 0291 FA020000 		.4byte	0x2fa
 2985 0295 0F       		.uleb128 0xf
 2986 0296 31020000 		.4byte	.LASF26
 2987 029a 01       		.byte	0x1
 2988 029b 1A       		.byte	0x1a
 2989 029c 2C000000 		.4byte	0x2c
 2990 02a0 02       		.uleb128 0x2
 2991 02a1 91       		.byte	0x91
 2992 02a2 64       		.sleb128 -28
 2993 02a3 0F       		.uleb128 0xf
 2994 02a4 5F040000 		.4byte	.LASF27
 2995 02a8 01       		.byte	0x1
 2996 02a9 1A       		.byte	0x1a
 2997 02aa 2C000000 		.4byte	0x2c
 2998 02ae 02       		.uleb128 0x2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 62


 2999 02af 91       		.byte	0x91
 3000 02b0 60       		.sleb128 -32
 3001 02b1 0F       		.uleb128 0xf
 3002 02b2 45030000 		.4byte	.LASF28
 3003 02b6 01       		.byte	0x1
 3004 02b7 1A       		.byte	0x1a
 3005 02b8 2C000000 		.4byte	0x2c
 3006 02bc 02       		.uleb128 0x2
 3007 02bd 91       		.byte	0x91
 3008 02be 5C       		.sleb128 -36
 3009 02bf 11       		.uleb128 0x11
 3010 02c0 6D617000 		.ascii	"map\000"
 3011 02c4 01       		.byte	0x1
 3012 02c5 1D       		.byte	0x1d
 3013 02c6 FA020000 		.4byte	0x2fa
 3014 02ca 02       		.uleb128 0x2
 3015 02cb 91       		.byte	0x91
 3016 02cc 6C       		.sleb128 -20
 3017 02cd 12       		.uleb128 0x12
 3018 02ce 6C000000 		.4byte	.LBB2
 3019 02d2 40000000 		.4byte	.LBE2-.LBB2
 3020 02d6 11       		.uleb128 0x11
 3021 02d7 6900     		.ascii	"i\000"
 3022 02d9 01       		.byte	0x1
 3023 02da 33       		.byte	0x33
 3024 02db 2C000000 		.4byte	0x2c
 3025 02df 02       		.uleb128 0x2
 3026 02e0 91       		.byte	0x91
 3027 02e1 74       		.sleb128 -12
 3028 02e2 12       		.uleb128 0x12
 3029 02e3 72000000 		.4byte	.LBB3
 3030 02e7 2C000000 		.4byte	.LBE3-.LBB3
 3031 02eb 11       		.uleb128 0x11
 3032 02ec 6A00     		.ascii	"j\000"
 3033 02ee 01       		.byte	0x1
 3034 02ef 34       		.byte	0x34
 3035 02f0 2C000000 		.4byte	0x2c
 3036 02f4 02       		.uleb128 0x2
 3037 02f5 91       		.byte	0x91
 3038 02f6 70       		.sleb128 -16
 3039 02f7 00       		.byte	0
 3040 02f8 00       		.byte	0
 3041 02f9 00       		.byte	0
 3042 02fa 0A       		.uleb128 0xa
 3043 02fb 04       		.byte	0x4
 3044 02fc BB010000 		.4byte	0x1bb
 3045 0300 0C       		.uleb128 0xc
 3046 0301 14000000 		.4byte	.LASF39
 3047 0305 01       		.byte	0x1
 3048 0306 3C       		.byte	0x3c
 3049 0307 2C000000 		.4byte	0x2c
 3050 030b 00000000 		.4byte	.LFB3
 3051 030f 50030000 		.4byte	.LFE3-.LFB3
 3052 0313 01       		.uleb128 0x1
 3053 0314 9C       		.byte	0x9c
 3054 0315 F7030000 		.4byte	0x3f7
 3055 0319 0D       		.uleb128 0xd
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 63


 3056 031a 6D617000 		.ascii	"map\000"
 3057 031e 01       		.byte	0x1
 3058 031f 3C       		.byte	0x3c
 3059 0320 FA020000 		.4byte	0x2fa
 3060 0324 03       		.uleb128 0x3
 3061 0325 91       		.byte	0x91
 3062 0326 EC7E     		.sleb128 -148
 3063 0328 0F       		.uleb128 0xf
 3064 0329 65030000 		.4byte	.LASF40
 3065 032d 01       		.byte	0x1
 3066 032e 3C       		.byte	0x3c
 3067 032f F7030000 		.4byte	0x3f7
 3068 0333 03       		.uleb128 0x3
 3069 0334 91       		.byte	0x91
 3070 0335 E87E     		.sleb128 -152
 3071 0337 0F       		.uleb128 0xf
 3072 0338 D1010000 		.4byte	.LASF41
 3073 033c 01       		.byte	0x1
 3074 033d 3C       		.byte	0x3c
 3075 033e FD030000 		.4byte	0x3fd
 3076 0342 03       		.uleb128 0x3
 3077 0343 91       		.byte	0x91
 3078 0344 E47E     		.sleb128 -156
 3079 0346 10       		.uleb128 0x10
 3080 0347 CF020000 		.4byte	.LASF42
 3081 034b 01       		.byte	0x1
 3082 034c 49       		.byte	0x49
 3083 034d 80000000 		.4byte	0x80
 3084 0351 02       		.uleb128 0x2
 3085 0352 91       		.byte	0x91
 3086 0353 40       		.sleb128 -64
 3087 0354 10       		.uleb128 0x10
 3088 0355 D5020000 		.4byte	.LASF43
 3089 0359 01       		.byte	0x1
 3090 035a 4A       		.byte	0x4a
 3091 035b 80000000 		.4byte	0x80
 3092 035f 03       		.uleb128 0x3
 3093 0360 91       		.byte	0x91
 3094 0361 B87F     		.sleb128 -72
 3095 0363 11       		.uleb128 0x11
 3096 0364 79617700 		.ascii	"yaw\000"
 3097 0368 01       		.byte	0x1
 3098 0369 4B       		.byte	0x4b
 3099 036a 80000000 		.4byte	0x80
 3100 036e 03       		.uleb128 0x3
 3101 036f 91       		.byte	0x91
 3102 0370 B07F     		.sleb128 -80
 3103 0372 10       		.uleb128 0x10
 3104 0373 89030000 		.4byte	.LASF44
 3105 0377 01       		.byte	0x1
 3106 0378 4E       		.byte	0x4e
 3107 0379 03040000 		.4byte	0x403
 3108 037d 03       		.uleb128 0x3
 3109 037e 91       		.byte	0x91
 3110 037f F07E     		.sleb128 -144
 3111 0381 10       		.uleb128 0x10
 3112 0382 4A020000 		.4byte	.LASF17
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 64


 3113 0386 01       		.byte	0x1
 3114 0387 54       		.byte	0x54
 3115 0388 80000000 		.4byte	0x80
 3116 038c 02       		.uleb128 0x2
 3117 038d 91       		.byte	0x91
 3118 038e 50       		.sleb128 -48
 3119 038f 10       		.uleb128 0x10
 3120 0390 B2020000 		.4byte	.LASF45
 3121 0394 01       		.byte	0x1
 3122 0395 55       		.byte	0x55
 3123 0396 80000000 		.4byte	0x80
 3124 039a 03       		.uleb128 0x3
 3125 039b 91       		.byte	0x91
 3126 039c A87F     		.sleb128 -88
 3127 039e 13       		.uleb128 0x13
 3128 039f 4E000000 		.4byte	.LBB4
 3129 03a3 40000000 		.4byte	.LBE4-.LBB4
 3130 03a7 B8030000 		.4byte	0x3b8
 3131 03ab 11       		.uleb128 0x11
 3132 03ac 6900     		.ascii	"i\000"
 3133 03ae 01       		.byte	0x1
 3134 03af 4F       		.byte	0x4f
 3135 03b0 2C000000 		.4byte	0x2c
 3136 03b4 02       		.uleb128 0x2
 3137 03b5 91       		.byte	0x91
 3138 03b6 5C       		.sleb128 -36
 3139 03b7 00       		.byte	0
 3140 03b8 12       		.uleb128 0x12
 3141 03b9 8E000000 		.4byte	.LBB5
 3142 03bd 9A020000 		.4byte	.LBE5-.LBB5
 3143 03c1 11       		.uleb128 0x11
 3144 03c2 6900     		.ascii	"i\000"
 3145 03c4 01       		.byte	0x1
 3146 03c5 57       		.byte	0x57
 3147 03c6 2C000000 		.4byte	0x2c
 3148 03ca 02       		.uleb128 0x2
 3149 03cb 91       		.byte	0x91
 3150 03cc 4C       		.sleb128 -52
 3151 03cd 12       		.uleb128 0x12
 3152 03ce 94000000 		.4byte	.LBB6
 3153 03d2 86020000 		.4byte	.LBE6-.LBB6
 3154 03d6 10       		.uleb128 0x10
 3155 03d7 27030000 		.4byte	.LASF46
 3156 03db 01       		.byte	0x1
 3157 03dc 62       		.byte	0x62
 3158 03dd 80000000 		.4byte	0x80
 3159 03e1 03       		.uleb128 0x3
 3160 03e2 91       		.byte	0x91
 3161 03e3 A07F     		.sleb128 -96
 3162 03e5 10       		.uleb128 0x10
 3163 03e6 B1010000 		.4byte	.LASF47
 3164 03ea 01       		.byte	0x1
 3165 03eb 63       		.byte	0x63
 3166 03ec 80000000 		.4byte	0x80
 3167 03f0 03       		.uleb128 0x3
 3168 03f1 91       		.byte	0x91
 3169 03f2 987F     		.sleb128 -104
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 65


 3170 03f4 00       		.byte	0
 3171 03f5 00       		.byte	0
 3172 03f6 00       		.byte	0
 3173 03f7 0A       		.uleb128 0xa
 3174 03f8 04       		.byte	0x4
 3175 03f9 BF000000 		.4byte	0xbf
 3176 03fd 0A       		.uleb128 0xa
 3177 03fe 04       		.byte	0x4
 3178 03ff 71010000 		.4byte	0x171
 3179 0403 06       		.uleb128 0x6
 3180 0404 80000000 		.4byte	0x80
 3181 0408 13040000 		.4byte	0x413
 3182 040c 07       		.uleb128 0x7
 3183 040d 72000000 		.4byte	0x72
 3184 0411 04       		.byte	0x4
 3185 0412 00       		.byte	0
 3186 0413 14       		.uleb128 0x14
 3187 0414 27040000 		.4byte	.LASF53
 3188 0418 01       		.byte	0x1
 3189 0419 72       		.byte	0x72
 3190 041a 00000000 		.4byte	.LFB4
 3191 041e F8000000 		.4byte	.LFE4-.LFB4
 3192 0422 01       		.uleb128 0x1
 3193 0423 9C       		.byte	0x9c
 3194 0424 BD040000 		.4byte	0x4bd
 3195 0428 0D       		.uleb128 0xd
 3196 0429 6D617000 		.ascii	"map\000"
 3197 042d 01       		.byte	0x1
 3198 042e 72       		.byte	0x72
 3199 042f FA020000 		.4byte	0x2fa
 3200 0433 02       		.uleb128 0x2
 3201 0434 91       		.byte	0x91
 3202 0435 54       		.sleb128 -44
 3203 0436 0F       		.uleb128 0xf
 3204 0437 6B010000 		.4byte	.LASF48
 3205 043b 01       		.byte	0x1
 3206 043c 72       		.byte	0x72
 3207 043d FA020000 		.4byte	0x2fa
 3208 0441 02       		.uleb128 0x2
 3209 0442 91       		.byte	0x91
 3210 0443 50       		.sleb128 -48
 3211 0444 0F       		.uleb128 0xf
 3212 0445 D1010000 		.4byte	.LASF41
 3213 0449 01       		.byte	0x1
 3214 044a 72       		.byte	0x72
 3215 044b FD030000 		.4byte	0x3fd
 3216 044f 02       		.uleb128 0x2
 3217 0450 91       		.byte	0x91
 3218 0451 4C       		.sleb128 -52
 3219 0452 11       		.uleb128 0x11
 3220 0453 7800     		.ascii	"x\000"
 3221 0455 01       		.byte	0x1
 3222 0456 78       		.byte	0x78
 3223 0457 2C000000 		.4byte	0x2c
 3224 045b 02       		.uleb128 0x2
 3225 045c 91       		.byte	0x91
 3226 045d 64       		.sleb128 -28
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 66


 3227 045e 11       		.uleb128 0x11
 3228 045f 7900     		.ascii	"y\000"
 3229 0461 01       		.byte	0x1
 3230 0462 79       		.byte	0x79
 3231 0463 2C000000 		.4byte	0x2c
 3232 0467 02       		.uleb128 0x2
 3233 0468 91       		.byte	0x91
 3234 0469 60       		.sleb128 -32
 3235 046a 12       		.uleb128 0x12
 3236 046b 38000000 		.4byte	.LBB7
 3237 046f B8000000 		.4byte	.LBE7-.LBB7
 3238 0473 11       		.uleb128 0x11
 3239 0474 6900     		.ascii	"i\000"
 3240 0476 01       		.byte	0x1
 3241 0477 7C       		.byte	0x7c
 3242 0478 2C000000 		.4byte	0x2c
 3243 047c 02       		.uleb128 0x2
 3244 047d 91       		.byte	0x91
 3245 047e 6C       		.sleb128 -20
 3246 047f 12       		.uleb128 0x12
 3247 0480 3E000000 		.4byte	.LBB8
 3248 0484 A2000000 		.4byte	.LBE8-.LBB8
 3249 0488 11       		.uleb128 0x11
 3250 0489 6A00     		.ascii	"j\000"
 3251 048b 01       		.byte	0x1
 3252 048c 7D       		.byte	0x7d
 3253 048d 2C000000 		.4byte	0x2c
 3254 0491 02       		.uleb128 0x2
 3255 0492 91       		.byte	0x91
 3256 0493 68       		.sleb128 -24
 3257 0494 12       		.uleb128 0x12
 3258 0495 44000000 		.4byte	.LBB9
 3259 0499 8C000000 		.4byte	.LBE9-.LBB9
 3260 049d 10       		.uleb128 0x10
 3261 049e 20000000 		.4byte	.LASF49
 3262 04a2 01       		.byte	0x1
 3263 04a3 80       		.byte	0x80
 3264 04a4 2C000000 		.4byte	0x2c
 3265 04a8 02       		.uleb128 0x2
 3266 04a9 91       		.byte	0x91
 3267 04aa 5C       		.sleb128 -36
 3268 04ab 10       		.uleb128 0x10
 3269 04ac 27000000 		.4byte	.LASF50
 3270 04b0 01       		.byte	0x1
 3271 04b1 81       		.byte	0x81
 3272 04b2 2C000000 		.4byte	0x2c
 3273 04b6 02       		.uleb128 0x2
 3274 04b7 91       		.byte	0x91
 3275 04b8 58       		.sleb128 -40
 3276 04b9 00       		.byte	0
 3277 04ba 00       		.byte	0
 3278 04bb 00       		.byte	0
 3279 04bc 00       		.byte	0
 3280 04bd 0C       		.uleb128 0xc
 3281 04be D7010000 		.4byte	.LASF51
 3282 04c2 01       		.byte	0x1
 3283 04c3 90       		.byte	0x90
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 67


 3284 04c4 09050000 		.4byte	0x509
 3285 04c8 00000000 		.4byte	.LFB5
 3286 04cc DC000000 		.4byte	.LFE5-.LFB5
 3287 04d0 01       		.uleb128 0x1
 3288 04d1 9C       		.byte	0x9c
 3289 04d2 09050000 		.4byte	0x509
 3290 04d6 0F       		.uleb128 0xf
 3291 04d7 2E000000 		.4byte	.LASF52
 3292 04db 01       		.byte	0x1
 3293 04dc 90       		.byte	0x90
 3294 04dd 80000000 		.4byte	0x80
 3295 04e1 02       		.uleb128 0x2
 3296 04e2 91       		.byte	0x91
 3297 04e3 60       		.sleb128 -32
 3298 04e4 11       		.uleb128 0x11
 3299 04e5 706F6400 		.ascii	"pod\000"
 3300 04e9 01       		.byte	0x1
 3301 04ea 91       		.byte	0x91
 3302 04eb 09050000 		.4byte	0x509
 3303 04ef 02       		.uleb128 0x2
 3304 04f0 91       		.byte	0x91
 3305 04f1 68       		.sleb128 -24
 3306 04f2 12       		.uleb128 0x12
 3307 04f3 9C000000 		.4byte	.LBB10
 3308 04f7 2C000000 		.4byte	.LBE10-.LBB10
 3309 04fb 11       		.uleb128 0x11
 3310 04fc 6900     		.ascii	"i\000"
 3311 04fe 01       		.byte	0x1
 3312 04ff A5       		.byte	0xa5
 3313 0500 2C000000 		.4byte	0x2c
 3314 0504 02       		.uleb128 0x2
 3315 0505 91       		.byte	0x91
 3316 0506 6C       		.sleb128 -20
 3317 0507 00       		.byte	0
 3318 0508 00       		.byte	0
 3319 0509 0A       		.uleb128 0xa
 3320 050a 04       		.byte	0x4
 3321 050b ED010000 		.4byte	0x1ed
 3322 050f 14       		.uleb128 0x14
 3323 0510 0A020000 		.4byte	.LASF54
 3324 0514 01       		.byte	0x1
 3325 0515 AB       		.byte	0xab
 3326 0516 00000000 		.4byte	.LFB6
 3327 051a 0C040000 		.4byte	.LFE6-.LFB6
 3328 051e 01       		.uleb128 0x1
 3329 051f 9C       		.byte	0x9c
 3330 0520 77060000 		.4byte	0x677
 3331 0524 0F       		.uleb128 0xf
 3332 0525 07000000 		.4byte	.LASF55
 3333 0529 01       		.byte	0x1
 3334 052a AB       		.byte	0xab
 3335 052b 09050000 		.4byte	0x509
 3336 052f 03       		.uleb128 0x3
 3337 0530 91       		.byte	0x91
 3338 0531 947F     		.sleb128 -108
 3339 0533 0F       		.uleb128 0xf
 3340 0534 6B010000 		.4byte	.LASF48
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 68


 3341 0538 01       		.byte	0x1
 3342 0539 AB       		.byte	0xab
 3343 053a FA020000 		.4byte	0x2fa
 3344 053e 03       		.uleb128 0x3
 3345 053f 91       		.byte	0x91
 3346 0540 907F     		.sleb128 -112
 3347 0542 0F       		.uleb128 0xf
 3348 0543 2E000000 		.4byte	.LASF52
 3349 0547 01       		.byte	0x1
 3350 0548 AB       		.byte	0xab
 3351 0549 80000000 		.4byte	0x80
 3352 054d 03       		.uleb128 0x3
 3353 054e 91       		.byte	0x91
 3354 054f 887F     		.sleb128 -120
 3355 0551 0D       		.uleb128 0xd
 3356 0552 6C00     		.ascii	"l\000"
 3357 0554 01       		.byte	0x1
 3358 0555 AB       		.byte	0xab
 3359 0556 80000000 		.4byte	0x80
 3360 055a 02       		.uleb128 0x2
 3361 055b 91       		.byte	0x91
 3362 055c 00       		.sleb128 0
 3363 055d 0D       		.uleb128 0xd
 3364 055e 6100     		.ascii	"a\000"
 3365 0560 01       		.byte	0x1
 3366 0561 AB       		.byte	0xab
 3367 0562 80000000 		.4byte	0x80
 3368 0566 02       		.uleb128 0x2
 3369 0567 91       		.byte	0x91
 3370 0568 08       		.sleb128 8
 3371 0569 0D       		.uleb128 0xd
 3372 056a 6200     		.ascii	"b\000"
 3373 056c 01       		.byte	0x1
 3374 056d AB       		.byte	0xab
 3375 056e 80000000 		.4byte	0x80
 3376 0572 02       		.uleb128 0x2
 3377 0573 91       		.byte	0x91
 3378 0574 10       		.sleb128 16
 3379 0575 10       		.uleb128 0x10
 3380 0576 3D030000 		.4byte	.LASF56
 3381 057a 01       		.byte	0x1
 3382 057b AC       		.byte	0xac
 3383 057c 2C000000 		.4byte	0x2c
 3384 0580 02       		.uleb128 0x2
 3385 0581 91       		.byte	0x91
 3386 0582 40       		.sleb128 -64
 3387 0583 10       		.uleb128 0x10
 3388 0584 31020000 		.4byte	.LASF26
 3389 0588 01       		.byte	0x1
 3390 0589 AD       		.byte	0xad
 3391 058a 2C000000 		.4byte	0x2c
 3392 058e 03       		.uleb128 0x3
 3393 058f 91       		.byte	0x91
 3394 0590 BC7F     		.sleb128 -68
 3395 0592 10       		.uleb128 0x10
 3396 0593 5F040000 		.4byte	.LASF27
 3397 0597 01       		.byte	0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 69


 3398 0598 AE       		.byte	0xae
 3399 0599 2C000000 		.4byte	0x2c
 3400 059d 03       		.uleb128 0x3
 3401 059e 91       		.byte	0x91
 3402 059f B87F     		.sleb128 -72
 3403 05a1 10       		.uleb128 0x10
 3404 05a2 A4020000 		.4byte	.LASF57
 3405 05a6 01       		.byte	0x1
 3406 05a7 AF       		.byte	0xaf
 3407 05a8 77060000 		.4byte	0x677
 3408 05ac 04       		.uleb128 0x4
 3409 05ad 91       		.byte	0x91
 3410 05ae B07F     		.sleb128 -80
 3411 05b0 06       		.byte	0x6
 3412 05b1 13       		.uleb128 0x13
 3413 05b2 6A000000 		.4byte	.LBB11
 3414 05b6 28000000 		.4byte	.LBE11-.LBB11
 3415 05ba CB050000 		.4byte	0x5cb
 3416 05be 11       		.uleb128 0x11
 3417 05bf 6900     		.ascii	"i\000"
 3418 05c1 01       		.byte	0x1
 3419 05c2 B2       		.byte	0xb2
 3420 05c3 2C000000 		.4byte	0x2c
 3421 05c7 02       		.uleb128 0x2
 3422 05c8 91       		.byte	0x91
 3423 05c9 5C       		.sleb128 -36
 3424 05ca 00       		.byte	0
 3425 05cb 13       		.uleb128 0x13
 3426 05cc 92000000 		.4byte	.LBB12
 3427 05d0 BA010000 		.4byte	.LBE12-.LBB12
 3428 05d4 23060000 		.4byte	0x623
 3429 05d8 11       		.uleb128 0x11
 3430 05d9 6900     		.ascii	"i\000"
 3431 05db 01       		.byte	0x1
 3432 05dc B6       		.byte	0xb6
 3433 05dd 2C000000 		.4byte	0x2c
 3434 05e1 02       		.uleb128 0x2
 3435 05e2 91       		.byte	0x91
 3436 05e3 58       		.sleb128 -40
 3437 05e4 12       		.uleb128 0x12
 3438 05e5 98000000 		.4byte	.LBB13
 3439 05e9 A4010000 		.4byte	.LBE13-.LBB13
 3440 05ed 11       		.uleb128 0x11
 3441 05ee 6A00     		.ascii	"j\000"
 3442 05f0 01       		.byte	0x1
 3443 05f1 B7       		.byte	0xb7
 3444 05f2 2C000000 		.4byte	0x2c
 3445 05f6 02       		.uleb128 0x2
 3446 05f7 91       		.byte	0x91
 3447 05f8 54       		.sleb128 -44
 3448 05f9 12       		.uleb128 0x12
 3449 05fa 9E000000 		.4byte	.LBB14
 3450 05fe 8E010000 		.4byte	.LBE14-.LBB14
 3451 0602 10       		.uleb128 0x10
 3452 0603 35040000 		.4byte	.LASF58
 3453 0607 01       		.byte	0x1
 3454 0608 B9       		.byte	0xb9
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 70


 3455 0609 80000000 		.4byte	0x80
 3456 060d 03       		.uleb128 0x3
 3457 060e 91       		.byte	0x91
 3458 060f A87F     		.sleb128 -88
 3459 0611 10       		.uleb128 0x10
 3460 0612 CC000000 		.4byte	.LASF32
 3461 0616 01       		.byte	0x1
 3462 0617 BC       		.byte	0xbc
 3463 0618 80000000 		.4byte	0x80
 3464 061c 03       		.uleb128 0x3
 3465 061d 91       		.byte	0x91
 3466 061e A07F     		.sleb128 -96
 3467 0620 00       		.byte	0
 3468 0621 00       		.byte	0
 3469 0622 00       		.byte	0
 3470 0623 12       		.uleb128 0x12
 3471 0624 4C020000 		.4byte	.LBB15
 3472 0628 AE010000 		.4byte	.LBE15-.LBB15
 3473 062c 11       		.uleb128 0x11
 3474 062d 6900     		.ascii	"i\000"
 3475 062f 01       		.byte	0x1
 3476 0630 C8       		.byte	0xc8
 3477 0631 2C000000 		.4byte	0x2c
 3478 0635 02       		.uleb128 0x2
 3479 0636 91       		.byte	0x91
 3480 0637 50       		.sleb128 -48
 3481 0638 12       		.uleb128 0x12
 3482 0639 52020000 		.4byte	.LBB16
 3483 063d 98010000 		.4byte	.LBE16-.LBB16
 3484 0641 10       		.uleb128 0x10
 3485 0642 20010000 		.4byte	.LASF59
 3486 0646 01       		.byte	0x1
 3487 0647 C9       		.byte	0xc9
 3488 0648 80000000 		.4byte	0x80
 3489 064c 02       		.uleb128 0x2
 3490 064d 91       		.byte	0x91
 3491 064e 48       		.sleb128 -56
 3492 064f 10       		.uleb128 0x10
 3493 0650 73030000 		.4byte	.LASF60
 3494 0654 01       		.byte	0x1
 3495 0655 D3       		.byte	0xd3
 3496 0656 80000000 		.4byte	0x80
 3497 065a 03       		.uleb128 0x3
 3498 065b 91       		.byte	0x91
 3499 065c 987F     		.sleb128 -104
 3500 065e 12       		.uleb128 0x12
 3501 065f 6E020000 		.4byte	.LBB17
 3502 0663 34010000 		.4byte	.LBE17-.LBB17
 3503 0667 11       		.uleb128 0x11
 3504 0668 6A00     		.ascii	"j\000"
 3505 066a 01       		.byte	0x1
 3506 066b CB       		.byte	0xcb
 3507 066c 2C000000 		.4byte	0x2c
 3508 0670 02       		.uleb128 0x2
 3509 0671 91       		.byte	0x91
 3510 0672 44       		.sleb128 -60
 3511 0673 00       		.byte	0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 71


 3512 0674 00       		.byte	0
 3513 0675 00       		.byte	0
 3514 0676 00       		.byte	0
 3515 0677 06       		.uleb128 0x6
 3516 0678 80000000 		.4byte	0x80
 3517 067c 8B060000 		.4byte	0x68b
 3518 0680 15       		.uleb128 0x15
 3519 0681 72000000 		.4byte	0x72
 3520 0685 04       		.uleb128 0x4
 3521 0686 91       		.byte	0x91
 3522 0687 B47F     		.sleb128 -76
 3523 0689 06       		.byte	0x6
 3524 068a 00       		.byte	0
 3525 068b 0C       		.uleb128 0xc
 3526 068c 8A020000 		.4byte	.LASF61
 3527 0690 01       		.byte	0x1
 3528 0691 DD       		.byte	0xdd
 3529 0692 80000000 		.4byte	0x80
 3530 0696 00000000 		.4byte	.LFB7
 3531 069a 44040000 		.4byte	.LFE7-.LFB7
 3532 069e 01       		.uleb128 0x1
 3533 069f 9C       		.byte	0x9c
 3534 06a0 95080000 		.4byte	0x895
 3535 06a4 0F       		.uleb128 0xf
 3536 06a5 07000000 		.4byte	.LASF55
 3537 06a9 01       		.byte	0x1
 3538 06aa DD       		.byte	0xdd
 3539 06ab 09050000 		.4byte	0x509
 3540 06af 03       		.uleb128 0x3
 3541 06b0 91       		.byte	0x91
 3542 06b1 E47E     		.sleb128 -156
 3543 06b3 0F       		.uleb128 0xf
 3544 06b4 D1010000 		.4byte	.LASF41
 3545 06b8 01       		.byte	0x1
 3546 06b9 DD       		.byte	0xdd
 3547 06ba FD030000 		.4byte	0x3fd
 3548 06be 03       		.uleb128 0x3
 3549 06bf 91       		.byte	0x91
 3550 06c0 E07E     		.sleb128 -160
 3551 06c2 0F       		.uleb128 0xf
 3552 06c3 C1020000 		.4byte	.LASF62
 3553 06c7 01       		.byte	0x1
 3554 06c8 DD       		.byte	0xdd
 3555 06c9 95080000 		.4byte	0x895
 3556 06cd 03       		.uleb128 0x3
 3557 06ce 91       		.byte	0x91
 3558 06cf DC7E     		.sleb128 -164
 3559 06d1 0F       		.uleb128 0xf
 3560 06d2 2E000000 		.4byte	.LASF52
 3561 06d6 01       		.byte	0x1
 3562 06d7 DD       		.byte	0xdd
 3563 06d8 80000000 		.4byte	0x80
 3564 06dc 02       		.uleb128 0x2
 3565 06dd 91       		.byte	0x91
 3566 06de 00       		.sleb128 0
 3567 06df 0F       		.uleb128 0xf
 3568 06e0 21040000 		.4byte	.LASF63
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 72


 3569 06e4 01       		.byte	0x1
 3570 06e5 DD       		.byte	0xdd
 3571 06e6 2C000000 		.4byte	0x2c
 3572 06ea 02       		.uleb128 0x2
 3573 06eb 91       		.byte	0x91
 3574 06ec 08       		.sleb128 8
 3575 06ed 10       		.uleb128 0x10
 3576 06ee 2C010000 		.4byte	.LASF64
 3577 06f2 01       		.byte	0x1
 3578 06f3 DF       		.byte	0xdf
 3579 06f4 2C000000 		.4byte	0x2c
 3580 06f8 03       		.uleb128 0x3
 3581 06f9 91       		.byte	0x91
 3582 06fa BC7F     		.sleb128 -68
 3583 06fc 10       		.uleb128 0x10
 3584 06fd EF010000 		.4byte	.LASF31
 3585 0701 01       		.byte	0x1
 3586 0702 E0       		.byte	0xe0
 3587 0703 2C000000 		.4byte	0x2c
 3588 0707 03       		.uleb128 0x3
 3589 0708 91       		.byte	0x91
 3590 0709 B87F     		.sleb128 -72
 3591 070b 10       		.uleb128 0x10
 3592 070c CF020000 		.4byte	.LASF42
 3593 0710 01       		.byte	0x1
 3594 0711 E3       		.byte	0xe3
 3595 0712 80000000 		.4byte	0x80
 3596 0716 03       		.uleb128 0x3
 3597 0717 91       		.byte	0x91
 3598 0718 B07F     		.sleb128 -80
 3599 071a 10       		.uleb128 0x10
 3600 071b D5020000 		.4byte	.LASF43
 3601 071f 01       		.byte	0x1
 3602 0720 E4       		.byte	0xe4
 3603 0721 80000000 		.4byte	0x80
 3604 0725 03       		.uleb128 0x3
 3605 0726 91       		.byte	0x91
 3606 0727 A87F     		.sleb128 -88
 3607 0729 10       		.uleb128 0x10
 3608 072a EF020000 		.4byte	.LASF65
 3609 072e 01       		.byte	0x1
 3610 072f E5       		.byte	0xe5
 3611 0730 80000000 		.4byte	0x80
 3612 0734 03       		.uleb128 0x3
 3613 0735 91       		.byte	0x91
 3614 0736 A07F     		.sleb128 -96
 3615 0738 10       		.uleb128 0x10
 3616 0739 E1020000 		.4byte	.LASF21
 3617 073d 01       		.byte	0x1
 3618 073e E6       		.byte	0xe6
 3619 073f 80000000 		.4byte	0x80
 3620 0743 03       		.uleb128 0x3
 3621 0744 91       		.byte	0x91
 3622 0745 987F     		.sleb128 -104
 3623 0747 10       		.uleb128 0x10
 3624 0748 E8020000 		.4byte	.LASF22
 3625 074c 01       		.byte	0x1
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 73


 3626 074d E7       		.byte	0xe7
 3627 074e 80000000 		.4byte	0x80
 3628 0752 03       		.uleb128 0x3
 3629 0753 91       		.byte	0x91
 3630 0754 907F     		.sleb128 -112
 3631 0756 10       		.uleb128 0x10
 3632 0757 2D030000 		.4byte	.LASF66
 3633 075b 01       		.byte	0x1
 3634 075c E9       		.byte	0xe9
 3635 075d 80000000 		.4byte	0x80
 3636 0761 03       		.uleb128 0x3
 3637 0762 91       		.byte	0x91
 3638 0763 887F     		.sleb128 -120
 3639 0765 10       		.uleb128 0x10
 3640 0766 B7010000 		.4byte	.LASF67
 3641 076a 01       		.byte	0x1
 3642 076b EA       		.byte	0xea
 3643 076c 2C000000 		.4byte	0x2c
 3644 0770 03       		.uleb128 0x3
 3645 0771 91       		.byte	0x91
 3646 0772 847F     		.sleb128 -124
 3647 0774 10       		.uleb128 0x10
 3648 0775 5D030000 		.4byte	.LASF68
 3649 0779 01       		.byte	0x1
 3650 077a EB       		.byte	0xeb
 3651 077b 2C000000 		.4byte	0x2c
 3652 077f 02       		.uleb128 0x2
 3653 0780 91       		.byte	0x91
 3654 0781 6C       		.sleb128 -20
 3655 0782 11       		.uleb128 0x11
 3656 0783 6B5F6E00 		.ascii	"k_n\000"
 3657 0787 01       		.byte	0x1
 3658 0788 EC       		.byte	0xec
 3659 0789 2C000000 		.4byte	0x2c
 3660 078d 02       		.uleb128 0x2
 3661 078e 91       		.byte	0x91
 3662 078f 68       		.sleb128 -24
 3663 0790 11       		.uleb128 0x11
 3664 0791 6B5F6600 		.ascii	"k_f\000"
 3665 0795 01       		.byte	0x1
 3666 0796 EC       		.byte	0xec
 3667 0797 2C000000 		.4byte	0x2c
 3668 079b 02       		.uleb128 0x2
 3669 079c 91       		.byte	0x91
 3670 079d 64       		.sleb128 -28
 3671 079e 10       		.uleb128 0x10
 3672 079f 14010000 		.4byte	.LASF69
 3673 07a3 01       		.byte	0x1
 3674 07a4 ED       		.byte	0xed
 3675 07a5 2C000000 		.4byte	0x2c
 3676 07a9 02       		.uleb128 0x2
 3677 07aa 91       		.byte	0x91
 3678 07ab 60       		.sleb128 -32
 3679 07ac 10       		.uleb128 0x10
 3680 07ad 14030000 		.4byte	.LASF70
 3681 07b1 01       		.byte	0x1
 3682 07b2 EE       		.byte	0xee
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 74


 3683 07b3 2C000000 		.4byte	0x2c
 3684 07b7 02       		.uleb128 0x2
 3685 07b8 91       		.byte	0x91
 3686 07b9 5C       		.sleb128 -36
 3687 07ba 10       		.uleb128 0x10
 3688 07bb 0C010000 		.4byte	.LASF71
 3689 07bf 01       		.byte	0x1
 3690 07c0 EF       		.byte	0xef
 3691 07c1 2C000000 		.4byte	0x2c
 3692 07c5 02       		.uleb128 0x2
 3693 07c6 91       		.byte	0x91
 3694 07c7 58       		.sleb128 -40
 3695 07c8 10       		.uleb128 0x10
 3696 07c9 A0030000 		.4byte	.LASF72
 3697 07cd 01       		.byte	0x1
 3698 07ce F0       		.byte	0xf0
 3699 07cf 80000000 		.4byte	0x80
 3700 07d3 02       		.uleb128 0x2
 3701 07d4 91       		.byte	0x91
 3702 07d5 50       		.sleb128 -48
 3703 07d6 13       		.uleb128 0x13
 3704 07d7 FA000000 		.4byte	.LBB18
 3705 07db 40020000 		.4byte	.LBE18-.LBB18
 3706 07df 6A080000 		.4byte	0x86a
 3707 07e3 11       		.uleb128 0x11
 3708 07e4 6900     		.ascii	"i\000"
 3709 07e6 01       		.byte	0x1
 3710 07e7 F3       		.byte	0xf3
 3711 07e8 2C000000 		.4byte	0x2c
 3712 07ec 02       		.uleb128 0x2
 3713 07ed 91       		.byte	0x91
 3714 07ee 4C       		.sleb128 -52
 3715 07ef 12       		.uleb128 0x12
 3716 07f0 00010000 		.4byte	.LBB19
 3717 07f4 2A020000 		.4byte	.LBE19-.LBB19
 3718 07f8 11       		.uleb128 0x11
 3719 07f9 69647800 		.ascii	"idx\000"
 3720 07fd 01       		.byte	0x1
 3721 07fe F4       		.byte	0xf4
 3722 07ff 2C000000 		.4byte	0x2c
 3723 0803 03       		.uleb128 0x3
 3724 0804 91       		.byte	0x91
 3725 0805 807F     		.sleb128 -128
 3726 0807 10       		.uleb128 0x10
 3727 0808 50030000 		.4byte	.LASF73
 3728 080c 01       		.byte	0x1
 3729 080d F7       		.byte	0xf7
 3730 080e 2C000000 		.4byte	0x2c
 3731 0812 03       		.uleb128 0x3
 3732 0813 91       		.byte	0x91
 3733 0814 FC7E     		.sleb128 -132
 3734 0816 10       		.uleb128 0x10
 3735 0817 EB000000 		.4byte	.LASF74
 3736 081b 01       		.byte	0x1
 3737 081c F9       		.byte	0xf9
 3738 081d 80000000 		.4byte	0x80
 3739 0821 02       		.uleb128 0x2
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 75


 3740 0822 91       		.byte	0x91
 3741 0823 40       		.sleb128 -64
 3742 0824 12       		.uleb128 0x12
 3743 0825 9A010000 		.4byte	.LBB20
 3744 0829 64010000 		.4byte	.LBE20-.LBB20
 3745 082d 16       		.uleb128 0x16
 3746 082e 40040000 		.4byte	.LASF75
 3747 0832 01       		.byte	0x1
 3748 0833 3B01     		.2byte	0x13b
 3749 0835 2C000000 		.4byte	0x2c
 3750 0839 03       		.uleb128 0x3
 3751 083a 91       		.byte	0x91
 3752 083b F07E     		.sleb128 -144
 3753 083d 12       		.uleb128 0x12
 3754 083e F0010000 		.4byte	.LBB21
 3755 0842 9E000000 		.4byte	.LBE21-.LBB21
 3756 0846 16       		.uleb128 0x16
 3757 0847 6D030000 		.4byte	.LASF76
 3758 084b 01       		.byte	0x1
 3759 084c 3001     		.2byte	0x130
 3760 084e 2C000000 		.4byte	0x2c
 3761 0852 03       		.uleb128 0x3
 3762 0853 91       		.byte	0x91
 3763 0854 F87E     		.sleb128 -136
 3764 0856 16       		.uleb128 0x16
 3765 0857 F0030000 		.4byte	.LASF77
 3766 085b 01       		.byte	0x1
 3767 085c 3101     		.2byte	0x131
 3768 085e 2C000000 		.4byte	0x2c
 3769 0862 03       		.uleb128 0x3
 3770 0863 91       		.byte	0x91
 3771 0864 F47E     		.sleb128 -140
 3772 0866 00       		.byte	0
 3773 0867 00       		.byte	0
 3774 0868 00       		.byte	0
 3775 0869 00       		.byte	0
 3776 086a 12       		.uleb128 0x12
 3777 086b 4E030000 		.4byte	.LBB22
 3778 086f E4000000 		.4byte	.LBE22-.LBB22
 3779 0873 16       		.uleb128 0x16
 3780 0874 6D030000 		.4byte	.LASF76
 3781 0878 01       		.byte	0x1
 3782 0879 4901     		.2byte	0x149
 3783 087b 2C000000 		.4byte	0x2c
 3784 087f 03       		.uleb128 0x3
 3785 0880 91       		.byte	0x91
 3786 0881 EC7E     		.sleb128 -148
 3787 0883 16       		.uleb128 0x16
 3788 0884 F0030000 		.4byte	.LASF77
 3789 0888 01       		.byte	0x1
 3790 0889 4A01     		.2byte	0x14a
 3791 088b 2C000000 		.4byte	0x2c
 3792 088f 03       		.uleb128 0x3
 3793 0890 91       		.byte	0x91
 3794 0891 E87E     		.sleb128 -152
 3795 0893 00       		.byte	0
 3796 0894 00       		.byte	0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 76


 3797 0895 0A       		.uleb128 0xa
 3798 0896 04       		.byte	0x4
 3799 0897 2C000000 		.4byte	0x2c
 3800 089b 17       		.uleb128 0x17
 3801 089c F1000000 		.4byte	.LASF78
 3802 08a0 01       		.byte	0x1
 3803 08a1 5901     		.2byte	0x159
 3804 08a3 80000000 		.4byte	0x80
 3805 08a7 00000000 		.4byte	.LFB8
 3806 08ab E6030000 		.4byte	.LFE8-.LFB8
 3807 08af 01       		.uleb128 0x1
 3808 08b0 9C       		.byte	0x9c
 3809 08b1 4E0A0000 		.4byte	0xa4e
 3810 08b5 18       		.uleb128 0x18
 3811 08b6 07000000 		.4byte	.LASF55
 3812 08ba 01       		.byte	0x1
 3813 08bb 5901     		.2byte	0x159
 3814 08bd 09050000 		.4byte	0x509
 3815 08c1 03       		.uleb128 0x3
 3816 08c2 91       		.byte	0x91
 3817 08c3 8C7F     		.sleb128 -116
 3818 08c5 18       		.uleb128 0x18
 3819 08c6 D1010000 		.4byte	.LASF41
 3820 08ca 01       		.byte	0x1
 3821 08cb 5901     		.2byte	0x159
 3822 08cd FD030000 		.4byte	0x3fd
 3823 08d1 03       		.uleb128 0x3
 3824 08d2 91       		.byte	0x91
 3825 08d3 887F     		.sleb128 -120
 3826 08d5 18       		.uleb128 0x18
 3827 08d6 C1020000 		.4byte	.LASF62
 3828 08da 01       		.byte	0x1
 3829 08db 5901     		.2byte	0x159
 3830 08dd 95080000 		.4byte	0x895
 3831 08e1 03       		.uleb128 0x3
 3832 08e2 91       		.byte	0x91
 3833 08e3 847F     		.sleb128 -124
 3834 08e5 18       		.uleb128 0x18
 3835 08e6 2E000000 		.4byte	.LASF52
 3836 08ea 01       		.byte	0x1
 3837 08eb 5901     		.2byte	0x159
 3838 08ed 80000000 		.4byte	0x80
 3839 08f1 02       		.uleb128 0x2
 3840 08f2 91       		.byte	0x91
 3841 08f3 00       		.sleb128 0
 3842 08f4 18       		.uleb128 0x18
 3843 08f5 21040000 		.4byte	.LASF63
 3844 08f9 01       		.byte	0x1
 3845 08fa 5901     		.2byte	0x159
 3846 08fc 2C000000 		.4byte	0x2c
 3847 0900 02       		.uleb128 0x2
 3848 0901 91       		.byte	0x91
 3849 0902 08       		.sleb128 8
 3850 0903 16       		.uleb128 0x16
 3851 0904 2C010000 		.4byte	.LASF64
 3852 0908 01       		.byte	0x1
 3853 0909 5B01     		.2byte	0x15b
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 77


 3854 090b 2C000000 		.4byte	0x2c
 3855 090f 02       		.uleb128 0x2
 3856 0910 91       		.byte	0x91
 3857 0911 50       		.sleb128 -48
 3858 0912 16       		.uleb128 0x16
 3859 0913 EF010000 		.4byte	.LASF31
 3860 0917 01       		.byte	0x1
 3861 0918 5C01     		.2byte	0x15c
 3862 091a 2C000000 		.4byte	0x2c
 3863 091e 02       		.uleb128 0x2
 3864 091f 91       		.byte	0x91
 3865 0920 4C       		.sleb128 -52
 3866 0921 16       		.uleb128 0x16
 3867 0922 CF020000 		.4byte	.LASF42
 3868 0926 01       		.byte	0x1
 3869 0927 5F01     		.2byte	0x15f
 3870 0929 80000000 		.4byte	0x80
 3871 092d 02       		.uleb128 0x2
 3872 092e 91       		.byte	0x91
 3873 092f 40       		.sleb128 -64
 3874 0930 16       		.uleb128 0x16
 3875 0931 D5020000 		.4byte	.LASF43
 3876 0935 01       		.byte	0x1
 3877 0936 6001     		.2byte	0x160
 3878 0938 80000000 		.4byte	0x80
 3879 093c 03       		.uleb128 0x3
 3880 093d 91       		.byte	0x91
 3881 093e B87F     		.sleb128 -72
 3882 0940 16       		.uleb128 0x16
 3883 0941 EF020000 		.4byte	.LASF65
 3884 0945 01       		.byte	0x1
 3885 0946 6101     		.2byte	0x161
 3886 0948 80000000 		.4byte	0x80
 3887 094c 03       		.uleb128 0x3
 3888 094d 91       		.byte	0x91
 3889 094e B07F     		.sleb128 -80
 3890 0950 16       		.uleb128 0x16
 3891 0951 E1020000 		.4byte	.LASF21
 3892 0955 01       		.byte	0x1
 3893 0956 6201     		.2byte	0x162
 3894 0958 80000000 		.4byte	0x80
 3895 095c 03       		.uleb128 0x3
 3896 095d 91       		.byte	0x91
 3897 095e A87F     		.sleb128 -88
 3898 0960 16       		.uleb128 0x16
 3899 0961 E8020000 		.4byte	.LASF22
 3900 0965 01       		.byte	0x1
 3901 0966 6301     		.2byte	0x163
 3902 0968 80000000 		.4byte	0x80
 3903 096c 03       		.uleb128 0x3
 3904 096d 91       		.byte	0x91
 3905 096e A07F     		.sleb128 -96
 3906 0970 16       		.uleb128 0x16
 3907 0971 2D030000 		.4byte	.LASF66
 3908 0975 01       		.byte	0x1
 3909 0976 6501     		.2byte	0x165
 3910 0978 80000000 		.4byte	0x80
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 78


 3911 097c 03       		.uleb128 0x3
 3912 097d 91       		.byte	0x91
 3913 097e 987F     		.sleb128 -104
 3914 0980 16       		.uleb128 0x16
 3915 0981 B7010000 		.4byte	.LASF67
 3916 0985 01       		.byte	0x1
 3917 0986 6601     		.2byte	0x166
 3918 0988 2C000000 		.4byte	0x2c
 3919 098c 03       		.uleb128 0x3
 3920 098d 91       		.byte	0x91
 3921 098e 947F     		.sleb128 -108
 3922 0990 13       		.uleb128 0x13
 3923 0991 0A010000 		.4byte	.LBB23
 3924 0995 06000000 		.4byte	.LBE23-.LBB23
 3925 0999 C2090000 		.4byte	0x9c2
 3926 099d 19       		.uleb128 0x19
 3927 099e 05030000 		.4byte	.LASF79
 3928 09a2 01       		.byte	0x1
 3929 09a3 6B01     		.2byte	0x16b
 3930 09a5 2C000000 		.4byte	0x2c
 3931 09a9 19       		.uleb128 0x19
 3932 09aa 53040000 		.4byte	.LASF80
 3933 09ae 01       		.byte	0x1
 3934 09af 6C01     		.2byte	0x16c
 3935 09b1 2C000000 		.4byte	0x2c
 3936 09b5 19       		.uleb128 0x19
 3937 09b6 00000000 		.4byte	.LASF81
 3938 09ba 01       		.byte	0x1
 3939 09bb 6D01     		.2byte	0x16d
 3940 09bd 2C000000 		.4byte	0x2c
 3941 09c1 00       		.byte	0
 3942 09c2 12       		.uleb128 0x12
 3943 09c3 10010000 		.4byte	.LBB24
 3944 09c7 CC020000 		.4byte	.LBE24-.LBB24
 3945 09cb 16       		.uleb128 0x16
 3946 09cc 05030000 		.4byte	.LASF79
 3947 09d0 01       		.byte	0x1
 3948 09d1 7D01     		.2byte	0x17d
 3949 09d3 2C000000 		.4byte	0x2c
 3950 09d7 02       		.uleb128 0x2
 3951 09d8 91       		.byte	0x91
 3952 09d9 6C       		.sleb128 -20
 3953 09da 16       		.uleb128 0x16
 3954 09db 53040000 		.4byte	.LASF80
 3955 09df 01       		.byte	0x1
 3956 09e0 7E01     		.2byte	0x17e
 3957 09e2 2C000000 		.4byte	0x2c
 3958 09e6 02       		.uleb128 0x2
 3959 09e7 91       		.byte	0x91
 3960 09e8 68       		.sleb128 -24
 3961 09e9 16       		.uleb128 0x16
 3962 09ea 00000000 		.4byte	.LASF81
 3963 09ee 01       		.byte	0x1
 3964 09ef 7F01     		.2byte	0x17f
 3965 09f1 2C000000 		.4byte	0x2c
 3966 09f5 02       		.uleb128 0x2
 3967 09f6 91       		.byte	0x91
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 79


 3968 09f7 64       		.sleb128 -28
 3969 09f8 13       		.uleb128 0x13
 3970 09f9 36020000 		.4byte	.LBB25
 3971 09fd DE000000 		.4byte	.LBE25-.LBB25
 3972 0a01 240A0000 		.4byte	0xa24
 3973 0a05 16       		.uleb128 0x16
 3974 0a06 99010000 		.4byte	.LASF82
 3975 0a0a 01       		.byte	0x1
 3976 0a0b 8A01     		.2byte	0x18a
 3977 0a0d 2C000000 		.4byte	0x2c
 3978 0a11 02       		.uleb128 0x2
 3979 0a12 91       		.byte	0x91
 3980 0a13 60       		.sleb128 -32
 3981 0a14 16       		.uleb128 0x16
 3982 0a15 80010000 		.4byte	.LASF83
 3983 0a19 01       		.byte	0x1
 3984 0a1a 8B01     		.2byte	0x18b
 3985 0a1c 2C000000 		.4byte	0x2c
 3986 0a20 02       		.uleb128 0x2
 3987 0a21 91       		.byte	0x91
 3988 0a22 5C       		.sleb128 -36
 3989 0a23 00       		.byte	0
 3990 0a24 12       		.uleb128 0x12
 3991 0a25 14030000 		.4byte	.LBB26
 3992 0a29 C8000000 		.4byte	.LBE26-.LBB26
 3993 0a2d 16       		.uleb128 0x16
 3994 0a2e 99010000 		.4byte	.LASF82
 3995 0a32 01       		.byte	0x1
 3996 0a33 9201     		.2byte	0x192
 3997 0a35 2C000000 		.4byte	0x2c
 3998 0a39 02       		.uleb128 0x2
 3999 0a3a 91       		.byte	0x91
 4000 0a3b 58       		.sleb128 -40
 4001 0a3c 16       		.uleb128 0x16
 4002 0a3d 80010000 		.4byte	.LASF83
 4003 0a41 01       		.byte	0x1
 4004 0a42 9301     		.2byte	0x193
 4005 0a44 2C000000 		.4byte	0x2c
 4006 0a48 02       		.uleb128 0x2
 4007 0a49 91       		.byte	0x91
 4008 0a4a 54       		.sleb128 -44
 4009 0a4b 00       		.byte	0
 4010 0a4c 00       		.byte	0
 4011 0a4d 00       		.byte	0
 4012 0a4e 1A       		.uleb128 0x1a
 4013 0a4f 10040000 		.4byte	.LASF84
 4014 0a53 01       		.byte	0x1
 4015 0a54 9E01     		.2byte	0x19e
 4016 0a56 80000000 		.4byte	0x80
 4017 0a5a 00000000 		.4byte	.LFB9
 4018 0a5e F4000000 		.4byte	.LFE9-.LFB9
 4019 0a62 01       		.uleb128 0x1
 4020 0a63 9C       		.byte	0x9c
 4021 0a64 18       		.uleb128 0x18
 4022 0a65 07000000 		.4byte	.LASF55
 4023 0a69 01       		.byte	0x1
 4024 0a6a 9E01     		.2byte	0x19e
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 80


 4025 0a6c 09050000 		.4byte	0x509
 4026 0a70 02       		.uleb128 0x2
 4027 0a71 91       		.byte	0x91
 4028 0a72 44       		.sleb128 -60
 4029 0a73 18       		.uleb128 0x18
 4030 0a74 34000000 		.4byte	.LASF14
 4031 0a78 01       		.byte	0x1
 4032 0a79 9E01     		.2byte	0x19e
 4033 0a7b 80000000 		.4byte	0x80
 4034 0a7f 03       		.uleb128 0x3
 4035 0a80 91       		.byte	0x91
 4036 0a81 B87F     		.sleb128 -72
 4037 0a83 18       		.uleb128 0x18
 4038 0a84 2E000000 		.4byte	.LASF52
 4039 0a88 01       		.byte	0x1
 4040 0a89 9E01     		.2byte	0x19e
 4041 0a8b 80000000 		.4byte	0x80
 4042 0a8f 02       		.uleb128 0x2
 4043 0a90 91       		.byte	0x91
 4044 0a91 00       		.sleb128 0
 4045 0a92 1B       		.uleb128 0x1b
 4046 0a93 685F6D00 		.ascii	"h_m\000"
 4047 0a97 01       		.byte	0x1
 4048 0a98 9E01     		.2byte	0x19e
 4049 0a9a 80000000 		.4byte	0x80
 4050 0a9e 02       		.uleb128 0x2
 4051 0a9f 91       		.byte	0x91
 4052 0aa0 08       		.sleb128 8
 4053 0aa1 16       		.uleb128 0x16
 4054 0aa2 66040000 		.4byte	.LASF85
 4055 0aa6 01       		.byte	0x1
 4056 0aa7 A001     		.2byte	0x1a0
 4057 0aa9 80000000 		.4byte	0x80
 4058 0aad 02       		.uleb128 0x2
 4059 0aae 91       		.byte	0x91
 4060 0aaf 60       		.sleb128 -32
 4061 0ab0 16       		.uleb128 0x16
 4062 0ab1 59040000 		.4byte	.LASF86
 4063 0ab5 01       		.byte	0x1
 4064 0ab6 A301     		.2byte	0x1a3
 4065 0ab8 2C000000 		.4byte	0x2c
 4066 0abc 02       		.uleb128 0x2
 4067 0abd 91       		.byte	0x91
 4068 0abe 5C       		.sleb128 -36
 4069 0abf 1C       		.uleb128 0x1c
 4070 0ac0 685F6300 		.ascii	"h_c\000"
 4071 0ac4 01       		.byte	0x1
 4072 0ac5 A601     		.2byte	0x1a6
 4073 0ac7 80000000 		.4byte	0x80
 4074 0acb 02       		.uleb128 0x2
 4075 0acc 91       		.byte	0x91
 4076 0acd 50       		.sleb128 -48
 4077 0ace 16       		.uleb128 0x16
 4078 0acf 38030000 		.4byte	.LASF87
 4079 0ad3 01       		.byte	0x1
 4080 0ad4 AC01     		.2byte	0x1ac
 4081 0ad6 80000000 		.4byte	0x80
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 81


 4082 0ada 02       		.uleb128 0x2
 4083 0adb 91       		.byte	0x91
 4084 0adc 68       		.sleb128 -24
 4085 0add 16       		.uleb128 0x16
 4086 0ade 21020000 		.4byte	.LASF88
 4087 0ae2 01       		.byte	0x1
 4088 0ae3 B201     		.2byte	0x1b2
 4089 0ae5 80000000 		.4byte	0x80
 4090 0ae9 02       		.uleb128 0x2
 4091 0aea 91       		.byte	0x91
 4092 0aeb 48       		.sleb128 -56
 4093 0aec 00       		.byte	0
 4094 0aed 00       		.byte	0
 4095              		.section	.debug_abbrev,"",%progbits
 4096              	.Ldebug_abbrev0:
 4097 0000 01       		.uleb128 0x1
 4098 0001 11       		.uleb128 0x11
 4099 0002 01       		.byte	0x1
 4100 0003 25       		.uleb128 0x25
 4101 0004 0E       		.uleb128 0xe
 4102 0005 13       		.uleb128 0x13
 4103 0006 0B       		.uleb128 0xb
 4104 0007 03       		.uleb128 0x3
 4105 0008 0E       		.uleb128 0xe
 4106 0009 1B       		.uleb128 0x1b
 4107 000a 0E       		.uleb128 0xe
 4108 000b 55       		.uleb128 0x55
 4109 000c 17       		.uleb128 0x17
 4110 000d 11       		.uleb128 0x11
 4111 000e 01       		.uleb128 0x1
 4112 000f 10       		.uleb128 0x10
 4113 0010 17       		.uleb128 0x17
 4114 0011 00       		.byte	0
 4115 0012 00       		.byte	0
 4116 0013 02       		.uleb128 0x2
 4117 0014 24       		.uleb128 0x24
 4118 0015 00       		.byte	0
 4119 0016 0B       		.uleb128 0xb
 4120 0017 0B       		.uleb128 0xb
 4121 0018 3E       		.uleb128 0x3e
 4122 0019 0B       		.uleb128 0xb
 4123 001a 03       		.uleb128 0x3
 4124 001b 0E       		.uleb128 0xe
 4125 001c 00       		.byte	0
 4126 001d 00       		.byte	0
 4127 001e 03       		.uleb128 0x3
 4128 001f 24       		.uleb128 0x24
 4129 0020 00       		.byte	0
 4130 0021 0B       		.uleb128 0xb
 4131 0022 0B       		.uleb128 0xb
 4132 0023 3E       		.uleb128 0x3e
 4133 0024 0B       		.uleb128 0xb
 4134 0025 03       		.uleb128 0x3
 4135 0026 08       		.uleb128 0x8
 4136 0027 00       		.byte	0
 4137 0028 00       		.byte	0
 4138 0029 04       		.uleb128 0x4
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 82


 4139 002a 13       		.uleb128 0x13
 4140 002b 01       		.byte	0x1
 4141 002c 0B       		.uleb128 0xb
 4142 002d 0B       		.uleb128 0xb
 4143 002e 3A       		.uleb128 0x3a
 4144 002f 0B       		.uleb128 0xb
 4145 0030 3B       		.uleb128 0x3b
 4146 0031 0B       		.uleb128 0xb
 4147 0032 01       		.uleb128 0x1
 4148 0033 13       		.uleb128 0x13
 4149 0034 00       		.byte	0
 4150 0035 00       		.byte	0
 4151 0036 05       		.uleb128 0x5
 4152 0037 0D       		.uleb128 0xd
 4153 0038 00       		.byte	0
 4154 0039 03       		.uleb128 0x3
 4155 003a 0E       		.uleb128 0xe
 4156 003b 3A       		.uleb128 0x3a
 4157 003c 0B       		.uleb128 0xb
 4158 003d 3B       		.uleb128 0x3b
 4159 003e 0B       		.uleb128 0xb
 4160 003f 49       		.uleb128 0x49
 4161 0040 13       		.uleb128 0x13
 4162 0041 38       		.uleb128 0x38
 4163 0042 0B       		.uleb128 0xb
 4164 0043 00       		.byte	0
 4165 0044 00       		.byte	0
 4166 0045 06       		.uleb128 0x6
 4167 0046 01       		.uleb128 0x1
 4168 0047 01       		.byte	0x1
 4169 0048 49       		.uleb128 0x49
 4170 0049 13       		.uleb128 0x13
 4171 004a 01       		.uleb128 0x1
 4172 004b 13       		.uleb128 0x13
 4173 004c 00       		.byte	0
 4174 004d 00       		.byte	0
 4175 004e 07       		.uleb128 0x7
 4176 004f 21       		.uleb128 0x21
 4177 0050 00       		.byte	0
 4178 0051 49       		.uleb128 0x49
 4179 0052 13       		.uleb128 0x13
 4180 0053 2F       		.uleb128 0x2f
 4181 0054 0B       		.uleb128 0xb
 4182 0055 00       		.byte	0
 4183 0056 00       		.byte	0
 4184 0057 08       		.uleb128 0x8
 4185 0058 16       		.uleb128 0x16
 4186 0059 00       		.byte	0
 4187 005a 03       		.uleb128 0x3
 4188 005b 0E       		.uleb128 0xe
 4189 005c 3A       		.uleb128 0x3a
 4190 005d 0B       		.uleb128 0xb
 4191 005e 3B       		.uleb128 0x3b
 4192 005f 0B       		.uleb128 0xb
 4193 0060 49       		.uleb128 0x49
 4194 0061 13       		.uleb128 0x13
 4195 0062 00       		.byte	0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 83


 4196 0063 00       		.byte	0
 4197 0064 09       		.uleb128 0x9
 4198 0065 0D       		.uleb128 0xd
 4199 0066 00       		.byte	0
 4200 0067 03       		.uleb128 0x3
 4201 0068 08       		.uleb128 0x8
 4202 0069 3A       		.uleb128 0x3a
 4203 006a 0B       		.uleb128 0xb
 4204 006b 3B       		.uleb128 0x3b
 4205 006c 0B       		.uleb128 0xb
 4206 006d 49       		.uleb128 0x49
 4207 006e 13       		.uleb128 0x13
 4208 006f 38       		.uleb128 0x38
 4209 0070 0B       		.uleb128 0xb
 4210 0071 00       		.byte	0
 4211 0072 00       		.byte	0
 4212 0073 0A       		.uleb128 0xa
 4213 0074 0F       		.uleb128 0xf
 4214 0075 00       		.byte	0
 4215 0076 0B       		.uleb128 0xb
 4216 0077 0B       		.uleb128 0xb
 4217 0078 49       		.uleb128 0x49
 4218 0079 13       		.uleb128 0x13
 4219 007a 00       		.byte	0
 4220 007b 00       		.byte	0
 4221 007c 0B       		.uleb128 0xb
 4222 007d 16       		.uleb128 0x16
 4223 007e 00       		.byte	0
 4224 007f 03       		.uleb128 0x3
 4225 0080 08       		.uleb128 0x8
 4226 0081 3A       		.uleb128 0x3a
 4227 0082 0B       		.uleb128 0xb
 4228 0083 3B       		.uleb128 0x3b
 4229 0084 0B       		.uleb128 0xb
 4230 0085 49       		.uleb128 0x49
 4231 0086 13       		.uleb128 0x13
 4232 0087 00       		.byte	0
 4233 0088 00       		.byte	0
 4234 0089 0C       		.uleb128 0xc
 4235 008a 2E       		.uleb128 0x2e
 4236 008b 01       		.byte	0x1
 4237 008c 3F       		.uleb128 0x3f
 4238 008d 19       		.uleb128 0x19
 4239 008e 03       		.uleb128 0x3
 4240 008f 0E       		.uleb128 0xe
 4241 0090 3A       		.uleb128 0x3a
 4242 0091 0B       		.uleb128 0xb
 4243 0092 3B       		.uleb128 0x3b
 4244 0093 0B       		.uleb128 0xb
 4245 0094 27       		.uleb128 0x27
 4246 0095 19       		.uleb128 0x19
 4247 0096 49       		.uleb128 0x49
 4248 0097 13       		.uleb128 0x13
 4249 0098 11       		.uleb128 0x11
 4250 0099 01       		.uleb128 0x1
 4251 009a 12       		.uleb128 0x12
 4252 009b 06       		.uleb128 0x6
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 84


 4253 009c 40       		.uleb128 0x40
 4254 009d 18       		.uleb128 0x18
 4255 009e 9642     		.uleb128 0x2116
 4256 00a0 19       		.uleb128 0x19
 4257 00a1 01       		.uleb128 0x1
 4258 00a2 13       		.uleb128 0x13
 4259 00a3 00       		.byte	0
 4260 00a4 00       		.byte	0
 4261 00a5 0D       		.uleb128 0xd
 4262 00a6 05       		.uleb128 0x5
 4263 00a7 00       		.byte	0
 4264 00a8 03       		.uleb128 0x3
 4265 00a9 08       		.uleb128 0x8
 4266 00aa 3A       		.uleb128 0x3a
 4267 00ab 0B       		.uleb128 0xb
 4268 00ac 3B       		.uleb128 0x3b
 4269 00ad 0B       		.uleb128 0xb
 4270 00ae 49       		.uleb128 0x49
 4271 00af 13       		.uleb128 0x13
 4272 00b0 02       		.uleb128 0x2
 4273 00b1 18       		.uleb128 0x18
 4274 00b2 00       		.byte	0
 4275 00b3 00       		.byte	0
 4276 00b4 0E       		.uleb128 0xe
 4277 00b5 2E       		.uleb128 0x2e
 4278 00b6 01       		.byte	0x1
 4279 00b7 3F       		.uleb128 0x3f
 4280 00b8 19       		.uleb128 0x19
 4281 00b9 03       		.uleb128 0x3
 4282 00ba 0E       		.uleb128 0xe
 4283 00bb 3A       		.uleb128 0x3a
 4284 00bc 0B       		.uleb128 0xb
 4285 00bd 3B       		.uleb128 0x3b
 4286 00be 0B       		.uleb128 0xb
 4287 00bf 27       		.uleb128 0x27
 4288 00c0 19       		.uleb128 0x19
 4289 00c1 49       		.uleb128 0x49
 4290 00c2 13       		.uleb128 0x13
 4291 00c3 11       		.uleb128 0x11
 4292 00c4 01       		.uleb128 0x1
 4293 00c5 12       		.uleb128 0x12
 4294 00c6 06       		.uleb128 0x6
 4295 00c7 40       		.uleb128 0x40
 4296 00c8 18       		.uleb128 0x18
 4297 00c9 9742     		.uleb128 0x2117
 4298 00cb 19       		.uleb128 0x19
 4299 00cc 01       		.uleb128 0x1
 4300 00cd 13       		.uleb128 0x13
 4301 00ce 00       		.byte	0
 4302 00cf 00       		.byte	0
 4303 00d0 0F       		.uleb128 0xf
 4304 00d1 05       		.uleb128 0x5
 4305 00d2 00       		.byte	0
 4306 00d3 03       		.uleb128 0x3
 4307 00d4 0E       		.uleb128 0xe
 4308 00d5 3A       		.uleb128 0x3a
 4309 00d6 0B       		.uleb128 0xb
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 85


 4310 00d7 3B       		.uleb128 0x3b
 4311 00d8 0B       		.uleb128 0xb
 4312 00d9 49       		.uleb128 0x49
 4313 00da 13       		.uleb128 0x13
 4314 00db 02       		.uleb128 0x2
 4315 00dc 18       		.uleb128 0x18
 4316 00dd 00       		.byte	0
 4317 00de 00       		.byte	0
 4318 00df 10       		.uleb128 0x10
 4319 00e0 34       		.uleb128 0x34
 4320 00e1 00       		.byte	0
 4321 00e2 03       		.uleb128 0x3
 4322 00e3 0E       		.uleb128 0xe
 4323 00e4 3A       		.uleb128 0x3a
 4324 00e5 0B       		.uleb128 0xb
 4325 00e6 3B       		.uleb128 0x3b
 4326 00e7 0B       		.uleb128 0xb
 4327 00e8 49       		.uleb128 0x49
 4328 00e9 13       		.uleb128 0x13
 4329 00ea 02       		.uleb128 0x2
 4330 00eb 18       		.uleb128 0x18
 4331 00ec 00       		.byte	0
 4332 00ed 00       		.byte	0
 4333 00ee 11       		.uleb128 0x11
 4334 00ef 34       		.uleb128 0x34
 4335 00f0 00       		.byte	0
 4336 00f1 03       		.uleb128 0x3
 4337 00f2 08       		.uleb128 0x8
 4338 00f3 3A       		.uleb128 0x3a
 4339 00f4 0B       		.uleb128 0xb
 4340 00f5 3B       		.uleb128 0x3b
 4341 00f6 0B       		.uleb128 0xb
 4342 00f7 49       		.uleb128 0x49
 4343 00f8 13       		.uleb128 0x13
 4344 00f9 02       		.uleb128 0x2
 4345 00fa 18       		.uleb128 0x18
 4346 00fb 00       		.byte	0
 4347 00fc 00       		.byte	0
 4348 00fd 12       		.uleb128 0x12
 4349 00fe 0B       		.uleb128 0xb
 4350 00ff 01       		.byte	0x1
 4351 0100 11       		.uleb128 0x11
 4352 0101 01       		.uleb128 0x1
 4353 0102 12       		.uleb128 0x12
 4354 0103 06       		.uleb128 0x6
 4355 0104 00       		.byte	0
 4356 0105 00       		.byte	0
 4357 0106 13       		.uleb128 0x13
 4358 0107 0B       		.uleb128 0xb
 4359 0108 01       		.byte	0x1
 4360 0109 11       		.uleb128 0x11
 4361 010a 01       		.uleb128 0x1
 4362 010b 12       		.uleb128 0x12
 4363 010c 06       		.uleb128 0x6
 4364 010d 01       		.uleb128 0x1
 4365 010e 13       		.uleb128 0x13
 4366 010f 00       		.byte	0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 86


 4367 0110 00       		.byte	0
 4368 0111 14       		.uleb128 0x14
 4369 0112 2E       		.uleb128 0x2e
 4370 0113 01       		.byte	0x1
 4371 0114 3F       		.uleb128 0x3f
 4372 0115 19       		.uleb128 0x19
 4373 0116 03       		.uleb128 0x3
 4374 0117 0E       		.uleb128 0xe
 4375 0118 3A       		.uleb128 0x3a
 4376 0119 0B       		.uleb128 0xb
 4377 011a 3B       		.uleb128 0x3b
 4378 011b 0B       		.uleb128 0xb
 4379 011c 27       		.uleb128 0x27
 4380 011d 19       		.uleb128 0x19
 4381 011e 11       		.uleb128 0x11
 4382 011f 01       		.uleb128 0x1
 4383 0120 12       		.uleb128 0x12
 4384 0121 06       		.uleb128 0x6
 4385 0122 40       		.uleb128 0x40
 4386 0123 18       		.uleb128 0x18
 4387 0124 9642     		.uleb128 0x2116
 4388 0126 19       		.uleb128 0x19
 4389 0127 01       		.uleb128 0x1
 4390 0128 13       		.uleb128 0x13
 4391 0129 00       		.byte	0
 4392 012a 00       		.byte	0
 4393 012b 15       		.uleb128 0x15
 4394 012c 21       		.uleb128 0x21
 4395 012d 00       		.byte	0
 4396 012e 49       		.uleb128 0x49
 4397 012f 13       		.uleb128 0x13
 4398 0130 2F       		.uleb128 0x2f
 4399 0131 18       		.uleb128 0x18
 4400 0132 00       		.byte	0
 4401 0133 00       		.byte	0
 4402 0134 16       		.uleb128 0x16
 4403 0135 34       		.uleb128 0x34
 4404 0136 00       		.byte	0
 4405 0137 03       		.uleb128 0x3
 4406 0138 0E       		.uleb128 0xe
 4407 0139 3A       		.uleb128 0x3a
 4408 013a 0B       		.uleb128 0xb
 4409 013b 3B       		.uleb128 0x3b
 4410 013c 05       		.uleb128 0x5
 4411 013d 49       		.uleb128 0x49
 4412 013e 13       		.uleb128 0x13
 4413 013f 02       		.uleb128 0x2
 4414 0140 18       		.uleb128 0x18
 4415 0141 00       		.byte	0
 4416 0142 00       		.byte	0
 4417 0143 17       		.uleb128 0x17
 4418 0144 2E       		.uleb128 0x2e
 4419 0145 01       		.byte	0x1
 4420 0146 3F       		.uleb128 0x3f
 4421 0147 19       		.uleb128 0x19
 4422 0148 03       		.uleb128 0x3
 4423 0149 0E       		.uleb128 0xe
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 87


 4424 014a 3A       		.uleb128 0x3a
 4425 014b 0B       		.uleb128 0xb
 4426 014c 3B       		.uleb128 0x3b
 4427 014d 05       		.uleb128 0x5
 4428 014e 27       		.uleb128 0x27
 4429 014f 19       		.uleb128 0x19
 4430 0150 49       		.uleb128 0x49
 4431 0151 13       		.uleb128 0x13
 4432 0152 11       		.uleb128 0x11
 4433 0153 01       		.uleb128 0x1
 4434 0154 12       		.uleb128 0x12
 4435 0155 06       		.uleb128 0x6
 4436 0156 40       		.uleb128 0x40
 4437 0157 18       		.uleb128 0x18
 4438 0158 9642     		.uleb128 0x2116
 4439 015a 19       		.uleb128 0x19
 4440 015b 01       		.uleb128 0x1
 4441 015c 13       		.uleb128 0x13
 4442 015d 00       		.byte	0
 4443 015e 00       		.byte	0
 4444 015f 18       		.uleb128 0x18
 4445 0160 05       		.uleb128 0x5
 4446 0161 00       		.byte	0
 4447 0162 03       		.uleb128 0x3
 4448 0163 0E       		.uleb128 0xe
 4449 0164 3A       		.uleb128 0x3a
 4450 0165 0B       		.uleb128 0xb
 4451 0166 3B       		.uleb128 0x3b
 4452 0167 05       		.uleb128 0x5
 4453 0168 49       		.uleb128 0x49
 4454 0169 13       		.uleb128 0x13
 4455 016a 02       		.uleb128 0x2
 4456 016b 18       		.uleb128 0x18
 4457 016c 00       		.byte	0
 4458 016d 00       		.byte	0
 4459 016e 19       		.uleb128 0x19
 4460 016f 34       		.uleb128 0x34
 4461 0170 00       		.byte	0
 4462 0171 03       		.uleb128 0x3
 4463 0172 0E       		.uleb128 0xe
 4464 0173 3A       		.uleb128 0x3a
 4465 0174 0B       		.uleb128 0xb
 4466 0175 3B       		.uleb128 0x3b
 4467 0176 05       		.uleb128 0x5
 4468 0177 49       		.uleb128 0x49
 4469 0178 13       		.uleb128 0x13
 4470 0179 00       		.byte	0
 4471 017a 00       		.byte	0
 4472 017b 1A       		.uleb128 0x1a
 4473 017c 2E       		.uleb128 0x2e
 4474 017d 01       		.byte	0x1
 4475 017e 3F       		.uleb128 0x3f
 4476 017f 19       		.uleb128 0x19
 4477 0180 03       		.uleb128 0x3
 4478 0181 0E       		.uleb128 0xe
 4479 0182 3A       		.uleb128 0x3a
 4480 0183 0B       		.uleb128 0xb
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 88


 4481 0184 3B       		.uleb128 0x3b
 4482 0185 05       		.uleb128 0x5
 4483 0186 27       		.uleb128 0x27
 4484 0187 19       		.uleb128 0x19
 4485 0188 49       		.uleb128 0x49
 4486 0189 13       		.uleb128 0x13
 4487 018a 11       		.uleb128 0x11
 4488 018b 01       		.uleb128 0x1
 4489 018c 12       		.uleb128 0x12
 4490 018d 06       		.uleb128 0x6
 4491 018e 40       		.uleb128 0x40
 4492 018f 18       		.uleb128 0x18
 4493 0190 9642     		.uleb128 0x2116
 4494 0192 19       		.uleb128 0x19
 4495 0193 00       		.byte	0
 4496 0194 00       		.byte	0
 4497 0195 1B       		.uleb128 0x1b
 4498 0196 05       		.uleb128 0x5
 4499 0197 00       		.byte	0
 4500 0198 03       		.uleb128 0x3
 4501 0199 08       		.uleb128 0x8
 4502 019a 3A       		.uleb128 0x3a
 4503 019b 0B       		.uleb128 0xb
 4504 019c 3B       		.uleb128 0x3b
 4505 019d 05       		.uleb128 0x5
 4506 019e 49       		.uleb128 0x49
 4507 019f 13       		.uleb128 0x13
 4508 01a0 02       		.uleb128 0x2
 4509 01a1 18       		.uleb128 0x18
 4510 01a2 00       		.byte	0
 4511 01a3 00       		.byte	0
 4512 01a4 1C       		.uleb128 0x1c
 4513 01a5 34       		.uleb128 0x34
 4514 01a6 00       		.byte	0
 4515 01a7 03       		.uleb128 0x3
 4516 01a8 08       		.uleb128 0x8
 4517 01a9 3A       		.uleb128 0x3a
 4518 01aa 0B       		.uleb128 0xb
 4519 01ab 3B       		.uleb128 0x3b
 4520 01ac 05       		.uleb128 0x5
 4521 01ad 49       		.uleb128 0x49
 4522 01ae 13       		.uleb128 0x13
 4523 01af 02       		.uleb128 0x2
 4524 01b0 18       		.uleb128 0x18
 4525 01b1 00       		.byte	0
 4526 01b2 00       		.byte	0
 4527 01b3 00       		.byte	0
 4528              		.section	.debug_aranges,"",%progbits
 4529 0000 64000000 		.4byte	0x64
 4530 0004 0200     		.2byte	0x2
 4531 0006 00000000 		.4byte	.Ldebug_info0
 4532 000a 04       		.byte	0x4
 4533 000b 00       		.byte	0
 4534 000c 0000     		.2byte	0
 4535 000e 0000     		.2byte	0
 4536 0010 00000000 		.4byte	.LFB0
 4537 0014 4C000000 		.4byte	.LFE0-.LFB0
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 89


 4538 0018 00000000 		.4byte	.LFB1
 4539 001c 3E000000 		.4byte	.LFE1-.LFB1
 4540 0020 00000000 		.4byte	.LFB2
 4541 0024 B6000000 		.4byte	.LFE2-.LFB2
 4542 0028 00000000 		.4byte	.LFB3
 4543 002c 50030000 		.4byte	.LFE3-.LFB3
 4544 0030 00000000 		.4byte	.LFB4
 4545 0034 F8000000 		.4byte	.LFE4-.LFB4
 4546 0038 00000000 		.4byte	.LFB5
 4547 003c DC000000 		.4byte	.LFE5-.LFB5
 4548 0040 00000000 		.4byte	.LFB6
 4549 0044 0C040000 		.4byte	.LFE6-.LFB6
 4550 0048 00000000 		.4byte	.LFB7
 4551 004c 44040000 		.4byte	.LFE7-.LFB7
 4552 0050 00000000 		.4byte	.LFB8
 4553 0054 E6030000 		.4byte	.LFE8-.LFB8
 4554 0058 00000000 		.4byte	.LFB9
 4555 005c F4000000 		.4byte	.LFE9-.LFB9
 4556 0060 00000000 		.4byte	0
 4557 0064 00000000 		.4byte	0
 4558              		.section	.debug_ranges,"",%progbits
 4559              	.Ldebug_ranges0:
 4560 0000 00000000 		.4byte	.LFB0
 4561 0004 4C000000 		.4byte	.LFE0
 4562 0008 00000000 		.4byte	.LFB1
 4563 000c 3E000000 		.4byte	.LFE1
 4564 0010 00000000 		.4byte	.LFB2
 4565 0014 B6000000 		.4byte	.LFE2
 4566 0018 00000000 		.4byte	.LFB3
 4567 001c 50030000 		.4byte	.LFE3
 4568 0020 00000000 		.4byte	.LFB4
 4569 0024 F8000000 		.4byte	.LFE4
 4570 0028 00000000 		.4byte	.LFB5
 4571 002c DC000000 		.4byte	.LFE5
 4572 0030 00000000 		.4byte	.LFB6
 4573 0034 0C040000 		.4byte	.LFE6
 4574 0038 00000000 		.4byte	.LFB7
 4575 003c 44040000 		.4byte	.LFE7
 4576 0040 00000000 		.4byte	.LFB8
 4577 0044 E6030000 		.4byte	.LFE8
 4578 0048 00000000 		.4byte	.LFB9
 4579 004c F4000000 		.4byte	.LFE9
 4580 0050 00000000 		.4byte	0
 4581 0054 00000000 		.4byte	0
 4582              		.section	.debug_line,"",%progbits
 4583              	.Ldebug_line0:
 4584 0000 6E030000 		.section	.debug_str,"MS",%progbits,1
 4584      02006400 
 4584      00000201 
 4584      FB0E0D00 
 4584      01010101 
 4585              	.LASF81:
 4586 0000 63637769 		.ascii	"ccwise\000"
 4586      736500
 4587              	.LASF55:
 4588 0007 736D6F6F 		.ascii	"smoothed_POD\000"
 4588      74686564 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 90


 4588      5F504F44 
 4588      00
 4589              	.LASF39:
 4590 0014 67726964 		.ascii	"grid_update\000"
 4590      5F757064 
 4590      61746500 
 4591              	.LASF49:
 4592 0020 67726964 		.ascii	"grid_i\000"
 4592      5F6900
 4593              	.LASF50:
 4594 0027 67726964 		.ascii	"grid_j\000"
 4594      5F6A00
 4595              	.LASF52:
 4596 002e 616C7068 		.ascii	"alpha\000"
 4596      6100
 4597              	.LASF14:
 4598 0034 64697265 		.ascii	"direction\000"
 4598      6374696F 
 4598      6E00
 4599              	.LASF89:
 4600 003e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4600      43313120 
 4600      352E342E 
 4600      31203230 
 4600      31363036 
 4601 0071 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4601      20726576 
 4601      6973696F 
 4601      6E203233 
 4601      37373135 
 4602 00a4 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4602      66756E63 
 4602      74696F6E 
 4602      2D736563 
 4602      74696F6E 
 4603              	.LASF32:
 4604 00cc 64656E73 		.ascii	"density\000"
 4604      69747900 
 4605              	.LASF9:
 4606 00d4 6C6F6E67 		.ascii	"long long unsigned int\000"
 4606      206C6F6E 
 4606      6720756E 
 4606      7369676E 
 4606      65642069 
 4607              	.LASF74:
 4608 00eb 616E676C 		.ascii	"angle\000"
 4608      6500
 4609              	.LASF78:
 4610 00f1 63616C63 		.ascii	"calculate_avoidance_angle2\000"
 4610      756C6174 
 4610      655F6176 
 4610      6F696461 
 4610      6E63655F 
 4611              	.LASF71:
 4612 010c 6D696E5F 		.ascii	"min_val\000"
 4612      76616C00 
 4613              	.LASF69:
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 91


 4614 0114 76616C6C 		.ascii	"valley_flag\000"
 4614      65795F66 
 4614      6C616700 
 4615              	.LASF59:
 4616 0120 73756D5F 		.ascii	"sum_element\000"
 4616      656C656D 
 4616      656E7400 
 4617              	.LASF64:
 4618 012c 63616E64 		.ascii	"candidates_len\000"
 4618      69646174 
 4618      65735F6C 
 4618      656E00
 4619              	.LASF1:
 4620 013b 6C6F6E67 		.ascii	"long long int\000"
 4620      206C6F6E 
 4620      6720696E 
 4620      7400
 4621              	.LASF3:
 4622 0149 7369676E 		.ascii	"signed char\000"
 4622      65642063 
 4622      68617200 
 4623              	.LASF20:
 4624 0155 696E745F 		.ascii	"int_error\000"
 4624      6572726F 
 4624      7200
 4625              	.LASF37:
 4626 015f 67726964 		.ascii	"grid_create\000"
 4626      5F637265 
 4626      61746500 
 4627              	.LASF48:
 4628 016b 61637469 		.ascii	"active\000"
 4628      766500
 4629              	.LASF7:
 4630 0172 6C6F6E67 		.ascii	"long int\000"
 4630      20696E74 
 4630      00
 4631              	.LASF38:
 4632 017b 64697374 		.ascii	"dist\000"
 4632      00
 4633              	.LASF83:
 4634 0180 6661725F 		.ascii	"far_edge\000"
 4634      65646765 
 4634      00
 4635              	.LASF12:
 4636 0189 646F7562 		.ascii	"double\000"
 4636      6C6500
 4637              	.LASF33:
 4638 0190 74727565 		.ascii	"true_mod\000"
 4638      5F6D6F64 
 4638      00
 4639              	.LASF82:
 4640 0199 65646765 		.ascii	"edge_step\000"
 4640      5F737465 
 4640      7000
 4641              	.LASF34:
 4642 01a3 6D696E5F 		.ascii	"min_sect_dist\000"
 4642      73656374 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 92


 4642      5F646973 
 4642      7400
 4643              	.LASF47:
 4644 01b1 6E65775F 		.ascii	"new_y\000"
 4644      7900
 4645              	.LASF67:
 4646 01b7 676F616C 		.ascii	"goal_sector\000"
 4646      5F736563 
 4646      746F7200 
 4647              	.LASF35:
 4648 01c3 73656374 		.ascii	"sect_a\000"
 4648      5F6100
 4649              	.LASF36:
 4650 01ca 73656374 		.ascii	"sect_b\000"
 4650      5F6200
 4651              	.LASF41:
 4652 01d1 726F626F 		.ascii	"robot\000"
 4652      7400
 4653              	.LASF51:
 4654 01d7 706F645F 		.ascii	"pod_create\000"
 4654      63726561 
 4654      746500
 4655              	.LASF0:
 4656 01e2 756E7369 		.ascii	"unsigned int\000"
 4656      676E6564 
 4656      20696E74 
 4656      00
 4657              	.LASF31:
 4658 01ef 6E736563 		.ascii	"nsectors\000"
 4658      746F7273 
 4658      00
 4659              	.LASF8:
 4660 01f8 6C6F6E67 		.ascii	"long unsigned int\000"
 4660      20756E73 
 4660      69676E65 
 4660      6420696E 
 4660      7400
 4661              	.LASF54:
 4662 020a 736D6F6F 		.ascii	"smoothed_POD_histogram\000"
 4662      74686564 
 4662      5F504F44 
 4662      5F686973 
 4662      746F6772 
 4663              	.LASF88:
 4664 0221 73706565 		.ascii	"speed_reduction\000"
 4664      645F7265 
 4664      64756374 
 4664      696F6E00 
 4665              	.LASF26:
 4666 0231 77696474 		.ascii	"width\000"
 4666      6800
 4667              	.LASF6:
 4668 0237 73686F72 		.ascii	"short unsigned int\000"
 4668      7420756E 
 4668      7369676E 
 4668      65642069 
 4668      6E7400
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 93


 4669              	.LASF17:
 4670 024a 74686574 		.ascii	"theta\000"
 4670      6100
 4671              	.LASF23:
 4672 0250 676F616C 		.ascii	"goal_min_dist\000"
 4672      5F6D696E 
 4672      5F646973 
 4672      7400
 4673              	.LASF29:
 4674 025e 63656C6C 		.ascii	"cells\000"
 4674      7300
 4675              	.LASF18:
 4676 0264 64657369 		.ascii	"desired_v\000"
 4676      7265645F 
 4676      7600
 4677              	.LASF24:
 4678 026e 53656E73 		.ascii	"Sensor\000"
 4678      6F7200
 4679              	.LASF10:
 4680 0275 73697A65 		.ascii	"sizetype\000"
 4680      74797065 
 4680      00
 4681              	.LASF2:
 4682 027e 6C6F6E67 		.ascii	"long double\000"
 4682      20646F75 
 4682      626C6500 
 4683              	.LASF61:
 4684 028a 63616C63 		.ascii	"calculate_avoidance_angle\000"
 4684      756C6174 
 4684      655F6176 
 4684      6F696461 
 4684      6E63655F 
 4685              	.LASF57:
 4686 02a4 504F445F 		.ascii	"POD_hist\000"
 4686      68697374 
 4686      00
 4687              	.LASF30:
 4688 02ad 67726964 		.ascii	"grid\000"
 4688      00
 4689              	.LASF45:
 4690 02b2 73656E73 		.ascii	"sensor_radians\000"
 4690      6F725F72 
 4690      61646961 
 4690      6E7300
 4691              	.LASF62:
 4692 02c1 63616E64 		.ascii	"candidate_lst\000"
 4692      69646174 
 4692      655F6C73 
 4692      7400
 4693              	.LASF42:
 4694 02cf 706F735F 		.ascii	"pos_x\000"
 4694      7800
 4695              	.LASF43:
 4696 02d5 706F735F 		.ascii	"pos_y\000"
 4696      7900
 4697              	.LASF13:
 4698 02db 666C6F61 		.ascii	"float\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 94


 4698      7400
 4699              	.LASF21:
 4700 02e1 676F616C 		.ascii	"goal_x\000"
 4700      5F7800
 4701              	.LASF22:
 4702 02e8 676F616C 		.ascii	"goal_y\000"
 4702      5F7900
 4703              	.LASF65:
 4704 02ef 706F735F 		.ascii	"pos_yaw\000"
 4704      79617700 
 4705              	.LASF4:
 4706 02f7 756E7369 		.ascii	"unsigned char\000"
 4706      676E6564 
 4706      20636861 
 4706      7200
 4707              	.LASF79:
 4708 0305 73746570 		.ascii	"step\000"
 4708      00
 4709              	.LASF5:
 4710 030a 73686F72 		.ascii	"short int\000"
 4710      7420696E 
 4710      7400
 4711              	.LASF70:
 4712 0314 6162735F 		.ascii	"abs_sec\000"
 4712      73656300 
 4713              	.LASF16:
 4714 031c 61786C65 		.ascii	"axle_width\000"
 4714      5F776964 
 4714      746800
 4715              	.LASF46:
 4716 0327 6E65775F 		.ascii	"new_x\000"
 4716      7800
 4717              	.LASF66:
 4718 032d 676F616C 		.ascii	"goal_angle\000"
 4718      5F616E67 
 4718      6C6500
 4719              	.LASF87:
 4720 0338 685F6363 		.ascii	"h_cc\000"
 4720      00
 4721              	.LASF56:
 4722 033d 73656374 		.ascii	"sectors\000"
 4722      6F727300 
 4723              	.LASF28:
 4724 0345 7265736F 		.ascii	"resolution\000"
 4724      6C757469 
 4724      6F6E00
 4725              	.LASF73:
 4726 0350 6D696E5F 		.ascii	"min_distance\000"
 4726      64697374 
 4726      616E6365 
 4726      00
 4727              	.LASF68:
 4728 035d 6162735F 		.ascii	"abs_min\000"
 4728      6D696E00 
 4729              	.LASF40:
 4730 0365 73656E73 		.ascii	"sensors\000"
 4730      6F727300 
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 95


 4731              	.LASF76:
 4732 036d 66697273 		.ascii	"first\000"
 4732      7400
 4733              	.LASF60:
 4734 0373 736D6F6F 		.ascii	"smoothed_element\000"
 4734      74686564 
 4734      5F656C65 
 4734      6D656E74 
 4734      00
 4735              	.LASF11:
 4736 0384 63686172 		.ascii	"char\000"
 4736      00
 4737              	.LASF44:
 4738 0389 63656C6C 		.ascii	"cell_distance\000"
 4738      5F646973 
 4738      74616E63 
 4738      6500
 4739              	.LASF15:
 4740 0397 64697374 		.ascii	"distance\000"
 4740      616E6365 
 4740      00
 4741              	.LASF72:
 4742 03a0 62657374 		.ascii	"best_angle\000"
 4742      5F616E67 
 4742      6C6500
 4743              	.LASF91:
 4744 03ab 433A5C55 		.ascii	"C:\\Users\\jmspi\\OneDrive\\Documents\\GitHub\\ECE4"
 4744      73657273 
 4744      5C6A6D73 
 4744      70695C4F 
 4744      6E654472 
 4745 03d8 3139315C 		.ascii	"191\\DeliveryRobot.cydsn\000"
 4745      44656C69 
 4745      76657279 
 4745      526F626F 
 4745      742E6379 
 4746              	.LASF77:
 4747 03f0 6C617374 		.ascii	"last\000"
 4747      00
 4748              	.LASF90:
 4749 03f5 2E2E5C56 		.ascii	"..\\VFH\\vfh.c\000"
 4749      46485C76 
 4749      66682E63 
 4749      00
 4750              	.LASF19:
 4751 0402 64657369 		.ascii	"desired_theta\000"
 4751      7265645F 
 4751      74686574 
 4751      6100
 4752              	.LASF84:
 4753 0410 76656C6F 		.ascii	"velocity_control\000"
 4753      63697479 
 4753      5F636F6E 
 4753      74726F6C 
 4753      00
 4754              	.LASF63:
 4755 0421 735F6D61 		.ascii	"s_max\000"
ARM GAS  C:\Users\jmspi\AppData\Local\Temp\ccEHYNnR.s 			page 96


 4755      7800
 4756              	.LASF53:
 4757 0427 61637469 		.ascii	"active_window\000"
 4757      76655F77 
 4757      696E646F 
 4757      7700
 4758              	.LASF58:
 4759 0435 62657461 		.ascii	"beta\000"
 4759      00
 4760              	.LASF25:
 4761 043a 526F626F 		.ascii	"Robot\000"
 4761      7400
 4762              	.LASF75:
 4763 0440 64697374 		.ascii	"dist_angle_to_goal\000"
 4763      5F616E67 
 4763      6C655F74 
 4763      6F5F676F 
 4763      616C00
 4764              	.LASF80:
 4765 0453 63776973 		.ascii	"cwise\000"
 4765      6500
 4766              	.LASF86:
 4767 0459 685F6964 		.ascii	"h_idx\000"
 4767      7800
 4768              	.LASF27:
 4769 045f 68656967 		.ascii	"height\000"
 4769      687400
 4770              	.LASF85:
 4771 0466 565F4D41 		.ascii	"V_MAX\000"
 4771      5800
 4772              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
